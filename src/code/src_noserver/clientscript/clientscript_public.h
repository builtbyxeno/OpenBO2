#pragma once

#include "types.h"

//t6/code/src_noserver/clientscript/cscr_animtree.cpp
void TRACK_scr_animtree();
void AnimTreeCompileError(scriptInstance_t inst, const char *msg);
// void ScriptTokenizer::ParseIntoTokens(ScriptTokenizer *notthis, const char *strString);
void SetAnimCheck(scriptInstance_t inst, int bAnimCheck);
void Scr_EmitAnimationInternal(scriptInstance_t inst, unsigned __int8 *pos, unsigned int animName, unsigned int names, unsigned int sourcePos);
void Scr_EmitAnimation(scriptInstance_t a1, unsigned int a2, scriptInstance_t inst, unsigned __int8 *pos, unsigned int animName, unsigned int sourcePos);
unsigned __int8 *Hunk_AllocXAnimPrecache(int size);
int Scr_GetAnimTreeSize(scriptInstance_t inst, unsigned int parentNode);
int Scr_GetAnimTreeValueCount(scriptInstance_t inst, unsigned int rootData);
void ConnectScriptToAnim(scriptInstance_t inst, unsigned int names, int index, unsigned int filename, unsigned int name, int treeIndex);
int Scr_GetAnimsIndex(scriptInstance_t inst, const XAnim_s *anims);
XAnim_s *Scr_GetClientAnims(scriptInstance_t inst, unsigned int index);
XAnim_s *Scr_GetAnims(scriptInstance_t inst, unsigned int index);
void Scr_ProcessNodeValues(scriptInstance_t inst, XAnim_s *anims, unsigned int name, unsigned int rootNode, unsigned int animIndex, unsigned int arrayNode, void *(*Alloc)(int));
int __cdecl Scr_CreateAnimationTree(scriptInstance_t inst, unsigned int parentNode, unsigned int rootData, unsigned int names, XAnim_s *anims, unsigned int childIndex, const char *parentName, unsigned int parentIndex, unsigned int filename, int treeIndex, unsigned __int16 flags, void *(__cdecl *Alloc)(int), unsigned int paramMap);
void CreateValues(scriptInstance_t inst, XAnim_s *anims, unsigned int valueArray);
void Scr_CheckAnimsDefined(scriptInstance_t inst, unsigned int names, unsigned int filename);
void Scr_PrecacheAnimationTree(scriptInstance_t inst, unsigned int parentNode);
unsigned int Scr_UsingTreeInternal(scriptInstance_t inst, const char *filename, unsigned int *index, int user);
void __cdecl Scr_ClientUsingTree(scriptInstance_t inst, const char *filename);
int Scr_CreateAllAnimTreeData(scriptInstance_t inst, unsigned int rootData, unsigned int names, scr_animtree_t *animtree, unsigned int filenameId, unsigned int index, void *(__cdecl *Alloc)(int));
scr_animtree_t CScr_RetrieveAnimTree(const char *strAnimTreeName, unsigned int names, unsigned int filename, int iOurTreeIx);
scr_animtree_t Scr_FindAnimTree(scriptInstance_t inst, const char *filename);
void __cdecl Scr_FindAnim(scriptInstance_t inst, const char *filename, const char *animName, scr_anim_s *anim, int user);
void Scr_ShutdownAnimTrees(int user);
// void ScriptTokenizer::PushNextToken(ScriptTokenizer *notthis);
void __cdecl Scr_UsingTree(scriptInstance_t inst, const char *filename, unsigned int sourcePos);
// const char *ScriptTokenizer::PopToken(ScriptTokenizer *notthis);
// bool ScriptTokenizer::PeekIsChar(ScriptTokenizer *notthis, char cTestChar);
int GetAnimTreeParseProperties(ScriptTokenizer *tokenizer, unsigned int currentAnim, int *piNumComponents);
ValueType DetermineValueType(ScriptTokenizer *tokenizer);
unsigned int ParseValueFromValueList(ScriptTokenizer *tokenizer, scriptInstance_t inst, unsigned int valueName);
char ParseNode(int *a1, ScriptTokenizer *tokenizer, scriptInstance_t inst, unsigned int parentNode, unsigned int rootData, unsigned int names, bool bLoop, bool bComplete);
bool AnimTreeParseInternal(scriptInstance_t inst, unsigned int parentNode, unsigned int names, bool bIncludeParent, bool bLoop, bool bComplete);
void Scr_AnimTreeParse(scriptInstance_t inst, const char *pos, unsigned int parentNode, unsigned int names);
bool Scr_LoadAnimTreeInternal(scriptInstance_t inst, const char *filename, unsigned int parentNode, unsigned int names);
void __cdecl Scr_LoadAnimTreeAtIndex(scriptInstance_t inst, unsigned int index, void *(__cdecl *Alloc)(int), int user, bool modCheckSum);

//t6/code/src_noserver/clientscript/cscr_compiler.cpp
int GetExpressionCount(sval_u exprlist);
void TRACK_scr_compiler();
void Scr_CompileRemoveRefToString(scriptInstance_t inst, unsigned int stringValue);
void EmitCanonicalString(scriptInstance_t inst, unsigned int stringValue);
void CompileTransferRefToString(scriptInstance_t inst, unsigned int stringValue, unsigned int user);
void EmitAssignmentPos(scriptInstance_t inst);
void EmitCodepos(scriptInstance_t inst, unsigned __int8 *pos);
void EmitShort(scriptInstance_t inst, __int16 value);
void EvalUndefined(sval_u sourcePos, VariableCompileValue *constValue);
void EvalInteger(int value, sval_u sourcePos, VariableCompileValue *constValue);
void EmitGetInteger(scriptInstance_t inst, int value, sval_u sourcePos);
void EvalFloat(float value, sval_u sourcePos, VariableCompileValue *constValue);
void EmitAnimTree(scriptInstance_t inst, sval_u sourcePos);
void Scr_InitFromChildBlocks(scr_block_s **childBlocks, int childCount, scr_block_s *block);
void Scr_TransferBlock(scr_block_s *from, scr_block_s *to);
void EvalString(unsigned int value, sval_u sourcePos, VariableCompileValue *constValue);
void EmitGetString(scriptInstance_t inst, unsigned int value, sval_u sourcePos);
void EvalIString(unsigned int value, sval_u sourcePos, VariableCompileValue *constValue);
void EmitGetIString(scriptInstance_t inst, unsigned int value, sval_u sourcePos);
void EmitGetVector(scriptInstance_t inst, const float *value, sval_u sourcePos);
void EmitValue(scriptInstance_t inst, VariableCompileValue *constValue);
void Scr_PushValue(scriptInstance_t inst, VariableCompileValue *constValue);
int EmitExpressionList(scriptInstance_t inst, sval_u exprlist, scr_block_s *block);
void AddFilePrecache(scriptInstance_t inst, unsigned int filename, unsigned int sourcePos, bool include, unsigned int *filePosId, unsigned int *fileCountId);
void EmitFunction(scriptInstance_t inst, sval_u func, sval_u sourcePos);
unsigned int Scr_GetBuiltin(scriptInstance_t inst, sval_u func_name);
void Scr_BeginDevScript(scriptInstance_t inst, int *type, unsigned __int8 **savedPos);
void Scr_EndDevScript(scriptInstance_t inst, int type, unsigned __int8 **savedPos);
int Scr_GetCacheType(int type);
int Scr_GetUncacheType(int type);
void Scr_CreateVector(scriptInstance_t inst, VariableCompileValue *constValue, VariableValue *value);
char EvalBinaryOperatorExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, sval_u opcode, sval_u sourcePos, VariableCompileValue *constValue);
void ConnectBreakStatements(scriptInstance_t inst);
void ConnectContinueStatements(scriptInstance_t inst);
void Scr_AddBreakBlock(scriptInstance_t inst, scr_block_s *block);
void Scr_AddContinueBlock(scriptInstance_t inst, scr_block_s *block);
int CompareCaseInfo(const void *elem1, const void *elem2);
void EmitCaseStatementInfo(scriptInstance_t inst, unsigned int name, sval_u sourcePos);
void EmitStatementList(scriptInstance_t inst, sval_u val, bool lastStatement, unsigned int endSourcePos, scr_block_s *block);
void EmitOpcode(VariableCompileValue *a1, scriptInstance_t inst, unsigned int op, int offset, int callType);
int Scr_FindLocalVarIndex(scriptInstance_t inst, unsigned int name, sval_u sourcePos, bool create, scr_block_s *block);
void EmitCreateLocalVars(VariableCompileValue *a1, scriptInstance_t inst, scr_block_s *block);
void EmitRemoveLocalVars(scriptInstance_t inst, scr_block_s *block, scr_block_s *outerBlock);
void EmitNOP2(scriptInstance_t inst, bool lastStatement, unsigned int endSourcePos, scr_block_s *block);
void EmitSelfObject(scriptInstance_t inst, sval_u sourcePos);
void EmitLevelObject(scriptInstance_t inst, sval_u sourcePos);
void EmitAnimObject(scriptInstance_t inst, sval_u sourcePos);
void EmitLocalVariable(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitLocalVariableRef(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitAnimation(scriptInstance_t inst, sval_u anim, sval_u sourcePos);
void EmitAnimationAnimTree(scriptInstance_t inst, sval_u anim, sval_u animtree, sval_u sourcePos);
void EmitObject(scriptInstance_t inst, sval_u expr, sval_u sourcePos);
void EmitCastFieldObject(scriptInstance_t inst, sval_u sourcePos);
void EmitArrayVariable(scriptInstance_t inst, sval_u expr, sval_u index, sval_u sourcePos, sval_u indexSourcePos, scr_block_s *block);
void EmitCallBuiltinMethodOpcode(scriptInstance_t inst, int param_count, sval_u sourcePos);
void EmitCall(scriptInstance_t inst, sval_u func_name, sval_u params, bool bStatement, scr_block_s *block);
void EmitMethod(scriptInstance_t inst, sval_u expr, sval_u func_name, sval_u params, sval_u methodSourcePos, bool bStatement, scr_block_s *block);
void EmitCallExpression(scriptInstance_t inst, sval_u expr, bool bStatement, scr_block_s *block);
void EmitCallExpressionFieldObject(scriptInstance_t inst, sval_u expr, scr_block_s *block);
bool EvalPrimitiveExpressionList(scriptInstance_t inst, sval_u exprlist, sval_u sourcePos, VariableCompileValue *constValue);
bool EmitOrEvalPrimitiveExpressionList(VariableCompileValue *a1, scriptInstance_t inst, sval_u exprlist, sval_u sourcePos, VariableCompileValue *constValue, scr_block_s *block);
void EmitExpressionListFieldObject(scriptInstance_t inst, sval_u exprlist, sval_u sourcePos, scr_block_s *block);
bool EvalPrimitiveExpression(VariableCompileValue *a1, scriptInstance_t inst, sval_u expr, VariableCompileValue *constValue);
void EmitBoolOrExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, sval_u expr1sourcePos, sval_u expr2sourcePos, scr_block_s *block);
void EmitBoolAndExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, sval_u expr1sourcePos, sval_u expr2sourcePos, scr_block_s *block);
bool EmitOrEvalBinaryOperatorExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, sval_u opcode, sval_u sourcePos, VariableCompileValue *constValue, scr_block_s *block);
void EmitArrayPrimitiveExpressionRef(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void __cdecl EmitPrimitiveExpressionFieldObject(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitCallExpressionStatement(scriptInstance_t inst, sval_u expr, scr_block_s *block);
void EmitEndStatement(scriptInstance_t inst, sval_u sourcePos, scr_block_s *block);
void EmitFormalWaittillParameterListRefInternal(scriptInstance_t inst, sval_u *node, scr_block_s *block);
void EmitCaseStatement(scriptInstance_t inst, sval_u expr, sval_u sourcePos);
void EmitSwitchStatementList(scriptInstance_t inst, sval_u val, bool lastStatement, unsigned int endSourcePos, scr_block_s *block);
void EmitBreakStatement(scriptInstance_t inst, sval_u sourcePos, scr_block_s *block);
void EmitContinueStatement(scriptInstance_t inst, sval_u sourcePos, scr_block_s *block);
void EmitDeveloperStatementList(scriptInstance_t inst, sval_u val, sval_u sourcePos, scr_block_s *block, sval_u *devStatBlock);
void EmitClearFieldVariable(scriptInstance_t inst, sval_u expr, sval_u field, sval_u sourcePos, sval_u rhsSourcePos, scr_block_s *block);
void __cdecl EmitVariableExpression(scriptInstance_t inst, sval_u expr, scr_block_s *block);
bool EmitOrEvalPrimitiveExpression(VariableCompileValue *a1, scriptInstance_t inst, sval_u expr, VariableCompileValue *constValue, scr_block_s *block);
bool EmitOrEvalExpression(const char *a1, scriptInstance_t inst, sval_u expr, VariableCompileValue *constValue, scr_block_s *block);
void EmitExpression(scriptInstance_t inst, sval_u expr, scr_block_s *block);
void EmitReturnStatement(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitIfStatement(scriptInstance_t inst, sval_u expr, sval_u stmt, sval_u sourcePos, bool lastStatement, unsigned int endSourcePos, scr_block_s *block, sval_u *ifStatBlock);
void EmitIfElseStatement(scriptInstance_t inst, sval_u expr, sval_u stmt1, sval_u stmt2, sval_u sourcePos, sval_u elseSourcePos, bool lastStatement, unsigned int endSourcePos, scr_block_s *block, sval_u *ifStatBlock, sval_u *elseStatBlock);
void EmitWhileStatement(scriptInstance_t inst, sval_u expr, sval_u stmt, sval_u sourcePos, sval_u whileSourcePos, scr_block_s *block, sval_u *whileStatBlock);
void EmitForStatement(scriptInstance_t inst, sval_u stmt1, sval_u expr, sval_u stmt2, sval_u stmt, sval_u sourcePos, sval_u forSourcePos, scr_block_s *block, sval_u *forStatBlock, sval_u *forStatPostBlock);
void EmitWaittillStatement(scriptInstance_t inst, sval_u obj, sval_u exprlist, sval_u sourcePos, sval_u waitSourcePos, scr_block_s *block);
void EmitWaittillmatchStatement(scriptInstance_t inst, sval_u obj, sval_u exprlist, sval_u sourcePos, sval_u waitSourcePos, scr_block_s *block);
void EmitNotifyStatement(scriptInstance_t inst, sval_u obj, sval_u exprlist, sval_u sourcePos, sval_u notifySourcePos, scr_block_s *block);
void EmitEndOnStatement(scriptInstance_t inst, sval_u obj, sval_u expr, sval_u sourcePos, sval_u exprSourcePos, scr_block_s *block);
void EmitSwitchStatement(const char *a1, scriptInstance_t inst, sval_u expr, sval_u stmtlist, sval_u sourcePos, bool lastStatement, unsigned int endSourcePos, scr_block_s *block);
void EmitArrayVariableRef(scriptInstance_t inst, sval_u expr, sval_u index, sval_u sourcePos, sval_u indexSourcePos, scr_block_s *block);
void EmitClearArrayVariable(scriptInstance_t inst, sval_u expr, sval_u index, sval_u sourcePos, sval_u indexSourcePos, scr_block_s *block);
void EmitVariableExpressionRef(const char *a1, scriptInstance_t inst, sval_u expr, scr_block_s *block);
bool EmitClearVariableExpression(scriptInstance_t inst, sval_u expr, sval_u rhsSourcePos, scr_block_s *block);
void EmitAssignmentStatement(scriptInstance_t inst, sval_u lhs, sval_u rhs, sval_u sourcePos, sval_u rhsSourcePos, scr_block_s *block);
void EmitIncStatement(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitDecStatement(scriptInstance_t inst, sval_u expr, sval_u sourcePos, scr_block_s *block);
void EmitBinaryEqualsOperatorExpression(scriptInstance_t inst, sval_u lhs, sval_u rhs, sval_u opcode, sval_u sourcePos, scr_block_s *block);
void EmitStatement(scr_block_s *a1, scriptInstance_t inst, sval_u val, unsigned int lastStatement, unsigned int endSourcePos, scr_block_s *block);
void Scr_CompileStatement(scr_block_s *a1, scriptInstance_t inst, sval_u parseData);

//t6/code/src_noserver/clientscript/cscr_debugger.cpp
void TRACK_scr_debugger();
scrDebuggerGlob_t *Scr_FindBreakpointInfo(scriptInstance_t inst, const unsigned __int8 *codePos, int lineNum);
breakpointData_t *Scr_AddBreakpoint(scriptInstance_t inst, int type, unsigned __int8 *codePos, unsigned int localId, objFileInfo_t *fileInfo, int lineNum);
void Scr_ForceBreakpoint(scriptInstance_t inst, unsigned __int8 *codePos);
void Scr_RemoveBreakpoint(scriptInstance_t inst, int uniqueId);
void Scr_DisableAllBreakpoint(scriptInstance_t inst);
void Scr_EnableAllBreakpoint(scriptInstance_t inst);
void Scr_RemoveAllBreakpoint(unsigned __int8 *a1, scriptInstance_t a2, scriptInstance_t inst);
void __cdecl Scr_Step(scriptInstance_t inst, int step_mode);
void Scr_RemoveValue(scriptInstance_t inst, _watchNode_t *node);
void Scr_UpdateSelfName(scriptInstance_t inst);
void Scr_UpdateLocals(scriptInstance_t inst, unsigned int localVarCount);
int SortDataCompare(const void *e1, const void *e2);
int SortThreadCompare(const void *e1, const void *e2);
int SortEntCompare(const void *e1, const void *e2);
void Scr_Msg_SetBreakpoint();
void Scr_Msg_SetWatchBreakpoint();
void Scr_Msg_SetNotifyBreakpoint();
void Scr_Msg_ClearBreakpoint();
void Scr_Msg_SetBreakpointCondition();
void Scr_Msg_WatchSetData(scriptInstance_t inst);
void Scr_ExecutePendingShellCommand(scriptInstance_t inst);
void Scr_ShellCommand(scriptInstance_t inst);
void Scr_ExecCommand();
void Scr_Msg_RunToLine(scriptInstance_t inst);
void Scr_Msg_SetLine(scriptInstance_t inst);
void Scr_Msg_ChangeScope(scriptInstance_t inst);
void Scr_InitDebugger(scriptInstance_t inst);
void Scr_ShutdownDebugger(unsigned __int8 *a1, scriptInstance_t a2, scriptInstance_t inst);
void Scr_SynchronizeDebuggerFileInfo(scriptInstance_t inst);
void Scr_MonitorCommand(const char *text, scriptInstance_t inst);
void Scr_UpdateDebuggerCallStack(scriptInstance_t inst, unsigned __int8 *pos);
void Scr_DebuggerReportRuntimeError(const char *msg);
bool Scr_TestBreakpointCondition(scriptInstance_t inst, breakpointData_t *breakpointInfo, unsigned int localId);
unsigned __int8 *Scr_CheckForceJump(scriptInstance_t inst, unsigned __int8 *pos);
void Scr_EvaluateWatchChild(scriptInstance_t inst, unsigned int nodeId, unsigned int parentId, int parentType, int uniqueId);
void Scr_EvaluateWatchNode(scriptInstance_t inst, _watchNode_t *node, int uniqueId);
void Scr_Msg_UpdateWatch(scriptInstance_t inst);
void Scr_Msg_ExpandWatch(scriptInstance_t inst);
void Scr_ReportThreadUsage(scriptInstance_t inst);
void Scr_ProcessDebugMessages(scriptInstance_t inst);
void Scr_WaitForDebuggerToRespond(scriptInstance_t inst);
void Scr_UpdateDebugger(scriptInstance_t inst);
unsigned __int8 Scr_HitBreakpoint(scriptInstance_t inst, unsigned __int8 type, VariableValue *top, unsigned int localId, unsigned int localVarCount, unsigned __int8 *pos);
void Scr_TestDataBreakpoints(scriptInstance_t inst, VariableValue *top, unsigned int localId, unsigned int localVarCount, unsigned __int8 *pos);
void Scr_TestNotifyBreakpoints(scriptInstance_t inst, unsigned int stringId, VariableValue *top, unsigned int localId, unsigned int localVarCount, unsigned __int8 *pos);

//t6/code/src_noserver/clientscript/cscr_evaluate.cpp
void TRACK_scr_evaluate();
void Scr_InitEvaluate();
void Scr_GetValueString(scriptInstance_t inst, unsigned int localId, VariableValue *value, int len, char *s);
void Scr_ClearValue(scriptInstance_t inst, VariableValue *value);
void Scr_EvalArrayVariableInternal(scriptInstance_t inst, VariableValue *parentValue, VariableValue *value);
void Scr_EvalLocalVariable(scriptInstance_t inst, sval_u expr, unsigned int localId, VariableValue *value);
unsigned int Scr_EvalObject(scriptInstance_t inst, sval_u classnum, sval_u entnum, VariableValue *value);
void Scr_EvalSelfValue(scriptInstance_t inst, VariableValue *value);
void Scr_GetValue(scriptInstance_t inst, unsigned int index, VariableValue *value);
void Scr_EvalFieldVariableInternal(scriptInstance_t inst, unsigned int objectId, unsigned int fieldName, VariableValue *value);
void Scr_CompilePrimitiveExpressionList(scriptInstance_t inst, sval_u *exprlist);
void Scr_CompileCallExpressionList(scriptInstance_t inst, sval_u *exprlist);
bool Scr_CompileFunction(scriptInstance_t inst, sval_u *func_name, sval_u *params);
char Scr_CompileMethod(scriptInstance_t inst, sval_u *expr, sval_u *func_name, sval_u *params);
char Scr_CompileCallExpression(scriptInstance_t inst, sval_u *expr);
void Scr_PreEvalBuiltin(scriptInstance_t inst, sval_u params, unsigned int localId);
void Scr_PostEvalBuiltin(scriptInstance_t inst, VariableValue *value);
void Scr_EvalFunction(scriptInstance_t inst, sval_u func_name, sval_u params, unsigned int localId);
void Scr_EvalMethod(scriptInstance_t inst, sval_u expr, sval_u func_name, sval_u params, unsigned int localId);
void Scr_EvalCallExpression(scriptInstance_t inst, sval_u expr, unsigned int localId, VariableValue *value);
void Scr_EvalBoolOrExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, unsigned int localId, VariableValue *value);
void Scr_EvalBoolAndExpression(scriptInstance_t inst, sval_u expr1, sval_u expr2, unsigned int localId, VariableValue *value);
void Scr_EvalVector(scriptInstance_t inst, sval_u expr1, sval_u expr2, sval_u expr3, unsigned int localId, VariableValue *value);
void Scr_FreeDebugExprValue(scriptInstance_t inst, sval_u val);
unsigned int Scr_EvalPrimitiveExpressionFieldObject(scriptInstance_t inst, sval_u expr, unsigned int localId);
void Scr_CompilePrimitiveExpressionFieldObject(scriptInstance_t inst, sval_u *expr);
void Scr_EvalVariableExpression(unsigned int a1, scriptInstance_t inst, sval_u expr, unsigned int localId, VariableValue *value);
void Scr_CompileVariableExpression(sval_u *a1, scriptInstance_t inst, sval_u *expr);
void Scr_EvalPrimitiveExpression(VariableValue *a1, scriptInstance_t inst, sval_u expr, unsigned int localId, VariableValue *value);
void Scr_CompilePrimitiveExpression(scriptInstance_t inst, sval_u *expr);
void Scr_EvalExpression(VariableValue *a1, scriptInstance_t inst, sval_u expr, unsigned int localId, VariableValue *value);
void Scr_CompileExpression(scriptInstance_t inst, sval_u *expr);
void Scr_CompileTextInternal(scriptInstance_t inst, const char *text, ScriptExpression_t *scriptExpr);
void Scr_CompileText(scriptInstance_t inst, const char *text, ScriptExpression_t *scriptExpr);
char Scr_EvalScriptExpression(scriptInstance_t inst, ScriptExpression_t *expr, unsigned int localId, VariableValue *value, bool freezeScope, bool freezeObjects);
VariableValue *Scr_GetValue(scriptInstance_t inst, unsigned int index);

//t6/code/src_noserver/clientscript/cscr_instance.cpp
void Scr_ClearScrVarDebugPub(scriptInstance_t inst);
void Scr_ResetScrVarDebugPub(scriptInstance_t inst);
void Scr_ClearScrStringDebugGlob();
void Scr_ResetScrStringDebugGlob();

//t6/code/src_noserver/clientscript/cscr_main.cpp
char Scr_IsIdentifier(const char *token);
void Scr_BeginLoadAnimTrees(scriptInstance_t inst, int user);
int Scr_ScanFile(scriptInstance_t inst, char *buf, int max_size);
XAssetHeader Scr_LoadScriptInternal(scriptInstance_t inst, const char *filename);
XAssetHeader Scr_LoadScript(scriptInstance_t inst, const char *filename);
void Scr_PostCompileScripts(scriptInstance_t inst);
void Scr_EndLoadScripts(scriptInstance_t inst);
void Scr_PrecacheAnimTrees(scriptInstance_t inst, void *(*Alloc)(int), int user, bool modChecksum);
void Scr_EndLoadAnimTrees(scriptInstance_t inst);
void Scr_FreeScripts(scriptInstance_t inst, unsigned __int8 sys, bool shutdownStringSystem);
void Scr_SetGenericField(scriptInstance_t inst, unsigned __int8 *b, fieldtype_t type, int ofs, unsigned int whichbits);
void Scr_BeginLoadScripts(scriptInstance_t inst, int user);
void Scr_GetGenericField(scriptInstance_t inst, unsigned __int8 *b, fieldtype_t type, int ofs, unsigned int whichbits);

//t6/code/src_noserver/clientscript/cscr_memorytree.cpp
void TRACK_scr_memorytree();
void MT_GetSubTreeSize;
void MT_DumpTree(void);
int Scr_GetStringUsage();
void MT_InitBits;
void MT_GetScore;
void MT_AddMemoryNode;
void MT_RemoveMemoryNode;
void MT_RemoveHeadMemoryNode;
void MT_Init(void);
void MT_GetSize;
void MT_AllocIndex(int,int);
void MT_FreeIndex(uint,int);
void MT_Alloc(int,int);
void MT_Free(void *,int);
void MT_Realloc(int,int);

//t6/code/src_noserver/clientscript/cscr_obj_compiler.cpp
void Scr_StubErrorReport(scriptInstance_t inst);
void Scr_ServerStubFunctionUseError();
void Scr_ClientStubFunctionUseError();
void (*GetFunction(scriptInstance_t inst, const char **pName, int *type, int *min_args, int *max_args))();
void (*GetMethod(scriptInstance_t inst, const char **pName, int *type, int *min_args, int *max_args))(scr_entref_t);
void Scr_AutoExecFunctions(scriptInstance_t inst);
char Scr_IsBinaryObj(void *obj);
XModelPiece *Scr_GetGSCObj(scriptInstance_t inst, const char *name, bool appendExtension, bool errorIfMissing);
char Scr_ResolveScriptFunction(scriptInstance_t inst, GSC_OBJ *prime_obj, GSC_IMPORT_ITEM *import, unsigned __int8 op, bool is_pushfunc);
void LoadScriptGDB(scriptInstance_t inst);
void LoadScriptGDB(scriptInstance_t inst, objFileInfo_t *fileInfo);
_gscBuiltinProfileInfo_t *GscBuiltinProfileData(scriptInstance_t inst, const char *name, void (*func)());
_gscBuiltinProfileInfo_t *GscBuiltinProfileData(scriptInstance_t inst, const char *name, void (*method)(scr_entref_t));
const char *SL_GetCanonicalString(unsigned int canonId);
unsigned int SL_GetCanonicalString(const char *string, bool is_static);
unsigned __int8 *Scr_GetFunctionHandle(scriptInstance_t inst, const char *filename, const char *name, unsigned int *checksum, bool errorIfMissing);
unsigned __int8 *Scr_GetFunctionHandle(scriptInstance_t inst, unsigned __int8 *addr, int *func_index, unsigned int *checksum);
unsigned __int8 *Scr_GetFunctionHandle(scriptInstance_t inst, unsigned __int8 *addr, const char **filename, const char **funcname, unsigned int *checksum);
unsigned __int8 *Scr_GetDefaultFunctionHandle(scriptInstance_t inst);
gscProfileInfo_t *Scr_GetProfileInfo(scriptInstance_t inst, unsigned __int8 *addr);
objFileInfo_t *Scr_FindObjFileInfo(scriptInstance_t inst, void *addr);
void LoadScriptSource(debugFileInfo_t *fileInfo);
unsigned __int8 *Scr_FindLineAddress(scriptInstance_t __formal, objFileInfo_t *info, int lineNum);
int Scr_FindLineNum(scriptInstance_t __formal, objFileInfo_t *info, unsigned __int8 *pos);
objFileInfo_t *Scr_GetObjFileInfo(scriptInstance_t inst, const char *filename);
void Scr_SendFileList(scriptInstance_t inst);
unsigned __int8 *Scr_GetPosForFileAndLineNum(scriptInstance_t inst, const char *filename, int linenum);
void Scr_GetFileAndLineNum(scriptInstance_t inst, unsigned __int8 *pos, const char **filename, int *lineNum, const char **sourceLine);
void _ReportDeadCodeDebugger(scriptInstance_t inst);
void Scr_ReportDeadCode();
void Scr_ReportDeadCodeDebugger();
void _ReportScriptProfilerDebugger(scriptInstance_t inst);
void Scr_StopScriptProfiler();
void Scr_StopScriptProfilerDebuggerReport(scriptInstance_t inst);
void _ResetScriptProfiler(scriptInstance_t inst);
void Scr_ScriptProfilerActivate(scriptInstance_t inst);
void Scr_StartScriptProfiler(scriptInstance_t inst, int type, int threshold);
void Scr_ScriptProfileUpdateTotalTime(scriptInstance_t inst, unsigned __int64 time);
void _AdjustThreadInstructionPointers(scriptInstance_t inst, objFileInfo_t *objFileInfo, debugFileInfo_t *oldDebugInfo, unsigned __int8 **oldWaitOffsets, unsigned __int8 **waitOffsets, int waitCount);
unsigned __int8 *NextOpAddress(unsigned __int8 *op);
void Scr_UpdateObj(scriptInstance_t inst);
void Scr_ResetObjCompile(scriptInstance_t inst);
void ReportObjLinkError(scriptInstance_t inst, GSC_OBJ *prime_obj, objFileInfo_t *fileInfo, GSC_IMPORT_ITEM *import, char *errorString, int errorStringLength);
int GscObjResolve(scriptInstance_t inst, GSC_OBJ *prime_obj, objFileInfo_t *objFileInfo);
int _GscObjLink(scriptInstance_t inst, GSC_OBJ *prime_obj, objFileInfo_t *objFileInfo, bool is_bin_update);
int GscObjLink(scriptInstance_t inst, GSC_OBJ *prime_obj);
void Scr_CheckPendingBinUpdate(scriptInstance_t inst);

//t6/code/src_noserver/clientscript/cscr_parser.cpp
void TRACK_scr_parser();
int Scr_GetLineNumInternal(const char *buf, unsigned int sourcePos, const char **startLine, int *col, SourceBufferInfo *binfo);
char *Scr_ReadFile_FastFile(scriptInstance_t inst, const char *filename, const char *extFilename);
char *Scr_ReadFile_LoadObj(const char *a1, FsThread a2, scriptInstance_t inst, const char *filename, const char *extFilename);
char *Scr_ReadFile(scriptInstance_t inst, const char *filename, const char *extFilename, const unsigned __int8 *codePos, bool archive);
char *Scr_AddSourceBuffer(char *a1, scriptInstance_t inst, const char *filename, const char *extFilename, unsigned __int8 *codePos, bool archive);
void Scr_CopyFormattedLine(char *line, const char *rawLine);
int Scr_GetLineInfo(const char *buf, unsigned int sourcePos, int *col, char *line, SourceBufferInfo *binfo);
void Scr_PrintSourcePos(scriptInstance_t inst, int channel, const char *filename, const char *buf, unsigned int sourcePos);
void Scr_PrintPrevCodePosToBuf(scriptInstance_t inst, unsigned __int8 *codePos, unsigned int index, char *buf);
void Scr_PrintPrevCodePos(scriptInstance_t inst, int channel, unsigned __int8 *codePos);
const char *Scr_PrevCodePosFileName(scriptInstance_t inst, unsigned __int8 *codePos);
const char *Scr_PrevCodePosFunctionName(scriptInstance_t inst, unsigned __int8 *codePos);
bool Scr_PrevCodePosFileNameMatches(scriptInstance_t inst, unsigned __int8 *codePos, const char *fileName);
void Scr_PrintPrevCodePosSpreadSheet(scriptInstance_t inst, int channel, unsigned __int8 *codePos, bool summary);
void Scr_GetCodePos(scriptInstance_t inst, unsigned __int8 *codePos, unsigned int index, char *outBuf, int outBufLen);
void CompileError2(scriptInstance_t inst, unsigned __int8 *codePos, const char *msg, ...);
void RuntimeError(scriptInstance_t inst, unsigned __int8 *codePos, unsigned int index, const char *msg, const char *dialogMessage);

//t6/code/src_noserver/clientscript/cscr_parsetree.cpp
sval_u node1_(scriptInstance_t inst, int val1);
void Scr_InitAllocNode(scriptInstance_t inst);
void Scr_ShutdownAllocNode(scriptInstance_t inst);
sval_u node0(scriptInstance_t inst, unsigned __int8 type);
sval_u node1(scriptInstance_t inst, unsigned __int8 type, sval_u val1);
sval_u node2(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2);
sval_u node2_(scriptInstance_t inst, sval_u val1, sval_u val2);
sval_u node3(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3);
sval_u node4(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4);
sval_u node5(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4, sval_u val5);
sval_u node6(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4, sval_u val5, sval_u val6);
sval_u node7(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4, sval_u val5, sval_u val6, sval_u val7);
sval_u node8(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4, sval_u val5, sval_u val6, sval_u val7, sval_u val8);
sval_u linked_list_end(scriptInstance_t inst, sval_u val);
sval_u prepend_node(scriptInstance_t inst, sval_u val1, sval_u val2);
sval_u append_node(scriptInstance_t inst, sval_u val1, sval_u val2);
void Scr_FreeDebugExpr(scriptInstance_t inst, ScriptExpression_t *expr);
sval_u debugger_node0(scriptInstance_t inst, unsigned __int8 type);
sval_u debugger_node1(scriptInstance_t inst, unsigned __int8 type, sval_u val1);
sval_u debugger_node2(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2);
sval_u debugger_node3(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3);
sval_u debugger_node4(scriptInstance_t inst, unsigned __int8 type, sval_u val1, sval_u val2, sval_u val3, sval_u val4);
sval_u debugger_prepend_node(scriptInstance_t inst, sval_u val1, sval_u val2);
sval_u debugger_buffer(scriptInstance_t inst, unsigned __int8 type, const unsigned __int8 *buf, int size, int alignment);
sval_u debugger_string(scriptInstance_t inst, unsigned __int8 type, const char *s);

//t6/code/src_noserver/clientscript/cscr_readwrite.cpp
unsigned int Scr_ReadString(scriptInstance_t inst, MemoryFile *memFile);
unsigned int Scr_ReadOptionalString(scriptInstance_t inst, MemoryFile *memFile);
const float *Scr_ReadVec3(scriptInstance_t inst, MemoryFile *memFile);
unsigned __int8 *Scr_ReadCodepos(scriptInstance_t inst, MemoryFile *memFile);
int Scr_ReadId(scriptInstance_t inst, MemoryFile *memFile, unsigned int opcode);
VariableStackBuffer *Scr_ReadStack(scriptInstance_t inst, MemoryFile *memFile);
void Scr_DoLoadEntryInternal(scriptInstance_t inst, VariableValue *value, MemoryFile *memFile);
int Scr_DoLoadEntry(scriptInstance_t inst, VariableValue *value, int isArray, MemoryFile *memFile);
unsigned int Scr_ConvertObjectFromLoad(scriptInstance_t inst, unsigned int index);
unsigned __int16 Scr_ConvertThreadFromLoad(scriptInstance_t inst, unsigned __int16 handle);
void Scr_DoLoadObjectInfo(scriptInstance_t inst, unsigned __int16 parentId, MemoryFile *memFile);
void Scr_LoadPre(scriptInstance_t inst, int sys, MemoryFile *memFile);
void Scr_LoadShutdown(scriptInstance_t inst);

//t6/code/src_noserver/clientscript/cscr_stringlist.cpp
void TRACK_scr_stringlist();
char *SL_ConvertToString(unsigned int stringValue);
char *SL_ConvertToStringSafe(unsigned int stringValue);
const char *SL_DebugConvertToString(unsigned int stringValue);
int SL_GetStringLen(unsigned int stringValue);
unsigned int GetHashCode(const char *str, unsigned int len);
unsigned int Scr_GetHashCode(const char *str);
void SL_Init();
unsigned int SL_FindStringOfSize(const char *str, unsigned int len);
unsigned int SL_FindString(const char *str);
unsigned int SL_FindLowercaseString(const char *str);
int SL_IsLowercaseString(unsigned int stringValue);
void SL_AddUserInternal(RefString *refStr, unsigned int user);
unsigned int SL_GetString(const char *str, unsigned int user);
unsigned int SL_GetLowercaseStringOfSize(const char *str, unsigned int user, unsigned int len, int type);
unsigned int SL_GetLowercaseString_(const char *str, unsigned int user, int type);
unsigned int SL_GetLowercaseString(const char *str, unsigned int user);
void SL_CheckExists(unsigned int stringValue);
void SL_AddRefToString(unsigned int stringValue);
void SL_FreeString(unsigned int stringValue, RefString *refStr, unsigned int len);
void __cdecl SL_RemoveRefToString(unsigned int stringValue);
void SL_RemoveRefToStringOfSize(unsigned int stringValue, unsigned int len);
void Scr_SetStringLiveUpdateSafe(unsigned __int16 *to, const char *value);
void Scr_SetString(unsigned __int16 *to, unsigned int from);
void Scr_SetStringFromCharString(unsigned __int16 *to, const char *from);
unsigned int Scr_AllocString(const char *s, int sys);
unsigned int SL_GetStringForFloat(float f);
unsigned int SL_GetStringForInt(int i);
unsigned int SL_GetStringForVector(const float *v);
void SL_ShutdownSystem(unsigned int user);
void Scr_ShutdownGameStrings();
void SL_TransferSystem(unsigned int from, unsigned int to);
void SL_CreateCanonicalFilename(char *newFilename, const char *filename, int count);
unsigned int Scr_CreateCanonicalFilename(const char *filename);
void SL_CheckLeaks();
void SL_Shutdown();

//t6/code/src_noserver/clientscript/cscr_tempmemory.cpp
void TempMemoryReset(HunkUser *user);
unsigned __int8 *TempMalloc(int len);
unsigned __int8 *TempMallocAlignStrict(int len);
void TempMemorySetPos(unsigned __int8 *pos);

//t6/code/src_noserver/clientscript/cscr_variable.cpp
void TRACK_scr_variable();
void Scr_CheckObjectLeak(scriptInstance_t inst);
void Scr_CheckChildLeak(scriptInstance_t inst);
void Scr_CheckLeaks(scriptInstance_t inst);
int ThreadInfoCompare(const void *info1, const void *info2);
int VariableInfoFileNameCompare(const void *info1, const void *info2);
int VariableInfoFunctionCompare(const void *info1, const void *info2);
int VariableInfoCountCompare(const void *info1, const void *info2);
int VariableInfoFileLineCompare(const void *info1, const void *info2);
void Scr_InitClassMap(scriptInstance_t inst);
void Scr_InitObjectVariables(scriptInstance_t inst);
void Scr_InitVariables(scriptInstance_t inst);
int Scr_GetNumScriptVarsParent(scriptInstance_t inst);
int Scr_GetNumScriptVarsChild(scriptInstance_t inst);
int GetVariableKeyObject(scriptInstance_t inst, unsigned int id);
unsigned __int16 FindVariableIndexInternal2(scriptInstance_t inst, unsigned __int16 *bucket, unsigned int match);
unsigned int FindVariable(scriptInstance_t inst, unsigned int parentId, unsigned int name);
ChildVariableValue *AllocChildVariable(scriptInstance_t inst, unsigned __int16 *index);
unsigned __int16 GetNewVariableIndexInternal3(scriptInstance_t inst, unsigned int parentId, unsigned int name, unsigned __int16 *bucket, unsigned int match);
unsigned __int16 GetNewVariableIndexInternal2(scriptInstance_t inst, unsigned int parentId, unsigned int name, unsigned __int16 *bucket, unsigned int match);
unsigned __int16 GetNewVariableIndexReverseInternal2(scriptInstance_t inst, unsigned int parentId, unsigned int name, unsigned __int16 *bucket, unsigned int match);
unsigned __int16 __cdecl GetNewVariable(scriptInstance_t inst, unsigned int parentId, unsigned int name);
unsigned __int16 GetNewVariableIndexReverseInternal(scriptInstance_t inst, unsigned int parentId, unsigned int name);
int __cdecl GetVariable(scriptInstance_t inst, unsigned int parentId, unsigned int name);
void FreeChildValuePart1(scriptInstance_t inst, ChildVariableValue *value, unsigned __int16 index, ObjectVariableValue *parentValue);
void FreeChildValuePart2(scriptInstance_t inst, ChildVariableValue *value, unsigned int parentId);
void FreeChildValuePart3(scriptInstance_t inst, ChildVariableValue *value, unsigned __int16 index);
void __cdecl RemoveVariableValue(scriptInstance_t inst, unsigned int parentId, unsigned int index);
void ClearObjectInternal(scriptInstance_t inst, unsigned int parentId);
void Scr_SetThreadNotifyName(scriptInstance_t inst, unsigned int startLocalId, unsigned int stringValue);
unsigned int Scr_GetThreadNotifyName(scriptInstance_t inst, unsigned int startLocalId);
void Scr_SetThreadWaitTime(scriptInstance_t inst, unsigned int startLocalId, unsigned int waitTime);
void Scr_ClearWaitTime(scriptInstance_t inst, unsigned int startLocalId);
unsigned int Scr_GetThreadWaitTime(scriptInstance_t inst, unsigned int startLocalId);
unsigned int GetParentLocalId(scriptInstance_t inst, unsigned int threadId);
unsigned int GetSafeParentLocalId(scriptInstance_t inst, unsigned int threadId);
unsigned int GetStartLocalId(scriptInstance_t inst, unsigned int threadId);
ObjectVariableValue *AllocVariable(scriptInstance_t inst, unsigned int *index);
void FreeVariable(scriptInstance_t inst, unsigned int index);
unsigned int AllocValue(scriptInstance_t inst);
unsigned int AllocObject(scriptInstance_t inst);
unsigned int AllocEntity(scriptInstance_t inst, unsigned int classnum, unsigned __int16 entnum, LocalClientNum_t clientNum);
scriptInstance_t Scr_AllocArray(scriptInstance_t inst);
unsigned int AllocThread(scriptInstance_t inst, unsigned int self);
unsigned int AllocChildThread(scriptInstance_t inst, unsigned int self, unsigned int parentLocalId);
unsigned int Scr_GetSelf(scriptInstance_t inst, unsigned int threadId);
void FreeValue(ChildVariableValue *a1, scriptInstance_t a2, scriptInstance_t inst, unsigned int id);
void RemoveRefToEmptyObject(scriptInstance_t inst, unsigned int id);
float *Scr_AllocVector(scriptInstance_t inst);
vec3_t *Scr_AllocVector(scriptInstance_t inst, const vec3_t *v);
BOOL IsValidArrayIndex(scriptInstance_t inst, unsigned int unsignedValue);
unsigned int GetInternalVariableIndex(scriptInstance_t inst, unsigned int unsignedValue);
unsigned int FindArrayVariable(scriptInstance_t inst, unsigned int parentId, int intValue);
unsigned int FindObjectVariable(scriptInstance_t inst, unsigned int parentId, unsigned int id);
unsigned int GetArrayVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
unsigned int GetNewArrayVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
unsigned int Scr_GetVariableFieldIndex(scriptInstance_t inst, unsigned int parentId, unsigned int name);
unsigned int Scr_FindAllVariableField(scriptInstance_t inst, unsigned int parentId, unsigned int *names, unsigned int *localIds);
unsigned int GetObjectVariable(scriptInstance_t inst, unsigned int parentId, unsigned int id);
unsigned int GetNewObjectVariable(scriptInstance_t inst, unsigned int parentId, unsigned int id);
unsigned int __cdecl GetNewObjectVariableReverse(scriptInstance_t inst, unsigned int parentId);
void RemoveVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
void RemoveNextVariable(scriptInstance_t inst, unsigned int parentId);
void RemoveObjectVariable(scriptInstance_t inst, unsigned int parentId, unsigned int id);
void RemoveArrayVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
void SafeRemoveVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
void CopyArray(scriptInstance_t inst, unsigned int parentId);
VariableUnion *GetVariableValueAddress(scriptInstance_t inst, unsigned int id);
void SetVariableEntityFieldValue(scriptInstance_t inst, unsigned int entId, unsigned int fieldName, VariableValue *value);
void ClearVariableValue(scriptInstance_t inst, unsigned int id);
void SetVariableFieldValue(scriptInstance_t inst, unsigned int id, VariableValue *value);
void SetVariableFieldValue(scriptInstance_t inst, VariableValue *value);
VariableValue Scr_EvalVariableEntityField(scriptInstance_t inst, unsigned int entId, unsigned int fieldName);
int __cdecl Scr_EvalVariableField(scriptInstance_t inst, unsigned int id);
unsigned int GetArraySize(scriptInstance_t inst, unsigned int id);
unsigned int GetObject(scriptInstance_t inst, unsigned int id);
unsigned int GetArray(scriptInstance_t inst, unsigned int id);
unsigned int FindObject(scriptInstance_t inst, unsigned int id);
BOOL IsFieldObject(scriptInstance_t inst, unsigned int id);
BOOL Scr_IsThreadAlive(scriptInstance_t inst, unsigned int thread);
void Scr_EvalBoolNot(scriptInstance_t inst, VariableValue *value);
void Scr_EvalBoolComplement(scriptInstance_t inst, VariableValue *value);
int Scr_CastBool_NonInteger(scriptInstance_t inst, VariableValue *value);
char Scr_CastString(scriptInstance_t inst, VariableValue *value);
void Scr_ClearVector(scriptInstance_t inst, VariableValue *value);
void Scr_CastVector(scriptInstance_t inst, VariableValue *value);
VariableUnion Scr_EvalFieldObject(scriptInstance_t inst, unsigned int tempVariable, VariableValue *value);
bool IsObjectFree(scriptInstance_t inst, unsigned int id);
int GetValueType(scriptInstance_t inst, unsigned int id);
unsigned int GetObjectType(scriptInstance_t inst, unsigned int id);
void Scr_FreeEntityNum(scriptInstance_t inst, int entnum, unsigned int classnum);
void Scr_SetClassMap(scriptInstance_t inst, unsigned int classnum);
void Scr_AddClassField(scriptInstance_t inst, unsigned int classnum, const char *name, unsigned int offset);
int Scr_GetOffset(scriptInstance_t inst, unsigned int classnum, const char *name);
unsigned int FindEntityId(scriptInstance_t inst, int entnum, unsigned int classnum, LocalClientNum_t clientNum);
unsigned int __cdecl Scr_GetEntityId(scriptInstance_t inst, int entnum, unsigned int classnum, LocalClientNum_t clientNum);
unsigned int Scr_FindArrayIndex(scriptInstance_t inst, unsigned int parentId, VariableValue *index);
unsigned int Scr_FindArrayIndex2(scriptInstance_t inst, unsigned int parentId, VariableValue *index);
void SetEmptyArray(scriptInstance_t inst, unsigned int parentId);
VariableValue Scr_GetArrayValue(scriptInstance_t inst, unsigned int id);
void Scr_AddArrayKeys(scriptInstance_t inst, unsigned int parentId);
scriptInstance_t Scr_FirstArrayKey(scriptInstance_t inst, unsigned int parentId, unsigned int parentIda);
scriptInstance_t __cdecl Scr_NextArrayKey(scriptInstance_t inst, unsigned int parentId, VariableValue *value, VariableValue *valuea);
void Scr_AddFirstArrayKey(scriptInstance_t inst, unsigned int parentId);
void Scr_AddNextArrayKey(scriptInstance_t inst, unsigned int parentId, VariableValue *value);
void Scr_AddLastArrayKey(scriptInstance_t inst, unsigned int parentId);
void Scr_AddPrevArrayKey(scriptInstance_t inst, unsigned int parentId, VariableValue *value);
int Scr_GetEntityIdRef(scriptInstance_t inst, unsigned int entId);
void CopyEntity(scriptInstance_t inst, unsigned int parentId, unsigned int newParentId);
void __cdecl Scr_CopyEntityNum(scriptInstance_t inst, int fromEntnum, int toEntnum, unsigned int classnum);
// double Scr_GetEntryUsage(scriptInstance_t inst, bitarray<24576> *visitBits, unsigned int type, VariableUnion u);
double Scr_GetEndonObjectUsage(scriptInstance_t inst, unsigned int selfNameId);
double Scr_GetEndonUsage(scriptInstance_t inst, unsigned int parentId);
unsigned int Scr_FindField(scriptInstance_t inst, const char *name, int *type);
char *Scr_GetSourceFile_LoadObj(const char *a1, const char *a2, const char *filename);
XModelPiece *Scr_GetSourceFile_FastFile(const char *filename);
void Scr_AddFieldsForFile(int a1, int a2, scriptInstance_t inst, const char *filename);
void Scr_AddFields_LoadObj(scriptInstance_t inst, const char *path, const char *extension);
void Scr_AddFields_FastFile(scriptInstance_t inst, const char *path, const char *extension);
void Scr_AddFields();
int Scr_MakeValuePrimitive(scriptInstance_t inst, unsigned int parentId);
void Scr_AllocGameVariable(scriptInstance_t inst);
void Scr_FreeGameVariable(ChildVariableValue *a1, scriptInstance_t inst, int bComplete);
void Scr_GetChecksumNoAsserts(scriptInstance_t inst, int *checksum);
void Scr_GetChecksum(scriptInstance_t inst, int *checksum);
int Scr_GetClassnumForCharId(scriptInstance_t inst, char charId);
unsigned int Scr_FindAllThreads(scriptInstance_t inst, unsigned int *threads);
int Scr_FindAllThreads(scriptInstance_t inst, unsigned int selfId, unsigned int *threads, unsigned int localId);
unsigned int Scr_FindAllEndons(scriptInstance_t inst, unsigned int threadId, unsigned int *names);
void ArrayInsertVariable(scriptInstance_t inst, unsigned int arrayId, unsigned int index, VariableValue *new_value);
void ArrayRegenerateKeys(scriptInstance_t inst, unsigned int arrayId);
char IsInArray(scriptInstance_t inst, unsigned int arrayId, VariableValue *value);
void Scr_DumpScriptVariables(scriptInstance_t inst, bool spreadsheet, bool summary, bool total, bool functionSummary, bool lineSort, const char *fileName, const char *functionName, int minCount);
void Scr_DumpScriptVariablesDefault(scriptInstance_t inst);
void Scr_ShutdownVariables(ChildVariableValue *a1, scriptInstance_t a2, scriptInstance_t inst);
void ClearObject(scriptInstance_t inst, unsigned int parentId);
void Scr_RemoveThreadNotifyName(scriptInstance_t inst, unsigned int startLocalId);
void __cdecl RemoveRefToObject(scriptInstance_t inst, unsigned int id);
int Scr_FindVariableField(scriptInstance_t inst, unsigned int parentId, unsigned int name);
void ClearVariableField(scriptInstance_t inst, unsigned int parentId, unsigned int name, VariableValue *value);
void SafeRemoveArrayVariable(scriptInstance_t inst, unsigned int parentId, unsigned int unsignedValue);
void Scr_EvalSizeValue(scriptInstance_t inst, VariableValue *value);
void Scr_CastDebugString(scriptInstance_t inst, VariableValue *value);
char Scr_GetEntClassId(scriptInstance_t inst, unsigned int id);
int Scr_GetEntNum(scriptInstance_t inst, unsigned int id);
void Scr_UnmatchingTypesError(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_CastWeakerPair2(scriptInstance_t inst, VariableValue *value1, VariableValue *value2, int type1, int type2);
void Scr_CastWeakerStringPair(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalOr(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalExOr(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalAnd(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalEquality(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalInequality(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalLess(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalGreaterEqual(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalGreater(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalLessEqual(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalShiftLeft(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalShiftRight(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalPlus(VariableValue *a1, scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalMinus(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalMultiply(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void __cdecl Scr_EvalDivide(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalMod(scriptInstance_t inst, VariableValue *value1, VariableValue *value2);
void Scr_EvalBinaryOperator(scriptInstance_t inst, int op, VariableValue *value1, VariableValue *value2);
void Scr_FreeEntityList(scriptInstance_t inst);
void Scr_FreeObjects(scriptInstance_t inst);
void Scr_RemoveClassMap(scriptInstance_t inst, unsigned int classnum);
void __cdecl Scr_EvalArray(scriptInstance_t inst, VariableValue *value, VariableValue *index);
unsigned int Scr_EvalArrayRef(scriptInstance_t inst, unsigned int id);
void ClearArray(scriptInstance_t inst, unsigned int id, VariableValue *value);
// double Scr_GetObjectUsage(scriptInstance_t inst, bitarray<24576> *visitBits, unsigned int parentId);
void Scr_FreeValue(scriptInstance_t inst, unsigned int id);
void ArrayRemoveVariable(scriptInstance_t inst, unsigned int arrayId, VariableValue *value, bool preserve_keys);
void ArrayRemoveVariable(scriptInstance_t inst, unsigned int arrayId, unsigned int index, bool preserve_keys);
void ArrayCombine(scriptInstance_t inst, unsigned int a, unsigned int b, bool allowDupes, bool preserveKeys);
void Scr_ClearThread(scriptInstance_t inst, unsigned int parentId);
void Scr_StopThread(unsigned int a1, scriptInstance_t a2, scriptInstance_t inst, unsigned int threadId);
void Scr_KillEndonThread(scriptInstance_t inst, unsigned int threadId);
double Scr_GetThreadUsage(scriptInstance_t inst, const VariableStackBuffer *stackBuf, float *endonUsage);
void Scr_DumpScriptThreads(scriptInstance_t inst);
void Scr_KillThread(unsigned int a1, scriptInstance_t a2, scriptInstance_t inst, unsigned int parentId);

//t6/code/src_noserver/clientscript/cscr_vm.cpp
void TRACK_scr_vm();
void Scr_ClearErrorMessage(scriptInstance_t inst);
void Scr_FindDataCycles(scriptInstance_t inst);
void Scr_ReportDataCycles();
void Scr_VM_Init(scriptInstance_t inst);
void Scr_Init(scriptInstance_t inst);
void Scr_Settings(scriptInstance_t inst, int developer, int developer_script, int abort_on_error);
void Scr_Shutdown(ChildVariableValue *a1, scriptInstance_t a2, scriptInstance_t inst);
void Scr_SetLoading(scriptInstance_t inst, int bLoading);
void Scr_ErrorInternal(scriptInstance_t inst);
unsigned int Scr_GetLevelObjectId(scriptInstance_t inst);
int Scr_GetNumScriptThreads(scriptInstance_t inst);
void Scr_ClearOutParams(scriptInstance_t inst);
void CodeBreakpoints_Set(scriptInstance_t inst, const char *filename, int lineNum);
void CodeBreakpoints_Init(scriptInstance_t inst);
void Scr_ReportLongCallWarning(scriptInstance_t inst, unsigned __int8 *pos);
unsigned __int8 *Scr_GetReturnPos(scriptInstance_t inst, unsigned int *localId);
void VM_CancelNotifyInternal(scriptInstance_t inst, unsigned int notifyListOwnerId, unsigned int startLocalId, unsigned int notifyListId, unsigned int notifyNameListId, unsigned int stringValue);
void __cdecl VM_CancelNotify(scriptInstance_t inst, unsigned int notifyListOwnerId, unsigned int startLocalId);
VariableStackBuffer *VM_ArchiveStack(scriptInstance_t inst, VariableValue *top, VariableValue *startTop, unsigned __int8 *pos, unsigned int localVarCount, unsigned int *localId);
int Scr_AddLocalVars(scriptInstance_t inst, unsigned int localId);
void VM_UnarchiveStack(scriptInstance_t inst, unsigned int startLocalId, const VariableStackBuffer *stackValue);
void VM_TerminateStack(scriptInstance_t inst, unsigned int endLocalId, unsigned int startLocalId, VariableStackBuffer *stackValue);
unsigned __int8 *Scr_GetStackThreadPos(scriptInstance_t inst, unsigned int endLocalId, VariableStackBuffer *stackValue, bool killThread);
void Scr_SetStackThreadPos(scriptInstance_t inst, unsigned int endLocalId, VariableStackBuffer *stackValue, unsigned __int8 *codePos);
void VM_TrimStack(scriptInstance_t inst, unsigned int startLocalId, VariableStackBuffer *stackValue, bool fromEndon);
void Scr_TerminateRunningThread(scriptInstance_t inst, unsigned int localId);
unsigned __int8 *Scr_GetRunningThreadPos(scriptInstance_t inst, unsigned int localId);
void Scr_SetRunningThreadPos(scriptInstance_t inst, unsigned int localId, unsigned __int8 *codePos);
void Scr_TerminateWaitThread(scriptInstance_t inst, unsigned int localId, unsigned int startLocalId);
unsigned int Scr_GetWaitThreadStackId(scriptInstance_t inst, unsigned int localId, unsigned int startLocalId);
void Scr_CancelWaittill(scriptInstance_t inst, unsigned int startLocalId);
void Scr_TerminateWaittillThread(scriptInstance_t inst, unsigned int localId, unsigned int startLocalId);
unsigned int Scr_GetWaittillThreadStackId(scriptInstance_t inst, unsigned int localId, unsigned int startLocalId);
void Scr_TerminateThread(scriptInstance_t inst, unsigned int localId);
unsigned __int8 *__cdecl Scr_GetThreadPos(scriptInstance_t inst, unsigned int localId);
void __cdecl Scr_SetThreadPos(scriptInstance_t inst, unsigned int localId, unsigned __int8 *codePos);
void VM_Notify(scriptInstance_t inst, unsigned int notifyListOwnerId, unsigned int stringValue, VariableValue *top);
void Scr_NotifyId(scriptInstance_t inst, LocalClientNum_t clientNum, unsigned int id, unsigned int stringValue, unsigned int paramcount);
void Scr_NotifyNum(int entnum, unsigned int classnum, unsigned int stringValue, unsigned int paramcount);
void CScr_NotifyNum(LocalClientNum_t clientNum, int entnum, unsigned int classnum, unsigned int stringValue, unsigned int paramcount);
void Scr_NotifyLevel(unsigned int stringValue);
void CScr_NotifyLevel(LocalClientNum_t clientNum, unsigned int stringValue);
void Scr_NotifyLevel(const char *notifyString);
void CScr_NotifyLevel(LocalClientNum_t clientNum, const char *notifyString);
void Scr_CancelNotifyList(scriptInstance_t inst, unsigned int notifyListOwnerId);
void VM_TerminateTime(scriptInstance_t inst, unsigned int timeId);
void IncInParam(scriptInstance_t inst);
void Scr_FreeThread(scriptInstance_t inst, unsigned __int16 handle);
bool Scr_IsSystemInitied(scriptInstance_t inst);
void Scr_InitSystem(scriptInstance_t inst, int sys);
BOOL Scr_IsSystemActive(scriptInstance_t inst);
int Scr_GetNumParam(scriptInstance_t inst);
void Scr_AddBool(scriptInstance_t inst, int value);
void Scr_AddInt(scriptInstance_t inst, int value);
void Scr_AddFloat(scriptInstance_t inst, float value);
void Scr_AddAnim(scriptInstance_t inst, scr_anim_s value);
void Scr_AddUndefined(scriptInstance_t inst);
void Scr_AddObject(scriptInstance_t inst, unsigned int id);
void Scr_AddEntityNum(scriptInstance_t inst, int entnum, unsigned int classnum, LocalClientNum_t clientNum);
void Scr_AddString(scriptInstance_t inst, const char *value);
void Scr_AddIString(scriptInstance_t inst, const char *value);
void Scr_AddConstString(scriptInstance_t inst, unsigned int value);
void Scr_AddVectorInternal(scriptInstance_t inst, const vec3_t *value);
void Scr_AddVector(scriptInstance_t inst, const vec3_t *value);
void Scr_AddValue(scriptInstance_t inst, VariableValue *value);
void Scr_MakeArray(scriptInstance_t inst);
void Scr_AddArray(scriptInstance_t inst);
void Scr_AddArrayStringIndexed(scriptInstance_t inst, unsigned int stringValue);
void Scr_Error(scriptInstance_t inst, const char *error, bool force_terminal);
void Scr_TerminalError(scriptInstance_t inst, const char *error);
void Scr_ParamError(scriptInstance_t inst, unsigned int index, const char *error);
void Scr_ObjectError(scriptInstance_t inst, const char *error);
char SetEntityFieldValue(scriptInstance_t inst, unsigned int classnum, int entnum, unsigned __int16 clientNum, int offset, VariableValue *value);
VariableValue GetEntityFieldValue(scriptInstance_t inst, unsigned int classnum, int entnum, unsigned __int16 clientNum, int offset);
void Scr_SetStructField(scriptInstance_t inst, unsigned int structId, unsigned int index);
void Scr_SetDynamicEntityField(scriptInstance_t inst, int entnum, unsigned int classnum, unsigned int index, LocalClientNum_t localClientNum);
void Scr_DecTime(scriptInstance_t inst);
void Scr_GetLastScriptPlace(scriptInstance_t inst, int *line, const char **filename);
void Scr_RegisterNotifyListener(scriptInstance_t inst, void (*cbFunc)(unsigned int, unsigned int));
void Scr_AddTeam(scriptInstance_t inst, int team);
int Scr_IsTrue(scriptInstance_t inst, VariableValue *value);
void Scr_GetDvar(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarInt(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarFloat(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarVector(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarColorRed(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarColorGreen(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarColorBlue(scriptInstance_t inst, VariableValue *v);
void Scr_GetDvarColorAlpha(scriptInstance_t inst, VariableValue *v);
unsigned int VM_Execute(scriptInstance_t inst);
unsigned __int8 *Scr_GetNextCodepos(scriptInstance_t inst, int mode, unsigned __int8 opcode, unsigned __int8 *pos, VariableValue *top, unsigned int *localId);
void VM_Resume(scriptInstance_t inst, unsigned int timeId);
unsigned int VM_Execute_0(scriptInstance_t inst, unsigned int localId, unsigned __int8 *pos, unsigned int paramcount);
__int16 Scr_ExecThread(scriptInstance_t inst, int handle, unsigned int paramcount);
__int16 Scr_ExecEntThreadNum(scriptInstance_t inst, int entnum, unsigned int classnum, int handle, unsigned int paramcount, LocalClientNum_t localClientNum);
void Scr_AddExecThread(scriptInstance_t inst, int handle, unsigned int paramcount);
void Scr_ExecCode(scriptInstance_t inst, unsigned __int8 *pos, unsigned int localId);
void VM_SetTime(scriptInstance_t inst);
void Scr_ShutdownSystem(const char *a1, scriptInstance_t inst, unsigned __int8 sys, bool bComplete);
int Scr_GetInt(scriptInstance_t inst, unsigned int index);
scr_anim_s Scr_GetAnim(scriptInstance_t inst, unsigned int index);
scr_animtree_t Scr_GetAnimTree(scriptInstance_t inst, unsigned int index, unsigned int user);
double Scr_GetFloat(scriptInstance_t inst, unsigned int index);
VariableUnion Scr_GetConstString(scriptInstance_t inst, unsigned int index);
VariableUnion Scr_GetConstLowercaseString(scriptInstance_t inst, unsigned int index);
char *Scr_GetString(scriptInstance_t inst, unsigned int index);
VariableUnion Scr_GetConstStringIncludeNull(scriptInstance_t inst, unsigned int index);
char *Scr_GetDebugString(scriptInstance_t inst, unsigned int index);
unsigned int Scr_GetConstIString(scriptInstance_t inst, unsigned int index);
char *Scr_GetIString(scriptInstance_t inst, unsigned int index);
void Scr_GetVector(scriptInstance_t inst, unsigned int index, vec3_t *vectorValue);
int Scr_GetFunc(scriptInstance_t inst, unsigned int index);
int Scr_GetEntityRef(scriptInstance_t inst, unsigned int index);
unsigned int Scr_GetObject(scriptInstance_t inst, unsigned int index);
int Scr_GetType(scriptInstance_t inst, unsigned int index);
const char *Scr_GetTypeName(scriptInstance_t inst, unsigned int index);
unsigned int Scr_GetPointerType(scriptInstance_t inst, unsigned int index);
void Scr_RunCurrentThreads(scriptInstance_t inst);
int Scr_GetTeam(scriptInstance_t inst, unsigned int index);
void Scr_IncTime(scriptInstance_t inst);

//#include "clientscript/scr_lex.h"

//t6/code/src_noserver/clientscript/scr_lex.txt
int StringValue(char *str, int len);

//#include "clientscript/scr_stringlist.h"

//#include "clientscript/scr_variable.h"

//t6/code/src_noserver/clientscript/scr_yacc.txt
unsigned int LowerCase(unsigned int stringValue);
void ScriptParse(scriptInstance_t inst, sval_u *parseData, unsigned __int8 user);

