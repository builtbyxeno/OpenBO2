#pragma once

#include "types.h"

//#include "client/client.h"

//t6/code/src_noserver/client/cl_compositing.cpp
GfxImage *CL_CompositeSetupImage();
void CL_PCCopyImageGenMIPCallback(void *job);
void CL_CompositeResetLayer(CompositeEmblemLayer *layer);
void CL_CompositeClearLayer(CompositeEmblemLayer *layer);
void CL_CompositeClearRecentColor(vec4_t *recentColor);
void CL_CompositeShiftLayersUp(CompositeEmblemLayer *layers, int selectedLayer, int layerCount);
void CL_CompositeRender();

//t6/code/src_noserver/client/cl_console.cpp
void SetupChatField(const LocalClientNum_t localClientNum, int teamChat, int widthInPixels);
void Con_ChatModePublic_f(LocalClientNum_t a1, int a2);
void Con_ChatModeTeam_f(LocalClientNum_t a1, int a2);
void Con_GetTextCopy(char *text, int maxSize);
void Con_ResetMessageWindowTimes(MessageWindow *msgwnd, int serverTime);
// void Con_TimeJumped(int a1@<edx>, MessageWindow *a2@<ecx>, LocalClientNum_t localClientNum, int serverTime);
void Con_NudgeMessageWindowTimes(MessageWindow *msgwnd, int serverTimeNudge, int serverTime);
void Con_TimeNudged(LocalClientNum_t localClientNum, int serverTimeNudge);
void Con_ClearMessageWindow(MessageWindow *msgwnd);
void Con_ClearNotify(LocalClientNum_t localClientNum);
void Con_CheckResize();
void Con_InitMessageWindow(;
void __thiscall Con_Clear_f(MessageWindow *this);
;
int Con_GetDefaultMsgDuration(print_msg_dest_t dest);
void Con_UpdateMessage(LocalClientNum_t localClientNum, MessageWindow *msgwnd, int duration);
void Con_FreeFirstMessageWindowLine(MessageWindow *msgwnd);
bool Con_NeedToFreeMessageWindowLine(MessageWindow *msgwnd, int charCount);
void Con_CopyCurrentConsoleLineText(MessageWindow *msgwnd, MessageLine *msgLine);
int LatestActiveTypewrittenLineIdx(MessageWindow *msgwnd);
int PrintableCharsCount(const MessageWindow *msgwnd, MessageLine *line);
int PrintTimeTotal(MessageWindow *msgwnd, MessageLine *line);
int GetNextValidPrintTimeForLine(LocalClientNum_t localClientNum, MessageWindow *msgwnd, int flags);
void Con_UpdateMessageWindowLine(;
MessageWindow *Con_GetDestWindow(LocalClientNum_t localClientNum, print_msg_dest_t dest);
void Con_UpdateNotifyMessage(LocalClientNum_t localClientNum, int channel, int duration, int flags);
void Con_UpdateNotifyLine(LocalClientNum_t localClientNum, int channel, bool lineFeed, int flags);
void Con_InitMessageBuffer();
char CL_ConsolePrint_AddLine(;
int CL_AddMessageChar(char *msg, unsigned int msgLen, unsigned int msgMaxLen, char c);
int CL_AddMessageString(char *msg, unsigned int msgLen, unsigned int msgMaxLen, const char *string);
int CL_AddMessageIcon(;
void Con_AutoCompleteFromList(;
const GfxViewParms *Con_TokenizeInput();
char Con_AnySpaceAfterCommand();
void ConDrawInput_Text(const char *str, const vec4_t *color);
void ConDrawInput_TextLimitChars(const char *str, int maxChars, const vec4_t *color);
void ConDrawInput_TextAndOver(;
void ConDraw_Box(float x, float y, float w, float h, const vec4_t *color);
void ConDrawInput_Box(int lines, const vec4_t *color);
int Con_GetAutoCompleteColorCodedStringDiscontiguous(;
int Con_GetAutoCompleteColorCodedStringContiguous(;
bool Con_IsAutoCompleteMatch(const char *query, const char *matchToText, int matchTextLen);
void ConDrawInput_IncrMatchCounter(const char *str);
void ConDrawInput_DvarMatch(const char *str);
int CG_SortPlayersAlphabeticallyComparator(const void *a, const void *b);
int ConDrawInput_TextFieldFirstArgChar();
void ConDrawInput_AutoCompleteArg(LocalClientNum_t localClientNum, const char **stringList, int stringCount);
int ConDrawInput_GetDvarDescriptionLines(const dvar_t *dvar);
void ConDrawInput_DetailedDvarMatch(LocalClientNum_t localClientNum, const char *str);
void ConDrawInput_DetailedCmdMatch(LocalClientNum_t localClientNum, const char *str);
void ConDrawInput_CmdMatch(const char *str);
void Con_DrawAutoCompleteChoice(;
void Con_DrawInputPrompt(LocalClientNum_t localClientNum);
BOOL Con_HasTooManyMatchesToShow();
bool Con_IsDvarCommand(const char *cmd);
char Con_CycleAutoComplete(int step);
char Con_CancelAutoComplete();
void Con_AllowAutoCompleteCycling(bool isAllowed);
void TypewriterSounds(LocalClientNum_t localClientNum, const MessageWindow *msgwnd, MessageLine *line);
void Con_DrawMessageLineOnHUD(;
void Con_CullFinishedLines(int serverTime, MessageWindow *msgwnd);
double Con_GetMessageAlpha(Message *message, MessageWindow *msgwnd, int serverTime, bool scrollsIntoPlace);
void Con_DrawMessageWindowNewToOld(;
void Con_DrawMessageWindowOldToNew(;
void Con_DrawMessageWindow(;
void Con_DrawGameMessageWindow(;
void Con_DrawMiniConsole(LocalClientNum_t localClientNum, int xPos, int yPos, float alpha);
void Con_DrawErrors(LocalClientNum_t localClientNum, int xPos, int yPos, float alpha);
BOOL Con_IsValidGameMessageWindow(int windowIndex);
bool Con_IsGameMessageWindowActive(LocalClientNum_t localClientNum, int windowIndex);
void Con_DrawSay(LocalClientNum_t localClientNum, int x, int y);
void Con_ToggleConsoleOutput();
void Con_DrawOutputScrollBar(float x, float y, float width, float height);
void Con_DrawOutputText(float x, float y);
void Con_DrawOuputWindow();
void Con_PageUp();
void Con_PageDown();
void Con_Top();
void Con_Bottom();
void Con_Close(LocalClientNum_t localClientNum);
bool Con_IsActive(LocalClientNum_t localClientNum);
void CL_PlayTextFXPulseSounds(;
void Con_ToggleConsole();
void Con_Echo_f();
void Con_OneTimeInit();
void Con_Init();
void CL_ConsolePrint(;
void CL_ConsoleFixPosition();
void CL_ReviveMessagePrint(;
void CL_DeathMessagePrint(;
void Con_DrawInput(LocalClientNum_t localClientNum);
char Con_CommitToAutoComplete();
void Con_DrawSolidConsole(LocalClientNum_t localClientNum);
void Con_DrawConsole(LocalClientNum_t localClientNum);

//t6/code/src_noserver/client/cl_debugdata.cpp
void CL_DebugInitSVThreadVariables();
BOOL CreateDebugStringsIfNeeded();
// float *AddDebugStringInternal@<eax>(;
void CL_AddDebugString(const vec3_t *xyz, const vec4_t *color, float scale, const char *text, int duration);
BOOL CreateDebugSpheresIfNeeded();
// int AddDebugSphereInternal@<eax>(;
void CL_AddDebugSphere(;
BOOL CreateDebugLinesIfNeeded();
void AddDebugLineInternal(;
void CL_AddDebugLine(;
void CL_AddDebugAxis(;
void CL_AddDebugStarWithText(;
void CL_AddDebugStar(;
void CL_AddDebugBox(;
void FlushDebugStrings(clientDebugStringInfo_t *info, int fromServer);
void FlushDebugLines(clientDebugLineInfo_t *info, int fromServer);
void FlushDebugSpheres(clientDebugSphereInfo_t *info, int fromServer);
void CL_FlushDebugClientData(clientDebugStringInfo_t *a1, int a2);
void CL_UpdateDebugClientData();
void CL_FlushDebugServerData(clientDebugStringInfo_t *a1, int a2);
void CL_UpdateDebugServerData();
void CL_ShutdownDebugData();

//t6/code/src_noserver/client/cl_devgui.cpp
void CL_AddMapDirSlider(const char *dir, int locationFlags, const char *locationName);
void CL_CreateMapMenuEntriesForLocation(int locationFlags, const char *locationName);
const dvar_t *CL_RegisterDevGuiDvars();
void CL_CreateMapMenuEntries();
void CL_CreateDevGui();
void CL_DestroyDevGui();

//t6/code/src_noserver/client/cl_gamepad.cpp
void CL_ResetLastGamePadEventTime();
void CL_InitGamepadAxisBindings();
GamepadPhysicalAxis Gamepad_StringToPhysicalAxis(const char *axisName);
GamepadVirtualAxis Axis_StringToVirtualAxis(const char *axisName);
GamepadMapping Gamepad_InputTypeStringToId(const char *name);
void Gamepad_BindAxis(;
void Axis_Bind_f();
void Axis_Unbindall_f();
double CL_GamepadAxisValue(LocalClientNum_t localClientNum, int virtualAxis);
bool CL_CheckForIgnoreDueToRepeat(LocalClientNum_t localClientNum, int key, int repeatCount, int time);
void CL_GamepadResetMenuScrollTime(LocalClientNum_t localClientNum, int key, int down, unsigned int time);
bool GamepadButtonEvent_LocationSelection(;
bool GamepadButtonEvent_DevguiKeyEvent(;
void GamepadButtonEvent_UnlockableItems(;
void GamepadButtonEvent_Cheats(;
void CL_GamepadButtonEvent(;
void CL_GamepadButtonEventForPort(;
void CL_InitGamepadCommands();
void CL_GamepadGenerateAPad(;
void CL_GamepadEvent(ControllerIndex_t portIndex, int physicalAxis, int value, int time);

//t6/code/src_noserver/client/cl_input.cpp
void CL_LeanCount_Reset();
void CL_LeanCount_Increment();
BOOL CL_LeanCount_ShouldIncrementStat();
bool CG_IsSprinting(LocalClientNum_t localClientNum);
// void IN_KeyDown(int *a1@<eax>, int a2@<ecx>, int a3@<xmm0>, unsigned int time);
void IN_KeyUp(kbutton_t *b, int key, unsigned int time);
void IN_KeyDownCheat(kbutton_t *b);
void IN_KeyUpCheat(kbutton_t *b);
float CL_KeyState(kbutton_t *key);
void CL_SetStance(LocalClientNum_t localClientNum, StanceState stance);
void CL_ToggleStance(LocalClientNum_t localClientNum, StanceState preferredStance);
void __thiscall IN_UpDown(kbutton_t *this);
void __thiscall IN_UpUp(kbutton_t *this);
void IN_SpeedDown();
void IN_SpeedUp();
void IN_UpdateUseCount(LocalClientNum_t localClientNum);
void IN_UpdateUseHeld(LocalClientNum_t localClientNum);
void IN_Activate_Down(LocalClientNum_t localClientNum, int key, unsigned int time, float value);
void IN_Activate_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
void IN_Reload_Down(LocalClientNum_t localClientNum, int key, unsigned int time, float value);
void IN_Reload_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
void IN_UseReload_Down(LocalClientNum_t localClientNum, int key, unsigned int time, float value);
void IN_UseReload_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
void IN_Attack_Down(LocalClientNum_t localClientNum, int key, unsigned int time, float value);
void IN_Attack_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
// void IN_Melee_Down(int a1@<eax>, int a2@<edx>, int a3@<xmm0>, unsigned int time);
void IN_Melee_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
// void IN_Frag_Down(int a1@<eax>, int a2@<edx>, int a3@<xmm0>, unsigned int time);
void IN_Frag_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
// void IN_Smoke_Down(int a1@<eax>, int a2@<edx>, int a3@<xmm0>, unsigned int time);
void IN_Smoke_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
void IN_Stance_Down(LocalClientNum_t localClientNum, int key, unsigned int time, float value);
void IN_Stance_Up(LocalClientNum_t localClientNum, int key, unsigned int time);
void IN_WeapNextInventoryDown(LocalClientNum_t localClientNum);
void IN_WeapNextInventoryUp(LocalClientNum_t localClientNum);
void IN_ToggleADS(LocalClientNum_t localClientNum);
void IN_CenterView(LocalClientNum_t localClientNum);
void IN_LowerStance();
void IN_RaiseStance();
bool IN_IsTalkKeyHeld();
void CL_AdjustAngles(LocalClientNum_t localClientNum);
void CL_StanceButtonUpdate(LocalClientNum_t localClientNum);
void CL_GetMouseMovement(clientActive_t *cl, float *mx, float *my);
void SetMeleeChargeCmd(const AimOutput *aimOutput, usercmd_s *cmd);
void CL_SetCursorPos(int x, int y);
void CL_ShowSystemCursor(int show);
void CL_CopyDamageKickAngles(LocalClientNum_t localClientNum, usercmd_s *cmd);
int CL_ReadyToSendPacket(LocalClientNum_t localClientNum);
void CL_SendCmd(LocalClientNum_t localClientNum);
void CL_InitInput();
void CL_ShutdownInput();
void CL_ClearKeys(LocalClientNum_t localClientNum);
void CL_ExecBinding(;
bool CL_SpectatorInput(LocalClientNum_t localClientNum, int button);
// bool CL_TranslateSpecialStateButton@<al>(;
void CL_UpdateAirburstMarkDistance(;
void CL_AddCurrentStanceToCmd(LocalClientNum_t localClientNum, usercmd_s *cmd);
void CL_WeapNextButtonUpdate(LocalClientNum_t localClientNum, usercmd_s *cmd);
void CL_KeyMove(LocalClientNum_t localClientNum, usercmd_s *cmd);
int CL_MouseEvent(LocalClientNum_t localClientNum, int x, int y, int dx, int dy);
void CL_UpdateCmdButton(;
void CL_CmdButtons(LocalClientNum_t localClientNum, usercmd_s *cmd);
bool CG_HandleLocationSelectionInput(LocalClientNum_t localClientNum, usercmd_s *cmd);
// void CL_HandleSpectatorInput(LocalClientNum_t localClientNum, bitarray<64> *button_bits);
void CL_HandleSpecialStateInput(;
void CL_GamepadMove(LocalClientNum_t localClientNum, usercmd_s *cmd, float frametime_base);
void CL_MouseMove(LocalClientNum_t localClientNum, usercmd_s *cmd, float frametime_base);
usercmd_s *CL_CreateCmd(LocalClientNum_t localClientNum);
void CL_CreateNewCommands(LocalClientNum_t localClientNum);
void CL_Input(LocalClientNum_t localClientNum);

//t6/code/src_noserver/client/cl_keys.cpp
void Field_AdjustScroll(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, field_t *edit);
char Field_Paste(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, field_t *edit);
void FindMatches(const char *s);
void PrintMatches(const char *s);
int keyConcatArgs();
void ReplaceConsoleInputArgument(int replaceCount, const char *replacement);
void CompleteCmdArgument();
void CompleteDvarArgument();
void UpdateMatches(bool searchCmds, int *matchLenAfterCmds, int *matchLenAfterDvars);
// void CompleteCommand(int *a1@<ebx>, LocalClientNum_t localClientNum);
bool Console_IsScrollUpKey(int key, int isShiftDown, int isCtrlDown);
bool Console_IsScrollDownKey(int key, int isShiftDown, int isCtrlDown);
int Key_GetOverstrikeMode(LocalClientNum_t localClientNum);
void Key_SetOverstrikeMode(LocalClientNum_t localClientNum, int state);
int Key_IsDown(LocalClientNum_t localClientNum, int keynum);
int Key_StringToKeynum(LocalClientNum_t localClientNum, const char *str);
BOOL Key_IsValidGamePadChar(const char key);
const char *Key_KeynumToString(LocalClientNum_t localClientNum, int keynum, int translate);
void Key_SetBinding(LocalClientNum_t localClientNum, int keynum, Bind_t binding, BindIndex_t index);
void Key_SetBindingCheat(LocalClientNum_t localClientNum, int keynum, const char *bindingCheat);
void Key_SetBindings(LocalClientNum_t localClientNum, int *twokeys, Bind_t binding, BindIndex_t bindNum);
Bind_t Key_GetBinding(LocalClientNum_t localClientNum, int keynum, BindIndex_t index);
int Key_GetCommandAssignmentInternal(;
int Key_GetSafeFreeKey(LocalClientNum_t localClientNum, BindIndex_t bindNum);
int Key_GetMouseKeyboardCommandAssignment(;
void Key_BindMustHaveCommands(LocalClientNum_t localClientNum);
void Key_UpdateMustHaveBindings_f();
int Key_GetCommandAssignment(;
void Key_Unbind_f();
void Key_Unbind2_f();
void Key_Unbindall_f();
void Key_Unbindall2_f();
void Key_ClearStates(LocalClientNum_t localClientNum);
int CL_IsKeyPressed(const LocalClientNum_t localClientNum, const char *keyName);
void Key_Shutdown();
bool Key_IsCatcherActive(LocalClientNum_t localClientNum, int mask);
void Key_AddCatcher(LocalClientNum_t localClientNum, int orMask);
void Key_RemoveCatcher(LocalClientNum_t localClientNum, int andMask);
void Key_SetCatcher(LocalClientNum_t localClientNum, int catcher);
Bind_t Key_GetBindingForCmd(const char *cmd);
const char *Key_GetCmdForBinding(Bind_t binding);
void Field_DrawTextOverride(;
void Field_Draw(;
bool Field_KeyDownEvent(;
char Field_CharEvent(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, field_t *edit, int ch);
void Console_Key(LocalClientNum_t localClientNum, int key);
void Message_Key(LocalClientNum_t localClientNum, int key);
const char *Key_GetBindingCheat(LocalClientNum_t localClientNum, int keynum);
int Key_GetCheatAssignmentInternal(;
BOOL Key_IsCommandBound(LocalClientNum_t localClientNum, const char *command, BindIndex_t bindIndex);
void Key_Bind_f();
void Key_Bind2_f();
void Key_Bindlist_f();
void CL_InitKeyCommands();
void CL_KeyEvent(LocalClientNum_t localClientNum, int key, const int down, const unsigned int time);
void CL_ConsoleCharEvent(LocalClientNum_t localClientNum, int key);
void CL_CharEvent(LocalClientNum_t localClientNum, int key);
int CL_GetKeyBindingInternal(;
int CL_GetKeyBinding(;
int CL_GetGamePadBinding(;

//t6/code/src_noserver/client/cl_main.cpp
char CL_AnyLocalClientsRunning();
void CL_Command_DisableAllButPrimaryClients();
void CL_Command_SetClientBeingUsedAndPrimary();
void CL_Command_SetClientBeingUsedAndPrimaryAndActive();
void CL_Command_SetClientPrimary();
void CL_Command_SetClientBeingUsed();
void CL_Command_SetClientBeingUsedAndActive();
void CL_Command_DisableAllClients();
void CL_Command_SignClientOutOfUI();
void CL_Command_SignClientIn();
void CL_SetupClientsForIngame();
void CL_DrawFramedPicPhysical(;
void CL_ForwardToServer_f();
void CL_Setenv_f();
void CL_SkipLevel_f();
void CL_Vid_Restart_f();
void CL_Snd_Restart_f();
void CL_OpenedIWDList_f();
void CL_ReferencedIWDList_f();
void CL_Configstrings_f();
void CL_Clientinfo_f();
bool CL_WasMapAlreadyLoaded();
void CL_Live_StopAllParties();
void CL_Live_StopPrivateParty();
void CL_Live_LeaveParty(PartyData_s *party, ControllerIndex_t localControllerIndex);
void CL_Live_LeaveAllParties(ControllerIndex_t localControllerIndex);
char CL_Live_LocalClientJoinParty(PartyData_s *party, ControllerIndex_t localControllerIndex);
void CL_Live_StopParty(bool keepPartyTogether);
void CL_Live_PartySwitchLobbies();
void CL_ExecControllerBindings_f();
void CL_Live_ShowFriendsList();
void CL_Live_StartPartyHost(ControllerIndex_t localControllerIndex, bool silentFail);
void CL_Live_StartPartyHost();
void CL_Live_PartyMapVeto();
void CL_Live_UpdatePartyState();
void CL_Live_PartyMapReady();
void CL_UpdateSession(PartyData_s *party, SessionData *session, int maxplayers);
int CL_GetUserMaxPlayerSetting(ControllerIndex_t controllerIndex);
void CL_Live_SessionUpdate();
void CL_AnimateUI_f();
;
void CL_DrawSpinnerPhysical(float x, float y, float w, float h, const vec4_t *color);
void CL_DrawSpinner(;
void CL_DrawSpinnerLoadbarPhysical(float x, float y, float w, float h, const vec4_t *color, float percentDone);
void CL_DrawSpinnerLoadbar(;
void CL_ShutdownHunkUsers();
void CL_SendBlackboxSession(;
void CL_ResetSkeletonCache(LocalClientNum_t localClientNum);
int CL_HighestPriorityStatPacket(clientConnection_t *clc, int numCompressedStatsPackets);
void CL_CheckForResend(LocalClientNum_t localClientNum);
void CL_DisconnectError(const char *message);
void CL_DisconnectPacket(LocalClientNum_t localClientNum, netadr_t from, const char *reason);
void CL_HandleRelayPacket(LocalClientNum_t localClientNum);
char CL_HandleVoiceTypePacket(LocalClientNum_t localClientNum, msg_t *msg);
void CL_SetupForNewServerMap(LocalClientNum_t localClientNum, const char *pszMapName, const char *pszGametype);
void CL_AuthRequestPacket(LocalClientNum_t localClientNum, unsigned __int64 serverSteamID);
bool CL_DispatchConnectionlessPacket(LocalClientNum_t localClientNum, netadr_t from, msg_t *msg, int time);
// char CL_ConnectionlessPacket@<al>(int a1@<edi>, LocalClientNum_t localClientNum, netadr_t from, msg_t *msg);
char CL_PacketEvent(;
BOOL CL_LocalClientIsInGame(LocalClientNum_t localClientNum);
char CL_IsClientLocal(ClientNum_t clientNum);
void CL_ParseBadPacket_f();
void CL_SetupViewport();
;
void CL_InitRenderer();
void CL_DevGuiDvar_f();
void CL_DevGuiDvarList_f();
void CL_DevGuiCmd_f();
void CL_DevGuiOpen_f();
void CL_InitDevGui();
void CL_StartHunkUsers();
int CL_ScaledMilliseconds();
void CL_InitDedicated();
void CL_startSingleplayer_f();
void CL_startZombies_f();
void CL_startMultiplayer_f();
void CL_PlayLogo_f();
void CL_OpenScriptMenu_f();
char Playlist_ReadFromDisk();
;
void CL_VoiceFail_f();
void CL_ForceVoiceFail_f();
void CL_MigrateHost_f();
void CL_SetNatStrict_f();
void CL_SetNatOpen_f();
void CL_LoadFFOTD_f();
void CL_ChooseNextPlaylist();
void CL_ChoosePreviousPlaylist();
void CL_LocalServers_f();
void CL_FlushGump(int slot);
;
void CL_LoadGump();
void CL_AddListenIn_f();
void CL_RemoveListenIn_f();
void CL_ResetListenIn_f();
void CL_SetListenIn_f();
void CL_RemoveCommands();
void CL_RegisterDvars();
bool CL_IsServerLoadingMap();
bool CL_IsWaitingOnServerToLoadMap(LocalClientNum_t localClientNum);
void CL_SetWaitingOnServerToLoadMap(LocalClientNum_t localClientNum, bool waiting);
void CL_DrawTextPhysical(;
void CL_DrawTextPhysicalWithEffects(;
void CL_DrawText(;
void CL_DrawTextRotate(;
void CL_DrawTextPhysicalWithCursor(;
void CL_DrawTextWithCursor(;
void CL_DrawTextWithEffects(;
void CL_DrawTextWithCOD7TypeWriterEffects(;
void CL_DrawTextPhysicalWithCOD7TypeWriterEffects(;
void CL_DrawTextWithRedactEffects(;
void CL_DrawTextPhysicalWithCOD7DecodeEffects(;
void CL_DrawTextPhysicalWithRedactEffects(;
void CL_DrawTextWithPopInEffects(;
char CL_ShouldDisplayHud(LocalClientNum_t localClientNum);
BOOL CL_IsUIActive(const LocalClientNum_t localClientNum);
Font_s *CL_RegisterFont(const char *fontName, int imageTrack);
vec3_t *CL_GetMapCenter();
void CL_ConnectFromParty(;
void CL_SanitizeClanName(ControllerIndex_t controllerIndex);
void CL_UploadStatsForController(const ControllerIndex_t localControllerIndex);
void CL_ClearState(LocalClientNum_t localClientNum);
void CL_MapLoading_SetupDevmapParty();
void CL_Live_StopParty();
void CL_Live_StopPartyKeepPartyTogether();
void CL_ShutdownAll();
void CL_MapLoading(const char *mapname);
void CL_DownloadsComplete(LocalClientNum_t localClientNum);
void CL_InitLoad(const char *mapname, const char *gametype);
void CL_ShutdownRef();
void CL_DrawLogo(LocalClientNum_t localClientNum);
void __thiscall CL_ShowIP_f(bdCommonAddr *this);
void CL_RegisterCommands();
void CL_InitOnceForAllClients();

//t6/code/src_noserver/client/cl_main_dw.cpp
void CL_Live_PartyPlay();

//t6/code/src_noserver/client/cl_main_pc.cpp
void CL_Live_ShowGamerCard();
void CL_Live_UpdatePartyMapPacks();
void CL_Platform_RemoveCommands();
BOOL CL_IsPlayerMuted(SessionData *session, LocalClientNum_t localClientNum, ClientNum_t muteClientIndex);
int CL_IsPlayerMuted(LocalClientNum_t localClientNum, unsigned __int64 playerXuid);

//t6/code/src_noserver/client/cl_migration.cpp
void CL_MigrationInit();
void PingAck(const LocalClientNum_t localClientNum, netadr_t to, const int time);
void SendToHost(;
void Migration_SendMigrateToAck(;
int GetHostRating(const LocalClientNum_t localClientNum);
void CL_SaveMigrationPers(LocalClientNum_t localClientNum);
void CL_LoadMigrationPers(LocalClientNum_t localClientNum);
void HandleSaveDataMsg(const LocalClientNum_t localClientNum, netadr_t from, msg_t *msg);
void HandlePingMsg(const LocalClientNum_t localClientNum, netadr_t from, msg_t *msg);
void HandlePingAckMsg(const LocalClientNum_t localClientNum, netadr_t from, msg_t *msg);
void HandleHeaderMsg(const LocalClientNum_t localClientNum, netadr_t from, msg_t *msg);
char CL_MigrationPacket(const LocalClientNum_t localClientNum, const char *cmd, netadr_t from, msg_t *msg);
void CL_Migrate(LocalClientNum_t localClientNum, XSESSION_INFO *hostInfo, netadr_t addr);
void HandleStartMsg(const LocalClientNum_t localClientNum);

//t6/code/src_noserver/client/cl_parse.cpp
void CL_SavePredictedPlayerInformationForServerTime(clientActive_t *cl, const int serverTime);
char CL_GetClientArchiveIndexForServerTime(clientActive_t *cl, const int serverTime, int *resultIndex);
char CL_GetPredictedPlayerInformationForServerTime(clientActive_t *cl, const int serverTime, playerState_s *to);
void CL_SavePredictedVehicleForServerTime(;
int CL_GetPredictedVehicleForServerTime(;
void CL_CopyOldEntity(clientActive_t *cl, clSnapshot_t *frame, entityState_s *old);
void CL_ParsePacketMatchState(;
void CL_DeltaClient(;
void CL_ParsePacketClients(;
void CL_ParsePacketActors(;
void CL_ServerIdChanged(LocalClientNum_t localClientNum);
void CL_SystemInfoChanged(LocalClientNum_t localClientNum);
void CL_ParseMapCenter();
void StoreConfigString(int index, const char *s);
void CL_ParseConfigStrings_Internal(;
void CL_CheckBSPCheckSum(unsigned int serverChecksum);
void CL_ParseGamestate_Checksums(LocalClientNum_t localClientNum, msg_t *msg);
void CL_ParseGamestate(LocalClientNum_t localClientNum, msg_t *msg);
void CL_ParseServerMessage(LocalClientNum_t localClientNum, msg_t *msg);

//t6/code/src_noserver/client/con_channels.cpp
char Con_OpenChannel(const char *name, bool allowScript);
bool Con_ScriptHasPermission(int channel);
BOOL Con_GetChannel(const char *name, int *channel_result);
bool Con_IsChannelOpen(int channel);
void Con_FilterShowChannel(print_msg_dest_t dest, const char *channelName, bool show);
bool Con_IsChannelVisible(print_msg_dest_t dest, int channel, int errorflags);
void Con_ChannelList_f();
void Con_FilterAdd(bool show);
void Con_FilterAdd_f();
void Con_FilterRemove_f();
void Con_FilterList_f();
void Con_WriteFilterConfigString(int f);
void Con_InitChannelsForDestFromList(print_msg_dest_t dest, const char *channelNames);
void Con_InitGameMsgChannels();
void Con_InitChannels();
void Con_ShutdownChannels();

//t6/code/src_noserver/client/screen_placement.cpp
ScreenPlacement *ScrPlace_GetView(const LocalClientNum_t localClientNum);
ScreenPlacement *ScrPlace_GetViewWritable(const LocalClientNum_t localClientNum);
ScreenPlacement *ScrPlace_GetViewUIContext(const UIContextIndex_t contextIndex);
ScreenPlacement *ScrPlace_GetViewUIContextWritable(const UIContextIndex_t contextIndex);
double ScrPlace_HiResGetScaleY();
// vec2_t *ScrPlace_CalcSafeAreaOffsets@<eax>(;
void ScrPlace_SetupFloatViewport(;
void ScrPlace_SetupViewport(;
void ScrPlace_SetupUnsafeViewport(;
double ScrPlace_ApplyX(const ScreenPlacement *scrPlace, float x, int horzAlign);
double ScrPlace_ApplyY(const ScreenPlacement *scrPlace, float y, int vertAlign);
double ScrPlace_ApplyW(const ScreenPlacement *scrPlace, float w, int horzAlign);
double ScrPlace_ApplyH(const ScreenPlacement *scrPlace, float h, int vertAlign);
void ApplySplitscreenScaling(float *x, float *y, float *w, float *h, float hudSplitscreenScale);
void ScrPlace_ApplyRect(;
void ScrPlace_SetLegacySplitscreenScaling();
void ScrPlace_SetNormalSplitscreenScaling();

//#include "client/screen_placement.h"

//t6/code/src_noserver/client/splitscreen.cpp
int CL_LocalClient_IsActive(LocalClientNum_t localClientNum);
BOOL CL_LocalClient_IsFirstActive(LocalClientNum_t localClientNum);
BOOL CL_LocalClient_GetActiveCount();
char CL_AllLocalClientsDisconnected();
char CL_AllLocalClientStatesActive();
char CL_AnyLocalClientStateActive();
char CL_AnyLocalClientChallenging();
int CL_GetFirstActiveLocalClient();
char CL_IsFirstActiveLocalClient(LocalClientNum_t localClientNum);
char CL_IsLastActiveLocalClient(LocalClientNum_t localClientNum);
int CL_ControllerIndexFromActiveClient(const LocalClientNum_t localActiveClientNum);
int CL_LocalActiveIndexFromClientNum(const LocalClientNum_t localClientNum);
const GfxViewParms *CL_ControllerIndex_GetUsername(ControllerIndex_t controllerIndex);
char *CL_ControllerIndex_GetXuidString(ControllerIndex_t controllerIndex);
void CL_LocalClient_SetActive(LocalClientNum_t localClientNum, bool active);
bool CL_LocalClient_IsSplitscreen();
void CL_LocalClients_SetAllUsedActive();

