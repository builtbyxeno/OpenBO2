#pragma once

#include "types.h"

//t6/code/src_noserver/live/live.cpp
const char *Live_GetDWEnviroment();
void Live_Base_LobbyPump(const ControllerIndex_t localControllerIndex);
void Live_Base_ContentStreamingInit(ControllerIndex_t localControllerIndex);
void Live_Base_PooledStorageInit(ControllerIndex_t localControllerIndex);
ControllerIndex_t Live_GetControllerFromXuid(unsigned __int64 xuid);
bool Live_IsUserSignedInToDemonware(const ControllerIndex_t controllerIndex);
;
void Live_LeaveAllPartiesCmd();
;
void Live_CloseAllBusyPopups_f();
void Live_DelayedComError(const char *comErrorString);
void Live_SetComErrorIfJoinInProgressFails(bool shouldComError);
void Live_ResetLobbyModeDvars(;
unsigned int Live_IsUserInGame(const ControllerIndex_t controllerIndex);
int Live_IsAnyUserInGame();
bool Live_IsGeoLocationDataRetrieved();
bdDMLHierarchicalInfo *Live_GetGeoLocation();
bool Live_GetUserGeoLocationDataSuccess(TaskRecord *task);
char Live_GetUserGeoLocationDataFailure(TaskRecord *task);
bool Live_NATTypeAllowed(XONLINE_NAT_TYPE NATtype);
bool Live_CanHostServer(const ControllerIndex_t localControllerIndex, const int playerCount);
void Live_AwardAchievement_f();
int Live_SessionMode_EncodePlaylistNumber(int playlistNum);
int Live_SessionMode_DecodePlaylistNumber(int playlistNum);
unsigned __int64 Live_GetLocalXUID(const ControllerIndex_t controllerIndex, unsigned __int64 myXUID);
void Live_Init();
bool Live_GetConnectivityInformation(ControllerIndex_t controllerIndex, int *infoBitmask, bool outputDebugInfo);
void Live_GetGeoLocationData(const ControllerIndex_t controllerIndex);
bool Live_CanHostServer(;

//t6/code/src_noserver/live/live_anticheat.cpp
void LiveAntiCheat_BanDoConnected();
void LiveAntiCheat_DWPlayerBanned(unsigned __int64 userID, unsigned int reputationLevel);
void LiveAntiCheat_GenerateCRC32Checksum(const unsigned __int8 *data, int length, unsigned int *key);
unsigned int LiveAntiCheat_GenerateCRC32ChecksumSplit(;
HashInfo *LiveAntiCheat_StartHash(;
bool LiveAntiCheat_ContinueHash(void *handle);
char LiveAntiCheat_CompleteHash(void *handle, unsigned __int64 *result);
void LiveAntiCheat_AnswerChallengesRetry(const ControllerIndex_t controllerIndex);
char LiveAntiCheat_AnswerChallengesFailure(TaskRecord *task);
void LiveAntiCheat_ResetChallengeResponse(const ControllerIndex_t controllerIndex);
void LiveAntiCheat_ClearGameReport();
void LiveAntiCheat_SetThresholdExceeded(int threshold);
void LiveAntiCheat_ReportLaggedDamage();
void LiveAntiCheat_SetGameReportTags(int *numTags, bdTag *tags);
TaskRecord *LiveAntiCheat_AnswerChallenges(const ControllerIndex_t controllerIndex);
char LiveAntiCheat_AnswerChallengesSuccess(TaskRecord *task);
// void LiveAntiCheat_OnChallengesReceived(unsigned __int64 userID, bdReference<bdAntiCheatChallenges> challenges);
bool LiveAntiCheat_AnswerChecksumRequest(;
bool LiveAntiCheat_AnswerDvarRequest(;
bool LiveAntiCheat_AnswerDvarFloatRequest(;
bool LiveAntiCheat_AnswerExpressionRequest(;
bool LiveAntiCheat_GetChallengeResponse(;
void LiveAntiCheat_ProcessChallenges(const ControllerIndex_t controllerIndex);

//t6/code/src_noserver/live/live_counter.cpp
char LiveCounter_UploadAllCountersComplete();
char LiveCounter_UploadAllCountersFailure(TaskRecord *task);
char LiveCounter_DownloadAllCountersComplete();
char LiveCounter_DownloadAllCountersFailure();
void LiveCounter_AddToQueueByID(int counterID, __int64 increment);
void LiveCounter_ForceFlushQueue_f();
void LiveCounter_Dump_f();
int LiveCounter_GetCounterTotalValue(int counterID);
int LiveCounter_CounterStringToID(const char *counterType);
void LiveCounter_SetupCounters();
void LiveCounter_AddToQueueByName(const char *counterType, __int64 increment);
void LiveCounter_AddToQueueByName_f();
void LiveCounter_Init();

//t6/code/src_noserver/live/live_dedicated.cpp
char *dwSelectLSGAddress();
char *dwSelectAuthAddress();
void Live_SetTitleIDFromCommandLine();
void Live_SetAuthAddrFromCommandLine();
void Live_SetLsgAddrFromCommandLine();
int Live_GetTitleID();
void SV_SwitchPlaylists(const int newplaylist);
void SV_PlaylistDvarChanged(const dvar_t *playlistdvar);
void Live_OnDWConnect(const ControllerIndex_t localControllerIndex);
void Live_OnDWDisconnect(const ControllerIndex_t localControllerIndex);
const char *Live_DedicatedReadDWKey();
bool Live_Base_AuthorizeLicenseWithDW(const ControllerIndex_t controllerIndex, dediUserData_t *userData);
bool Live_Base_HandleAuthServiceReady(;
void Live_Base_StateAuthorizing(const ControllerIndex_t controllerIndex, dediUserData_t *userData);
void Live_Base_StateConnecting(const ControllerIndex_t controllerIndex, dediUserData_t *userData);
void Live_Base_StateError(const ControllerIndex_t controllerIndex, dediUserData_t *userData);
void Live_Base_Init();
char Live_Base_UserGetName(const ControllerIndex_t controllerIndex, char *buff, int buffSize);
char Live_Base_UserGetXuid(const ControllerIndex_t controllerIndex, unsigned __int64 *xuid);
ControllerIndex_t Live_Base_GetControllerFromXUID(const unsigned __int64 xuid);
bool Live_IsSignedInToLive(ControllerIndex_t controllerIndex);
unsigned __int64 Live_GetXuid(ControllerIndex_t controllerIndex);
void Live_SetAddressForDedicatedServer(MatchMakingInfo *sessionInfo);
const char *SV_GetLSPID();
int SV_GetLSPPort();
void Live_FakeDLC_ClientDisconnect();
void Live_FakeDLC_ClientJoin(unsigned int contentFlags);
unsigned int Live_FakeDLC_GetFlags();
void MatchmakingHopper_UpdateState(matchmakingHopperState_t newState);
void MatchmakingHopper_Init();
char MatchmakingHopper_ClientJoin(int memberPlaylist);
void MatchmakingHopper_Frame();
BOOL MatchmakingHopper_isParked();
void Live_SetPingTestKey();
void Live_Base_StateConnected(const ControllerIndex_t controllerIndex, dediUserData_t *userData);
void Live_Base_PumpForController(;
void Live_Base_Pump(ControllerIndex_t a1, dediUserData_t *a2);
void Live_HandleDemonwareLSP(;
void Live_DedicatedFrame();

//t6/code/src_noserver/live/live_doublexp.cpp
int Live_DoubleXPGetGroupMaskFromString(const char *groupString);
void Live_DoubleXPSetServerGroupMasks();
unsigned int Live_DoubleXPGetServerGroupMask();
unsigned int Live_DoubleXPGetServerGunGroupMask();
unsigned int Live_DoubleXPGetGroupMask(doubleXPGroups_e group);
unsigned int Live_DoubleXPGetGroupMaskForController(const ControllerIndex_t controllerIndex);
void Live_DoubleXPRecordIW6Promo(const ControllerIndex_t controllerIndex, bool accessed);
void Live_DoubleXPUpdatGroupMaskForController(;
void Live_DoubleXPUpdateMapPackInfo(bool ignoreMountedControllers);
void Live_DoubleXPUpdateMapPackInfoCmd();
void Live_DoubleXPRecordSeasonPass(const ControllerIndex_t controllerIndex);
void Live_DoubleXPSetGroupMaskForController(const ControllerIndex_t controllerIndex, bool includeKeyArchive);
int Live_DoubleXPGetContentMask(const char *contentPakNames);
void Live_DoubleXPInit();
void Live_DoubleXPUnsetGroupManuallyForController(const ControllerIndex_t controllerIndex, int groupIndex);

//t6/code/src_noserver/live/live_elite.cpp
void ClearRetrievedEliteAccountInfo();
TaskRecord *LiveElite_ClanLeave(const ControllerIndex_t localControllerIndex, unsigned __int64 teamid);
char LiveElite_ClanLeaveSuccess(TaskRecord *task);
char LiveElite_ClanLeaveFailure(TaskRecord *task);
char LiveElite_ClanInviteSuccess(TaskRecord *task);
char LiveElite_ClanInviteFailure(TaskRecord *task);
TaskRecord *LiveElite_CreateClan(const ControllerIndex_t localControllerIndex, const char *teamName);
char LiveElite_CreateClanSuccess(TaskRecord *task);
char LiveElite_CreateClanFailure(TaskRecord *task);
TaskRecord *LiveElite_TeamSetPublicProfile(;
char LiveElite_TeamSetPublicProfileSuccess(TaskRecord *task);
char LiveElite_TeamSetPublicProfileFailure(TaskRecord *task);
TaskRecord *LiveElite_TeamSetPrivateProfile(;
char LiveElite_TeamSetPrivateProfileSuccess(TaskRecord *task);
char LiveElite_TeamSetPrivateProfileFailure(TaskRecord *task);
unsigned __int64 LiveElite_GetTeamID(const ControllerIndex_t localControllerIndex);
bool LiveElite_IsClanAbbrevValidated(const ControllerIndex_t localControllerIndex);
char LiveElite_GetMembersFailure(TaskRecord *task);
char LiveElite_GetClanXPAndLevelSuccess(TaskRecord *task);
char LiveElite_GetClanXPAndLevelFailure(TaskRecord *task);
char LiveElite_GetMembershipFailure(TaskRecord *task);
char LiveElite_GetTeamPublicProfileFailure(TaskRecord *task);
char LiveElite_GetTeamPrivateProfileSuccess(TaskRecord *task);
char LiveElite_GetTeamPrivateProfileFailure(TaskRecord *task);
char LiveElite_ArchiveMarketingOptInSuccess(TaskRecord *task);
char LiveElite_ArchiveMarketingOptInFailure(TaskRecord *task);
char LiveElite_GetSubscriberInfoFromDWSuccess(TaskRecord *task);
char LiveElite_GetSubscriberInfoFromDWFailure(TaskRecord *task);
char LiveElite_RefreshDWSubscriberInfoSuccess(TaskRecord *task);
char LiveElite_RefreshDWSubscriberInfoFailure(TaskRecord *task);
void LiveElite_CreateClanCmd();
void LiveElite_ClanLeaveCmd();
void LiveElite_TeamSetPublicProfileCmd();
void LiveElite_TeamSetPrivateProfileCmd();
void LiveElite_LaunchAppExecutable_f();
void LiveElite_ShowForceEliteCmds_f();
BOOL LiveElite_CheckProgress(const ControllerIndex_t localControllerIndex, eliteStatus_e status);
void LiveElite_GetGoldClanTag(char *out, const char *clanTag, const char *playerName);
char *LiveElite_GetClanTag_VA(bool useGold, const char *clanTag, const char *playerName);
// bool __thiscall jsonWriter::checkJSON(jsonWriter *this, char *strJSON);
// void __thiscall eventAccumulator::reset(eventAccumulator *this);
// void __thiscall eventAccumulator::setMatchID(eventAccumulator *this, unsigned __int64 inputFileID);
// int __thiscall eventAccumulator::getSegmentJSON(;
// BOOL __thiscall eventAccumulator::canFlush(eventAccumulator *this);
char LiveElite_GetMembersSuccess(TaskRecord *task);
char LiveElite_GetMembershipSuccess(TaskRecord *task);
char LiveElite_GetTeamPublicProfileSuccess(TaskRecord *task);
// void __thiscall jsonWriter::beginObject(jsonWriter *this);
// void __thiscall jsonWriter::writeValue(jsonWriter *this, char *strValue, bool isNameValuePair, segment *segmentType);
// void __thiscall jsonWriter::terminate(jsonWriter *this, int minObjectCounter);
// void __thiscall eventAccumulator::writeCategoryValue(;
// void __thiscall eventAccumulator::endMatch(eventAccumulator *this);
// void __thiscall eventAccumulator::endCategory(eventAccumulator *this);
// bool __thiscall eventAccumulator::flush(eventAccumulator *this);
// void __thiscall eventAccumulator::flushCheck(eventAccumulator *this);
void LiveElite_Clear(const ControllerIndex_t localControllerIndex);
void __thiscall LiveElite_Init(void *this);
// void __thiscall eventAccumulator::startMatch(eventAccumulator *this);
// void __thiscall eventAccumulator::beginCategory(eventAccumulator *this, char *categoryName);
void __noreturn terminate();

//t6/code/src_noserver/live/live_fileshare.cpp
BOOL LiveFileShare_IsReady(ControllerIndex_t controllerIndex, bool allowRead);
int LiveFileShare_GetIndexFromGameType(const char *gameType, const char *zmMapStartLoc);
void LiveFileshare_AddTag(;
bool LiveFileshare_TagSanityCheck(bdTag *tags, int numTags);
int LiveFileshare_SortByTime(const void *a, const void *b);
int LiveFileshare_SortByType(const void *a, const void *b);
void LiveFileshare_Sort();
char LiveFileshare_GetVoteStatsFailure(TaskRecord *task);
char LiveFileshare_GetViewStatsFailure(TaskRecord *task);
void LiveFileshare_GetStats(;
void LiveFileshare_GetViewStats(const ControllerIndex_t controllerIndex, int offset);
void LiveFileshare_GetVoteStats(const ControllerIndex_t controllerIndex, int offset);
void LiveFileshare_GetSlotDataSuccess(const ControllerIndex_t controllerIndex);
void LiveFileshare_GetSlotDataFailure(const ControllerIndex_t controllerIndex);
void LiveFileshare_GetSlotData(const ControllerIndex_t controllerIndex, int offset);
void LiveFileshare_SetCopyFileName(char *name);
void LiveFileshare_SetCopyFileDescription(char *description);
void LiveFileshare_DeleteFileSuccess(const ControllerIndex_t controllerIndex, int slot);
void LiveFileshare_DeleteFile(const ControllerIndex_t controllerIndex, unsigned __int64 fileID);
void LiveFileshare_GetSummary(;
void LiveFileshare_DownloadSummarySuccess(const ControllerIndex_t controllerIndex);
void LiveFileshare_DownloadSummaryFailure();
void LiveFileshare_DownloadSummary(const ControllerIndex_t controllerIndex);
void LiveFileShare_AbortOperationCmd();
void LiveFileshare_GetSummaryCmd();
void LiveFileshare_AbortSummaryCmd();
void LiveFileshare_CopyFileParams();
void LiveFileshare_DeleteFileCmd();
void LiveFileshare_Invalidate();
void LiveFileshare_Mem_Startup();
char LiveFileshare_GetVoteStatsSuccess(TaskRecord *task);
char LiveFileshare_GetViewStatsSuccess(TaskRecord *task);
void LiveFileshare_UpdateSlots(const ControllerIndex_t controllerIndex, bool finishEarly);
void LiveFileshare_GetSlots(const ControllerIndex_t controllerIndex, const char *groupName);
void LiveFileshare_Copy_TransferSuccess();
char LiveFileshare_Copy_UpdateDescriptorUser(const ControllerIndex_t controllerIndex);
char LiveFileshare_Copy_UpdateDescriptorPooled(const ControllerIndex_t controllerIndex);
void LiveFileshare_Copy_DownloadDescriptorSuccess(const ControllerIndex_t controllerIndex);
void LiveFileshare_CopyFile(;
void __thiscall LiveFileshare_Update(void *this);
void LiveFileshare_GetSlotsCmd();
void LiveFileshare_CopyFileCmd();
void LiveFileshare_Init();
void LiveFileshare_Mem_Shutdown();

//t6/code/src_noserver/live/live_fileshare_cache.cpp
bool Live_FileShare_CacheInit();
void Live_FileShare_CacheShutdown();
char Live_FileShare_IsCached(unsigned __int64 fileID, fileShareLocation location, int *index);
void Live_FileShareCache_AddDescriptor(;
char Live_FileShareCache_GetDescriptor(;

//t6/code/src_noserver/live/live_fileshare_search.cpp
char Live_FileshareSearch_ShouldSearch(searchContext_t *context);
void Live_FileshareSearch_PushResultsToLUA();
bool Live_FileshareSearch_GetCounts(;
bool Live_FileshareSearch_ReadVotesSuccess(TaskRecord *task);
bool Live_FileshareSearch_ReadVotesFailure();
char Live_FileshareSearch_ReadViewsSuccess();
char Live_FileshareSearch_ReadViewsFailure();
void Live_FileshareSearch_ClearContext();
void Live_FileshareSearch_SetContext(searchContext_t *context);
void Live_FileshareSearch_TestCmd();
void Live_FileshareSearch_Init();

//#include "live/live_fileshare_tables.h"

//t6/code/src_noserver/live/live_friends.cpp
int SortABCFriendsUnifiedFunc(const void *a, const void *b);
int SortStatusFriendsUnifiedFunc(const void *a, const void *b);
void FriendsUnified_SortList(const ControllerIndex_t localControllerIndex);
void FriendsUnified_Init();
void FriendsUnified_UpdateList(const ControllerIndex_t localControllerIndex);

//t6/code/src_noserver/live/live_friends_pc.cpp
void Friends_Init();
FriendInfo *Friends_GetFriendInfoByIndex(const ControllerIndex_t controllerIndex, int index);
void Friends_UpdateInvites(ControllerIndex_t controllerIndex);
char Friends_IsFriendByID(ControllerIndex_t controllerIndex, unsigned __int64 id);
bool Friends_IsInCurrentSession(unsigned __int64 id);
int XFriendStatus(const FriendInfo *xfriend);
void XFriendToFriendInfo(const FriendInfo *xfriend, FriendInfo *info);
void Friends_SetInviteInfo(;
int Friends_GetCount(ControllerIndex_t controllerIndex, int filter, int inverseFilter);
char Friends_GetByID(ControllerIndex_t controllerIndex, unsigned __int64 id, FriendInfo *info);
char Friends_GetByIndex(;
char Friends_Update(ControllerIndex_t controllerIndex);

//t6/code/src_noserver/live/live_groups_dw.cpp
char LiveGroups_SetGroupsComplete(TaskRecord *task);
char LiveGroups_GetGroupID(const char *path, int *offset, GroupSet **gs);
void LiveGroups_JoinGroup(ControllerIndex_t localControllerIndex, const char *path);
bool LiveGroups_IsInGroup(ControllerIndex_t localControllerIndex, const char *path);
void LiveGroups_LeaveGroup(ControllerIndex_t localControllerIndex, const char *path);
unsigned int LiveGroups_GetCount(const char *path);
void LiveGroups_JoinGroup_f();
void LiveGroups_LeaveGroup_f();
void LiveGroups_Dump_f();
void LiveGroups_Init();
void LiveGroups_UpdateGroupMemberships(const ControllerIndex_t localControllerIndex);
void LiveGroups_SetGroups(ControllerIndex_t localControllerIndex);
bool LiveGroups_GetGroupCountsComplete(TaskRecord *task);
void LiveGroups_GetCounts(ControllerIndex_t localControllerIndex);
void LiveGroups_Update(ControllerIndex_t localControllerIndex);

//t6/code/src_noserver/live/live_leaderboards_dedicated.cpp
char *getLbNameString(typeEnumLB type);
lbdef_t *Live_DedicatedLB_GetLBDef(typeEnumLB type);
int getLbColumnIndexForContentPack(int pack);
void ownershipSet(client_t *client, typeEnumLB type);
void Live_DedicatedLB_Ownerhip_Approved(client_t *client);
void Live_DedicatedLB_Ownerhip_Denied(client_t *client);
void Live_DedicatedLB_Ownerhip_Played(client_t *client);
void Live_DedicatedLB_ClientConnected(client_t *client);
void Live_DedicatedLB_ClientDisconnected(client_t *client);
// LeaderboardRow<10> *getFreeLBRow();
char Live_DedicatedLB_WriteSuccess();
void Live_DedicatedLB_Frame();
bool Live_DedicatedLB_ParseLBDef(const char *lbBuf, int lbBufLen);
int Live_DedicatedLB_FetchDefsFailure(const ControllerIndex_t controllerIndex, void *data);
void Live_DedicatedLB_FetchDefsSuccess(const char *a1, int a2);
char Live_DedicatedLB_FetchLBDefs();
void Live_DedicatedLB_Init();

//t6/code/src_noserver/live/live_leaderboard_dw.cpp
TaskRecord *LiveLeaderboard_SetupNestedTask(;
void LiveLeaderboard_RowDebugPrint(;
char LiveLeaderboard_ReadStatsDataFailure(TaskRecord *task);
char LiveLeaderboard_ReadGhostLBFailure(TaskRecord *task);
BOOL LiveLeaderboard_IsGhostLBFetchingFinished();
int LiveLeaderboard_GetGhostLBReadBeginTime();
int LiveLeaderboard_CalculatePlayerLbRowValue(;
char LiveLeaderboard_UploadPlayerDataExecuteTask(;
char LiveLeaderboard_WriteStatsDataSuccess();
char LiveLeaderboard_CanUserAccessLeaderboard(const ControllerIndex_t localControllerIndex);
bool LiveLeaderboard_IsUploadedZombie(const ControllerIndex_t localControllerIndex);
void LiveLeaderboard_SetUploadedStatusZombie(const ControllerIndex_t localControllerIndex, bool isUploaded);
void LiveLeaderboard_SetWriteLeaderboards(const LocalClientNum_t localClientNum, const char *lbConfigStr);
int LiveLeaderboard_CompareXUserStatsRowRanks(const void *r1, const void *r2);
void LiveLeaderboard_SortXUserStatsByRank(Leaderboard *lb);
void LiveLeaderboard_ReadStatsSuccess(ControllerIndex_t localControllerIndex, Leaderboard *lb);
char LiveLeaderboard_GetStatsByXuidsFailure(TaskRecord *task);
char LiveLeaderboard_GetByRank(;
char LiveLeaderboard_GetByRankFailure(TaskRecord *task);
char LiveLeaderboard_GetByPlayerFailure(TaskRecord *task);
bool LiveLeaderboards_GetResetLeaderboards(;
ControllerIndex_t LiveLeaderboard_SortMultiSearchResults(ControllerIndex_t localControllerIndex);
int LiveLeaderboard_lbGetCache(const ControllerIndex_t controllerIndex, const int colIndex);
char LiveLeaderboard_ReadStatsDataSuccess(TaskRecord *task);
char LiveLeaderboard_ReadGhostLBSuccess(TaskRecord *task);
// int LiveLeaderboard_ColumnIDToValue(const LeaderboardDef *lbDef, LeaderboardRow<10> *row, int colId);
int LiveLeaderboard_MakeRow(;
bool LiveLeaderboard_RankUpdate(;
bool LiveLeaderboard_CombineUpdate(;
char LiveLeaderboard_UploadPlayerDataExecuteBlockingTask(;
char LiveLeaderboard_WriteStatsDataFailure(TaskRecord *task);
char LiveLeaderboard_UploadPlayerStatsExecute(const ControllerIndex_t localControllerIndex);
char LiveLeaderboard_UploadPlayerStats(const ControllerIndex_t localControllerIndex);
char LiveLeaderboard_GetStatsSuccess(TaskRecord *task);
char LiveLeaderboard_GetStatsByXuidsSuccess(TaskRecord *task);
char LiveLeaderboard_GetByPlayerSuccess(TaskRecord *task);
char LiveLeaderboards_ResetLeaderboardsClearRows(;
// void LiveLeaderboards_ResetLeaderboards(const char **a1@<edx>, const ControllerIndex_t controllerIndex);
void LiveLeaderboards_ResetLeaderboards_f();
void LiveLeaderboard_Init();
char LiveLeaderboard_GetMiniLbsSuccess(TaskRecord *task);

//t6/code/src_noserver/live/live_leagues.cpp
void ParseError(jsmntok_t *token, const char *msg);
void DataError(jsmntok_t *token, const char *msg);
jsmntok_t *GetNextToken(jsmntok_t **token, jsmntok_t *end);
jsmntok_t *GetEndToken(jsmntok_t *token);
char GetNextKeyValue(jsmntok_t **token, jsmntok_t *end, jsmntok_t **key, jsmntok_t **value);
bool IsTokenEqual(jsmntok_t *token, const char *str);
char *GetTokenString(jsmntok_t *token);
const GfxViewParms *CopyTokenString(jsmntok_t *token);
const GfxViewParms *CopyTokenLocalizedString(jsmntok_t *token);
int GetTokenInt(jsmntok_t *token);
float GetTokenFloat(jsmntok_t *token);
bool GetTokenBool(jsmntok_t *token);
int GetTokenTime(jsmntok_t *token);
char ParseSeasons(League *league, jsmntok_t *token);
char ParseIcons(LeagueDivision *division, jsmntok_t *token);
char ParseAwards(League *league, jsmntok_t *token);
char ParseNouns(jsmntok_t *token);
char ParseNumbers(jsmntok_t *token);
char ParseLeagues(jsmntok_t *token);
char ParseDivisions(jsmntok_t *token);
void ResetLeagueInfo();
bool ValidateLeagueInfo();
bool CheckTokenizerError(jsmnerr_t result);
bool ParseLeagueInfo(const char *buffer);
int League_GetCurrentID();
char League_ParseInfo(const char *buffer);
int League_GetTeamSize(int id);
LeagueSeason *League_GetSeasonByID(int leagueID, int seasonID);
LeagueSeason *League_GetActiveSeason(int id);
LeagueSeason *League_GetNextActiveSeason(int id);
LeagueDivision *League_FindDivision(int id, int divisionID);
char League_GetTeamIDFailure(TaskRecord *task);
void League_Backoff(ControllerIndex_t controllerIndex);
void League_SetupDefaultStats(StatsLookup *lookup);
void League_PushStats(LeagueStats *stats, bdLeagueStatsInfo *dwStats);
void League_MSGWriteStats(msg_t *msg, const LeagueStats *stats);
void League_MSGReadStats(msg_t *msg, LeagueStats *stats);
char League_GetStatsFailure(TaskRecord *task);
char League_FetchTeamsListFailure();
char LeagueFetchSoloTeamIDFailure();
char League_FetchTeamSubdivisionsSuccess(TaskRecord *task);
char League_FetchTeamSubdivisionsFailure(TaskRecord *task);
char League_FetchTeamInfoFailure();
char League_FetchLbTeamMemberInfoFailure();
char League_FetchTeamMemberInfoSuccess(TaskRecord *task);
char League_FetchTeamMemberInfoFailure();
int SortSubdivisionInfosBySeasonDate(const void *a, const void *b);
char League_FetchHistorySubdivisionInfosFailure();
char League_FetchLeagueHistoryFailure();
bool ParseMetaData(;
char League_FetchSubdivisionFailure(TaskRecord *task);
// char League_RefetchSubdivisionSuccess@<al>(bool *a1@<edi>, TaskRecord *task);
char League_RefetchSubdivisionFailure(TaskRecord *task);
void League_ClearTeamTasks(const ControllerIndex_t controllerIndex);
char League_GetCurrentTeamID(;
bool League_SetOutcomes(const ControllerIndex_t controllerIndex, const LeagueOutcomes *outcomes);
void League_SetMatchDelta(StatsLookup *lookup, LeagueStats *outcomeStats, LeagueStats *baseStats);
char League_AreWeFetchingStats(const ControllerIndex_t controllerIndex);
char League_FetchLbDataFailure(TaskRecord *task);
char League_FindTeamAndLeagueInFetchedData(;
char League_FetchAllInfoForTeamInLeagueFailure();
void League_RecordEvent(;
const GfxViewParms *League_GetCurrentTeamName(const ControllerIndex_t controllerIndex);
void League_Status(const ControllerIndex_t controllerIndex);
bool League_GetSkillAndVariance(const ControllerIndex_t controllerIndex, float *skill, float *variance);
char League_GetCurrentStats(const ControllerIndex_t controllerIndex, LeagueStats *stats);
void League_Status_f();
void League_Refresh_f();
char League_HandleInstantMessage(ControllerIndex_t controllerIndex, const char *msg);
void League_CalculateScore(League *league, int count, LeagueTeam *teams);
void League_CalculateMatchResult(int count, LeagueTeam *teams);
char League_GetTeamID(;
void League_UpdateBonusAllocation(ControllerIndex_t controllerIndex);
char League_GetStatsSuccess(TaskRecord *task);
bool League_FetchTeamsListInternal(;
char LeagueFetchSoloTeamIDSuccess(TaskRecord *task);
bool League_FetchSoloTeamID(const ControllerIndex_t controllerIndex);
bool League_FetchTeamsList(;
char League_FetchTeamInfo(const ControllerIndex_t controllerIndex);
char League_FetchTeamMemberInfo(const ControllerIndex_t controllerIndex);
char League_FetchHistorySubdivisionInfosSuccess(TaskRecord *task);
void League_FetchLeagueHistorySubdivisionInfos(const ControllerIndex_t controllerIndex);
char League_FetchLeagueHistoryInternal(;
char League_FetchLeagueHistorySuccess(TaskRecord *task);
// char League_FetchSubdivisionSuccess@<al>(bool *a1@<edi>, TaskRecord *task);
char League_UploadStatsSuccess(TaskRecord *task);
char League_UploadStatsFailure(TaskRecord *task);
void League_SetCurrentTeamID(;
// char League_ApplyOutcome@<al>(;
char League_FetchLbDataSuccess(TaskRecord *task);
char League_FetchLbDataByPivot(;
char League_FetchLbDataByRank(;
bool League_SetCurrentTeamEmblem(;
void League_Force_f();
void League_Fake_f();
char League_FetchTeamsListSuccess(TaskRecord *task);
char League_FetchLbData(;
char League_FetchAllInfoForTeamInLeagueSuccess(TaskRecord *task);
void League_FetchLbData_f();
void League_Init();
void ParseError(const char *msg);

//t6/code/src_noserver/live/live_league_friends.cpp
void League_Friends_TeamMemberInfoDownloaded(;

//t6/code/src_noserver/live/live_metplayer.cpp
void LiveMetPlayer_ClearUploadFlags(const ControllerIndex_t controllerIndex);
bool LiveMetPlayer_UploadMetPlayerListNeeded(ControllerIndex_t controllerIndex);
void LiveMetPlayer_ResetData(ControllerIndex_t controllerIndex);
void LiveMetPlayer_RemoveFriendsFromRecentPlayerList(ControllerIndex_t controllerIndex);
void LiveMetPlayer_UploadMetPlayerList(ControllerIndex_t localControllerIndex);
void LiveMetPlayer_RemoveFriendsFromRecentPlayerListCmd();
void LiveMetPlayer_Init();
char LiveMetPlayer_GetIndexByXUID(ControllerIndex_t controllerIndex, unsigned __int64 xuid, int *index);
char LiveMetPlayer_GetRecentPlayerInfoByID(;

//t6/code/src_noserver/live/live_presence_win.cpp
unsigned int __thiscall offsetOfBufInHunkUserDefault(bdChannelInfo *this);
void Live_Disconnected();
void Live_NotPlaying();
void Live_SetLobbyPresence();
void Live_SetPartyPresence();
void Live_SetGeographicalRegion();
void Live_SetPlaylistVersion(ControllerIndex_t controllerIndex);
void Live_SetPlaylistNum(ControllerIndex_t localControllerIndex, int playlistNum);
void Live_SetGametype(ControllerIndex_t localControllerIndex, const char *gametype);
void Live_SetZmLocationContext(ControllerIndex_t localControllerIndex, const char *zmLocation);
int Live_GetMapIndex(const char *mapname);
void Live_SetCurrentMapname(const char *mapname);
void Live_SetTeamSizeRange(const int teamMaxSize);
int Live_GetMapSource(const int mapIndex);
void Live_SetMapPacks(const int mapPacks);
void Live_SetCurrentGametype();
void Live_SetTheaterPlayingPresence();

//t6/code/src_noserver/live/live_sessions.cpp
int Session_BuildQoSPayload(SessionData *session);
unsigned __int8 *Session_GetQosPayloadBuffer();
void Session_UpdateQoSPayload(SessionData *session);
char GetQoSPayload(unsigned __int8 *data, int dataSize, qosPayload_t *qosPayload);
ClientNum_t Session_HostNum(SessionData *session);
bool Session_IsLocalMember(SessionData *session, const ClientNum_t clientNum);
void Session_CloseJoinSessionPopup(ControllerIndex_t controllerIndex);
netadr_t *Live_GetPlayerAddr(netadr_t *result, SessionData *session, const ClientNum_t clientNum);
BOOL Live_PlayerHasLoopbackAddr(SessionData *session, const ClientNum_t clientNum);
ClientNum_t Session_FindRegisteredUser(const SessionData *session, const unsigned __int64 xuid);
bool Session_IsUserRegistered(const SessionData *session, const ClientNum_t clientNum);
unsigned __int64 Session_GetXuid(const SessionData *session, const ClientNum_t clientNum);
unsigned __int64 Session_GetXuidEvenIfInactive(const SessionData *session, const ClientNum_t clientNum);
netadr_t *Live_GetPlayerNetAddr(netadr_t *result, const SessionData *session, const ClientNum_t clientNum);
bool Live_IsClientRegistered(const SessionData *session, const ClientNum_t clientNum);
ClientNum_t Live_GetOurClientNum(ControllerIndex_t controllerIndex, SessionData *session);
int Session_CurrentFlags(SessionData *session);
int Session_PublicSlots(const SessionData *session);
int Session_PrivateSlots(SessionData *session);
unsigned __int64 Session_GetNonce(SessionData *session);
void Session_SetNonce(SessionData *session, unsigned __int64 nonce);
XSESSION_INFO *Session_GetXNKId(SessionData *session);
bool Session_Started(SessionData *session);
void Live_UpdatePlayerNetAddr(SessionData *session, const ClientNum_t clientNum, const netadr_t *addr);
void Live_UpdatePlayerInAddr(;
void Live_UpdatePlayerAddr(SessionData *session, const ClientNum_t clientNum, const netadr_t addr);
void Session_Init();
void Session_QoSListenStart(SessionData *session);
bool Session_IsControllerValidForCreatingSession(ControllerIndex_t controllerIndex, int requiredSigninState);
int Session_GetSessionCreateController(int requiredSigninState);
char Session_StartClient(;
bool Session_NeedToSyncParams(SessionData *session, const int numPublic, const int numPrivate, const int flags);
bool Session_ModifyInProgress();
bool Session_CreateInProgress();
bool Session_SearchInProgress();
void Session_CheckSessionTaskBySession(TaskRecord *task, void *inData);
char Session_SessionTasksInProgress(SessionData *session);
bool Session_CreateInProgress(SessionData *session);
void Session_CancelIndividualSessionTasks(SessionData *session);
void Session_CancelSessionTasks(SessionData *session);
void Session_WaitOnSessionTasks(SessionData *session);
void Session_WaitForTaskToComplete(TaskRecord *sessionTask, int startTime, int timeOut);
void Session_FinishOngoingSessionJoinTasksForXUID(SessionData *session, unsigned __int64 player);
SessionData *Session_GetCurrentSession();
void Session_UnregisterRemotePlayer(SessionData *session, const ClientNum_t slot);
void Session_EndGameSession(SessionData *session);
int Session_GetFreeSessionGraveYardSlot();
void Session_DeleteSession(SessionData *session, bool deleteNow);
void Session_DeleteSession(SessionData *session);
void Session_StartHost(;
void Session_FinishModify();
void Session_StartGameSession(const ControllerIndex_t localControllerIndex, SessionData *session);
void Session_RemoveAllPlayersFromSession(SessionData *session);
void Session_CleanUpSearches();
void Session_EmptyGraveYard();
void Session_EndOngoingSessionTasksForLeave(SessionData *session);

//t6/code/src_noserver/live/live_sessions_delegate.cpp
void HostDelegate_UpdateState(hostDelegationState_t newState);
BOOL HostDelegate_AreWeSessionOwner();
BOOL HostDelegate_ShouldSendPartyState();
void HostDelegate_RegisterPlayer(unsigned __int64 playerXUID, netadr_t playerAddr);
char HostDelegate_CurrentlyDelegating();
char anyPotentialDelegates();
void cleanupSessionDetails();
void HostDelegate_UnregisterPlayer(unsigned __int64 playerXUID);
char HostDelegate_Choose();
BOOL HostDelegate_IsCurrentHostValid();
bool sendHostDelegateCmd(netadr_t to);
char HostDelegate_ResendDelegateCmd();
void HostDelegate_Frame();
BOOL packetIsFromDelegate(netadr_t from);
void hostDelegateHandleSessionCreate(;
void HostDelegate_Init();
void HostDelegate_HandlePacket(LocalClientNum_t clientNum, netadr_t from, msg_t *msg);

//t6/code/src_noserver/live/live_sessions_dw.cpp
void Session_DeleteDWSession();
char Session_DeleteSessionSuccess();
char Session_DeleteSessionFailure();
void Session_QoSUpdate_Platform();
void Session_QoSListenStart_Platform(SessionData *session);
void Session_QoSListenStop(SessionData *session);
char Session_CreateHostSessionFailure(TaskRecord *task);
char Session_CreateNonMatchmakingSessionFailure(TaskRecord *task);
char Session_CreateNonMatchmakingSessionSuccess(TaskRecord *task);
bool Session_StartClient_Platform(;
void Session_Modify(;
char Session_ModifySessionSuccess(TaskRecord *task);
void Session_JoinSession(;
void Session_LeaveSession(SessionData *session, const ClientNum_t registeredUserSlot);
void Session_RegisterRemotePlayer(;
void Session_EveryoneLeaveSessionAsync(const ControllerIndex_t localControllerIndex, SessionData *session);
TaskRecord *Session_StartHostCreateTask_Platform(ControllerIndex_t controllerIndex, int sessionFlags);
int Session_StartHost_Platform_DW(;
void Session_ChangeAdvertisedStatus(bool onOff, bool force);
void Live_SetSkill(const float skill);
void Session_StartDeleteHandle(SessionData *session);
char Session_CreateHostSessionSuccess(TaskRecord *task);
int Session_CreateNonMatchmakingSession(TaskRecord *task);
char Session_ModifySessionFailure(TaskRecord *task);
char Session_FindSessionsFailure(TaskRecord *task);
char Session_FindSessionsSuccess(TaskRecord *task);

//t6/code/src_noserver/live/live_sessions_win.cpp
int Session_StartHost_Platform(;
void Session_Init_Platform();

//t6/code/src_noserver/live/live_stats.cpp
bool LiveStats_IsUsingLoadoutStats();
unsigned int LiveStats_GetDDLHeaderVersion(unsigned __int8 *statsBuffer);
int LiveStats_CanPerformStatOperation(ControllerIndex_t controllerIndex);
int LiveStats_GetStat(;
int LiveStats_GetUIntStat(;
ddlValue_t LiveStats_GetInt64Stat(;
const GfxViewParms *LiveStats_GetStringStat(;
bool LiveStats_GetStatsDDLSizeByFile(const char *ddlFileName, int version, int *size);
unsigned int LiveStats_ChecksumGamerStats(unsigned __int8 *buffer, const int len);
void LiveStats_SetDInt64StatFromBuffer(;
void LiveStats_SetDInt64Stat(;
bool LiveStats_IsStableStatsBufferInitialized(const ControllerIndex_t controllerIndex);
void LiveStats_SetItemStat(;
unsigned int LiveStats_GetItemStat(;
const char *LiveStats_GameHistory_GetModeName();
unsigned int LiveStats_GameHistory_GetMatchStatUInt(;
bool LiveStats_GameHistory_SetMatchStatUInt(;
bool LiveStats_GameHistory_SetMatchStatFloat(;
void LiveStats_GameHistory_InitializeHitLocationsArray(;
void LiveStats_Probation_GetProbationQuitTypeCost(eGameModes gamemode, float (*quitTypeCost)[5]);
bool StringBeginsWith(const char *prefix, const char *name);
int LiveStats_GetNumRecentlyUnlockedItems(ControllerIndex_t controllerIndex);
int LiveStats_GetRecentlyUnlockedItemIndex(ControllerIndex_t controllerIndex, unsigned int itemNum);
unsigned int LiveStats_CompressStats(;
void LiveStats_DecompressStats(unsigned __int8 *statsDestBuffer, int numCompressedPackets);
BOOL LiveStats_ValidateChecksum(unsigned __int8 *buffer, const int len);
BOOL LiveStats_ValidateBuffer(unsigned __int8 *buffer, int bufferSize);
char LiveStats_ParsePathToState(const char *path, ddlState_t *destState);
unsigned __int8 LiveStats_GetRecentUnlocks(const ControllerIndex_t controllerIndex);
double LiveStats_UpdateSkillAndVariance_Score(int count, PlayerSkill *players);
void LiveStats_SkillTestCmd();
bool LiveStats_CheckValidDelta(statsDelta_t *delta, int currentDelta);
void LiveStats_CheckForModUnlocks(;
void LiveStats_CheckForTokenUnlocks(;
bool LiveStats_HasRecentItemAttachmentsUnlocked(;
bool LiveStats_IsItemAttachmentRecentlyUnlocked(;
void LiveStats_StatReadDDLCommand(int cmdArgcStartPos, statsLocation statsLoc);
void LiveStats_StatReadDDLExtCmd();
void LiveStats_StatReadDDLCmd();
void LiveStats_StatWriteDDLCmdInternal(bool localize);
void LiveStats_StatWriteDDLCmd();
void LiveStats_StatWriteFromLocalizedStrCmd();
void LiveStats_ClearCustomClassWarning(const ControllerIndex_t controllerIndex);
void LiveStats_ClearStatsWarning(const ControllerIndex_t controllerIndex);
bool LiveStats_CheckClassVersion(const ControllerIndex_t controllerIndex);
ddlState_t *LiveStats_GetRootDDLState();
ddlDef_t *LiveStats_GetStatsDDL();
ddlDef_t *LiveStats_GetClassSetsDDL();
const CACRoot *LiveStats_GetCACRoot(;
const CACRoot *LiveStats_GetCACRoot(const CACRoot *result, unsigned __int8 *buffer);
const CACRoot *LiveStats_GetCustomMatchCACRoot(const CACRoot *result, const ControllerIndex_t controllerIndex);
const CACRoot *LiveStats_GetLeagueCACRoot(const CACRoot *result, const ControllerIndex_t controllerIndex);
char LiveStats_WriteXUIDToStats(const ControllerIndex_t controllerIndex);
void LiveStats_ClearXUIDInStableStats(const ControllerIndex_t controllerIndex);
unsigned int LiveStats_ReadXUIDFromStatsBuffer(unsigned __int8 *buff);
void LiveStats_SetBufferInitialised(const ControllerIndex_t controllerIndex, bool isInitialised);
void LiveStats_SetOnlineRankedState(unsigned __int8 *buffer, bool value);
bool LiveStats_GetOnlineRankedState(unsigned __int8 *buffer);
void LiveStats_SetOnlineZombieState(unsigned __int8 *buffer, bool value);
bool LiveStats_GetOnlineZombieState(unsigned __int8 *buffer);
BOOL LiveStats_IsSettingOnlineStatsAllowed();
void LiveStats_GetNemesisXuid(const ControllerIndex_t controllerIndex, unsigned __int64 *nemesisXuid);
int LiveStats_MoveToDemonwareFlags(ddlState_t *searchState, demonwareFlags_e flags);
void LiveStats_SetDemonwareFlag(const ControllerIndex_t controllerIndex, demonwareFlags_e flags, int value);
void LiveStats_CheckPrestigeFiles(const ControllerIndex_t controllerIndex);
void LiveStats_BackupAllStats(unsigned __int8 *inBuffer, unsigned __int8 *outBuffer);
void LiveStats_PrestigeAddCACCmd();
bool LiveStats_ParsePathToDeltaState(const char *path, int currentDelta);
void LiveStats_BuildStatsDeltaTable();
char *LiveStats_GetGameTypeString();
int LiveStats_MoveToPlayerStatPath(ddlState_t *resultState, const char *statName, const char *statType);
int LiveStats_MoveToCurrentGameTypeStatPath(;
int LiveStats_MoveToWeaponStatPathZombie(;
int LiveStats_MoveToWeaponStatPath(;
int LiveStats_MoveToWeaponXPPath(ddlState_t *resultState, int weaponStatIndex);
int LiveStats_MoveToAttachmentStatPathZombie(;
int LiveStats_MoveToAttachmentStatPath(;
int LiveStats_MoveToGroupStatPathZombie(;
int LiveStats_MoveToGroupStatPath(;
int LiveStats_MoveToUnlockPath(ddlState_t *resultState, int tokenIndex);
void ddlTestFixedPoint_f();
void ddlTestFloat_f();
void ddlTestBool_f();
ddlState_t *LiveStats_GetRankXPState();
void LiveStats_SetMOTDViewed(const ControllerIndex_t controllerIndex, int viewTime, int viewVersion);
void LiveStats_SetMOTDViewedCmd();
void LiveStats_SetVotingDemonwareFlags(;
void LiveStats_IncrementVotingMenuViewedCount(const ControllerIndex_t controllerIndex);
void LiveStats_SetDemonwareFlagsWithUTCTime(;
void LiveStats_SetVotingMenuViewedCmd();
void LiveStats_SetVoteCmd();
void LiveStats_SetVoteOptOutCmd();
void LiveStats_SetDSPPromotionOptOutCmd();
void LiveStats_SetDSPPromotionViewedCmd();
void LiveStats_SetGhostUpsellOptOutCmd();
void LiveStats_SetGhostUpsellViewedCmd();
void LiveStats_SetSPReminderViewedCmd();
void LiveStats_SetupStates();
void LiveStats_InitGameTypes();
int LiveStats_GetGameTypeIndex(const char *gameTypeRef, bool isHardcore);
int LiveStats_GetGameTypeIndexFromRef(const char *gameTypeRef);
int LiveStats_GetGameTypeNameHash(int index);
char *LiveStats_GetGameTypeName(int index);
void LiveStats_UpdateContentData(const ControllerIndex_t controllerIndex);
int LiveStats_GetStatsDDLSize();
char LiveStats_ShouldSetStats();
int LiveStats_GetIntPlayerStatInternal(int pathDepth, const char **statPath, unsigned __int8 *buffer);
int LiveStats_GetIntStatFromPath(const char *statPath, unsigned __int8 *buffer);
int LiveStats_GetIntPlayerStatFromBuffer(const char *statName, unsigned __int8 *buffer);
int LiveStats_GetIntPlayerStatFromPath(const ControllerIndex_t controllerIndex, const char *statPath);
int LiveStats_GetIntPlayerStat(const ControllerIndex_t controllerIndex, const char *statName);
int LiveStats_GetIntPlayerStatByMap(;
int LiveStats_GetIntPlayerStatByKey(const ControllerIndex_t controllerIndex, playerStatsKeyIndex_t keyIndex);
bool LiveStats_SetIntPlayerStatInternal(;
int LiveStats_GetIntPlayerStatMatchDelta(const ControllerIndex_t controllerIndex, const char *statName);
int LiveStats_GetIntPlayerStatMatchDeltaFromPath(const ControllerIndex_t controllerIndex, const char *statPath);
bool LiveStats_SetIntPlayerStat(;
bool LiveStats_SetIntPlayerStatByMap(;
int LiveStats_GetPlayerStatByKeyFromBuffer(playerStatsKeyIndex_t key, unsigned __int8 *buffer);
int LiveStats_GetStatsVersion(const ControllerIndex_t localControllerIndex);
void LiveStats_RestoreStatsFromStable(;
void LiveStats_SecurityErrorDetected(const ControllerIndex_t controllerIndex);
void LiveStats_SetStatByKey(;
// void LiveStats_StatSetByNameCmd(unsigned int a1@<edi>);
void LiveStats_StatAddByNameCmd();
void LiveStats_StatGetByNameInDvarCmd();
char LiveStats_CheckXUIDAndReport(const ControllerIndex_t controllerIndex);
unsigned int LiveStats_GetPlayerStat(const char *statsList, const char *statName, unsigned __int8 *buffer);
int LiveStats_GetLastGameWeaponStat(;
void LiveStats_UpdateBestWeaponIndexAAR(unsigned __int8 *liveStatsBuffer, unsigned __int8 *oldStatsBuffer);
void LiveStats_SetPlayerStat(;
bool LiveStats_UpdatetBestMatchAccuracy(unsigned __int8 *liveStatsBuffer, unsigned __int8 *oldStatsBuffer);
bool LiveStats_UpdatetBestMatchKdRatio(unsigned __int8 *liveStatsBuffer, unsigned __int8 *oldStatsBuffer);
void LiveStats_GameHistory_GetCompletionInfo(;
bool LiveStats_GameHistory_IncCompletionStat(;
void LiveStats_GameHistory_AddMatchHistory(;
void LiveStats_GameHistory_AddMatchCompleted(const ControllerIndex_t localControllerIndex, bool hosted);
void LiveStats_GameHistory_AddMatchTimeout(const ControllerIndex_t localControllerIndex, bool hosted);
void LiveStats_GameHistory_InitializeMatchHistory(ClientNum_t clientNum, unsigned int gameTypeIndex);
void LiveStats_GameHistory_InitializeHitLocations(ClientNum_t clientNum);
void LiveStats_GameHistory_StartMatch(ClientNum_t clientNum, unsigned int gameTypeIndex);
bool LiveStats_GameHistory_MoveToCurrentHistory(;
bool LiveStats_GameHistory_MoveToHistory(;
void LiveStats_GameHistory_FinishMatch(;
void LiveStats_GameHistory_FinishMatch(;
char LiveStats_Probation_GiveProbation(;
bool LiveStats_Probation_MoveToMatchHistory(;
void LiveStats_GameHistory_ClearMatchStats(const ControllerIndex_t controllerIndex, const char *gamemode);
void LiveStats_Probation_ValidateProbationVersion(const ControllerIndex_t controllerIndex, eGameModes gamemode);
bool LiveStats_Probation_CheckInProbation(;
bool LiveStats_Probation_ShouldCheckProbation(const ControllerIndex_t controllerIndex, eGameModes gamemode);
float LiveStats_Probation_GetProbationPoints(;
;
void LiveStats_Probation_ForgiveProbation(;
void LiveStats_Probation_ReportProbationStats(const ControllerIndex_t controllerIndex, eGameModes gamemode);
;
void LiveStats_Theater_IncrementStat(;
void LiveStats_GameHistory_DumpMatchStats(const ControllerIndex_t controllerIndex, const char *gamemode);
void LiveStats_GameHistory_ClearProbation(const ControllerIndex_t controllerIndex, const char *gamemode);
void LiveStats_GameHistory_GiveProbation(const ControllerIndex_t controllerIndex, const char *gamemode);
// void LiveStats_GameHistory_FinishMatch(ddlState_t *a1@<edi>, const ControllerIndex_t controllerIndex);
// void LiveStats_GameHistory_TimeoutMatch(ddlState_t *a1@<edi>, const ControllerIndex_t controllerIndex);
int LiveStats_GetTotalMatchesPlayed(const ControllerIndex_t controllerIndex);
void LiveStats_DumpMatchStatsCmd();
void LiveStats_ClearMatchStatsCmd();
void LiveStats_ClearProbationCmd();
void LiveStats_GiveProbationCmd();
void LiveStats_SetLobbyPopup(const ControllerIndex_t controllerIndex, const char *menuName);
char LiveStats_ValidateStatsBackup(const ControllerIndex_t controllerIndex);
bool LiveStats_MoveToSkillAndVariance(ddlState_t *skillState, ddlState_t *varianceState);
bool LiveStats_GetSkillAndVariance(const ControllerIndex_t controllerIndex, float *skill, float *variance);
void LiveStats_StoreOriginalValues(const ControllerIndex_t controllerIndex, unsigned __int8 *statsBuffer);
void LiveStats_CheckVsOriginalValues(const ControllerIndex_t controllerIndex);
statsValidation_t LiveStats_AreStatsDeltasValid(;
void LiveStats_CheckScoreInfoTable();
void LiveStats_ResetAttachmentChallenges(;
void LiveStats_ResetGroupChallenges(;
void LiveStats_ResetGlobalChallenges(;
void LiveStats_ResetWeaponChallenges(;
void LiveStats_PushMatchesPlayedMilestonesToElite(const ControllerIndex_t controllerIndex);
void LiveStats_IncrementPlayerLeanMatchesCount(const ControllerIndex_t controllerIndex);
unsigned int LiveStats_GetClanTagFeature(const ControllerIndex_t controllerIndex);
char LiveStats_SetClanTagText(const ControllerIndex_t controllerIndex, const char *clanName);
int LiveStats_GetPrestige(const ControllerIndex_t controllerIndex);
BOOL LiveStats_GetGametypeBan(const ControllerIndex_t controllerIndex);
int LiveStats_GetCurrency(const ControllerIndex_t controllerIndex);
int LiveStats_GetIntZombieStatByKey(const ControllerIndex_t controllerIndex, zombieStatsKeyIndex_t keyIndex);
int LiveStats_GetZombieWeightedRoundsPlayed(const ControllerIndex_t controllerIndex);
int LiveStats_GetZombieWeightedDowns(const ControllerIndex_t controllerIndex);
int LiveStats_GetZombieTimePlayedTotal(const ControllerIndex_t controllerIndex);
int LiveStats_GetIntPlayerStatByLocationGameType(;
void LiveStats_TrackSpending(const ControllerIndex_t controllerIndex, int currencyAmount);
// char LiveStats_SpendCurrency@<al>(;
bool LiveStats_DoXUIDsMatch(const ControllerIndex_t controllerIndex);
void LiveStats_InitStatsBuffer(;
void LiveStats_ResetStats(;
char LiveStats_GetConsoleDetails(unsigned __int8 *consoleLocalIP, unsigned __int8 *consoleExternalIP);
void LiveStats_CheckUnlockTokens(const ControllerIndex_t controllerIndex);
void LiveStats_DoSecurityChecks(const ControllerIndex_t controllerIndex);
void LiveStats_DoSecurityChecksCmd();
void LiveStats_PrestigeStatsResetAllCmd();
void LiveStats_PrestigeRespecCmd();
char *LiveStats_MoveToGameTypeStatPath(;
// void LiveStats_SetRankXP(unsigned int a1@<esi>, ControllerIndex_t controllerIndex, unsigned int rankXP);
// void LiveStats_SetRankXPCmd(unsigned int a1@<esi>);
void LiveStats_SetZombieRank(ControllerIndex_t controllerIndex, unsigned int rank, unsigned int daysPlayed);
void LiveStats_SetZombieRankCmd();
void LiveStats_SetStatChangedInternal(;
void LiveStats_SetStatChanged(const ControllerIndex_t controllerIndex, const char *hexMsg, int isMoreComing);
void LiveStats_SetStatChangedNoCache(;
// void LiveStats_PreGame(unsigned int a1@<edi>, const ControllerIndex_t controllerIndex);
void LiveStats_MakeStableStatsBuffer(const ControllerIndex_t controllerIndex);
void LiveStats_CopyFromSponsor(const ControllerIndex_t controllerIndex);
void LiveStats_ResetGametypeChallenges(;
int LiveStats_GetRank(const ControllerIndex_t controllerIndex);
int LiveStats_GetZombieLastDaysPlayed(const ControllerIndex_t controllerIndex);
bool LiveStats_SetLeaderboardCombinedRankZombie(const ControllerIndex_t controllerIndex);
void LiveStats_SetCheckSumFromServer(const char *checkSumMsg);
void LiveStats_PublishNews(const ControllerIndex_t controllerIndex);
void LiveStats_ShowStatsError(const ControllerIndex_t localControllerIndex);
void LiveStats_ValidateStats(const ControllerIndex_t controllerIndex);
void LiveStats_PrestigeResetChallenges(const ControllerIndex_t controllerIndex);
int LiveStats_GetCurrentChallengeIndex(;
void LiveStats_GetCurrentchallengeRowCmd();
void LiveStats_CheckAchievements(const ControllerIndex_t controllerIndex);
char LiveStats_CompareStatsVsStableBuffer(const ControllerIndex_t controllerIndex, bool onlyCheckValidStats);
// void LiveStats_PrestigeStatsResetCmd(unsigned int a1@<edi>);
void LiveStats_CompareStatsVsStableBufferCmd();
void LiveStats_Init();

//t6/code/src_noserver/live/live_steam.cpp
bool LiveSteam_isVacAuthorized();
bool LiveSteam_IsInitialized();
unsigned __int64 LiveSteam_GetUserSteamIDAsXUID();
void LiveSteam_ShowStore(unsigned int appID);
void __thiscall LiveSteam_ShowFriendsList(void *this);
int LiveSteam_GetAppID();
void LiveSteam_Shutdown();
void LiveSteam_Frame();
int Utf8SymbolSize(char utf8Byte1);
int LiveSteam_FilterPersonaName(char *utf8Name, bool asciionly);
void Utf8safe_strncpyz(char *dest, const char *src, int destsize);
BOOL LiveSteam_isValidAppId(unsigned int appId);
int LiveSteam_GetAppIdForContentPack(const int contentPack);
int LiveSteam_GetContentPackForSteamAppID(unsigned int steamAppID);
int LiveSteam_SetContentPack(const int contentPack);
void LiveSteam_Client_SteamDisconnect();
;
void LiveSteam_Init();
char *LiveSteam_FriendPersonaNameFromXuid(unsigned __int64 xuid, char *buff, int size, bool asciionly);
unsigned int LiveSteam_Client_ConnectToSteamServer(;

//t6/code/src_noserver/live/live_steam_achievements.cpp
void LiveSteam_Achievements_Frame();
void LiveSteam_GiveAchievement(const char *achievementName);
void LiveSteam_Achievements_Shutdown();

//t6/code/src_noserver/live/live_steam_server.cpp
void SV_SteamAuthClientRequest(netadr_t to, unsigned __int64 serverSteamID);
int FindClient(unsigned __int64 liveUserID);
void RunClientChecks(const int clientNum);
// void __thiscall LiveSteamServer::OnSteamServersConnected(LiveSteamServer *this, SteamServersConnected_t *pLogonSuccess);
// void __thiscall LiveSteamServer::OnSteamServerConnectFailure(;
// void __thiscall LiveSteamServer::OnSteamServersDisconnected(;
// void __thiscall LiveSteamServer::OnPolicyResponse(LiveSteamServer *this, GSPolicyResponse_t *pPolicyResponse);
// void __thiscall LiveSteamServer::KickClientFromSteamGameServer(;
// void __thiscall LiveSteamServer::OnGSClientApprove(LiveSteamServer *this, GSClientApprove_t *pGSClientApprove);
// void __thiscall LiveSteamServer::OnGSClientDeny(LiveSteamServer *this, GSClientDeny_t *pGSClientDeny);
// void __thiscall LiveSteamServer::OnGSClientKick(LiveSteamServer *this, GSClientKick_t *pGSClientKick);
unsigned int LiveSteam_Server_InitErroExceptionFilter(unsigned int code, _EXCEPTION_POINTERS *info);
void LiveSteam_Server_HandleInitError(const char *error);
void LiveSteam_Server_ClientSteamAuthentication(;
unsigned int LiveSteam_Server_SetCurrentDlcAppID(unsigned int steamAppID);
void LiveSteam_Server_ClientSteamDisconnect(unsigned __int64 clientSteamID);
// void __thiscall LiveSteamServer::~LiveSteamServer(LiveSteamServer *this);
// void __thiscall LiveSteamServer::LiveSteamServer(LiveSteamServer *this, unsigned int ip);
void LiveSteam_Server_Shutdown();
void LiveSteam_Server_Init(const char *mapname);
// void __thiscall LiveSteamServer::RunFrame(LiveSteamServer *this);
void LiveSteam_Server_Frame();

//t6/code/src_noserver/live/live_storage.cpp
void LiveStorage_CorrectStatsError(const char *msg);
void LiveStorage_VerifyCorrectStats(persistentStats *stats, statsLocation location);
persistentStats *LiveStorage_GetPersStatsBuffer(;
// persistentStats *LiveStorage_GetStatsBufferForDownload@<eax>(;
int LiveStorage_GetStatsBufferSize();
classSets_t *LiveStorage_GetClassSetsBuffer(const ControllerIndex_t controllerIndex);
// bool LiveStorage_GetStatsChecksumValid@<al>(statsLocation a1@<edx>, const ControllerIndex_t controllerIndex);
void LiveStorage_SetStatsChecksumValid(;
// bool LiveStorage_AreStatsDDLValidated@<al>(statsLocation a1@<edx>, const ControllerIndex_t controllerIndex);
void LiveStorage_SetStatsDDLValidated(;
void LiveStorage_StatsBackupFetchCompleted(const ControllerIndex_t controllerIndex);
// bool LiveStorage_DoWeHaveStats@<al>(statsLocation a1@<edx>, const ControllerIndex_t controllerIndex);
bool LiveStorage_DoWeHaveCurrentStats(const ControllerIndex_t controllerIndex);
bool LiveStorage_DoWeHaveAllStats(const ControllerIndex_t controllerIndex);
void LiveStorage_SetStatsFetched(;
void LiveStorage_DisableStatsUpload(const ControllerIndex_t localControllerIndex);
bool LiveStorage_IsStatsUploadDisabled(const ControllerIndex_t localControllerIndex);
EUserTier getTierForGamertag(const char *gamertag, unsigned __int64 xuid);
void LiveStorage_ParseUserTiers();
bool Live_CanGamertagUseRestrictedClanTag(const char *gamertag, unsigned __int64 xuid);
TaskRecord *LiveStorage_SetupNestedTask(;
void LiveStorage_ResetFileInfo(dwFileOperationInfo *fileInfo);
void LiveStorage_UpdateFileTryData(fileRetryInfo *retryInfo);
char LiveStorage_TryFile(fileRetryInfo *retryInfo);
char LiveStorage_DeleteUserFileFailure(TaskRecord *task);
char LiveStorage_DeleteUserFileSuccess(TaskRecord *task);
char LiveStorage_WriteUserFileFailure(TaskRecord *task);
char LiveStorage_WriteUserFileSuccess(TaskRecord *task);
TaskRecord *LiveStorage_WriteDWUserFile(;
char LiveStorage_GetUserFileFailure(TaskRecord *task);
TaskRecord *LiveStorage_ReadDWFile(const ControllerIndex_t controllerIndex, dwFileOperationInfo *fileInfo);
TaskRecord *LiveStorage_ReadDWFileByUserID(;
void LiveStorage_CopyClassSetsFromSponsor(;
void LiveStorage_SetClassSetsWriteNeeded(const ControllerIndex_t controllerIndex, bool writeNeeded);
bool LiveStorage_WriteClassSetsFailure(TaskRecord *task);
void LiveStorage_TrackUsedClassSets(const ControllerIndex_t controllerIndex);
TaskRecord *LiveStorage_WriteClassSets(const ControllerIndex_t controllerIndex, char *customFileName);
int LiveStorage_PlayerStatsFileNotFound(const ControllerIndex_t controllerIndex, void *data);
char LiveStorage_KeyArchiveWriteComplete(TaskRecord *task);
char LiveStorage_KeyArchiveWriteFailed(TaskRecord *task);
char LiveStorage_KeyArchiveReadComplete(TaskRecord *task);
char LiveStorage_KeyArchiveReadFailed(TaskRecord *task);
TaskRecord *LiveStorage_GetXPGroupsKeyArchive(;
bool LiveStorage_GetServerTimeComplete();
char LiveStorage_GetServerTimeFailed();
int LiveStorage_GetUTC();
int LiveStorage_GetUTCOffset();
bool LiveStorage_IsTimeSynced();
void LiveStorage_WriteMetPlayerListSuccessful(const ControllerIndex_t controllerIndex);
TaskRecord *LiveStorage_WriteMetPlayerList(;
int LiveStorage_OtherPlayerStatsFileNotFound(const ControllerIndex_t controllerIndex, void *data);
TaskRecord *LiveStorage_ReadCommonStats(;
int LiveStorage_CalculateParity(;
void LiveStorage_CheckParityBits(;
void LiveStorage_AppendParityToStats(;
TaskRecord *LiveStorage_WriteBackupStatsInternal(;
void LiveStorage_BackupCorruptedStatsDecompressError(;
void LiveStorage_SetAllStatsNotFetched(const ControllerIndex_t controllerIndex);
fileShareLocation LiveStorage_FileShare_GetCurrentHTTPLocation(ControllerIndex_t controllerIndex);
void LiveStorage_FileShare_GetDownloadProgress(;
void LiveStorage_FileShare_GetUploadProgress(;
BOOL LiveStorage_FileShare_IsReady(const ControllerIndex_t controllerIndex, bool allowRead);
void LiveStorage_FileShare_AbortOperation(const ControllerIndex_t controllerIndex, fileShareLocation location);
TaskRecord *LiveStorage_FileShare_ReadListing(;
char LiveStorage_FileShare_ReadListingFailure(TaskRecord *task);
int LiveStorage_FileShareSortComparator_MostRecent(const void *arg0, const void *arg1);
void LiveStorage_FileShare_LoadBlockSuccessAction(;
void LiveStorage_FileShare_DownloadFile_f();
char LiveStorage_FileShare_SearchFailure(TaskRecord *task);
unsigned int LiveStorage_FileShare_ReadFileData(;
unsigned int LiveStorage_FileShare_GetDownloadingFileTotalSize(const ControllerIndex_t controllerIndex);
ControllerIndex_t LiveStorage_FileShare_GetUploadingFileTotalSize(const ControllerIndex_t controllerIndex);
// unsigned int __thiscall fileShareDownloadInterceptor::handleDownload(;
char LiveStorage_FileShare_ReadFileFailure(TaskRecord *task);
char LiveStorage_FileShare_ReadFileSuccess(TaskRecord *task);
char *LiveStorage_GetDWDownloadBuffer();
int LiveStorage_GetDWDownloadBufferSize();
unsigned int LiveStorage_FileShare_WriteFileData(;
// unsigned int __thiscall fileShareUploadInterceptor::handleUpload(;
BOOL LiveStorage_FileShare_ReadFileIsInProgress(const ControllerIndex_t controllerIndex);
BOOL LiveStorage_FileShare_WriteFileIsInProgress(const ControllerIndex_t controllerIndex);
char LiveStorage_FileShare_WriteFileFailure(TaskRecord *task);
char LiveStorage_FileShare_WriteFileSuccess(TaskRecord *task);
BOOL LiveStorage_FileShare_ParseDownloadedMatchData(;
TaskRecord *LiveStorage_FileShare_WriteSummary(;
char LiveStorage_FileShare_WriteSummaryFailure(TaskRecord *task);
char LiveStorage_FileShare_WriteSummarySuccess(TaskRecord *task);
BOOL LiveStorage_FileShare_ReadSummaryInProgress();
TaskRecord *LiveStorage_FileShare_ReadSummary(;
char LiveStorage_FileShare_ReadSummaryFailure(TaskRecord *task);
char LiveStorage_FileShare_ReadSummarySuccess(TaskRecord *task);
TaskRecord *LiveStorage_FileShare_ReadMetaDataByID(;
char LiveStorage_FileShare_ReadMetaDataByIDFailure(TaskRecord *task);
char LiveStorage_FileShare_ReadMetaDataByIDSuccess(TaskRecord *task);
TaskRecord *LiveStorage_FileShare_RemoveFile(;
char LiveStorage_FileShare_RemoveFileFailure(TaskRecord *task);
char LiveStorage_FileShare_RemoveFileSuccess(TaskRecord *task);
TaskRecord *LiveStorage_FileShare_TransferFile(;
char LiveStorage_FileShare_TransferFileFailure(TaskRecord *task);
char LiveStorage_FileShare_TransferFileSuccess(TaskRecord *task);
char LiveStorage_FileShare_ReadTopRatedFailure(TaskRecord *task);
bool LiveStorage_UserFileListAvailable(const ControllerIndex_t controllerIndex);
void LiveStorage_AssertDWConnectionCmd();
;
void LiveStorage_FakeComErrorCmd();
void LiveStorage_CopyStatsBuffer(;
// char LiveStorage_VerifyStatsPresent@<al>(;
persistentStats *LiveStorage_GetStatsBufferWithCaller(;
// bool LiveStorage_GetStatsWriteNeeded@<al>(;
void LiveStorage_SetStatsWriteNeeded(;
int LiveStorage_ValidateWithDDL(ControllerIndex_t controllerIndex, statsLocation location);
void LiveStorage_FetchRequiredFiles(const ControllerIndex_t controllerIndex);
void LiveStorage_GetUserFileDecompressError(TaskRecord *task);
char LiveStorage_GetUserFileSuccess(TaskRecord *task);
char LiveStorage_IsPublicStatsCorrectState(const ControllerIndex_t controllerIndex, statsLocation location);
void LiveStorage_ResetClassSets(const ControllerIndex_t controllerIndex);
int __thiscall LiveStorage_ClassSetsFileNotFound(void *this);
void LiveStorage_ReadClassSetsSuccessful(const ControllerIndex_t controllerIndex, void *data);
TaskRecord *LiveStorage_ReadClassSets(const ControllerIndex_t controllerIndex);
void LiveStorage_ReadOtherPlayerStatsSuccessful(;
void LiveStorage_CheckEmptyStats(const ControllerIndex_t controllerIndex, int decompressedSize);
TaskRecord *LiveStorage_SyncTime(ControllerIndex_t controllerIndex);
TaskRecord *LiveStorage_ReadOtherPlayerStats(;
TaskRecord *LiveStorage_WriteStats(;
bool LiveStorage_WritePlayerStatsFailure(TaskRecord *task);
TaskRecord *LiveStorage_WritePlayerStats(const ControllerIndex_t controllerIndex);
void LiveStorage_WriteBackupStats(const ControllerIndex_t controllerIndex);
void LiveStorage_BackupStatsToFile(;
char LiveStorage_FileShare_ReadListingSuccess(TaskRecord *task);
char LiveStorage_FileShare_LoadBlockFailure(TaskRecord *task);
char LiveStorage_FileShare_LoadBlockSuccess(TaskRecord *task);
char LiveStorage_FileShare_SearchSuccess(TaskRecord *task);
char LiveStorage_FileShare_ReadTopRatedSuccess(TaskRecord *task);
void LiveStorage_UploadStatsForController(const ControllerIndex_t controllerIndex);
void LiveStorage_UploadStats();
void LiveStorage_WriteBackupStatsCmd();
void LiveStorage_GetFriendStatsCmd();
char LiveStorage_GetUserFileListSuccess(TaskRecord *task);
char LiveStorage_GetUserFileListFailure(TaskRecord *task);
bdFileInfo *LiveStorage_UserFileListGetFileDetails(;
void LiveStorage_RestoreStatsFromBackup(const ControllerIndex_t localControllerIndex);
void LiveStorage_RestoreCorrectPublicStatsState(;
void LiveStorage_StatsBackupReadSuccessful(const ControllerIndex_t controllerIndex, void *data);
int LiveStorage_StatsBackupFileNotFound(const ControllerIndex_t controllerIndex, void *data);
void LiveStorage_ReadPlayerStatsSuccessful(const ControllerIndex_t controllerIndex, void *data);
TaskRecord *LiveStorage_ReadStatsBackup(const ControllerIndex_t controllerIndex);
// TaskRecord *LiveStorage_ReadPlayerStats@<eax>(;
void LiveStorage_ReadStats(const ControllerIndex_t controllerIndex, bool validate);
TaskRecord *LiveStorage_FileShare_LoadPage(;
TaskRecord *LiveStorage_FileShare_ReadFile(;
TaskRecord *LiveStorage_FileShare_WriteFile(;
void LiveStorage_ReadStatsBackupCmd();
void LiveStorage_RestoreStatsFromBackupCmd();
char LiveStorage_Init();
char LiveStorage_WaitOnStats(ControllerIndex_t controllerIndex);

//t6/code/src_noserver/live/live_storage_pub.cpp
bool LiveStorage_DoWeHavePlaylists();
bool LiveStorage_DoWeHaveContracts();
int LiveStorage_GetFFOTDVersion();
bool LiveStorage_DoWeHaveLeagues();
const char *LiveStorage_GetOnlineWADFilename();
TaskRecord *LiveStorage_GetFFOTDTimeStamp(ControllerIndex_t controllerIndex);
TaskRecord *LiveStorage_GetOnlineWADTimestamp(ControllerIndex_t controllerIndex);
void LiveStorage_CheckWADTimestampRequired(ControllerIndex_t controllerIndex);
BOOL LiveStorage_DecompressBuffer(;
void LiveStorage_ParseOnlineData();
char LiveStorage_WaitForContentMounting();
char LiveStorage_WaitForGhostLBFetching();
void LiveStorage_FetchOnlineWADSuccessful(const ControllerIndex_t controllerIndex);
int LiveStorage_PublisherStorageFetchOnlineWADNotFound();
TaskRecord *LiveStorage_FetchOnlineWAD(const ControllerIndex_t controllerIndex);
bool LiveStorage_DoWeHaveOnlineWAD();
void LiveStorage_RefetchOnlineWAD();
bool LiveStorage_CompletedPlaylistPopulation();
unsigned __int8 *LiveStorage_GetPlaylistPopulationBuffer();
int LiveStorage_PublisherStorageFetchFFOTDNotFound(const ControllerIndex_t controllerIndex);
void LiveStorage_FetchFFOTDChunkSuccessful(const ControllerIndex_t controllerIndex);
TaskRecord *LiveStorage_FetchFFOTDChunk(ControllerIndex_t controllerIndex, int part);
TaskRecord *LiveStorage_FetchFFOTD(const ControllerIndex_t controllerIndex);
bool LiveStorage_DoWeHaveFFOTD();
unsigned __int8 *LiveStorage_GetFFOTDBuffer();
unsigned int LiveStorage_GetFFOTDSize();
bool LiveStorage_ValidateFFOTD();
void LiveStorage_ExecFFOTDSettings();
void LiveStorage_HandleFFOTDTasks();
void LiveStorage_SetFFOTDVersion_f();
ecc_key *LiveStats_GetPublicKey();
ecc_key *LiveStats_GetPrivateKey();
BOOL LiveStorage_SignedStats_InitPublicKey(const void *buffer, int size);
BOOL LiveStorage_SignedStats_InitPrivateKey(const void *buffer, int size);
int LiveStorage_SignedStatsKeyFileNotFound(const ControllerIndex_t controllerIndex, void *data);
void LiveStorage_SignedStatsKeyFetchSuccessful(const ControllerIndex_t controllerIndex, void *data);
void LiveStorage_FetchSignedStatsKeys(const ControllerIndex_t controllerIndex);
char LiveStorage_DoWeHaveSignedStatsKeys();
char LiveStorage_GetOnlineWADTimestampSuccess(TaskRecord *task);
char LiveStorage_GetOnlineWADTimestampFailure(TaskRecord *task);
char LiveStorage_GetFFOTDTimeStampSuccess(TaskRecord *task);
char Live_StorageGetFFOTDTimeStampFailure(TaskRecord *task);
void LiveStorage_ProcessOnlineWAD();
void LiveStorage_HandlePublisherStorageTasks();

//t6/code/src_noserver/live/live_storage_streambuff.cpp
bool LiveStorage_StreamBuff_Init(;
int LiveStorage_StreamBuff_Write(streamBuffer_t *streamBuff, unsigned __int8 *data, int dataSize);

//t6/code/src_noserver/live/live_storage_win.cpp
dwFileOperationInfo *SV_GetFreeFileOp();
void SV_DumpFileOps();
void SV_UseFileOp();
void SV_FreeFileOp();
void CL_GetXP_f();
void LiveStorage_Init_Platform();

//t6/code/src_noserver/live/live_tracker.cpp
unsigned int LiveTracker_GetColType(trackerColumn_e col);
int LiveTracker_SetItem(int queuePos, trackerColumn_e col, unsigned __int64 ent, int val);
int LiveTracker_GetColumnByName(const char *name);
int LiveTracker_WriteByID(trackerColumn_e col, unsigned __int64 ent, int val);
const StringTable *LiveTracker_WriteByName(const char *colName, unsigned __int64 ent, int val);
BOOL LiveTracker_WriteForAllLocalUsers(trackerColumn_e col, int val);
BOOL LiveTracker_WriteForUserAndHost(;
void LiveTracker_UpdateCmd();
void LiveTracker_ReportUser();
void LiveTracker_StressTestCmd();
void LiveTracker_Init();

//t6/code/src_noserver/live/live_twitch.cpp
char LiveTwitch_IsRegisteredSuccess(TaskRecord *task);
char LiveTwitch_IsRegisteredFailure(TaskRecord *task);
char LiveTwitch_GetAccountSuccess(TaskRecord *task);
char LiveTwitch_GetAccountFailure(TaskRecord *task);
void LiveTwitch_ClearAccount(const ControllerIndex_t localControllerIndex);
TaskRecord *LiveTwitch_RegisterAccount(;
char LiveTwitch_RegisterAccountSuccess(TaskRecord *task);
void LiveTwitch_PrintError(;
char LiveTwitch_UnregisterAccountSuccess(TaskRecord *task);
char LiveTwitch_UnregisterAccountFailure(TaskRecord *task);
void LiveTwitch_Register_f();
void LiveTwitch_UnRegister_f();
// char LiveTwitch_RegisterAccountFailure@<al>(bdLobbyErrorCode a1@<edi>, TaskRecord *task);
void LiveTwitch_Init();

//t6/code/src_noserver/live/live_twitter.cpp
char LiveTwitter_GetAccountSuccess(TaskRecord *task);
char LiveTwitter_GetAccountFailure(TaskRecord *task);
void LiveTwitter_ClearAccount(const ControllerIndex_t localControllerIndex);
char LiveTwitter_RegisterAccountSuccess(TaskRecord *task);
void LiveTwitter_PrintError(;
char LiveTwitter_UnregisterAccountSuccess(TaskRecord *task);
char LiveTwitter_UnregisterAccountFailure(TaskRecord *task);
char LiveTwitter_PostSuccess(TaskRecord *task);
char LiveTwitter_GetInfoSuccess(TaskRecord *task);
char LiveTwitter_GetInfoFailure(TaskRecord *task);
char LiveTwitter_SearchFailure(TaskRecord *task);
// char LiveTwitter_RegisterAccountFailure@<al>(bdLobbyErrorCode a1@<edi>, TaskRecord *task);
// char LiveTwitter_PostFailure@<al>(bdLobbyErrorCode a1@<edi>, TaskRecord *task);
char LiveTwitter_SearchSuccess(TaskRecord *task);

//t6/code/src_noserver/live/live_voice.cpp
int Voice_FindUser(const SessionData *session, const unsigned __int64 xuid);
char Voice_UnregisterRemotePlayer(SessionData *session, const ClientNum_t slot);
int Live_GetConnectedPlayerList(const SessionData *session, unsigned __int64 *playerList);
int Voice_IncomingVoiceData(SessionData *session, ClientNum_t clientNum, unsigned __int8 *data, int size);
int Voice_IsMemberMuted(ControllerIndex_t localControllerIndex, const unsigned __int64 playerXuid);
void Voice_MuteMemberByXuid(const unsigned __int64 playerXuid);
void Voice_UnmuteMemberByXuid(const unsigned __int64 playerXuid);
int Voice_GetTalkingCount(SessionData *session, const ControllerIndex_t localControllerIndex);
void Voice_ClearRemoteTalkers(SessionData *session);
void Voice_EnableMicIfAllowed(SessionData *session);
char Voice_RegisterRemotePlayer(;

//t6/code/src_noserver/live/live_vote.cpp
dwVoteCategory_e LiveVote_History_FileshareToVoteCategory(int fileshareCategory);
int LiveVote_History_GetEntryLinear(int startIndex, unsigned __int64 entityID, dwVoteCategory_e category);
int LiveVote_History_GetEntry(;
int LiveVote_History_SortComparator(const void *a, const void *b);
void LiveVote_History_Sort();
void LiveVote_History_RecordVote(;
// int LiveVote_History_GetVoteForEntity@<eax>(;
void LiveVote_RecentlyLiked_Build(const ControllerIndex_t localControllerIndex);
void LiveVote_RecentlyLiked_Remove(;
void LiveVote_RecentlyLiked_Add(;
char LiveVote_Task_SubmitVoteSuccess(TaskRecord *task);
char LiveVote_Task_SubmitVoteFailure(TaskRecord *task);
TaskRecord *LiveVote_Task_SubmitVote(;
char LiveVote_Task_DownloadHistoryFailure(TaskRecord *task);
void LiveVote_SubmitCmd(dwVote_e vote);
void LiveVote_SubmitLikeCmd();
void LiveVote_SubmitDislikeCmd();
void LiveVote_GetHistoryCmd();
void LiveVote_GetVoteCmd();
void LiveVote_FillVoteHistoryCmd();
void LiveVote_Init();
char LiveVote_Task_DownloadHistorySuccess(TaskRecord *task);

//t6/code/src_noserver/live/live_win.cpp
char IsServerRunning();
SessionData *Live_GetCurrentSession();
char *Live_ControllerIndex_GetClientName(const ControllerIndex_t controllerIndex);
char *Live_ControllerIndex_GetXuidString(const ControllerIndex_t controllerIndex);
int CL_ControllerIndex_GetSignInState(ControllerIndex_t controllerIndex);
int CL_GetFirstActiveSignedInControllerIndex();
void Live_FakeDWDisconnect_f();
void Live_TestNotification_f();
void Live_UpdateInfoForInGameList_f();
void Live_InitPlatform();
char Live_XUIDIsLocalPlayer(const unsigned __int64 player);
ControllerIndex_t Live_GetControllerFromXUID(const unsigned __int64 player);
void Live_GiveAchievement(ControllerIndex_t localControllerIndex, const char *achievementName);
bool Live_AreWeAcceptingInvite();
void Live_AcceptInvite(ControllerIndex_t controllerIndex, InviteMessage *message, unsigned __int64 fromXuid);
char Live_UserGetName(ControllerIndex_t controllerIndex, char *buf, const int bufsize);
bool Live_UserSignedInToLive(const ControllerIndex_t controllerIndex);
EUserTier Live_GetTier(ControllerIndex_t controllerIndex);
void Live_SetTier(ControllerIndex_t controllerIndex, EUserTier tier);
bool Live_IsSystemUiActive();
bool __thiscall Live_ShowFriendsList(void *this);
int Live_GetUploadSpeed();
char Live_BandwidthTestSuccess(TaskRecord *task);
char Live_BandwidthTestFailure(TaskRecord *task);
int Live_RunBandwidthTest(TaskRecord *task);
bool Live_QoSProbeEarlyComplete(dwQoSMultiProbeListener *listener);
void Live_EstimateQoSPercentage(dwQoSMultiProbeListener *listener);
char Live_QoSProbeSuccess(TaskRecord *task);
char Live_QoSProbeFailure(TaskRecord *task);
void Live_CleanUpQoSProbes();
BOOL Live_QoSInProgress();
void Live_InitSigninState();
char *JoinMessageReplyCriteriaError(JoinSessionMessage *message);
char Live_AreWeJoinable(bool fromInvite, e_JoinRejectionReason *reason);
char Live_ShowPlayerProfile(ControllerIndex_t localControllerIndex, unsigned __int64 xuid);
char Live_IsUserBlocked(ControllerIndex_t controllerIndex, unsigned __int64 xuid);
bdNATType Live_GetLocalNatType();
LocalTaskState Live_RunQoSProbe(TaskRecord *task);
void Live_StartQoSProbe(ControllerIndex_t localControllerIndex, int numXenons, XSESSION_INFO *xenonsInfo);
void Live_SendJoinInfo(;
void Live_JoinMessageAction(;
char Live_ProcessFriendInstantMessage(unsigned __int64 senderID, const ControllerIndex_t destIndex, msg_t *msg);

//t6/code/src_noserver/live/live_youtube.cpp
void LiveYouTube_ClearAccount(const ControllerIndex_t localControllerIndex);
char LiveYouTube_GetAccountSuccess(TaskRecord *task);
char LiveYouTube_GetAccountFailure(TaskRecord *task);
char LiveYouTube_GetUserTokenSuccess(TaskRecord *task);
char LiveYouTube_GetUserTokenFailure(TaskRecord *task);
TaskRecord *LiveYouTube_RegisterAccount(const ControllerIndex_t localControllerIndex);
char LiveYouTube_RegisterAccountSuccess(TaskRecord *task);
char LiveYouTube_RegisterAccountFailure(TaskRecord *task);
char LiveYouTube_UnregisterAccountSuccess(TaskRecord *task);
char LiveYouTube_UnregisterAccountFailure(TaskRecord *task);
TaskRecord *LiveYouTube_UploadVideo(const ControllerIndex_t localControllerIndex, unsigned __int64 fileID);
char LiveYouTube_UploadSuccess(TaskRecord *task);
char LiveYouTube_UploadFailure(TaskRecord *task);
void LiveYouTube_PrintError(ControllerIndex_t controllerIndex, bdLobbyErrorCode error);
void LiveYouTube_AuthReceived(const ControllerIndex_t localControllerIndex, bdLobbyErrorCode result);
bool LiveYouTube_IsAccountRegistered(const ControllerIndex_t localControllerIndex);
BOOL LiveYouTube_SetStat(const ControllerIndex_t controllerIndex, const char *statName, const char *statValue);
void LiveYouTube_SetViewerHighwater(const ControllerIndex_t controllerIndex, int numViewers);
void LiveYouTube_ParseDWKeys(unsigned __int8 *buffer);
void LiveYouTube_GetAccountCmd();
void LiveYouTube_TestSetStatCmd();
void LiveYouTube_TestGetStatCmd();
void LiveYouTube_TestSetViewerHighwaterCmd();
void LiveYouTube_RegisterAccountCmd();
void LiveYouTube_CancelCmd();
void LiveYouTube_UploadCmd();
TaskRecord *LiveYouTube_UnregisterAccount(const ControllerIndex_t localControllerIndex);
void LiveYouTube_UnregisterCmd();
void LiveYouTube_Init();

