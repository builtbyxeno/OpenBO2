#pragma once

#include "types.h"

//t6/code/src_noserver/game_mp/bot.cpp
void Bot_PredictPosition(const gentity_t *ent, vec3_t *vPos, int numFrames);
bot_goal_t *Bot_GetCurrentGoal(bot_t *bot);
char Bot_AddGoal(bot_t *bot, const vec3_t *goalPos, pathnode_t *goalNode, const float radius, BotGoalPriority priority, unsigned __int16 notify);
void Bot_GoalArrive(const bot_t *bot, bot_goal_t *goal);
void Bot_GoalFailed(bot_t *bot, bot_goal_t *goal);
char G_BotGoalAdd(const client_t *cl, const vec3_t *goalPos, pathnode_t *goalNode, const float radius, BotGoalPriority priority, unsigned __int16 notify);
void G_BotGoalCancel(const client_t *cl, unsigned __int16 notify);
char G_BotAtGoal(const client_t *cl, unsigned __int16 notify);
char G_BotHasGoal(const client_t *cl, unsigned __int16 notify);
bool G_BotGetGoal(const client_t *cl, unsigned __int16 notify, vec3_t *vOrigin);
int G_BotGetThreats(const client_t *cl, float fov, bot_threat_t *threatList, int maxCount);
bool G_BotSightTrace(const client_t *cl, const gentity_t *ent, const vec3_t *vEnd);
bool Bot_HasLookAt(const bot_t *bot);
void G_BotDisconnect(client_t *cl);
void Bot_InvalidatePaths();
void Bot_Load(MemoryFile *memFile);
void SV_BotRegisterDvars();
void Bot_DrawString(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, const char *text, float x, float *y, const vec4_t *color);
void Bot_DrawDebug(const vec4_t *a1, LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace);
unsigned int DrawClaimedNodes();
float *LerpColor(float *result, float *a2, float a, const vec4_t *a4);
void DrawGoalString(const client_t *cl, const vec3_t *origin, const char *txt, const vec4_t *color);
void Bot_DrawPath(float a1, const client_t *cl);
void Bot_DrawDangerousNode(const pathnode_t *node, const vec4_t *teamColor, team_t team);
void Bot_DrawDangerousAreas(float a1);
void Bot_DrawPaths();
void Bot_DrawThreats(float a1);
void G_DebugBots(void);
client_t *Bot_NameUsed(const char *name);
const char *SV_BotNameRandom();
const char *SV_ZombieNameRandom();
void SV_BotNameUpdate(const char *name);
void Bot_SetStance(ClientNum_t clientNum, unsigned __int16 stance);
void G_InitBots();
char Bot_UpdateFailsafe(const bot_t *bot, const playerState_s *ps, usercmd_s *cmd);
void Bot_Think(bot_t *bot, usercmd_s *cmd, const usercmd_s *lastUsercmd, float fov);
void G_BotThink(client_t *cl, usercmd_s *cmd);
bool SV_ZombieNameRandomFriend(const ControllerIndex_t controllerIndex, char *buf, const int bufLen);
void LerpColor(const vec4_t *a, const vec4_t *b, vec4_t *c, float t);

//#include "game_mp/bot.h"

//t6/code/src_noserver/game_mp/bot_combat.cpp
void Bot_KickAngles(bot_t *bot);
bool Bot_IsFacingEnemy(const bot_t *bot, const gentity_t *enemy, float *dot, float *distSq, float fov);
bool Bot_ClientValidThreat(const bot_t *bot, const client_t *cl, int team);
int Bot_CompareThreats(const bot_threat_t *t1, const bot_threat_t *t2);
void Bot_UpdateWeapon(const bot_t *bot, usercmd_s *cmd);
void Bot_FireRecoil(int clientNum, vec3_t *kickAVel);
bool Bot_ProjectileArcTrace(const vec3_t *vOrigin);
bool Bot_ProjectilePredict(const vec3_t *vDir, const vec3_t *vOrigin, const vec3_t *vTarget, const float time, Weapon weapon);
bool Bot_ProjectileTrajectory(const vec3_t *vOrigin, vec3_t *vDir, const vec3_t *vTarget, const vec3_t *vGravity, float speed, float time0, float time1, Weapon weapon);
bool Bot_ProjectileTry(bot_t *bot, const vec3_t *target, Weapon weapon, vec3_t *outDir);
bool Bot_TryThrowGrenade(const client_t *cl, vec3_t *target, Weapon weapon);
bool Bot_SightCheck(int a1, const vec3_t *start, const vec3_t *end, int botNum, int enemyNum);
bool Bot_TossGrenade(bot_t *bot, usercmd_s *cmd);
int Bot_GetThreats(int a1, const bot_t *bot, float fov, bot_threat_t *threatList, int maxCount);

//t6/code/src_noserver/game_mp/bot_navigation.cpp
void Bot_FreePathNode(const bot_t *bot, pathnode_t *node);
void Bot_ClaimPath(bot_t *bot);
void Bot_FreePath(bot_t *bot);
int Bot_GetMaxSpeed(const bot_t *bot);
bool Bot_AtNegotiationEnd(const bot_t *bot);
bool Bot_ShouldAvoid(const bot_t *bot);
void Bot_PathClear(bot_t *bot);
bool Bot_GetPathToGoal(bot_t *bot, const vec3_t *goal, pathnode_t *nodeTo, bool continueFromNegotiation);
float Bot_LerpDvars(const dvar_t *from, const dvar_t *to, float frac);
void Bot_CalcAdjustedAxis(float pitchAxis, float yawAxis, float *outPitchAxis, float *outYawAxis);
float *Bot_ApplyTurnRates(float *a1, float *a2, float pitchDelta, float ads, float yawDelta, float accel, float pitchAxis, float pitch, float *yaw, float *a10);
void Bot_UpdateSteeringInput(const dvar_t *a1, const dvar_t *a2, bot_steering_t *steer, float ads, vec2_t *angles);
void Bot_UpdateSteering(bot_t *bot, usercmd_s *cmd);
void Bot_UpdateAngleWrap(bot_steering_t *steer);
const pathnode_t *Bot_FarthestSeenNode(const bot_t *bot, bool useNegotiation);
void Bot_UpdateLookahead(bot_t *bot);
void Bot_MantleGlassTrace(const bot_t *bot, const playerState_s *ps);
void Bot_InvalidatePath(bot_t *bot);
bool Bot_AtNegotiationBegin(const bot_t *bot);
bool Bot_AvoidTracePassed(const bot_t *bot, const vec3_t *avoidPos);
bool Bot_UpdateAvoidance(const bot_t *bot, vec3_t *vOutDir);
void Bot_UpdateMovement(bot_t *bot, usercmd_s *cmd);
void Bot_Seek(bot_t *bot, bot_goal_t *goal, usercmd_s *cmd, const usercmd_s *lastUsercmd);

//#include "game_mp/bot_navigation.h"

//t6/code/src_noserver/game_mp/g_active_mp.cpp
void G_PlayerStateToEntityStateExtrapolate(playerState_s *ps, entityState_s *s, int time, int snap);
void G_AddPlayerMantleBlockage(vec3_t *endPos, int duration, pmove_t *pm);
void G_DrawServerAiming(const gclient_t *client);
void G_BuildWeaponState(gclient_t *client, const viewState_t *vs, weaponState_t *ws, usercmd_s *ucmd);
void G_SaveWeaponState(const weaponState_t *ws, gclient_t *client);
void G_UpdateClientControlledMissile(const playerState_s *ps, const usercmd_s *cmd, int msec);
void G_UpdateVehicleControlledEntity(gentity_t *player);
bool ClientThink_ShouldUpdateAngleFromViewangle(gentity_t *ent);
void IntermissionClientEndFrame(gentity_t *ent);
BOOL G_ClientCanSpectateTeamOrLocalPlayer(gclient_t *client, clientState_s *cs);
BOOL G_ClientCanOnlySpectateLocalPlayer(gclient_t *client);
int G_UpdateClientInfo(gentity_t *ent);
void G_AddClientKnife(clientInfo_t *ci, playerState_s *ps);
void UpdateViewAngleLerp(gentity_t *ent);
void ClientVehicleInteraction(gentity_t *ent);
void G_PlayerVehiclePositionAndBlend(gentity_t *ent, gentity_t *pTurretEnt);
void ClientEndFrame(gentity_t *ent);
void ClientThink_real(gentity_t *ent, usercmd_s *ucmd);
void G_RunClient(gentity_t *ent);

//t6/code/src_noserver/game_mp/g_client_mp.cpp
void G_GetPlayerViewOrigin_Internal(const playerState_s *ps, vec3_t *origin, bool useBodyPosition);
void G_GetPlayerViewOrigin(const playerState_s *ps, vec3_t *origin);
void G_GetPlayerBodyViewOrigin(const playerState_s *ps, vec3_t *origin);
void G_GetPlayerViewDirection(const gentity_t *ent, vec3_t *forward, vec3_t *right, vec3_t *up);
void G_GetPlayerGunDirection(const gentity_t *ent, vec3_t *forward, vec3_t *right, vec3_t *up);
int G_GetClientServerTimeDelta(gclient_t *client);
void ClientMigrate(ClientNum_t clientNum);

//t6/code/src_noserver/game_mp/g_client_script_cmd_mp.cpp
int G_GetNeededStartAmmo(gentity_t *pSelf, Weapon weapon);
void G_InitializeAmmo(gentity_t *pSelf, Weapon weapon, unsigned __int8 weaponModel, int hadWeapon);
void PlayerCmd_setBlockWeaponPickup(scr_entref_t entref);
void PlayerCmd_giveNextBaseWeaponDEVONLY(scr_entref_t entref);
void PlayerCmd_getNormalizedMovementDEVONLY(scr_entref_t entref);
void PlayerCmd_getNormalizedCameraMovementDEVONLY(scr_entref_t entref);
void WeaponComponentListAddAllPoints(WeaponComponentList *componentList);
void WeaponComponentListToName(const WeaponComponentList *componentList, char *name, int size);
void PlayerCmd_calcWeaponOptions(char *a1, scr_entref_t entref);
void PlayerCmd_calcPlayerOptions(scr_entref_t entref);
void PlayerCmd_setPlayerRenderOptions(scr_entref_t entref);
void SetBBLoadoutData(loadoutSlot_t a1, bbLoadoutData *bbData, const CACRoot *cacRoot, loadoutClass_t customClass);
void PlayerCmd_BlackboxClassChoice(scr_entref_t entref);
void PlayerCmd_NextPlayerRenderOption(scr_entref_t entref);
void PlayerCmd_SetHighlighted(scr_entref_t entref);
void PlayerCmd_IsFiring(scr_entref_t entref);
void PlayerCmd_IsMeleeing(scr_entref_t entref);
void PlayerCmd_IsSwitchingWeapons(scr_entref_t entref);
void PlayerCmd_IsReloading(scr_entref_t entref);
void PlayerCmd_IsThrowingGrenade(scr_entref_t entref);
void PlayerCmd_takeWeapon(scr_entref_t entref);
void PlayerCmd_takeAllWeapons(scr_entref_t entref);
void PlayerCmd_IsInMoveMode(scr_entref_t entref);
int ClientPlaying(gentity_t *pSelf);
void PlayerCmd_getCurrentWeapon(scr_entref_t entref);
void PlayerCmd_getCurrentWeaponAltWeapon(scr_entref_t entref);
void PlayerCmd_forceOffhandEnd(scr_entref_t entref);
void PlayerCmd_isUsingOffhand(scr_entref_t entref);
void PlayerCmd_getCurrentWeaponSpinLerp(scr_entref_t entref);
void PlayerCmd_setCurrentWeaponSpinLerp(scr_entref_t entref);
void PlayerCmd_isWeaponOverheating(scr_entref_t entref);
void PlayerCmd_setWeaponOverheating(scr_entref_t entref);
void PlayerCmd_getCurrentOffhand(scr_entref_t entref);
void PlayerCmd_setOffhandSecondaryClass(scr_entref_t entref);
void PlayerCmd_setOffhandPrimaryClass(scr_entref_t entref);
void PlayerCmd_getOffhandSecondaryClass(scr_entref_t entref);
void PlayerCmd_hasWeapon(scr_entref_t entref);
void Player_SwitchToWeapon(gentity_t *player, bool immediate);
void PlayerCmd_switchToWeapon(scr_entref_t entref);
void PlayerCmd_switchToWeaponImmediate(scr_entref_t entref);
void PlayerCmd_switchToOffhand(scr_entref_t entref);
void PlayerCmd_WeaponPlayEjectBrass(scr_entref_t entref);
void PlayerCmd_getLockOnRadius(scr_entref_t entref);
void PlayerCmd_getLockOnSpeed(scr_entref_t entref);
void PlayerCmd_giveStartAmmo(char *a1, scr_entref_t entref);
void PlayerCmd_giveMaxAmmo(scr_entref_t entref);
void PlayerCmd_getFractionStartAmmo(scr_entref_t entref);
void PlayerCmd_getFractionMaxAmmo(scr_entref_t entref);
void PlayerCmd_SetWeaponHeatPercent(scr_entref_t entref);
void PlayerCmd_setOrigin(scr_entref_t entref);
void PlayerCmd_SetVelocity(scr_entref_t entref);
void PlayerCmd_setAngles(scr_entref_t entref);
void PlayerCmd_getAngles(scr_entref_t entref);
void PlayerCmd_getGunAngles(scr_entref_t entref);
void PlayerCmd_CameraActivate(scr_entref_t entref);
void PlayerCmd_CameraSetPosition(scr_entref_t entref);
void PlayerCmd_CameraSetLookAt(scr_entref_t entref);
void PlayerCmd_gamepadUsedLast(scr_entref_t entref);
void PlayerCmd_sprintUpRequired(scr_entref_t entref);
void PlayerCmd_buttonPressedDEVONLY(scr_entref_t entref);
void PlayerCmd_playerADS(scr_entref_t entref);
void PlayerCmd_pingPlayer(scr_entref_t entref);
void PlayerCmd_SetViewmodel(scr_entref_t entref);
void PlayerCmd_GetViewmodel(scr_entref_t entref);
void PlayerCmd_setSpawnWeapon(scr_entref_t entref);
void PlayerCmd_initialWeaponRaise(scr_entref_t entref);
void PlayerCmd_setEverHadWeaponAll(scr_entref_t entref);
void PlayerCmd_dropItem(scr_entref_t entref);
void PlayerCmd_dropScavengerItem(scr_entref_t entref);
void PlayerCmd_hasAGrenadePulledBack(scr_entref_t entref);
void PlayerCmd_BotAddGoal(scr_entref_t entref);
void PlayerCmd_BotCancelGoal(scr_entref_t entref);
void PlayerCmd_BotAtGoal(scr_entref_t entref);
void PlayerCmd_BotHasGoal(scr_entref_t entref);
void PlayerCmd_BotGetGoal(scr_entref_t entref);
void PlayerCmd_BotPressUseButton(scr_entref_t entref);
void PlayerCmd_BotGetLookaheadDist(scr_entref_t entref);
void PlayerCmd_BotGetLookaheadDir(scr_entref_t entref);
void PlayerCmd_BotFindThreats(scr_entref_t entref);
void PlayerCmd_BotSightTracePassed(scr_entref_t entref);
void PlayerCmd_BotSetFailsafeNode(scr_entref_t entref);
void PlayerCmd_BotPredictPosition(scr_entref_t entref);
void PlayerCmd_BotPressAttackButton(scr_entref_t entref);
void PlayerCmd_BotPressDTPButton(scr_entref_t entref);
void PlayerCmd_BotAllowAttack(scr_entref_t entref);
void PlayerCmd_BotPressMelee(scr_entref_t entref);
void PlayerCmd_BotAllowAds(scr_entref_t entref);
void PlayerCmd_BotThrowGrenade(scr_entref_t entref);
void PlayerCmd_BotLookAt(scr_entref_t entref);
void PlayerCmd_BotClearLookAt(scr_entref_t entref);
void PlayerCmd_BotSetDefaultClass(scr_entref_t entref);
void PlayerCmd_BotClassAddItem(char *a1, scr_entref_t entref);
void PlayerCmd_BotClassAddAttachment(scr_entref_t entref);
void PlayerCmd_BotClassSetWeaponOption(scr_entref_t entref);
void PlayerCmd_BotLeaveGame(scr_entref_t entref);
void ForceGrenadeThrow(playerState_s *ps);
void ApplyKnockBack(gentity_t *pSelf, int damage, vec3_t *localdir, int dflags, bool allow_in_air);
void PlayerCmd_ForceGrenadeThrow(scr_entref_t entref);
void PlayerCmd_FakeDamageFrom(scr_entref_t entref);
void PlayerCmd_finishMeleeHit(scr_entref_t entref);
void PlayerCmd_UndoLastStand(scr_entref_t entref);
void PlayerCmd_Suicide(scr_entref_t entref);
BOOL LastStandPossible(gentity_t *self);
void PlayerCmd_TurnedHuman(scr_entref_t entref);
void PlayerCmd_IsSplitscreen(scr_entref_t entref);
bool IsTheSameAddr(netadr_t addr1, netadr_t addr2);
void PlayerCmd_IsPlayerOnSameMachine(scr_entref_t entref);
void PlayerCmd_PlayerKnockback(scr_entref_t entref);
void PlayerCmd_getCameraPos(scr_entref_t entref);
void PlayerCmd_getViewHeight(scr_entref_t entref);
void PlayerCmd_IsInVehicle(scr_entref_t entref);
void PlayerCmd_IsRemoteControlling(scr_entref_t entref);
void PlayerCmd_IsWeaponViewOnlyLinked(scr_entref_t entref);
void PlayerCmd_AllowStand(scr_entref_t entref);
void PlayerCmd_AllowCrouch(scr_entref_t entref);
void PlayerCmd_AllowProne(scr_entref_t entref);
void PlayerCmd_AllowLean(scr_entref_t entref);
void PlayerCmd_GetVehicleOccupied(scr_entref_t entref);
void PlayerCmd_GetFriendlies(scr_entref_t entref);
void PlayerCmd_GetEnemies(scr_entref_t entref);
void PlayerCmd_OpenMenu(scr_entref_t entref);
void PlayerCmd_OpenMenuNoMouse(scr_entref_t entref);
void PlayerCmd_CloseMenu(scr_entref_t entref);
void PlayerCmd_CloseInGameMenu(scr_entref_t entref);
void SetWeaponAmmoClipDualWield(playerState_s *ps);
void PlayerCmd_SetWeaponAmmoClip(scr_entref_t entref);
void PlayerCmd_SetWeaponAmmoStock(scr_entref_t entref);
void PlayerCmd_SetWeaponAmmoFuel(scr_entref_t entref);
void PlayerCmd_SetCurrentSpectatorClient(scr_entref_t entref);
void PlayerCmd_GetWeaponAmmoClip(scr_entref_t entref);
void PlayerCmd_GetWeaponAmmoStock(scr_entref_t entref);
void PlayerCmd_GetWeaponAmmoFuel(scr_entref_t entref);
void PlayerCmd_AnyAmmoForWeaponModes(scr_entref_t entref);
void iclientprintln(scr_entref_t entref);
void iclientprintlnbold(scr_entref_t entref);
void PlayerCmd_spawn(scr_entref_t entref);
void PlayerCmd_RemoteControlTurret(scr_entref_t entref);
void PlayerCmd_RemoteControlTurretOff(scr_entref_t entref);
void PlayerCmd_RecordKillstreak(unsigned __int8 *a1, scr_entref_t entref);
void PlayerCmd_RecordKillstreakEnd(char *a1, scr_entref_t entref);
void PlayerCmd_RecordGameEvent(char *a1, scr_entref_t entref);
void PlayerCmd_RecordKillModifier(char *a1, scr_entref_t entref);
void PlayerCmd_RecordMedal(char *a1, scr_entref_t entref);
void PlayerCmd_RecordLoadoutPerksAndKillStreaks(char *a1, scr_entref_t entref);
void PlayerCmd_RecordMultiKill(char *a1, scr_entref_t entref);
void PlayerCmd_incrementPlayerStat(scr_entref_t entref);
void PlayerCmd_RecordZombieZone(scr_entref_t entref);
void PlayerCmd_RecordPlayerDeathZombies(scr_entref_t entref);
void PlayerCmd_RecordPlayerDownZombies(unsigned __int8 *a1, scr_entref_t entref);
void PlayerCmd_RecordPlayerReviveZombies(scr_entref_t entref);
void PlayerCmd_setEnterTime(scr_entref_t entref);
void BodyEnd(gentity_t *ent);
void PlayerCmd_ClonePlayer(scr_entref_t entref);
void CleanStringForNetwork(const char *inString, char *outString, int outStringSize);
void SetClientDvar(scr_entref_t entref, dvar_cmd_t dvarCmd);
void __cdecl PlayerCmd_SetClientAimLockonPitchStrength(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientAmmoCounterHide(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientCGObjectiveText(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientCompass(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientDrawTalk(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientFOV(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientHUDHardcore(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientPlayerSprintTime(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientMiniScoreboardHide(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientNumLives(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientPlayerPushAmount(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientScriptMainMenu(scr_entref_t entref);
void __cdecl PlayerCmd_SetClientThirdPersonAngle(scr_entref_t entref);
void PlayerCmd_SetClientThirdPerson(scr_entref_t entref);
void PlayerCmd_SetClientProfileVar(scr_entref_t entref);
void PlayerCmd_SetClientUIVisibilityFlag(scr_entref_t entref);
void PlayerCmd_PlayClientAirstrike(scr_entref_t entref);
void PlayerCmd_PlayClientNapalm(scr_entref_t entref);
void PlayerCmd_IsTalking(scr_entref_t entref);
void PlayerCmd_FreezeControls(scr_entref_t entref);
void PlayerCmd_FreezeControlsAllowLook(scr_entref_t entref);
void PlayerCmd_AreControlsFrozen(scr_entref_t entref);
void PlayerCmd_DisableUsability(scr_entref_t entref);
void PlayerCmd_EnableUsability(scr_entref_t entref);
void PlayerCmd_DisableWeapons(scr_entref_t entref);
void PlayerCmd_EnableWeapons(scr_entref_t entref);
void PlayerCmd_DisableDeathStreak(scr_entref_t entref);
void PlayerCmd_EnableDeathStreak(scr_entref_t entref);
void PlayerCmd_DeathStreakActive(scr_entref_t entref);
void PlayerCmd_DisableOffhandWeapons(scr_entref_t entref);
void PlayerCmd_EnableOffhandWeapons(scr_entref_t entref);
void PlayerCmd_DisableWeaponCycling(scr_entref_t entref);
void PlayerCmd_EnableWeaponCycling(scr_entref_t entref);
void ScrCmd_IsLookingAt(scr_entref_t entref);
void ScrCmd_PlayLocalSound(scr_entref_t entref);
void ScrCmd_StopLocalSound(scr_entref_t entref);
void PlayerCmd_SayAll(scr_entref_t entref);
void PlayerCmd_SayTeam(scr_entref_t entref);
void PlayerCmd_AllowADS(scr_entref_t entref);
void PlayerCmd_AllowJump(scr_entref_t entref);
void PlayerCmd_AllowSprint(scr_entref_t entref);
void PlayerCmd_AllowMelee(scr_entref_t entref);
void PlayerCmd_ForceSlick(scr_entref_t entref);
void PlayerCmd_SetSprintDuration(scr_entref_t entref);
void PlayerCmd_SetSprintCooldown(scr_entref_t entref);
void PlayerCmd_SetSpreadOverride(scr_entref_t entref);
void PlayerCmd_ResetSpreadOverride(scr_entref_t entref);
void PlayerCmd_AllowSpectateTeam(scr_entref_t entref);
void PlayerCmd_GetGuid(scr_entref_t entref);
void PlayerCmd_GetXuid(scr_entref_t entref);
void PlayerCmd_IsHost(scr_entref_t entref);
void PlayerCmd_IsHostForBots(scr_entref_t entref);
void PlayerCmd_MurderLine(scr_entref_t entref);
void PlayerCmd_SetOffhandVisible(scr_entref_t entref);
void PlayerCmd_IsLocalToHost(scr_entref_t entref);
void PlayerCmd_BeginLocationTypeSelection(scr_entref_t entref, locSel_t selectionType);
void PlayerCmd_BeginLocationSelection(scr_entref_t entref);
void PlayerCmd_BeginLocationAirstrikeSelection(scr_entref_t entref);
void PlayerCmd_BeginLocationMortarSelection(scr_entref_t entref);
void PlayerCmd_BeginLocationArtillerySelection(scr_entref_t entref);
void PlayerCmd_BeginLocationComlinkSelection(scr_entref_t entref);
void PlayerCmd_BeginLocationNapalmSelection(scr_entref_t entref);
void PlayerCmd_EndLocationSelection(scr_entref_t entref);
void PlayerCmd_SetActionSlot(scr_entref_t entref);
void PlayerCmd_GetInventoryWeapon(scr_entref_t entref);
void PlayerCmd_SetInventoryWeapon(scr_entref_t entref);
void PlayerCmd_GetWeaponsList(scr_entref_t entref);
void PlayerCmd_GetWeaponsListPrimaries(scr_entref_t entref);
void PlayerCmd_StartRevive(scr_entref_t entref);
void PlayerCmd_StopRevive(scr_entref_t entref);
void PlayerCmd_ApplyKnockBack(scr_entref_t entref);
void PlayerCmd_SetPerk(scr_entref_t entref);
void PlayerCmd_HasPerk(scr_entref_t entref);
void PlayerCmd_GetPerks(scr_entref_t entref);
void PlayerCmd_UnsetPerk(scr_entref_t entref);
void PlayerCmd_ClearPerks(scr_entref_t entref);
void PlayerCmd_EnableInvulnerability(scr_entref_t entref);
void PlayerCmd_DisableInvulnerability(scr_entref_t entref);
void PlayerCmd_EnableAfterlife(scr_entref_t entref);
void PlayerCmd_DisableAfterlife(scr_entref_t entref);
void PlayerCmd_HasDLCAvailable(scr_entref_t entref);
void PlayerCmd_SetRank(scr_entref_t entref);
void PlayerCmd_SetLastStandPrevWeap(scr_entref_t entref);
void PlayerCmd_ClientSysSetState(scr_entref_t entref);
void PlayerCmd_WeaponLockStart(scr_entref_t entref);
void PlayerCmd_WeaponLockFinalize(scr_entref_t entref);
void PlayerCmd_WeaponLockFree(scr_entref_t entref);
void PlayerCmd_WeaponLockTargetTooClose(scr_entref_t entref);
void PlayerCmd_WeaponLockNoClearance(scr_entref_t entref);
void PlayerCmd_ReLinkToTurret(scr_entref_t entref);
void PlayerCmd_CarryTurret(scr_entref_t entref);
void PlayerCmd_StopCarryTurret(scr_entref_t entref);
void PlayerCmd_LinkGuidedMissileCamera(scr_entref_t entref);
void PlayerCmd_UnlinkGuidedMissileCamera(scr_entref_t entref);
void PlayerCmd_GPSJammerActive(scr_entref_t entref);
void PlayerCmd_GPSJammerInactive(scr_entref_t entref);
void PlayerCmd_DualGrenadesActive(scr_entref_t entref);
void PlayerCmd_DualGrenadesInactive(scr_entref_t entref);
void PlayerCmd_SpawnProtectionActive(scr_entref_t entref);
void PlayerCmd_SpawnProtectionInactive(scr_entref_t entref);
void PlayerCmd_LinkToMissile(scr_entref_t entref);
void PlayerCmd_UnlinkFromMissile(scr_entref_t entref);
void PlayerCmd_isCarryingTurret(scr_entref_t entref);
void PlayerCmd_CanPlayerPlaceTurret(scr_entref_t entref);
void PlayerCmd_CanPlayerPlaceVehicle(scr_entref_t entref);
void PlayerCmd_SetHeldWeaponModel(scr_entref_t entref);
void PlayerCmd_CanPlaceRiotshield(scr_entref_t entref);
void PlayerCmd_SetRiotshieldFailHint(scr_entref_t entref);
void PlayerCmd_SetPlacementHint(scr_entref_t entref);
void PlayerCmd_GetSnapshotAckIndex(scr_entref_t entref);
void PlayerCmd_GetLeagueTeamID(scr_entref_t entref);
void (*Player_GetMethod(const char **pName, int *min_args, int *max_args))(scr_entref_t);
void PlayerCmd_giveWeapon(char *a1, scr_entref_t entref);
void PlayerCmd_updateWeaponOptions(scr_entref_t entref);
void PlayerCmd_giveWeaponNextAttachmentDEVONLY(char *a1, scr_entref_t entref);
void PlayerCmd_useButtonPressed(scr_entref_t entref);
void PlayerCmd_ChangeSeatButtonPressed(scr_entref_t entref);
void PlayerCmd_attackButtonPressed(scr_entref_t entref);
void PlayerCmd_actionSlotOneButtonPressed(scr_entref_t entref);
void PlayerCmd_actionSlotTwoButtonPressed(scr_entref_t entref);
void PlayerCmd_actionSlotThreeButtonPressed(scr_entref_t entref);
void PlayerCmd_actionSlotFourButtonPressed(scr_entref_t entref);
void PlayerCmd_adsButtonPressed(scr_entref_t entref);
void PlayerCmd_throwButtonPressed(scr_entref_t entref);
void PlayerCmd_meleeButtonPressed(scr_entref_t entref);
void PlayerCmd_sprintButtonPressed(scr_entref_t entref);
void PlayerCmd_jumpButtonPressed(scr_entref_t entref);
void PlayerCmd_stanceButtonPressed(scr_entref_t entref);
void PlayerCmd_fragButtonPressed(scr_entref_t entref);
void PlayerCmd_secondaryOffhandButtonPressed(scr_entref_t entref);
void PlayerCmd_inventoryButtonPressed(scr_entref_t entref);
void PlayerCmd_finishPlayerDamage(char *a1, scr_entref_t entref);
void PlayerCmd_RevivePlayer(int a1, scr_entref_t entref);
void PlayerCmd_Revive(int a1, scr_entref_t entref);

//t6/code/src_noserver/game_mp/g_combat_mp.cpp
void TRACK_g_combat();
void G_ParseHitLocDmgTable();
void LookAtKiller(gentity_t *self, gentity_t *inflictor, gentity_t *attacker);
meansOfDeath_t G_MeansOfDeathFromScriptParam(int scrParam);
void DeathGrenadeDrop(gentity_t *self, int meansOfDeath);
void player_die(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath, Weapon iWeapon, const vec3_t *vDir, const hitLocation_t hitLoc, int psTimeOffset);
double G_GetWeaponHitLocationMultiplier(hitLocation_t hitLoc, Weapon weapon);
Weapon G_GetWeaponForEntity(const gentity_t *ent);
void G_DetectLaggedDamage(gentity_t *targ, gentity_t *inflictor);
void G_DamageClient(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int dflags, int mod, Weapon weapon, hitLocation_t hitLoc, int timeOffset, unsigned __int16 boneIndex);
void G_DamageActor(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int dflags, int mod, Weapon weapon, hitLocation_t hitLoc, int timeOffset, unsigned __int16 boneIndex);
void G_DamageVehicle(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int dflags, int mod, Weapon weapon, hitLocation_t hitLoc, int timeOffset, unsigned int modelIndex, unsigned int partName);
void G_DamageNotify(unsigned __int16 notify, gentity_t *targ, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int mod, int dFlags, unsigned int modelIndex, unsigned int partName, const char *weaponName, gentity_t *inflictor);
void G_Damage(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int dFlags, int mod, Weapon weapon, hitLocation_t hitLoc, unsigned int modelIndex, unsigned int partName, int timeOffset, unsigned __int16 boneIndex);
void G_ShieldNotifyAndDamage(gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, const vec3_t *dir, const vec3_t *point, int damage, int dFlags, int mod, Weapon iWeapon, int timeOffset);
double CanDamage(gentity_t *targ, gentity_t *inflictor, const vec3_t *centerPos, float coneAngleCos, vec3_t *coneDirection, int contentMask);
float EntDistToPoint(const vec3_t *origin, gentity_t *ent);
void AddScrTeamName(team_t team);
void GetFlashbangViewPos(gentity_t *ent, vec3_t *origin);
void GetFlashbangViewDirection(gentity_t *ent, vec3_t *dir);
void FlashbangBlastEnt(gentity_t *ent, const vec3_t *blastOrigin, float radius_max, float radius_min, gentity_t *attacker, team_t team);
void G_FlashbangBlast(const vec3_t *origin, float radius_max, float radius_min, gentity_t *attacker, team_t team);
float G_GetRadiusDamageDistanceSquared(const vec3_t *damageOrigin, gentity_t *ent);
double G_WithinDamageRadius(gentity_t *a1, const vec3_t *a2, const vec3_t *damageOrigin, float radiusSquared, gentity_t *ent);
gentity_t *G_RadiusDamage(const vec3_t *origin, gentity_t *inflictor, gentity_t *attacker, float fInnerDamage, float fOuterDamage, float radius, float coneAngleCos, vec3_t *coneDirection, gentity_t *ignore, int mod, Weapon weapon);
unsigned __int16 G_GetHitLocationString(hitLocation_t hitLoc);
hitLocation_t G_GetHitLocationIndexFromString(unsigned __int16 sString);
void G_SensorGrenadeDetonate(gentity_t *grenadeEnt, const WeaponDef *weapDef, gentity_t *grenadeOwnerEnt);
void MurderLine(int a1, gentity_t *attacker, const Weapon weapon, vec3_t from, vec3_t to);

//t6/code/src_noserver/game_mp/g_main_mp.cpp
int G_GetTime();
bool G_OnlyConnectingPaths();
void G_RegisterRegisterToolDvars();
void BG_RegisterServerDvars();
void *Hunk_AllocAnimStateDefServer(int size);
int G_GetClientKills(ClientNum_t clientNum);
int G_GetClientAssists(ClientNum_t clientNum);
void G_SetClientRank(ClientNum_t clientNum, int rank);
int G_GetClientRank(ClientNum_t clientNum);
int G_GetClientPrestige(ClientNum_t clientNum);
team_t G_GetClientTeam(ClientNum_t clientNum);
MatchState *G_GetMatchState();
void G_FreeEntities(bool clearTargets);
char G_LoadAnimTreeInstances();
void G_FreeAnimTreeInstances();
void G_PrintFastFileErrors(const char *fastfile);
void G_ClearLowHunk(bool hunkClear);
void G_InitGame(int levelTime, int randomSeed, int restart, int registerDvars, int savegame);
void CheckVote();
void G_UpdateObjectivesForClient(int clientNum, playerState_s *ps);
void G_UpdateObjectiveToClients();
void G_UpdateHudElemsToClients();
void G_RunThink(gentity_t *ent);
void ScriptPump();
void G_XAnimUpdateEnt(gentity_t *ent);
void G_ClientDoPerFrameNotifies(gentity_t *ent);
void G_UpdateIKCulling(gentity_t *ent);
void G_RunFrameForEntity(gentity_t *ent);
void G_UpdateIKDisableTerrainMappingTimeout(gentity_t *ent);
void G_UpdateTimedDamage(gentity_t *ent);
void G_DebugTimedDamage();
void G_UpdateWeapons(gentity_t *ent);
unsigned __int8 G_PopulateMatchState();
bool ResolveParentClientMask(const gentity_t *entChild, gentity_t *entParent);
void G_ShutdownGame(int freeScripts);
void ShowEntityInfo(unsigned int a1);
void G_UpdateClientLinkInfo(gentity_t *ent);
void G_RunFrame(char *a1, int levelTime);

//t6/code/src_noserver/game_mp/g_misc_mp.cpp
long double G_GetEntInfoScale();
void SP_info_notnull(gentity_t *self);
void SP_light(gentity_t *self, SpawnVar *spawnVar);
void SP_info_volume(gentity_t *self);
void TeleportPlayer(gentity_t *player, vec3_t *origin, vec3_t *angles);
void EntinfoPosAndScale(gentity_t *self, vec3_t *source, vec3_t *pos, float *textScale, float *dist);
void misc_EntInfo(char *a1, gentity_t *self, vec3_t *source);
void EntInfo_Trigger(char *a1, gentity_t *self, vec3_t *source);
void EntInfo_Vehicle(gentity_t *a1, char *a2, gentity_t *self);
void EntInfo_Item(char *a1, gentity_t *self, vec3_t *source);

//#include "game_mp/g_public_mp.h"

//t6/code/src_noserver/game_mp/g_save_mp.cpp
void ConsumeSentinelBlock(MemoryFile *memFile, const int content);
void ReadField(const saveField_t *field, unsigned __int8 *base, MemoryFile *memFile);
void G_SaveError(errorParm_t code, SaveErrorType errorType, const char *fmt, ...);
void SV_LoadConfigstrings(const int first, const int count, MemoryFile *memFile);
int LoadWeapons(MemoryFile *memFile);
void G_LoadLevelBGS(MemoryFile *memFile);
int LoadClientFields(MemoryFile *memFile);
int ReadVehicleIndex(MemoryFile *memFile);
void Scr_FreeFields(const saveField_t *fields, unsigned __int8 *base);
void LoadPlayerCorpses(MemoryFile *memFile);
void ReadLerpFrame(MemoryFile *memFile, lerpFrame_t *lerpFrame);
void ReadClientInfo(MemoryFile *memFile, const ClientNum_t clientNum);
void G_LoadModelPrecacheList(MemoryFile *memFile);
void __cdecl G_LoadInitState(MemoryFile *memFile);
void Scr_FreeActorFields(actor_t *pActor);
void Scr_FreeSentientFields(sentient_t *sentient);
void ReadActorPotentialCoverNodes(actor_t *pActor, MemoryFile *memFile);
void VerifySaveGame(SaveGame *saveGame, SaveHeader *header);
void G_PreLoadGame(SaveGame **saveGame, int *levelTime);
void G_ReadStruct(const saveField_t *fields, unsigned __int8 *dest, int tempsize, MemoryFile *memFile);
void ReadEntity(gentity_t *ent, SaveGame *save);
void ReadTurretInfo(TurretInfo *turret, SaveGame *save);
void ReadPathNodes(MemoryFile *memFile);
void ReadSentient(sentient_t *sentient, MemoryFile *memFile);
void ReadVehicle(vehicle_t *pVehicle, MemoryFile *memFile);
void ReadActor(actor_t *pActor, MemoryFile *memFile);
void G_LoadLevelState(SaveGame *save);
void G_LoadMainState(SaveGame *save, int scriptRunning, int demoSave);
void G_LoadGame(int checksum, SaveGame *save, int scriptRunning, int demoSave);

//t6/code/src_noserver/game_mp/g_scr_helicopter.cpp
void CMD_Heli_FreeHelicopter(scr_entref_t entref);
void CMD_Heli_SetHeliHeightLock(scr_entref_t entref);
void CMD_Heli_IsInsideHeliHeightLock(scr_entref_t entref);
void CMD_Heli_GetHeliHeightLockHeight();
void (*Helicopter_GetMethod(const char **pName, int *min_args, int *max_args))(scr_entref_t);
void Heli_InitFirstThink(gentity_t *pSelf);
void Helicopter_Pain(gentity_t *pSelf, gentity_t *pAttacker, int damage, const vec3_t *point, const int mod, const vec3_t *dir);
void Helicopter_Die(gentity_t *pSelf, gentity_t *pInflictor, gentity_t *pAttacker, const int damage, const int mod, const Weapon weapon, const vec3_t *dir);
void Helicopter_Controller(const gentity_t *pSelf, int *partBits);
void Helicopter_Think(gentity_t *ent);
void CMD_Heli_SetDamageStage(scr_entref_t entref);
void G_SpawnHelicopter(gentity_t *ent, gentity_t *owner, const char *vehicleDefName, const char *modelName);

//t6/code/src_noserver/game_mp/g_scr_main_mp.cpp
unsigned int GScr_AllocString(const char *s);
void TRACK_g_scr_main();
void Scr_LoadLevel();
int GScr_LoadScriptAndLabel(scriptInstance_t inst, const char *filename, const char *label, int bEnforceExists);
void GScr_LoadGameTypeScript();
void GScr_LoadGameTypeScriptZombies();
void GScr_LoadSingleAnimScript(scriptInstance_t inst, scr_animscript_t *pAnim, const char *name);
void GScr_LoadDogAnimScripts(scriptInstance_t inst);
void GScr_LoadZombieAnimScripts(scriptInstance_t inst);
void GScr_LoadZombieDogAnimScripts(scriptInstance_t inst);
void *GScr_AnimscriptAlloc(int size);
void GScr_SetScriptsForPathNode(scriptInstance_t inst, pathnode_t *loadNode);
void *G_ZBarrier_Alloc(int size);
void GScr_RebuildLevelZBarrierArray();
void GScr_LoadScriptsForEntities(scriptInstance_t inst, bool bSaveGame);
char GScr_LoadLevelScript();
void GScr_LoadAnimScripts();
void __cdecl GScr_HandleMapRestart();
void GScr_LoadScripts(scriptInstance_t inst, bool bSaveGame);
void GScr_FreeScripts(scriptInstance_t inst);
void Scr_ValidateLocalizedStringRef(int parmIndex, const char *token, int tokenLen);
void Scr_ConstructMessageString(int firstParmIndex, int lastParmIndex, const char *errorContext, char *string, unsigned int stringLimit);
void Scr_VerifyWeaponIndex(Weapon weapon, const char *weaponName);
void Scr_GetPlayers();
void Scr_CountPlayers();
void GScr_GetDemoFileID();
void Scr_GetEntByNum();
void Scr_GetWeaponStowedModel();
void Scr_GetWeaponModel();
void GScr_GetAmmoCount(scr_entref_t entref);
void GScr_GetAnimLength();
void GScr_AnimHasNotetrack();
void GScr_GetNotetrackTimes();
void GScr_GetBrushModelCenter();
void GScr_Spawn();
void GScr_SpawnCollision();
void GScr_SpawnVehicle();
void GScr_SpawnTimedFX();
gentity_t *SpawnTurretInternal(unsigned int classname, vec3_t *origin, const char *weaponinfoname);
void GScr_SpawnTurret();
void GScr_SpawnHelicopter();
void GScr_SetTurretCarried(scr_entref_t entref);
void GScr_SetTurretMinimapVisible(scr_entref_t entref);
void GScr_SetMissleCoasting(scr_entref_t entref);
void Scr_SetWeapon(scr_entref_t entref);
void GScr_GetAnimTreesLoaded();
void GScr_FindAnimByName();
Weapon GScr_PrecacheTurret();
void GScr_GameReportThresholdExceeded();
void GScr_GibEnt(scr_entref_t entref);
char GScr_ZeroGravityVolumeOn();
char GScr_ZeroGravityVolumeOff();
void ScrCmd_SetGravity();
void ScrCmd_SetPhysParams(scr_entref_t entref);
void Scr_SetPlayerCollision(scr_entref_t entref);
void ScrCmd_ReportUser(scr_entref_t entref);
void ScrCmd_SetMoveSpeedScale(scr_entref_t entref);
void ScrCmd_GetMoveSpeedScale(scr_entref_t entref);
void ScrCmd_SetStowedWeapon(scr_entref_t entref);
void ScrCmd_ClearStowedWeapon(scr_entref_t entref);
void ScrCmd_GetStowedWeapon(scr_entref_t entref);
void ScrCmd_GetCentroid(scr_entref_t entref);
void ScrCmd_SetVisibleToPlayer(scr_entref_t entref);
void ScrCmd_SetInvisibleToPlayer(scr_entref_t entref);
void ScrCmd_SetVisibleToAll(scr_entref_t entref);
void ScrCmd_SetForceNoCull(scr_entref_t entref);
void ScrCmd_RemoveForceNoCull(scr_entref_t entref);
void ScrCmd_SetInvisibleToAll(scr_entref_t entref);
void ScrCmd_SetVisibleToTeam(scr_entref_t entref);
void ScrCmd_SetVisibleToAllExceptTeam(scr_entref_t entref);
void ScrCmd_IsLinkedTo(scr_entref_t entref);
void ScrCmd_AllowTacticalInsertion(scr_entref_t entref);
void ScrCmd_AllowBotTargetting(scr_entref_t entref);
void ScrCmd_GetLinkedEnt(scr_entref_t entref);
void ScrCmd_GetOrigin(scr_entref_t entref);
void ScrCmd_GetAngles(scr_entref_t entref);
void ScrCmd_GetMins(scr_entref_t entref);
void ScrCmd_GetMaxs(scr_entref_t entref);
void ScrCmd_GetAbsMins(scr_entref_t entref);
void ScrCmd_GetAbsMaxs(scr_entref_t entref);
void ScrCmd_GetPointInBounds(scr_entref_t entref);
void ScrCmd_GetEye(scr_entref_t entref);
void ScrCmd_GetEyeApprox(scr_entref_t entref);
void ScrCmd_UseBy(scr_entref_t entref);
void ScrCmd_IsTouching(scr_entref_t entref);
void ScrCmd_IsTouchingSwept(scr_entref_t entref);
void ScrCmd_IsTouchingVolume(scr_entref_t entref);
char ScrCmd_GetTouchingVolume();
void ScrCmd_SoundExists();
void ScrCmd_SoundGetPlaybackTime();
void ScrCmd_PlaySound(scr_entref_t entref);
void ScrCmd_PlaySoundWithNotify(scr_entref_t entref);
void ScrCmd_PlaySoundOnTag(scr_entref_t entref);
void ScrCmd_PlaySoundToTeam(scr_entref_t entref);
void ScrCmd_PlayBattleChatterToTeam(scr_entref_t entref);
void ScrCmd_PlayLoopSound(scr_entref_t entref);
void ScrCmd_StopLoopSound(scr_entref_t entref);
void ScrCmd_StopSounds(scr_entref_t entref);
void ScrCmd_PlayRumbleInternal(scr_entref_t entref, int event);
void ScrCmd_PlayRumbleOnEntity(scr_entref_t entref);
void ScrCmd_PlayRumbleLoopOnEntity(scr_entref_t entref);
void ScrCmd_StopRumble(scr_entref_t entref);
void ScrCmd_Delete(scr_entref_t entref);
void SetModelInternal(gentity_t *ent, const char *modelName);
void ScrCmd_SetModel(scr_entref_t entref);
void ScrCmd_SetEnemyModel(scr_entref_t entref);
void ScrCmd_GetNormalHealth(scr_entref_t entref);
void ScrCmd_SetNormalHealth(scr_entref_t entref);
void ScrCmd_SetMaxHealth(scr_entref_t entref);
void ScrCmd_DoDamage(scr_entref_t entref);
void ScrCmd_GetVelocity(scr_entref_t entref);
void GScr_FakeFire(scr_entref_t entref);
void GScr_SetCameraSpikeActive(scr_entref_t entref);
void ScrCmd_MakeUnusable(scr_entref_t entref);
void ScrCmd_Show(scr_entref_t entref);
void ScrCmd_Hide(scr_entref_t entref);
void ScrCmd_Ghost(scr_entref_t entref);
void ScrCmd_GhostInDemo(scr_entref_t entref);
void ScrCmd_ShowInDemo(scr_entref_t entref);
void ScrCmd_LaserOn(scr_entref_t entref);
void ScrCmd_LaserOff(scr_entref_t entref);
void ScrCmd_ShowToPlayer(scr_entref_t entref);
void ScrCmd_SetContents(scr_entref_t entref);
void GScr_StartFiring(scr_entref_t entref);
void GScr_StopFiring(scr_entref_t entref);
void GScr_ShootTurret(scr_entref_t entref);
void GScr_StopShootTurret(scr_entref_t entref);
void GScr_SetMode(scr_entref_t entref);
void GScr_GetTurretOwner(scr_entref_t entref);
void GScr_SetTargetEntity(scr_entref_t entref);
void GScr_GetTurretArcLimits(scr_entref_t entref);
void GScr_SetAiSpread(scr_entref_t entref);
void GScr_SetPlayerSpread(scr_entref_t entref);
void GScr_SetConvergenceTime(scr_entref_t entref);
void GScr_SetSuppressionTime(scr_entref_t entref);
void GScr_ClearTargetEntity(scr_entref_t entref);
void GScr_SetTurretIgnoreGoals(scr_entref_t entref);
void GScr_MakeTurretUsable(scr_entref_t entref);
void GScr_MakeTurretUnusable(scr_entref_t entref);
void GScr_SetTurretAccuracy();
void GScr_GetTurretTarget(scr_entref_t entref);
void GScr_DisconnectPaths(scr_entref_t entref);
void GScr_ConnectPaths(scr_entref_t entref);
void ScrCmd_SetStance(scr_entref_t entref);
void ScrCmd_GetStance(scr_entref_t entref);
void Scr_SetStableMissile(scr_entref_t entref);
void GScr_SetCursorHint(scr_entref_t entref);
int G_GetHintStringIndex(int *piIndex, const char *pszString);
void GScr_SetHintString(scr_entref_t entref);
void GScr_SetHintStringForPerk(scr_entref_t entref);
void GScr_SetHintLowPriority(scr_entref_t entref);
void GScr_UseTriggerRequireLookAt(scr_entref_t entref);
void GScr_TriggerIgnoreTeam(scr_entref_t entref);
void GScr_IsMartyrdomGrenade(scr_entref_t entref);
void GScr_GetEntityNumber(scr_entref_t entref);
void GScr_GetEntityType(scr_entref_t entref);
void GScr_EnableGrenadeTouchDamage(scr_entref_t entref);
void GScr_DisableGrenadeTouchDamage(scr_entref_t entref);
void GScr_MissileSetTarget(scr_entref_t entref);
void GScr_MissileDroneSetVisible(scr_entref_t entref);
void GScr_EnableAimAssist(scr_entref_t entref);
void GScr_DisableAimAssist(scr_entref_t entref);
int ObjectiveStateIndexFromString(objectiveState_t *piStateIndex, unsigned int stateString);
void SetObjectiveIcon(objective_t *obj, int paramNum);
void Scr_Objective_Add();
objective_t *Scr_Objective_Delete();
objectiveState_t Scr_Objective_State();
void Scr_Objective_Icon();
int Scr_Objective_Position();
__int16 Scr_Objective_OnEntity();
int Scr_Objective_ClearEntity();
void Scr_Objective_SetVisibleToPlayer();
int Scr_Objective_SetInvisibleToPlayer();
void Scr_Objective_SetVisibleToAll();
int Scr_Objective_SetInvisibleToAll();
void Scr_Objective_SetPlayerUsing();
int *Scr_Objective_ClearPlayerUsing();
int Scr_Objective_ClearAllUsing();
void Scr_Objective_SetProgress();
void Scr_Objective_GetGamemodeFlags();
void Scr_Objective_SetSize();
void GetNormalised2DMapPosition(vec3_t *inPos, vec2_t *outPos);
void SetArtilleryIconLocation();
void GScr_LogPrint();
void GScr_WorldEntNumber();
int GScr_Obituary();
void GScr_ReviveObituary();
void GScr_AddDemoBookmark();
void Scr_UpdateSpawnPoints();
void Scr_BoundsWouldTelefrag(vec3_t *mins, vec3_t *maxs);
void GScr_positionWouldTelefrag();
void GScr_BoundsWouldTelefrag();
void GScr_RecordUsedSpawnPoint();
void GScr_getStartTime();
void GScr_PrecacheMenu();
int GScr_GetScriptMenuIndex(const char *pszMenu);
void GScr_PrecacheStatusIcon();
int GScr_GetStatusIconIndex(const char *pszIcon);
void GScr_PrecacheHeadIcon();
int GScr_GetHeadIconIndex(const char *pszIcon);
void GScr_WeaponClipSize();
void GScr_WeaponFuelLife();
void GScr_WeaponIsSemiAuto();
void GScr_WeaponIsBoltAction();
void GScr_WeaponIsGasWeapon();
void GScr_WeaponType();
void GScr_WeaponClass();
void GScr_WeaponDisplayName();
void GScr_WeaponIsMountable();
void GScr_WeaponInventoryType();
void GScr_WeaponStartAmmo();
void GScr_WeaponMaxAmmo();
void GScr_GetWeaponSupportedAttachments();
void GScr_WeaponHasAttachment();
void GScr_GetWeaponOptic(scr_entref_t entref);
void GScr_WeaponAttachmentCount();
void GScr_GetWeaponAttachments();
void GScr_WeaponAltWeaponName();
void GScr_WeaponDualWieldWeaponName();
void GScr_WeaponIsDualWield();
void GScr_GetWatcherWeapons();
void GScr_GetRetrievableWeapons();
void GScr_GetWeaponIndexFromName();
void GScr_GetWeaponFireSound();
void GScr_GetWeaponFireSoundPlayer();
void GScr_GetWeaponPickupSound();
void GScr_GetWeaponPickupSoundPlayer();
void GScr_IsTurretFiring();
void GScr_SetDefaultDropPitch(scr_entref_t entref);
void GScr_SetScanningPitch(scr_entref_t entref);
void GScr_WeaponFireTime();
void GScr_WeaponReloadTime();
void GScr_WeaponBlocksProne();
void GScr_IsItemRestricted();
void GScr_IsWeaponClipOnly();
void GScr_IsWeaponDetonationTimed();
void GScr_PrecacheLocationSelector();
int GScr_GetLocSelIndex(const char *mtlName);
char Scr_GroundTrace(unsigned int a1);
void Scr_BulletTracePassed();
char Scr_PlayerBulletTrace(unsigned int a1);
void Scr_SightTracePassed();
void Scr_WorldTrace(unsigned int a1);
void Scr_PhysicsTrace(unsigned int a1);
void Scr_PlayerPhysicsTrace(unsigned int a1);
void GScr_NeedsRevive(scr_entref_t entref);
void GScr_IsInSecondChance(scr_entref_t entref);
void GScr_SetBurn(scr_entref_t entref);
void GScr_SetWorldFogActiveBank(scr_entref_t entref);
void GScr_SetElectrified(scr_entref_t entref);
void GScr_UseWeaponHideTags(scr_entref_t entref);
void GScr_StartTanning(scr_entref_t entref);
void GScr_SetWaterDrops(scr_entref_t entref);
void GScr_StopBurning(scr_entref_t entref);
void GScr_SpawnNapalmGroundFlame(scr_entref_t entref);
void GScr_RestoreDefaultDropPitch(scr_entref_t entref);
void GScr_IsFiringTurret(scr_entref_t entref);
void GScr_IsTurretLockedOn(scr_entref_t entref);
void GScr_ShootUp(scr_entref_t entref);
void GScr_GetWaterHeight();
void GScr_DepthInWater(scr_entref_t entref);
void GScr_DepthOfPlayerInWater(scr_entref_t entref);
int Scr_PrecacheModel();
void Scr_PrecacheShellShock();
void Scr_PrecacheItem();
int Scr_PrecacheShader();
const char *Scr_PrecacheString();
int Scr_PrecacheRumble();
int Scr_GrenadeExplosionEffect(unsigned int a1);
void GScr_RadiusDamageInternal(gentity_t *inflictor);
void GScr_RadiusDamage(gentity_t *notthis);
void GScr_EntityRadiusDamage(scr_entref_t entref);
void GScr_GlassRadiusDamage();
void GScr_Detonate(float entref, scr_entref_t entref_4);
int GScr_SetPlayerIgnoreRadiusDamage();
void GScr_DamageConeTraceInternal(scr_entref_t entref, int contentMask);
void GScr_DamageConeTrace(scr_entref_t entref);
void GScr_SightConeTrace(scr_entref_t entref);
void GScr_PlayerSightTrace(scr_entref_t entref);
void GScr_HeliTurretSightTrace(scr_entref_t entref);
void GScr_HeliTurretDogTrace(scr_entref_t entref);
void GScr_VisionSetLerpRatio(scr_entref_t entref);
void GScr_DirectionalHitIndicator(scr_entref_t entref);
void GScr_SendKillstreakDamageEvent(scr_entref_t entref);
void GScr_DoCowardsWayAnims(scr_entref_t entref);
void GScr_StartPoisoning(scr_entref_t entref);
void GScr_StopPoisoning(scr_entref_t entref);
void GScr_StartBinocs(scr_entref_t entref);
void GScr_StopBinocs(scr_entref_t entref);
void GScr_IsFlared(scr_entref_t entref);
void GScr_IsPoisoned(scr_entref_t entref);
void GScr_GetMoveDelta();
void GScr_GetAngleDelta();
void GScr_GetNorthYaw();
void Scr_SetFxAngles(int givenAxisCount, vec3_t *axis, vec3_t *angles);
void Scr_LoadFX();
void Scr_FxParamError(int paramIndex, const char *errorString, int fxId);
void Scr_PlayFX();
void Scr_PlayFXOnTag();
void Scr_PlayLoopedFX();
void Scr_SpawnFX(char *a1);
int Scr_TriggerFX();
void Scr_FXBlockSight();
void ScrCmd_SpawnActor(scr_entref_t entref);
void Scr_PredictSpawnPoint(scr_entref_t entref);
void GScr_CreateDynEntAndLaunch();
void Scr_PhysicsExplosionSphere();
void Scr_AreTexturesLoaded();
void Scr_CreateStreamerHint();
void Scr_PhysicsRadiusJolt();
void Scr_PhysicsExplosionCylinder();
void Scr_PhysicsJetThrust();
void Scr_SetFog(const char *cmd, float start, float density, float heightDensity, float baseHeight, float r, float g, float b, float time, float colorScale, float sunColR, float sunColG, float sunColB, float sunDirX, float sunDirY, float sunDirZ, float sunStartAng, float sunEndAng, float maxFogOpacity);
void Scr_SetExponentialFog();
void Scr_SetVolumetricFog(char *a1);
void Scr_SetCullDist();
void Scr_VisionSetNaked();
void Scr_VisionSetNight();
void Scr_VisionSetLastStand();
void GScr_IsPlayerNumber();
void GScr_SetWinningPlayer();
void GScr_SetWinningTeam();
void GScr_Announcement();
void GScr_ClientAnnouncement();
void GScr_GetTeamScore();
void GScr_SetTeamScore();
int GScr_SetTeamHasMeat();
void GScr_SetClientNameMode();
void GScr_UpdateClientNames();
void GScr_GetTeamPlayersAlive();
void GScr_GetDroppedWeapons();
void GScr_GetNumParts();
void GScr_GetPartName();
gentity_t *GScr_Earthquake();
void GScr_ShellShock(scr_entref_t entref);
void GScr_StopShellShock(scr_entref_t entref);
int GScr_UpdateTagInternal(gentity_t *ent, unsigned int tagName, cached_tag_mat_t *cachedTag, int showScriptError);
void GScr_GetWeaponForwardDir(scr_entref_t entref);
void GScr_GetWeaponMuzzlePoint(scr_entref_t entref);
void __cdecl GScr_GetTagOrigin(scr_entref_t entref);
void GScr_GetTagAngles(scr_entref_t entref);
void GScr_GetEntnum(scr_entref_t entref);
void GScr_SetDepthOfField(scr_entref_t entref);
void GScr_SetViewModelDepthOfField(scr_entref_t entref);
void GScr_ViewKick(scr_entref_t entref);
void GScr_LocalToWorldCoords(scr_entref_t entref);
void GScr_SetRightArc(scr_entref_t entref);
void GScr_SetLeftArc(scr_entref_t entref);
void GScr_SetTopArc(scr_entref_t entref);
void GScr_SetBottomArc(scr_entref_t entref);
void GScr_PlaceSpawnPoint(unsigned int a1, scr_entref_t entref);
void ScrCmd_SendFaceEvent(scr_entref_t entref);
void GScr_TestSpawnPoint(unsigned int a1);
void GScr_MapRestart();
void GScr_MissionFailed();
void GScr_LoadMap();
void GScr_ExitLevel();
void GScr_KillServer();
void GScr_AddTestClient();
void GScr_SetPlayerCurrentStreak(scr_entref_t entref);
void GScr_SetBombTimer();
int GScr_SetRoundsPlayed();
void GScr_SetInitialPlayersConnected();
void GScr_SetMatchTalkFlag();
void GScr_SetMatchFlag();
void GScr_AllClientsPrint();
void GScr_MapExists();
void GScr_SetVoteString();
void GScr_SetVoteTime();
void GScr_SetVoteYesCount();
void GScr_SetVoteNoCount();
void GScr_KickPlayer();
void GScr_BanPlayer();
void GScr_ClientPrint();
gentity_t *Scr_PlayRumbleOnPosition();
gentity_t *Scr_PlayRumbleLoopOnPosition();
gentity_t *Scr_StopAllRumbles();
void Scr_IsSplitscreen();
void Scr_IsLocalGame();
void Scr_IsGlobalStatsServer();
void GScr_RecordLeagueWinner();
char GScr_SkillUpdate();
char GScr_SetPlayerStatsForMatchRecording();
void GScr_SetPlayerFinalForMatchRecording();
void __cdecl GScr_SetBeginForMatchRecording();
void GScr_GetAssignedTeam();
void GScr_GetCustomTeamName();
void GScr_UploadLeaderboards(scr_entref_t entref);
void GScr_IsItemPurchased(scr_entref_t entref);
void GScr_IsItemLocked(scr_entref_t entref);
void GScr_GetRefFromItemIndex();
void GScr_GetItemGroupFromItemIndex();
void GScr_GetBaseWeaponItemIndex();
void GScr_GetGameTypeEnumFromName();
const CACRoot *Scr_GetCACRoot(const CACRoot *result, const gentity_t *ent, loadoutClass_t loadoutClass);
bool ItemRestricted(int clientNum, int itemIndex);
bool IsBonusCardInUse(ClientNum_t clientNum, int itemIndex, loadoutClass_t classNum, bonusCards_t bonusCard);
int GScr_GetLoadoutItemIndex(scr_entref_t entref);
void GScr_IsBonusCardActive(scr_entref_t entref);
void GScr_GetLoadoutItem(scr_entref_t entref);
void GScr_GetLoadoutItemRef(scr_entref_t entref);
void GScr_GetLoadoutWeapon(scr_entref_t entref);
void GScr_GetLoadoutPerks(scr_entref_t entref);
void GScr_GetLoadoutAllocation(scr_entref_t entref);
void GScr_GetFogSettings();
void GScr_EnableOccluder();
void GScr_GetItemAttachment();
void GScr_GetItemAttachmentAllocationCost();
void GScr_GetDefaultClassSlot();
void GScr_GetDate();
void GScr_SetPerkForTrigger(scr_entref_t entref);
void GScr_SetIgnoreEntForTrigger(scr_entref_t entref);
void GScr_ClientClaimTrigger(scr_entref_t entref);
void GScr_ClientReleaseTrigger(scr_entref_t entref);
void GScr_ReleaseClaimedTrigger(scr_entref_t entref);
void GScr_SetMapCenter();
void GScr_SetDemoIntermissionPoint();
void GScr_isTestClient(scr_entref_t entref);
void GScr_SetGameEndTime();
int ScrCmd_SetSlowMotion();
void GScr_NumRemoteClients();
void GScr_SetMiniMap();
int GScr_SetTeamSpyplane();
void GScr_GetTeamSpyplane();
int GScr_SetTeamSatellite();
void GScr_GetTeamSatellite();
void GScr_recordNumZombieRounds();
void GScr_recordGameResult();
void GScr_recordMatchSummaryZombieEndGameData();
void GScr_recordMatchSummaryZombieRoundStart();
void GScr_recordMatchSummaryZombieRoundEnd();
void GScr_recordMatchInit();
void GScr_matchRecorderIncrementHeaderStat();
void GScr_EndLobby();
void GScr_MagicBullet();
void GScr_MagicGrenade(scr_entref_t entref);
void GScr_LaunchBomb(scr_entref_t entref);
void GScr_MakeGrenadeDud(scr_entref_t entref);
void GScr_IsOnLadder(scr_entref_t entref);
void GScr_IsOnSlide(scr_entref_t entref);
void GScr_IsMantling(scr_entref_t entref);
void GScr_StopDoorBreach(scr_entref_t entref);
void GScr_StartRagdoll(scr_entref_t entref);
void GScr_IsRagdoll(scr_entref_t entref);
void GScr_RagdollLaunch(scr_entref_t entref);
void GScr_VehicleLaunch(scr_entref_t entref);
void GScr_SetBlur(scr_entref_t entref);
void GScr_ResetMissileDetonationTime(scr_entref_t entref);
void GScr_GiveAchievement(scr_entref_t entref);
void GScr_SetEntityWeapon(scr_entref_t entref);
void GScr_SetTurretType(scr_entref_t entref);
void GScr_GetTeam(scr_entref_t entref);
void GScr_GetCorpseAnim(scr_entref_t entref);
void ScrCmd_ItemWeaponSetAmmo(scr_entref_t entref);
void Scr_AddStruct();
void Scr_ResetTimeout();
void GScr_ClientSysRegister();
void GScr_ClientSysSetState();
void Scr_GetSnapshotIndexArray();
void Scr_SnapshotAcknowledged();
void GScr_IsAI();
void GScr_GetAITriggerFlags();
void GScr_IsVehicle();
void GScr_GetMaxVehicles();
void ScrCmd_GetShootAtPosition(scr_entref_t entref);
void GScr_DisableDestructiblePieces();
void GScr_EnableAllDestructiblePieces();
void __cdecl GScr_ClearSpawnPoints();
void GScr_SetSpawnPointRandomVariation();
void GScr_ClearSpawnPointsBaseWeight();
void GScr_SetSpawnPointsBaseWeight();
void GScr_AddSpawnPoints();
void GScr_GetSortedSpawnPoints();
void GScr_GetPlayerSpawnId();
void GScr_IsSpawnPointVisible();
void InfluencerTypeValidation(int type, gentity_t *ent, const char *function_name);
void GScr_SetSpawnClientFlag(scr_entref_t entref);
void GScr_PredictGrenade(char *a1, scr_entref_t entref);
void GScr_AddSphereInfluencer();
void GScr_AddCylinderInfluencer();
void GScr_RemoveInfluencer();
void GScr_EnableInfluencer();
void GScr_SetInfluencerTeamMask();
void GScr_CollisionTestPointsInSphere();
void GScr_CollisionTestPointsInCylinder();
void GScr_CollisionTestPointsInPill();
void GScr_CollisionTestPointsInCone();
void GScr_CollisionTestPointsInBox();
void GScr_QSortScoredSpawnPointArrayAscending();
void GScr_Matrix4x4TransformPoints();
void GScr_GetWeaponMinDamageRange();
void GScr_GetWeaponMaxDamageRange();
void GScr_GetWeaponMinDamage();
void GScr_GetWeaponMaxDamage();
void GScr_GetWeaponExplosionRadius();
void GScr_IsWeaponDisallowedAtMatchStart();
void GScr_IsWeaponSpecificUse();
void GScr_IsWeaponEquipment();
void GScr_IsWeaponPrimary();
void GScr_IsWeaponScopeOverlay();
void GScr_GetPregameClass();
void GScr_RecordLeaguePreLoser(scr_entref_t entref);
void GScr_LUINotifyEventToSpectators(scr_entref_t entref);
void GScr_PixBeginEvent();
char CScr_PixEndEvent();
void GScr_PixMarker();
void GScr_ChangeAdvertisedStatus();
void GScr_IncrementCounter();
void GScr_GetCounterTotal();
void GScr_SetScoreboardColumns();
void GScr_SetNemesisXuid(scr_entref_t entref);
void GScr_ReloadOnWiiUmote();
int GScr_SetHostMigrationStatus();
void GScr_StartHostMigration();
void GScr_PrecacheAnimStateDef();
void GScr_RegisterClientField();
void GScr_GetFieldSetForEntityType(gentity_t *pEnt, int *pFieldSet, void **pData);
void GScr_CodeSetClientField();
void GScr_CodeSetPlayerStateClientField();
void GScr_CodeSetWorldClientField();
void GScr_CodeGetClientField();
void GScr_CodeGetPlayerStateClientField();
void GScr_CodeGetWorldClientField();
void GScr_GetClientFieldVersion();
void GScr_GetUTCTime();
void Scr_ScriptMoversUseAnimTree();
void GScr_DisableZombies();
void GScr_EnableZombies();
void (*Scr_GetFunction(const char **pName, int *type, int *min_args, int *max_args))();
void GScr_SetClientFlag(scr_entref_t entref);
void GScr_GetClientFlag(scr_entref_t entref);
void GScr_ClearClientFlag(scr_entref_t entref);
void GScr_SetZombieName(scr_entref_t entref);
void Scr_SetPlayerGravity(scr_entref_t entref);
void Scr_ClearPlayerGravity(scr_entref_t entref);
void Scr_SetEntGravityTrajectory(scr_entref_t entref);
void GScr_IsInsideHeightLock(scr_entref_t entref);
void GScr_IsOnGround(scr_entref_t entref);
void GScr_GetGroundEnt(scr_entref_t entref);
void GScr_GetMoverEnt(scr_entref_t entref);
void GScr_IsSprinting(scr_entref_t entref);
void GScr_HandleAnimError(int error);
XAnimTree_s *GScr_GetEntAnimTree(gentity_t *ent);
void GScr_SetAnimInternal(scr_entref_t entref, unsigned int flags);
void GScr_SetAnim(scr_entref_t entref);
void G_SetAnimTree(gentity_t *ent, scr_animtree_t *animtree);
void GScr_UseAnimTree(scr_entref_t entref);
void ScrCmd_animscriptedInternal(scr_entref_t entref, int bDelayForActor);
void Scr_AnimRelative(scr_entref_t entref);
void ScrCmd_animscripted(scr_entref_t entref);
void ScrCmd_animscriptedskiprestart(scr_entref_t entref);
void ScrCmd_animrelative(scr_entref_t entref);
void GScr_SetEntityAnimRate(scr_entref_t entref);
void GScr_GetEntityAnimRate(scr_entref_t entref);
void GScr_IsZBarrier(scr_entref_t entref);
void GScr_GetNumZBarrierPieces(scr_entref_t entref);
void GScr_GetZBarrierPieceState(scr_entref_t entref);
void GScr_SetZBarrierPieceState(scr_entref_t entref);
void GScr_IsZBarrierOpen(scr_entref_t entref);
void GScr_IsZBarrierClosed(scr_entref_t entref);
void GScr_SetZBarrierColModel(scr_entref_t entref);
void GScr_HideZBarrierPiece(scr_entref_t entref);
void GScr_ShowZBarrierPiece(scr_entref_t entref);
void GScr_ZBarrierPieceUseDefaultModel(scr_entref_t entref);
void GScr_ZBarrierPieceUseAlternateModel(scr_entref_t entref);
void GScr_ZBarrierPieceUseBoxRiseLogic(scr_entref_t entref);
void GScr_ZBarrierPieceUseUpgradedModel(scr_entref_t entref);
void GScr_GetUpgradedPieceNumLives(scr_entref_t entref);
void GScr_GetZBarrierPieceIndicesInState(scr_entref_t entref);
void GScr_GetZBarrierPieceAnimLengthForState(scr_entref_t entref);
void GScr_GetZBarrierPieceAnimState(scr_entref_t entref);
void GScr_GetZBarrierPieceAnimSubState(scr_entref_t entref);
void GScr_ZBarrierSupportsZombieTaunts(scr_entref_t entref);
void GScr_ZBarrierSupportsZombieReachThroughAttacks(scr_entref_t entref);
void GScr_GetZBarrierTauntAnimState(scr_entref_t entref);
void GScr_GetZBarrierReachThroughAttackAnimState(scr_entref_t entref);
void GScr_GetZBarrierNumAttackSlots(scr_entref_t entref);
void GScr_GetZBarrierAttackSlotHorzOffset(scr_entref_t entref);
void DumpAnimCommand(const char *funcName, XAnimTree_s *tree, unsigned int anim, int root, float weight, float time, float rate);
void (*BuiltIn_GetMethod(const char **pName, int *type, int *min_args, int *max_args))(scr_entref_t);
void (*Scr_GetMethod(const char **pName, int *type, int *min_args, int *max_args))(scr_entref_t);
void Scr_SetOrigin(gentity_t *ent);
void Scr_SetAngles(gentity_t *ent);
void Scr_SetExposureIndex(gentity_t *ent);
void Scr_SetExposureLerpToLighter(gentity_t *ent);
void Scr_SetExposureLerpToDarker(gentity_t *ent);
void Scr_SetHealth(gentity_t *ent);
void GScr_AddEntity(gentity_t *pEnt);
void Scr_ParseGameTypeList_LoadObj();
void Scr_ParseGameTypeList_FastFile();
void Scr_ParseGameTypeList();
char *Scr_GetGameTypeNameForScript(const char *pszGameTypeScript);
BOOL Scr_IsValidGameType(const char *pszGameType);
void Scr_LoadGameType();
void Scr_StartupGameType();
void Scr_FinalizeInitialization();
void Scr_PlayerConnect(gentity_t *self);
void Scr_PlayerDisconnect(gentity_t *self);
void Scr_PlayerDamage(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int dflags, int meansOfDeath, Weapon iWeapon, const vec3_t *vPoint, const vec3_t *vDir, const hitLocation_t hitLoc, int timeOffset, unsigned __int16 boneIndex);
void Scr_PlayerKilled(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath, Weapon iWeapon, const vec3_t *vDir, const hitLocation_t hitLoc, int psTimeOffset, int deathAnimDuration);
void Scr_PlayerMelee(gentity_t *attacker, gentity_t *victim, int damage, const Weapon weapon, vec3_t *hitOrigin, vec3_t *hitDir, unsigned __int16 boneIndex, bool shieldHit);
void Scr_ActorDamage(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int dflags, int meansOfDeath, Weapon iWeapon, const vec3_t *vPoint, const vec3_t *vDir, const hitLocation_t hitLoc, int timeOffset, unsigned __int16 boneIndex);
void Scr_ActorKilled(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath, Weapon iWeapon, const vec3_t *vDir, const hitLocation_t hitLoc, int psTimeOffset);
void Scr_VehicleRadiusDamage(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, float fInnerDamage, float fOuterDamage, int dflags, int meansOfDeath, Weapon iWeapon, const vec3_t *vPoint, const float fRadius, const float coneAngleCos, const vec3_t *coneDirection, int timeOffset);
void Scr_VehicleDamage(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int dflags, int meansOfDeath, Weapon iWeapon, const vec3_t *vPoint, const vec3_t *vDir, const hitLocation_t hitLoc, int timeOffset, int damageFromUnderneath, unsigned int modelIndex, unsigned int partName);
void Scr_PlayerLastStand(gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath, Weapon iWeapon, const vec3_t *vDir, const hitLocation_t hitLoc, int psTimeOffset);
void Scr_PlayerMigrated(gentity_t *self);
void Scr_HostMigration();
void GScr_Shutdown();
void Scr_GlassSmash(const vec3_t *pos, const vec3_t *dir);
void GScr_SpawnPlane();
void ScrCmd_SetZombieShrink(scr_entref_t entref);
void ScrCmd_MakeUsable(scr_entref_t entref);
void GScr_SetTurretTeam(scr_entref_t entref);
void GScr_SetFOVForKillcam(scr_entref_t entref);
void GScr_SetReviveHintString(scr_entref_t entref);
void G_InitObjectives();
int Scr_Objective_SetGamemodeFlags();
int GScr_Objective_Team();
int GScr_Objective_VisibleTeams();
char Scr_BulletTrace(unsigned int a1);
void GScr_UseWeaponModel(scr_entref_t entref);
void GScr_IsValidGameType();
void GScr_SetTeamForTrigger(scr_entref_t entref);
void GScr_SetExcludeTeamForTrigger(scr_entref_t entref);
void GScr_BloodImpact(scr_entref_t entref);
void GScr_SetOwner(scr_entref_t entref);
void GScr_SetMissileOwner(scr_entref_t entref);
void GScr_SetTurretOwner(scr_entref_t entref);
void GScr_SetTeam(scr_entref_t entref);
void GScr_ClearAnim(scr_entref_t entref);
void G_StopAnimScripted(gentity_t *ent, bool getScriptedBlend);
void ScrCmd_stopanimscripted(scr_entref_t entref);
void Scr_AddStruct(scriptInstance_t inst);
void Scr_ResetTimeout(scriptInstance_t inst);

//t6/code/src_noserver/game_mp/g_spawnsystem_mp.cpp
void SpawnSystem_ArchiveClientPosData(ClientNum_t clientNum, SpawnClientData *sc);
int SpawnSystem_GetPlayerSpawnId(gentity_t *ent);
void SpawnSystem_ArchiveInfluencer(SpawnInfluencer *influencer, int sortedIndex);
void SpawnSystem_ArchiveInfluencersPrepData(gentity_t *ent, bool bManualSpawn);
void SpawnSystem_RegisterDvars();
void SpawnSystem_Init(bool restart);
void SpawnSystem_Demo_ClearClientBuffer(int clientNum);
void SpawnSystem_Demo_SendClientBuffer(int clientNum);
void SpawnSystem_ClearPoints();
gentity_t *SpawnSystem_GetEntity(const unsigned __int16 *targetname);
char SpawnSystem_AddPoint(int team, gentity_t *ent);
void SpawnSystem_ClearPointsBaseWeight(int teammask);
void SpawnSystem_SetPointsBaseWeight(float teammask, int a2, vec3_t *objective_position, float angle, float score);
void SpawnSystem_InsertSortedInfluencer(SpawnInfluencer *influencer);
void SpawnSystem_RemoveSortedInfluencer(SpawnInfluencer *influencer);
void SpawnSystem_CalculateCylinderAxis(SpawnInfluencer *influencer);
void SpawnSystem_CalculateCylinderAxisMidpoint(SpawnInfluencer *influencer);
SpawnInfluencerPreset *SpawnSystem_FindPreset(eInfluencerType type, eInfluencerShape shape, float length, float radius, float score, eInfluencerScoreCurve score_curve, const char *description);
SpawnInfluencerPreset *SpawnSystem_SetPresetData(int influencerIndex, eInfluencerType type, eInfluencerShape shape, float length, float radius, float score, eInfluencerScoreCurve score_curve, const char *description);
void SpawnSystem_InitInfluencer(SpawnInfluencer *influencer, eInfluencerType type, eInfluencerShape shape, const vec3_t *origin, const vec3_t *forward, const vec3_t *up, float radius, float axis_length, float score, eInfluencerScoreCurve score_curve, int teamMask, int entNum, int timeout, const char *description);
int SpawnSystem_AddSphereInfluencer(eInfluencerType type, vec3_t *origin, float radius, float score, eInfluencerScoreCurve score_curve, int teamMask, int entNum, int timeout, const char *description);
char SpawnSystem_RemoveInfluencer(int influencer_index);
char SpawnSystem_EnableInfluencer(int influencer_index, bool enabled);
char SpawnSystem_SetInfluencerTeamMask(int influencer_index, int team_mask);
void SpawnSystem_ClearEntityInfluencers(gentity_t *ent);
void SpawnSystem_ClearTimedOutInfluencers(SpawnInfluencer *notthis);
double SpawnSystem_InfluenceWeight(eInfluencerScoreCurve curve_type, float influencer_radius_sq, float distance_sq, float score);
double SpawnSystem_ComputeSphereInfluence(SpawnInfluencer *influencer, SpawnPoint *point);
double SpawnSystem_ComputeCylinderInfluence(SpawnInfluencer *influencer, SpawnPoint *point);
bool SpawnSystem_ComputePointWeight(gentity_t *player, int point_team, int influencer_team, SpawnPoint *point, bool noScoreCull, bool noDangerCull, bool bIsArchiveCall);
int SpawnSystem_ComputePointWeights(gentity_t *player, int point_team, int influencer_team, bool allSpawns, bool noDangerCull);
void SpawnSystem_DisableLowestScorePoints(int team, int shouldDisable);
bool SpawnSystem_SpotWouldTelefrag(vec3_t *vPos, vec3_t *otherPos);
void SpawnSystem_ArchiveManualSpawn(bool a1, gentity_t *a2, gentity_t *ent, vec3_t *spawn_origin, vec3_t *spawn_angles, const char *reason);
int SpawnSystem_GetSortedPointCount(int team);
int SpawnSystem_GetSortedPointEntNum(int team, int index);
void SpawnSystem_DebugRenderVisibilityCheck(vec3_t *point2, gentity_t *ignore_entity);
char SpawnSystem_IsSpawnPointVisible(vec3_t *origin, vec3_t *angles, int vis_teams_mask, gentity_t *ignore_entity, bool render_mode_success, vec3_t *enemyPos, vec3_t *sightPos);
char SpawnSystem_IsSpawnPointVisible(vec3_t *origin, vec3_t *angles, int vis_teams_mask, gentity_t *ignore_entity);
void SpawnSystem_SetSpawnClientFlag(int clientNum, int flags);
void SpawnSystem_DemoBadSpawn(int playerEntityNum, int enemyEntityNum, int playerTeam, int pointTeam, int influencerTeam);
void SpawnSystem_RegisterPlayerDamage(gentity_t *ent, gentity_t *enemy, Weapon weapon);
void SpawnSystem_ArchiveInfluencers(gentity_t *ent, int point_team, int influencer_team);
void SpawnSystem_CalculateCylinderLength(SpawnInfluencer *influencer);
void SpawnSystem_UpdateCylinderInfluencer(SpawnInfluencer *influencer);
int SpawnSystem_AddCylinderInfluencer(eInfluencerType type, vec3_t *origin, vec3_t *forward, vec3_t *up, float radius, float axis_length, float score, eInfluencerScoreCurve score_curve, int teamMask, int entNum, int timeout, const char *description);
void SpawnSystem_UpdateInfluencerBounds();
void SpawnSystem_UpdateInfluencerOriginAngles();
int SpawnSystem_CheckDangerousPoints(gentity_t *ent, int point_team, int vis_teams_mask, int maxDangerousChecks, bool bUseFirstNonTelefragWhenAllPointsDangerous);
void SpawnSystem_Cmd_User_BadSpawn(gentity_t *ent);
void SpawnSystem_SortPoints();
void SpawnSystem_Update(SpawnInfluencer *notthis);
void SpawnSystem_SortPointsByScore(int team);
int SpawnSystem_UpdateSpawnPointsForPlayer(bool a1, gentity_t *a2, char *allSpawns, gentity_t *ent, int point_team, int influencer_team, int vis_teams_mask, bool skipRecording);
void SpawnSystem_Load(MemoryFile *memFile);

//t6/code/src_noserver/game_mp/g_spawn_mp.cpp
int G_SpawnFloat(const SpawnVar *spawnVar, const char *key, const char *defaultString, float *out);
int G_SpawnInt(const SpawnVar *spawnVar, const char *key, const char *defaultString, int *out);
void Scr_ReadOnlyField();
void G_FreeEntityWrapper(gentity_t *ent);
unsigned int G_SetEntityScriptVariableInternal(const char *key, const char *value);
unsigned int G_SpawnStruct(SpawnVar *spawnVar);
void G_DuplicateScriptFields(gentity_t *dest, const gentity_t *source);
Weapon G_GetItemForClassname(const char *classname);
char IsClientOnlyEntity(const SpawnVar *spawnVar);
int G_CallSpawnEntity(gentity_t *ent);
void GScr_AddFieldsForEntity();
void GScr_AddFieldsForRadiant();
void Scr_FreeEntityConstStrings(gentity_t *pEnt);
void Scr_FreeEntity(gentity_t *ent);
void Scr_AddEntity(scriptInstance_t inst, gentity_t *ent);
gentity_t *Scr_GetEntityAllowNull(unsigned int index, scriptInstance_t inst);
gentity_t *Scr_GetEntity(unsigned int index);
void Scr_FreeHudElem(game_hudelem_s *hud);
void Scr_AddHudElem(game_hudelem_s *hud);
unsigned __int16 Scr_ExecEntThread(gentity_t *ent, int handle, unsigned int paramcount);
void Scr_Notify(gentity_t *ent, unsigned __int16 stringValue, unsigned int paramcount);
void Scr_GetEnt();
void Scr_GetGenericSpawnerArray(int offset, unsigned int name);
void Scr_GetEntArray();
void Scr_GetDamageableEntArray();
void SP_worldspawn(SpawnVar *spawnVar);
void G_LoadStructs();
void G_ParseEntityFields(const SpawnVar *spawnVar, gentity_t *ent, int radiant_update);
void G_DuplicateEntityFields(gentity_t *dest, const gentity_t *source);
void G_SetupDestructible(gentity_t *ent, const char *destructibleName);
void G_SetupDestructible(gentity_t *ent, SpawnVar *spawnVar);
gentity_t *G_CallSpawn(SpawnVar *spawnVar);
void GScr_SetGenericField(scriptInstance_t a1, unsigned __int8 *b, fieldtype_t type, int ofs, unsigned int whichbits);
void GScr_GetGenericField(unsigned __int8 *b, fieldtype_t type, int ofs, unsigned int whichbits);
void G_SpawnEntitiesFromString();
int Scr_SetEntityField(int entnum, int offset);
int Scr_SetObjectField(int a1, unsigned int classnum, int entnum, int offset);
void Scr_GetEntityField(int entnum, int offset);
void Scr_GetObjectField(unsigned int classnum, int entnum, int offset);

//t6/code/src_noserver/game_mp/g_trigger_mp.cpp
void G_Trigger(gentity_t *self, gentity_t *other);
bool InitTrigger(gentity_t *self);
void InitSentientTrigger(gentity_t *self);
void Touch_Multi(gentity_t *self, gentity_t *other);
void SP_trigger_multiple(gentity_t *ent, SpawnVar *spawnVar);
void init_trigger_radius(gentity_t *ent, float radius, float height);
void SP_trigger_radius(gentity_t *ent, SpawnVar *spawnVar);
void SP_trigger_radius_use(float ent, gentity_t *a2, SpawnVar *spawnVar);
void init_trigger_box(gentity_t *ent, const vec3_t *radius);
void SP_trigger_box(gentity_t *ent, SpawnVar *spawnVar);
void SP_trigger_box_use(gentity_t *ent, SpawnVar *spawnVar);
void SP_trigger_disk(gentity_t *ent, SpawnVar *spawnVar);
void hurt_touch(gentity_t *self, gentity_t *other);
void hurt_use(gentity_t *self);
void SP_trigger_hurt(gentity_t *self, SpawnVar *spawnVar);
void SP_trigger_once(gentity_t *ent);
BOOL Respond_trigger_damage(gentity_t *pEnt, int iMOD);
void Activate_trigger_damage(gentity_t *pEnt, gentity_t *pOther, int iDamage, int iMOD);
void Use_trigger_damage(gentity_t *pEnt);
void Pain_trigger_damage(gentity_t *pSelf, gentity_t *pAttacker, int iDamage, const vec3_t *vPoint, const int iMod);
void Flame_trigger_damage(gentity_t *pSelf, gentity_t *pAttacker, int iDamage, const vec3_t *vPoint, const int iMod, const vec3_t *vDir);
void Die_trigger_damage(gentity_t *pSelf, gentity_t *pInflictor, gentity_t *pAttacker, int iDamage, int iMod);
void SP_trigger_damage(gentity_t *pSelf, SpawnVar *spawnVar);
void G_CheckHitTriggerDamage(gentity_t *pActivator, const vec3_t *vStart, const vec3_t *vEnd, int iDamage, int iMOD);
void G_GrenadeTouchTriggerDamage(gentity_t *pActivator, vec3_t *vStart, vec3_t *vEnd, int iDamage, int iMOD);
void SP_trigger_lookat(gentity_t *self);
void trigger_ik_playerclip_terrain_touch(gentity_t *ent, gentity_t *other);
void SP_trigger_ik_playerclip_terrain(gentity_t *self);
void trigger_ik_disable_terrain_mapping_touch(gentity_t *ent, gentity_t *other);

//t6/code/src_noserver/game_mp/g_utils_mp.cpp
void G_ClearCachedModels();
int G_FindConfigstringIndex(const char *name, int start, int max, int create, const char *errormsg);
int G_LocalizedStringIndex(const char *string);
void ClearRegisteredLeaderboards();
void SaveRegisteredLeaderboards();
int G_MaterialIndex(const char *name);
unsigned int G_ModelIndex(const char *name);
XModel *G_GetModel(int index);
bool G_GetModelBounds(int index, vec3_t *outMins, vec3_t *outMaxs);
unsigned int G_ModelName(int index);
void G_EntityCentroid(const gentity_t *ent, vec3_t *centroid);
void G_GetEntityBoundsPoint(const gentity_t *ent, float ratioFromCenterX, float ratioFromCenterY, float ratioFromCenterZ, vec3_t *result);
void G_EntityNearestBoxPoint(const gentity_t *ent, const vec3_t *vOrigin, vec3_t *vClosest);
int G_TagIndex(const char *name);
int G_EffectIndex(const char *name);
int G_ShellShockIndex(const char *name);
int G_RumbleIndex(const char *name);
XAnimTree_s *G_GetEntAnimTree(gentity_t *ent);
void G_SetModel(gentity_t *ent, const char *modelName);
void G_SetModelIfLoaded(gentity_t *ent, const char *modelName);
void G_OverrideModel(int modelIndex, const char *defaultModelName);
void G_DObjUpdateServerTime(gentity_t *ent, int bNotify, void (*CallbackFunc)());
void G_DObjCalcPose(gentity_t *ent, int *partBits);
void G_DObjCalcBone(const gentity_t *ent, int boneIndex);
DObjAnimMat *G_DObjGetLocalTagMatrix(const gentity_t *ent, unsigned int tagName);
int G_DObjGetWorldTagMatrix(const gentity_t *ent, unsigned int tagName, vec3_t *tagMat);
int G_DObjGetWorldTagPos(const gentity_t *ent, unsigned int tagName, vec3_t *pos);
DObjAnimMat *G_DObjGetLocalBoneIndexMatrix(const gentity_t *ent, int boneIndex);
void G_DObjGetWorldBoneIndexPos(const gentity_t *ent, int boneIndex, vec3_t *pos);
void G_DObjGetWorldBoneIndexMatrix(const gentity_t *ent, int boneIndex, vec3_t *tagMat);
gentity_t *G_Find(gentity_t *from, int fieldofs, unsigned __int16 match);
void G_InitGentity(gentity_t *e);
void G_PrintEntities();
gentity_t *G_SpawnStaticEntity(int start, int range, const char *entity_type);
gentity_t *G_SpawnTurret(int a1, int a2);
gentity_t *G_SpawnActor(int a1, int a2);
gentity_t *G_Spawn();
void G_ClearGroundEntity(gentity_t *ent);
void G_ClearGroundEntityRefs(gentity_t *ed);
void G_FreeEntityDelay(gentity_t *ed);
void G_BroadcastEntity(gentity_t *ent);
void G_FreeEntityAfterEvent(gentity_t *ent);
void G_AddEvent(gentity_t *ent, int event, unsigned int eventParm);
void G_RegisterSoundWait(gentity_t *ent, unsigned int index, unsigned int notifyString);
void G_SetOrigin(gentity_t *ent, const vec3_t *origin);
void G_SetAngle(gentity_t *ent, const vec3_t *angle);
void G_SetConstString(unsigned __int16 *to, const char *from);
const char *G_GetEntityTypeName(const gentity_t *ent);
BOOL G_IsSpeciesDog(int species);
BOOL G_IsBigDog(gentity_t *gent);
BOOL CG_IsSpeciesBigDog(int species);
BOOL G_SpeciesUsesNonGenericAnimtree(int species);
BOOL G_SpeciesCanUseNegotiations(int species);
void G_srand(unsigned int seed);
unsigned int *G_GetRandomSeed();
unsigned int G_rand();
double G_flrand(float min, float max);
int G_irand(int min, int max);
double G_random();
double G_crandom();
void G_UpdateVehicleAttachedModels(gentity_t *ent);
void G_UpdateScriptMoverAttachedModels(gentity_t *ent);
void G_ClientDObjUpdate(gentity_t *ent);
void G_DObjUpdate(gentity_t *ent);
void G_PlayerCorpseDObjUpdate(gentity_t *ent);
void G_DObjLoad(gentity_t *ent);
int G_EntDetach(gentity_t *ent, const char *modelName, unsigned int tagName);
void G_EntDetachAll(gentity_t *ent);
void G_TraceBulletPathForVehTurret(gentity_t *ent, DObjTrace_s *trace, int gunnerIndex);
gentity_t *G_SpawnVehicle(int a1, int a2, char *a3);
void G_FreeEntityRefs(gentity_t *ed);
void G_FreeEntity(gentity_t *ed);
gentity_t *G_TempEntity(const vec3_t *origin, int event);
gentity_t *G_PlaySoundAliasAtPoint(const vec3_t *origin, unsigned int alias);
gentity_t *G_PlaySoundAlias(gentity_t *ent, unsigned int alias, unsigned int notifyString, unsigned int bone);
gentity_t *G_PlaySoundAliasWithNotify(unsigned int a1, gentity_t *a2, gentity_t *ent, unsigned int alias, unsigned int notifyString, unsigned int tag);
void G_AnimScriptSound(ClientNum_t client, SndAliasList *aliasList);
int G_EntAttach(gentity_t *ent, const char *modelName, unsigned int tagName, int ignoreCollision);
gentity_t *G_SpawnPlayerClone();
gentity_t *G_SpawnActorClone();
void G_SpawnVehicle(gentity_t *ent, const char *typeName, int load);
void G_SpawnTurret(gentity_t *self, const char *weaponinfoname, SpawnVar *spawnVar);

//t6/code/src_noserver/game_mp/player_use_mp.cpp
void Player_UseEntity(gentity_t *playerEnt, gentity_t *useEnt);
bool Player_ActivateCmd(gentity_t *ent, bool allowWeaponPickup);
char Player_IsPlayerUsingTurretNearby(gentity_t *ent);
char Player_EntityBlocksTacticalInsertion(const gentity_t *player);
bool Player_ActivateHoldCmdAllowed(gentity_t *ent);
void Player_ActivateDoubleTapCmd(gentity_t *ent);
bool trigger_skip_team(gentity_t *trigger, int team);
bool uselist_skip_team(gentity_t *trigger, int team);
int Player_GetItemCursorHint(const gclient_t *client, const gentity_t *traceEnt);
void Player_SetTurretDropHint(gentity_t *ent);
gentity_t *Player_UpdateLookAtEntityTrace(trace_t *trace, vec3_t *start, vec3_t *end, int entNum, int contentMask, unsigned __int8 *priorityMap, vec3_t *forward);
void Player_ActivateHoldCmd(gentity_t *ent);
void Player_UpdateActivate(gentity_t *ent);
void Player_UpdateLookAtEntity(unsigned int a1, vec3_t *a2, gentity_t *ent);
char *Player_GetUseList(gentity_t *ent, useList_t *useList, int prevHintEntIndex);
void Player_UpdateCursorHints(gentity_t *ent);

//t6/code/src_noserver/game_mp/savememory_mp.cpp
SaveGame *SaveMemory_GetSaveHandle(SaveHandleType type);
SaveGame *SaveMemory_GetHeader(SaveGame *save);
MemoryFile *SaveMemory_GetMemoryFile(SaveGame *save);
unsigned int SaveMemory_CalculateChecksum(SaveGame *save);
void SaveMemory_MoveToSegment(SaveGame *save, int index);

