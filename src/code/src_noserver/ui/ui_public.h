#pragma once

#include "types.h"

//t6/code/src_noserver/ui/ui_atoms.cpp
void UI_DrawHandlePic(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, const vec4_t *color, Material *material);
void UI_DrawHandlePicRotated(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, const vec4_t *color, float angle, Material *material);
void UI_DrawHandlePicFramed(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float frameSize, float frameTexSize, int frameSides, const vec4_t *color, Material *material);
double UI_LoadBarProgress_LoadObj();
double UI_LoadBarProgress_FastFile();
void UI_ForceFullLoadBar(bool force);
void UI_DrawLoadBar(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, const vec4_t *color, Material *material);
void UI_FillRectPhysical(float x, float y, float width, float height, const vec4_t *color);
void UI_FillRect(const ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, const vec4_t *color);
void UI_DrawSpinner(const ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, const vec4_t *color);
void UI_DrawSpinnerLoadbar(const ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, const vec4_t *color);

//t6/code/src_noserver/ui/ui_codtv.cpp
void UI_Codtv_Init();
codtvType_e UI_Codtv_GetType(const char *typeString);
codtvImageCategory_e UI_Codtv_GetImageCategory(const char *categoryString);
void UI_Codtv_FilterAll(codtvDWContent_t *content);
void UI_Codtv_FilterSelf(codtvDWContent_t *content);
void UI_Codtv_FilterOtherPlayer(codtvDWContent_t *content);
void UI_Codtv_FilterFriends(codtvDWContent_t *content);
void UI_Codtv_FilterPooled(codtvDWContent_t *content);
void UI_Codtv_FilterUser(codtvDWContent_t *content);
void UI_Codtv_FilterFilms(codtvDWContent_t *content);
void UI_Codtv_FilterClips(codtvDWContent_t *content);
void UI_Codtv_FilterScreenshots(codtvDWContent_t *content);
void UI_Codtv_FilterCustomGames(codtvDWContent_t *content);
void UI_Codtv_FilterEmblems(codtvDWContent_t *content);
void UI_Codtv_FilterBookmarked(codtvDWContent_t *content);
void UI_Codtv_FilterVictories(codtvDWContent_t *content);
void UI_Codtv_FilterHighestRated(codtvDWContent_t *content);
void UI_Codtv_FilterTrending(codtvDWContent_t *content);
void UI_Codtv_FilterStaffPick(codtvDWContent_t *content);
void UI_Codtv_FilterClan(codtvDWContent_t *content);
void UI_Codtv_FilterLeagueTeam(codtvDWContent_t *content);
void UI_Codtv_FilterIngameStore(codtvDWContent_t *content);
char UI_Codtv_ReadFolderContentDW(codtvFolder_t *folder);
char UI_Codtv_ReadFolderContentVideo(codtvFolder_t *folder);
char UI_Codtv_ReadCustomButtonAction(codtvFolder_t *folder);
char UI_Codtv_ReadFolderContent(codtvFolder_t *folder);
char UI_Codtv_ReadFolderType(codtvFolder_t *folder);
char UI_Codtv_ReadFolderImage(codtvFolder_t *folder);
char UI_Codtv_ReadFolderRef(codtvFolder_t *folder);
char UI_Codtv_ReadFolderName(codtvFolder_t *folder);
char UI_Codtv_ReadFolder(codtvFolder_t *parent);
char UI_Codtv_ReadRootVersion();
char UI_Codtv_ParseHeader();
bool UI_Codtv_ParseMenuFile(unsigned __int8 *buffer, jsmntok_t *parseTokens);
void UI_Codtv_Parse(unsigned __int8 *buffer);

//t6/code/src_noserver/ui/ui_emblem.cpp
emblemDownloadData_t *UI_EmblemPool_Get(unsigned __int64 fileID);
void UI_EmblemClampLayer(CompositeEmblemLayer *layer);
void UI_DrawCustomEmblem(UIContextIndex_t contextIndex, const rectDef_s *rect, const vec4_t *color);
void UI_DrawEmblemSelector(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, const rectDef_s *rect, const vec4_t *color);
void UI_DrawEmblemIconThumbnail(UIContextIndex_t contextIndex, const rectDef_s *rect, const vec4_t *color);
void UI_EmblemUpdate();
int UI_EmblemGetSelectedLayer();
bool UI_EmblemCanOutlineLayer(int layer);
BOOL UI_EmblemCanDuplicateLayer(ControllerIndex_t controllerIndex);
void UI_EmblemDuplicate_f();
const GfxViewParms *UI_EmblemGetLayerName(int layer);
__int16 UI_EmblemGetSelectedBackgroundID();
const char *UI_EmblemGetStateDisplay(ControllerIndex_t controllerIndex, int idx);
char *UI_EmblemGetCategoryDisplay(ControllerIndex_t controllerIndex, int idx);
int UI_EmblemGetFilterCount(ControllerIndex_t controllerIndex, int state, int category);
__int16 UI_EmblemGetFilterIconID(ControllerIndex_t controllerIndex, int state, int category, int index);
bool UI_EmblemUpload_SetMetada(const ControllerIndex_t controllerIndex, unsigned __int8 *metaData, int metaDataSize);
void UI_EmblemUploadToSlotSuccess(const ControllerIndex_t controllerIndex, unsigned __int64 fileID);
void UI_EmblemUploadToSlotFailure(const ControllerIndex_t controllerIndex);
void UI_EmblemUploadToSlot(const ControllerIndex_t controllerIndex, int slot, bool setToProfile);
void UI_EmblemSetName(const char *name);
void UI_EmblemSetDescription(const char *description);
void UI_EmblemClearUploadInfo_f();
void UI_EmblemSelect_f();
void UI_EmblemReset_f();
void UI_EmblemClear_f();
void UI_EmblemDelete_f();
void UI_EmblemClearAll_f();
void UI_EmblemClearClipboard_f();
void UI_EmblemRotate_f();
void UI_EmblemMove_f();
void UI_EmblemScale_f();
void UI_EmblemIcon_f();
void UI_EmblemSetSelectedLayerIconId_f();
void UI_EmblemSetEmptyBoxIconId_f();
void UI_EmblemPalette_f();
void UI_EmblemOutline_f();
void UI_EmblemToggleOutline_f();
void UI_EmblemFlip_f();
void UI_EmblemToggleFlip_f();
void UI_EmblemLayerIncreaseOpacity_f();
void UI_EmblemLayerDecreaseOpacity_f();
void UI_EmblemLayerSetOpacity_f();
void UI_EmblemSetScaleMode_f();
void UI_EmblemMoveLayer(ControllerIndex_t controllerIndex, int targetz);
void UI_EmblemSetLayerColorRGB_f();
void UI_EmblemSetSelectedRecentColor_f();
void UI_EmblemSetRecentColorRGBA_f();
void UI_EmblemSetRGBTweakedColor_f();
void UI_EmblemMoveLayer_f();
void UI_EmblemMoveLayerRelative_f();
void UI_EmblemCopy_f();
void UI_EmblemCopyLayer_f();
void UI_EmblemPasteLayer_f();
void UI_EmblemRevertColorChanges_f();
void UI_EmblemBeginEdit_f();
void UI_EmblemEndEdit_f();
void UI_EmblemSelectBackground_f();
void UI_EmblemDump_f();
;
void UI_EmblemSetAsDefault_f();
void UI_EmblemSetFromDefault_f();
;
void UI_EmblemLoadFromFile_f();
void UI_EmblemSetLeagueIdentity_f();
void UI_EmblemSetClanIdentity_f();
void UI_EmblemMoveUpRepeatEnabled_f();
void UI_EmblemMoveDownRepeatEnabled_f();
void UI_EmblemMoveLeftRepeatEnabled_f();
void UI_EmblemMoveRightRepeatEnabled_f();
void UI_EmblemScaleUpRepeatEnabled_f();
void UI_EmblemScaleDownRepeatEnabled_f();
void UI_EmblemRotateLeftRepeatEnabled_f();
void UI_EmblemRotateRightRepeatEnabled_f();
void UI_EmblemRepeatBttnsLooseFocus_f();
void UI_EmblemSetPosition_f();
void UI_EmblemShowFileID_f();
vec4_t *UI_GetSlectedSwatchElementColor(vec4_t *result, int row, int column, int totalRows, int totalColumns);
void UI_EmblemSetLayerColorFromSwatch_f();
void UI_EmblemRegisterCmds();

//t6/code/src_noserver/ui/ui_feeders.cpp
void UI_BuildPlayerList(LocalClientNum_t localClientNum);
int UI_FeederCount(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, float feederID, listBoxDef_s *listPtr);
void UI_FeederItemColor(ControllerIndex_t controllerIndex, UIContextIndex_t contextIndex, itemDef_s *item, const float feederID, int index, int column, vec4_t *color, bool onFocus);
void UI_ResetSelectedPlayerXuid();
void UI_OverrideCursorPos_Gamemodes(UIContextIndex_t contextIndex, listBoxDef_s *listPtr);
void UI_OverrideCursorPos_Servers(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, listBoxDef_s *listPtr);
char UI_OverrideKeyPress(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int key);
void UI_OverrideCursorPos_DynamicMenu(UIContextIndex_t contextIndex, listBoxDef_s *listPtr);
int UI_OverrideCursorPos_Default(LocalClientNum_t a1, int a2, int a3, float a4);
// void UI_OverrideCursorPos(int a1@<ebx>, LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
void UI_FeederSelection(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, float feederID, int index);
bool UI_FeederDataExtended_DynamicMenu(int index, listBoxDef_s *listBox, const char *field, const char **stringResult);
bool UI_FeederDataExtended(LocalClientNum_t localClientNum, itemDef_s *item, const char *field);
void UI_AddToFeeder(itemDef_s *item, const char *eventName, int argCount, const char **args);
void UI_AddToFeederExtended(itemDef_s *item, const char *onActionEvent, const char *onFocusEvent, bool disableCondition, int argCount, const char **args);
void UI_ChangeRowStatus(itemDef_s *item, int rowToChange, int newStatus);
void UI_ClearFeeder(UIContextIndex_t contextIndex, itemDef_s *item, bool resetCursorPos);
bool UI_FeederData(LocalClientNum_t localClientNum, itemDef_s *item, const char *field, const char **stringResult, float *numberResult);
const char *UI_FeederItemText_DynamicMenu(UIContextIndex_t contextIndex, int index, int column, listBoxDef_s *listPtr, Material **handle);
void UI_RaiseFeederEvent(LocalClientNum_t localClientNum, itemDef_s *item, const char *eventName);
;

//t6/code/src_noserver/ui/ui_friends.cpp
void UI_FriendsRegisterDvars();

//t6/code/src_noserver/ui/ui_keyboard.cpp
void UI_SetActiveKeyboardType(int keyboardType);
void UI_Keyboard_ClanTagEntered(LocalClientNum_t localClientNum, const char *clanTag);
BOOL UI_Keyboard_ParseEmail(const char *address);
void UI_Keyboard_CheckValidEmail();
void UI_Keyboard_EmailEntry_f();
void UI_KeyboardComplete(LocalClientNum_t localClientNum);
void UI_Keyboard_Complete_f();
void UI_Keyboard_Cancel_f();
void UI_Keyboard_New_f();

//#include "ui/ui_local.h"

//t6/code/src_noserver/ui/ui_localvars.cpp
void UILocalVar_Init(UILocalVarContext *context);
void UILocalVar_Shutdown(UILocalVarContext *context);
char UILocalVar_FindLocation(UILocalVarContext *context, const char *name, unsigned int *hashForName);
const UILocalVar *UILocalVar_Find(UILocalVarContext *context, const char *name);
UILocalVar *UILocalVar_FindOrCreate(UILocalVarContext *context, const char *name);
BOOL UILocalVar_GetBool(const UILocalVar *var);
// UILocalVar::<unnamed_type_u> UILocalVar_GetInt(const UILocalVar *var);
double UILocalVar_GetFloat(const UILocalVar *var);
char *UILocalVar_GetString(const UILocalVar *var, char *stringBuf, int size);
void UILocalVar_SetBool(const UILocalVar *var, bool b);
void UILocalVar_SetInt(const UILocalVar *var, int i);
void UILocalVar_SetFloat(const UILocalVar *var, float f);
void UILocalVar_SetString(const UILocalVar *var, const char *s);

//t6/code/src_noserver/ui/ui_main.cpp
UiContext *UI_UIContext_GetInfo(UIContextIndex_t contextIndex);
UiContext *UI_GetInfo(LocalClientNum_t localClientNum);
UILocalVarContext *UI_UIContext_GetLocalVarsContext(UIContextIndex_t contextIndex);
const char *UI_GetMonthAbbrev(int month);
void TRACK_ui_main();
void UI_RegisterDvars();
void UI_AssetCache();
char *GetMenuBuffer_LoadObj(const char *filename);
XModelPiece *GetMenuBuffer_FastFile(const char *filename);
char *UI_GetMenuBuffer();
void UI_GameModeHistory_AddMatchHistory();
void UI_GameModeHistory_Clear();
void UI_DrawSides(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float size, const vec4_t *color);
void UI_DrawTopBottom(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float size, const vec4_t *color);
void UI_DrawRect(const ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, float size, const vec4_t *color);
void UI_DrawHighlightRect(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float size, const vec4_t *hiColor, const vec4_t *loColor);
int UI_TextWidth(LocalClientNum_t localClientNum, const char *text, int maxChars, Font_s *font, float scale);
int UI_TextHeight(Font_s *font, float scale);
void UI_DrawTextRotated(const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style, float rotation);
void UI_DrawTextWithGlow(const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style, const vec4_t *glowColor, bool subtitle, bool cinematic);
void UI_DrawTextNoSnap(const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style);
void UI_DrawTextWithCursor(const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style, int cursorPos, char cursor);
Font_s *UI_GetFontHandleDefault(float scale);
Font_s *UI_GetFontHandle(const ScreenPlacement *scrPlace, int fontEnum, float scale);
void UI_UpdateTime(LocalClientNum_t localClientNum, int realtime);
bool UI_ShouldDrawBuildNumber(LocalClientNum_t localClientNum);
void UI_Shutdown(LocalClientNum_t localClientNum);
MenuList *Load_ScriptMenuInternal(const char *pszMenu, int imageTrack);
int Load_ScriptMenu(int a1, const char *a2, LocalClientNum_t localClientNum);
void UI_VerifyLanguage();
bool UI_GetOpenOrCloseMenuOnDvarArgs(const char **args, const char *cmd, char *dvarName, int dvarNameLen, char *testValue, int testValueLen, char *menuName, int menuNameLen);
bool UI_DvarValueTest(const char *cmd, const char *dvarName, const char *testValue, bool wantMatch);
;
;
void UI_RunMenuScript(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, const char **args, const char *actualScript);
void UI_Pause(LocalClientNum_t localClientNum, int b);
void UI_UpdateMouseScreenPosition(LocalClientNum_t localClientNum, int x, int y);
void UI_MouseEvent(LocalClientNum_t localClientNum);
int UI_GetActiveMenu(LocalClientNum_t localClientNum);
int UI_IsFullscreen(LocalClientNum_t localClientNum);
double UI_GetBlurRadius(LocalClientNum_t localClientNum);
const char *UI_SafeTranslateString(const char *reference);
void UI_FormatStringWithCommas(char *outputString, int stringLength, unsigned __int64 value);
void UI_FilterStringForButtonAnimation(char *str, unsigned int strMaxSize);
void UI_ReplaceConversions(const char *sourceString, ConversionArguments *arguments, char *outputString, int outputStringSize);
void UI_CloseFocusedMenu(LocalClientNum_t localClientNum);
bool Menu_IsMenuOpenAndVisible(const LocalClientNum_t localClientNum, const char *menuName);
void UI_ClosePopupScriptMenu(LocalClientNum_t localClientNum, bool allowResponse);
bool UI_AllowScriptMenuResponse(LocalClientNum_t localClientNum);
void UI_CloseInGameMenu(LocalClientNum_t localClientNum);
bool CheckCurrentChar(char charToCheck, const char *testChars);
;
bool UI_CheckClanTagAllowed(ControllerIndex_t controllerIndex, const char *clanTag);
void UI_SetClanName(ControllerIndex_t localControllerIndex, const char *clanName);
void UI_SetClanNameCmd();
void UI_CheckClanName();
void UI_CheckClanNameCmd();
int UI_OwnerDrawWidth(LocalClientNum_t localClientNum, int ownerDraw, Font_s *font, float scale);
void UI_DrawLocalTalking(LocalClientNum_t localClientNum, SessionData *session, UIContextIndex_t contextIndex, const rectDef_s *rect, const vec4_t *color);
int UI_GetTalkerClientNum(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, const int num);
void UI_DrawPartyStatus(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, vec4_t *color, float textScale, int style, float text_x, float text_y, int textAlignMode);
char *GetXpLockDescription(const LocalClientNum_t localClientNum, const int playlistId);
void UI_DrawScrollingTextLong(const LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int style, int textAlignMode, const char *text);
void UI_DrawScrollingTextMOTD(const LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int style, int textAlignMode, const char *text);
void UI_DrawControllerIcon(const LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, const rectDef_s *rect, const vec4_t *color);
;
void UI_InitUIInfos();
void UI_InitOnceForAllClients();
void UI_Init(LocalClientNum_t localClientNum);
bool UI_KeyEvent_CancelButtonPressed(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu, int key, int down);
bool UI_MenuInputAllowedForLocalClientNum(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
bool UI_KeyEvent_IsLocalClientInputAllowedForMenu(LocalClientNum_t localClientNum, uiInfo_s *uiInfo, menuDef_t *menu);
char UI_HandleLocalClientInput(LocalClientNum_t localClientNum, int key, int down, uiInfo_s *uiInfo, menuDef_t *menu);
void UI_CloseAll(LocalClientNum_t localClientNum);
void UI_UIContext_OpenToastPopup(UIContextIndex_t contextIndex, const char *toastPopupIconName, const char *toastPopupTitle, const char *toastPopupDesc, int toastPopupDuration);
void UI_OpenErrorPopup();
void UI_OpenMenu(LocalClientNum_t localClientNum, const char *menuName);
void UI_CloseMenu(LocalClientNum_t localClientNum, const char *menuName);
void UI_CloseFromMenuToTopOfStack(LocalClientNum_t localClientNum, const char *menuName);
void UI_OpenToastPopup(LocalClientNum_t localClientNum, const char *toastPopupIconName, const char *toastPopupTitle, const char *toastPopupDesc, int toastPopupDuration);
void UI_LoadIngameMenus(LocalClientNum_t localClientNum);
char *UI_ToUpper(const char *sourceString);
bool UI_KeysBypassMenu(const LocalClientNum_t localClientNum);
void UI_DrawTextPadding(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style, float padding);
void UI_DrawText(const ScreenPlacement *scrPlace, const char *text, int maxChars, Font_s *font, float x, float y, int horzAlign, int vertAlign, float scale, const vec4_t *color, int style, LocalClientNum_t localClientNum);
void UI_DrawMouseCursor(LocalClientNum_t localClientNum);
const char *UI_GetMapDisplayName(const char *pszMap);
const char *UI_GetMapDisplayNameFromPartialLoadNameMatch(const char *mapName, int *mapLoadNameLen);
const char *UI_GetGameTypeDisplayName(const char *pszGameType, const char *pszMap);
void UI_ShowAcceptInviteWarning(LocalClientNum_t localClientNum);
char *UI_ReplaceConversionStrings(const char *sourceString, int numStrings, const char **replaceStrings);
char *UI_ReplaceConversionInts(const char *sourceString, int numInts, int *replaceInts);
void UI_DrawKeyBindStatus(UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int textStyle);
void UI_DrawTalkerNum(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, const int num, rectDef_s *rect, Font_s *font, vec4_t *color, float textScale, int style);
void UI_DrawReservedSlots(const UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, vec4_t *color, float textScale, int style);
void UI_DrawLoggedInUser(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int textStyle);
void UI_DrawLoggedInUserName(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int textStyle);
void UI_OwnerDrawText(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, float x, float y, float w, float h, int horzAlign, int vertAlign, float text_x, float text_y, int ownerDraw, int ownerDrawFlags, int align, Font_s *font, float scale, vec4_t *color, Material *material, int textStyle, rectDef_s parentRect, int textAlignMode, const char *text);
void UI_KeyEvent(LocalClientNum_t localClientNum, int key, int down);
void UI_DrawBuildNumber(LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex);
void UI_DrawSessionAndGameModeLine(LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, const char *text, Font_s *fh, vec2_t *buildLocation, float buildSize, bool error);
;
void UI_DrawGameModeHistory_DrawMode_HostedOrPlayed(const LocalClientNum_t localClientNum, const char *gamemode, const char *hostedOrPlayed, vec2_t *buildLocation, float buildSize, Font_s *fh);
void UI_DrawGameModeHistory_DrawMode(const LocalClientNum_t localClientNum, const char *gamemode, vec2_t *buildLocation, float buildSize, Font_s *fh);
void UI_DrawGameModeHistory(const LocalClientNum_t localClientNum);
void UI_Refresh(LocalClientNum_t localClientNum);
char *UI_ReplaceConversionString(const char *sourceString, const char *replaceString);
char *UI_ReplaceConversionInt(const char *sourceString, int replaceInt);
const char *GetPLevelLockDescription(const LocalClientNum_t localClientNum, const int playlistId);
const char *UI_GetPlaylistDescription(const LocalClientNum_t localClientNum, int playlistId, PlaylistLockState lockState);
void UI_SecondsAsTimeDisplay(int seconds, char *output, int maxChars);

//t6/code/src_noserver/ui/ui_mem_track.cpp
void UI_track_init();

//t6/code/src_noserver/ui/ui_motd.cpp
char MOTD_ParseVersion();
char MOTD_ParseMOTDVersion();
char MOTD_ParseSingleView();
char MOTD_ParseExpiration();
char MOTD_ParseImageCategory();
char MOTD_ParseTitle();
char MOTD_ParseMessage();
char MOTD_ParseImage();
char MOTD_ParseAction();
char MOTD_ParseActionContext();
char MOTD_ParseActionString();
char MOTD_ParseBannerTitle();
char MOTD_ParseBannerMessage();
char MOTD_ParseBannerImage();
char MOTD_ParseBannerAction();
char MOTD_ParseBannerActionContext();
char MOTD_ParseBannerActionString();
char MOTD_ParseEliteImage();
char MOTD_ParseFounderImage();

//t6/code/src_noserver/ui/ui_playlists.cpp
const char *Playlist_GetPlaylistFilename();
char *Playlist_Strdup(const char *src);
const char *Playlist_Strdup_Newline(const char *src);
char *Playlist_BeginRules();
bool Playlist_AppendRules(const char *base, const char *token);
const char *Playlist_GetLanguage();
int Playlist_GetCategoryIdByName(const char *name);
int Playlist_GetSuperCategoryIdByName(const char *name);
int ParseIntRange(const char *field, const char **pData, int min, int max);
char Playlist_ParseRequiredDLC(const char **pData, const char *name, const char **string);
void Playlist_SetPlaylistEntry(const int playlistNum, const char *mapName, const char *gameType, const char *startLoc, int weight);
int Playlist_GetNumEntries(int playlistId);
playlistEntry *Playlist_GetEntry(int playlistId, int entry);
int Playlist_GetLeagueID(int playlistId);
BOOL Playlist_IsLeaguePlaylist(int playlistId);
int Playlist_GetParkingPlaylistForRealPlaylist(int realPlaylist);
const char *Playlist_GetPlaylistDescription(const ControllerIndex_t controllerIndex, const int playlistId);
int Playlist_IsLocked(const ControllerIndex_t controllerIndex, const int playlistId);
int Playlist_CategoryIsLocked(const ControllerIndex_t controllerIndex, const int categoryId);
int Playlist_GetMapPacksUsedByPlaylist(const int playlistId);
char Playlist_CanWeHostThisPlaylist(const ControllerIndex_t controllerIndex);
void Playlist_ResetWeights(const int playlistId, const PartyData_s *party);
void Playlist_ResetWeights(const int playlistId);
int Playlist_CalcTotalWeights(const int playlistId, const int lastSelection, const int lastToLastSelection);
int Playlist_FindEntryByWeight(const int playlistId, const int selectedWeight, const int lastSelection, const int lastToLastSelection);
playlistGametype *Playlist_FindGametype(const char *gametypeInternalName);
playlistMapList *Playlist_FindMaplist(const char *name);
int Playlist_GetGametypeCount();
const char *Playlist_GetGametypeLocalizedName(int index);
const char *Playlist_GetGametypeInternalName(int index);
int Playlist_GetVersionNumber();
int Playlist_GetUnlockXp(const ControllerIndex_t localControllerIndex, const int playlistId);
int Playlist_GetUnlockPLevel(const ControllerIndex_t localControllerIndex, const int playlistId);
int Playlist_GetMaxPartySize(const ControllerIndex_t localControllerIndex, const int playlistId);
int Playlist_GetMinPartySize(const ControllerIndex_t localControllerIndex, const int playlistId);
bool Playlist_IsGametypeBannable(const ControllerIndex_t localControllerIndex, const int playlistId);
int Playlist_GetCategoryId(int playlistId);
int Playlist_GetCurrentId();
void Playlist_SetCurrentId(int newId);
const dvar_t *Playlist_RegisterDvars();
;
void Playlist_ParsePlaylists(const char *buffer);
const char *Playlist_GetCategoryLocalizedName(const ControllerIndex_t controllerIndex, const int categoryId);
const char *Playlist_GetPlaylistName(const ControllerIndex_t controllerIndex, const int playlistId);
;
;
void Playlist_MigrateHost(const ControllerIndex_t localControllerIndex, unsigned __int8 *lastEntries, int numEntries);
const GfxViewParms *Playlist_GetMapName(const ControllerIndex_t localControllerIndex, const int entryNum);
const GfxViewParms *Playlist_GetScriptGameTypeName(const ControllerIndex_t localControllerIndex, const int entryNum);
char Playlist_RunRules(const ControllerIndex_t localControllerIndex, const int entryNum);
bool Playlist_DoesMapMatchPlaylistEntry(const int entryNum, const char *mapname);
bool Playlist_DoesGametypeMatchPlaylistEntry(const int entryNum, const char *gametype);
const char *Playlist_GetLocalizedGametypeName(const ControllerIndex_t localControllerIndex, const int entryNum);

//t6/code/src_noserver/ui/ui_shared.cpp
// void __thiscall MenuNameHash_t::MenuNameHash_t(MenuNameHash_t *this, const char *s);
int UI_GetUTFHeaderSize(const char *buff);
void Item_Fade(UIContextIndex_t contextIndex, itemDef_s *item, int fadeOut);
void Item_SetColor(itemDef_s *item, const char *name, UIContextIndex_t contextIndex, vec4_t *color);
void Menu_Setup(UiContext *dc);
int Color_Parse(const char **p, vec4_t *c);
int String_Parse(const char **p, char *out, int len);
BOOL Command_Parse(const char **p, char *out, int len);
void Window_Paint(UiContext *dc, windowDef_t *w, float fadeAmount, float fadeInAmount, float fadeClamp, float fadeCycle, int itemType, itemDef_s *item);
bool Item_IsModal(itemDef_s *item);
int Rect_ContainsPoint(UIContextIndex_t contextIndex, const rectDef_s *rect, float x, float y);
int Menu_ItemsMatchingGroup(menuDef_t *menu, const char *name);
itemDef_s *Menu_GetMatchingItemByNumber(menuDef_t *menu, int index, const char *name);
void Script_SetColor(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetBackground(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
itemDef_s *Menu_FindItemByName(menuDef_t *menu, const char *p);
itemDef_s *Menu_FindFirstFocusableItemByName(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu, const char *p);
animParamsDef_t *Item_FindStateByName(itemDef_s *item, const char *p);
void Item_LerpAnimationParameters(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, float lerpValue);
void UI_SetShaderTime(LocalClientNum_t localClientNum);
void Script_SetItemColor(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Menu_ShowItemByName(const char *a1, menuDef_t *a2, UIContextIndex_t contextIndex, menuDef_t *menu, const char *p, int bShow);
void Menu_FadeItemByName(const char *a1, menuDef_t *a2, UIContextIndex_t contextIndex, menuDef_t *menu, const char *p, int fadeOut);
int Menus_RemoveFromStack(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *pMenu);
;
int Menus_MenuIsInStack(UiContext *dc, menuDef_t *menu);
LocalClientNum_t Menus_MenuInStackLocalClientNum(UiContext *dc, menuDef_t *menu);
int Menus_FindIndexByHash(UiContext *dc, unsigned int hash);
menuDef_t *Menus_FindByHash(UiContext *dc, unsigned int hash);
menuDef_t *Menus_FindByName(const UiContext *dc, const char *p);
void Menus_HideByName(const UiContext *dc, const char *menuName);
void Menus_ShowByName(const UiContext *dc, const char *windowName);
void Menus_RemoveMenu(XAssetHeader header);
char Item_DoesEventExist(itemDef_s *item, const char *eventName);
char Menus_DoesEventExist(menuDef_t *menu, const char *eventName);
void UI_ClearErrors();
void Script_Show(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_Hide(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_FadeIn(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_FadeOut(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ShowMenu(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_HideMenu(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_OpParse(int *operand, const char **args);
int Script_IntParse(UiContext *dc, const char **args);
const char *Script_TableLookupParse(UiContext *dc, const char **args);
void Script_SetDvarStringUsingTable(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetDvar(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ResetDvar(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_AddTextWrapper(LocalClientNum_t localClientNum, ControllerIndex_t controllerIndex, itemDef_s *__formal, const char *text);
void Script_Exec(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ExecNow(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ConditionalExecHandler(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args, bool (*shouldExec)(const char *, const char *), void (*textCallback)(LocalClientNum_t, ControllerIndex_t, itemDef_s *, const char *));
void Script_ConditionalResponseHandler(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args, bool (*shouldRespond)(const char *, const char *));
BOOL Script_ExecIfStringsEqual(const char *dvarValue, const char *testValue);
bool Script_ExecIfIntsEqual(const char *dvarValue, const char *testValue);
BOOL Script_ExecIfFloatsEqual(const char *dvarValue, const char *testValue);
;
;
;
;
;
;
;
;
;
void Script_SetLocalVarBool(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetLocalVarInt(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetLocalVarFloat(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetLocalVarString(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_FeederTop(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
void Script_SessionMode_SetOnlineGame(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SessionMode_SetSystemLink(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SessionMode_SetPrivate(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_GameMode_SetMode(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
;
;
void Script_ScriptMenuResponse(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
char Item_ArePrereqsSatisfied(GenericEventScript *eventScript, nestingStack_t *stack);
bool Item_IsConditionSatisfied(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, GenericEventScript *eventScript);
void Item_RunScript(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char *s);
void UI_SetLocalVarBool_f();
void UI_SetLocalVarInt_f();
void UI_SetLocalVarFloat_f();
void UI_SetLocalVarString_f();
;
void UI_ShowItem_f();
void UI_HideItem_f();
void UI_ShowMenu_f();
void UI_HideMenu_f();
void UI_ChangeMenuOpenSlideDirection_f();
void UI_ChangeMenuCloseSlideDirection_f();
void UI_OpenToastPopup_f();
void UI_AddToFeeder_f();
void UI_AddToFeederExtended_f();
void UI_ClearFeeder_f();
void UI_ClearFeederWithoutResetCursor_f();
void UI_RaiseFeederEvent_f();
void UI_RefreshFeeder_f();
void UI_ChangeRowStatus_f();
void UI_ValidatePrivateMatchGametype_f();
void UI_SetActiveMenu_f();
void UI_KickPlayer_f();
float Item_ListBox_GetMaxHeight(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
int Item_ListBox_Viewmax(float localClientNum, char *a2, const LocalClientNum_t a3, UIContextIndex_t contextIndex, itemDef_s *item);
float Item_Slider_ThumbPosition(const LocalClientNum_t localClientNum, itemDef_s *item);
int Item_Slider_OverSlider(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, float x, float y);
int Item_ListBox_GetIndexForMouse(UIContextIndex_t contextIndex, itemDef_s *item, float x, float y);
void Item_Listbox_Mouse_Column_Set(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int x, int y);
void Item_MouseLeave(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
;
bool Item_YesNo_IsActionKey(int key);
int Item_YesNo_HandleKey(UiContext *dc, itemDef_s *item, int key);
int Item_DvarEnum_CountSettings(itemDef_s *item);
int Item_Multi_FindDvarByValue(itemDef_s *item);
int Item_ProfileMulti_FindVarByValue(LocalClientNum_t localClientNum, itemDef_s *item);
const char *Item_Multi_Setting(itemDef_s *item);
const char *Item_ProfileMulti_Setting(LocalClientNum_t localClientNum, itemDef_s *item);
int Item_DvarEnum_EnumIndex(itemDef_s *item);
const char *Item_DvarEnum_Setting(LocalClientNum_t localClientNum, itemDef_s *item);
int Item_List_NextEntryForKey(int key, int current, int count);
int Item_Multi_HandleKey(UiContext *dc, itemDef_s *item, int key);
int Item_ProfileMulti_HandleKey(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, int key);
;
bool Item_IsTextField(const itemDef_s *item);
void Item_TextField_BeginEdit(LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
void Item_TextField_EnsureCursorVisible(UIContextIndex_t contextIndex, itemDef_s *item, const char *text);
void Scroll_Slider_SetThumbPos(UiContext *dc, itemDef_s *item);
void Scroll_Slider_ThumbFunc(itemDef_s *a1, const LocalClientNum_t localClientNum, UiContext *dc, void *p);
int Item_Slider_HandleKey(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, int key, int down);
void Menus_PrintAllLoadedMenus(UiContext *dc);
int Display_VisibleMenuCount(UiContext *dc);
rectDef_s *Item_CorrectedTextRect(UIContextIndex_t contextIndex, itemDef_s *item);
bool Menu_ItemsAreAnimating(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
Font_s *Item_GetFont(UIContextIndex_t contextIndex, const itemDef_s *item);
void Item_SetTextExtents(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, const char *text);
void Item_TextColor(UiContext *dc, itemDef_s *item, vec4_t *newColor);
int UI_PickWordWrapLineWidth(const char *text, int bufferSize, Font_s *font, float normalizedScale, int targetLineCount, int widthGuess, int widthLimit);
void DrawWrappedText(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, const char *text, const rectDef_s *rect, Font_s *font, float x, float y, float scale, const vec4_t *color, int style, int textAlignMode, rectDef_s *textRect, bool subtitle, const vec4_t *subtitleGlowColor, bool cinematic);
void DrawWrappedTextScissored(LocalClientNum_t localClientNum, const ScreenPlacement *scrPlace, const char *text, const rectDef_s *rect, Font_s *font, float x, float y, float scale, const vec4_t *color, int style, int textAlignMode, rectDef_s *textRect, bool subtitle, const vec4_t *subtitleGlowColor, bool cinematic);
;
;
;
void GetPlatformCommand(LocalClientNum_t localClientNum, const char *command, const char **consoleCommand);
int UI_GetKeyBindingLocalizedString(const char *a1, const LocalClientNum_t localClientNum, const char *command, char *keys, int bindNum, bool presscmd, bool cap, bool limit, bool findGestures, bool anim, bool swapCommand);
void Item_Slider_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
int Display_KeyBindPending();
;
int Item_Bind_HandleKey(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, int key, int down);
float Item_GetTextAlignAdj(const int alignment, float width, float textWidth);
void Item_ListBox_PaintTextElem(LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, itemDef_s *item, int row, int col, int maxChars, int halignment, int valignment, float x, float y, float w, float h, bool onFocus);
void Item_ListBox_PaintBackground(const LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, itemDef_s *item, float x, float y, int row);
void Item_ListBox_PaintHighlight(const UIContextIndex_t contextIndex, itemDef_s *item, float x, float y);
void Item_ListBox_PaintItemIndicators(LocalClientNum_t localClientNum, const UIContextIndex_t contextIndex, itemDef_s *item, int row, int col, int maxChars, int alignment, float x, float y, float w, float h);
void Item_GameMsgWindow_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
menuDef_t *Menu_GetFocused(UiContext *dc);
int Menus_AnyFullScreenVisible(UiContext *dc);
char Menu_IsVisible(int a1, const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
void UI_SetupTextShaderParams(Font_s *font, textDef_s *textDefPtr);
void UI_SetSystemCursorPos(UiContext *dc, float x, float y);
;
void TRACK_ui_shared();
void UI_ClearLocalUIVisibilityBits(LocalClientNum_t localClientNum);
void UI_SetLocalUIVisbilityBit(LocalClientNum_t localClientNum, int bitShift, int value);
bool Menus_ActiveMenuAllowSignin(UiContext *dc);
char Menu_DoesMenuOrParentsHaveControlFlag(UiContext *dc, menuDef_t *menu, int controlFlag);
int Menu_GetSpecifiedControlFlagFromStack(UiContext *dc, menuDef_t *menu);
void Phys_ReEvalPriority();
void Script_SetUIVisibilityBit(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Item_RunSingleEventScript(GenericEventScript *a1, LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, GenericEventScript *eventScript);
void Item_RunEventScript(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char *eventName);
void UIAnimation_RunEventScript(GenericEventScript *a1, LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, animParamsDef_t *animState, const char *eventName);
void UI_RefreshFeederSelection_f();
void UI_PlaySound_f();
int Item_ListBox_MaxScroll(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
float Item_ListBox_ThumbPosition(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
;
;
void Item_ListBox_SetCursorPos(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int max, int viewmax, int newCursorPos);
void Item_ListBox_Page(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int max, int scrollmax, int viewmax, int delta);
void Item_ListBox_Scroll(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int max, int scrollmax, int viewmax, int delta);
void Item_Action(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
int Menu_CheckOnKey(UiContext *dc, menuDef_t *menu);
void Item_Text_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
void Item_TextField_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
void Item_YesNo_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
char UI_GetSticksTranslatedString(LocalClientNum_t localClientNum, const char *command, char *keys);
void Item_Bind_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
;
void Item_OwnerDraw_Paint(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
void Menu_RunFocusScript(UiContext *dc, menuDef_t *menu);
void Menu_RunLeaveFocusScript(UiContext *dc, menuDef_t *menu);
itemDef_s *Menu_ClearFocus(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
;
void Item_AnimateToState(const LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, animParamsDef_t *state, int milliseconds, bool sysTime);
;
;
;
void Menu_LoseFocusDueToOpen(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
void Menu_CallOnFocusDueToOpen(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
;
void Menu_RunCloseScript(UiContext *dc, menuDef_t *menu);
// void Menus_CompleteItemAnimations(char *animDuration@<edi>, const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
void Menus_Close(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
void Menus_CloseByName(const LocalClientNum_t localClientNum, UiContext *dc, const char *p);
void Menus_CloseAll(int a1, const LocalClientNum_t localClientNum, UiContext *dc);
void Menus_CloseAllBehindMain(const LocalClientNum_t localClientNum, UiContext *dc);
void Menus_CloseFromMenuToTopOfStack(const LocalClientNum_t localClientNum, UiContext *dc, const char *menuName);
;
;
;
int GetBlurFocus(const LocalClientNum_t localClientNum, UiContext *dc);
void Script_Close(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_CloseImmediate(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_InGameClose(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ChangeState(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_ExecKeyHandler(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_FeederBottom(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
void UI_CloseMenu_f();
void UI_CloseMenuImmediate_f();
void UI_MoveFeeder_f();
// int Item_SetFocus@<eax>(char *a1@<edi>, LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, float x, float y);
void Item_ListBox_ModalSelection(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item, int x, int y);
;
void Item_MouseEnter(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, float x, float y);
;
;
void Scroll_ListBox_ThumbFunc(const LocalClientNum_t localClientNum, UiContext *dc, void *p);
;
;
itemDef_s *Menu_SetPrevCursorItem(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
itemDef_s *Menu_SetNextCursorItem(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu, int usedTab);
;
void Menu_PerformTransitionEffects(double localClientNum, int a2, const LocalClientNum_t a3, UiContext *dc, menuDef_t *menu);
int Display_MouseMove(menuDef_t *a1, LocalClientNum_t localClientNum, UiContext *dc);
void UI_AddMenuList(const LocalClientNum_t localClientNum, UiContext *dc, MenuList *menuList, int close);
;
itemDef_s *Menu_FocusFirstSelectableItem(LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
;
void Script_SetFocus(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_SetFocusByDvar(char *a1, LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void UI_FocusItem_f();
int Item_TextField_HandleKey(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, int key);
void Menus_SetupOpenMenu(int a1, LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu);
void Menus_HandleOOBClick(const LocalClientNum_t localClientNum, UiContext *dc, menuDef_t *menu, int key, int down);
void Menu_HandleKey(UiContext *a1, int a2, menuDef_t *localClientNum, LocalClientNum_t dc, UiContext *menu, menuDef_t *key, int down, int a8);
void Item_Paint(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item);
char Menu_Paint(int a1, LocalClientNum_t localClientNum, UiContext *dc, ScreenPlacementStack *scrPlaceViewStack, menuDef_t *menu, int UI3DOverrideId);
// void Script_ExecKeyPress(int a1@<ebx>, LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
;
int Menus_OpenByName(LocalClientNum_t localClientNum, UiContext *dc, const char *p);
int Menus_OpenImmediateByName(LocalClientNum_t localClientNum, UiContext *dc, const char *p);
void Script_Open(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_OpenImmediate(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void Script_InGameOpen(LocalClientNum_t localClientNum, UiContext *dc, itemDef_s *item, const char **args);
void UI_OpenMenu_f();
void UI_OpenMenuImmediate_f();
void UI_RegisterCmds();
void Menu_PaintAll_AppendToVisibleList(char *stringBegin, unsigned int stringSize, const char *stringToAppend);
void Menu_PaintAll(LocalClientNum_t localClientNum, UiContext *dc);

//#include "ui/ui_shared_load_db.h"

//t6/code/src_noserver/ui/ui_shared_obj.cpp
void TRACK_ui_shared_obj();
void Menu_FreeItemMemory(itemDef_s *item);
void Menu_FreeMemory(menuDef_t *menu);
void Menus_FreeAllMemory(UiContext *dc);
void UI_MapLoadInfo(const char *filename);
void PC_SourceError(int handle, char *format, ...);
int PC_Float_Expression_Parse(int handle, float *f);
int PC_Int_ParseLine(int handle, int *i);
int PC_Flag_ParseOptional(int handle, int *i);
int PC_Int_Expression_Parse(int handle, int *i);
int PC_String_Parse(int handle, const char **out);
int PC_Script_Parse(int handle, const char **out);
int PC_CndStackPush(int handle, ExpressionStatement expressionStatement, bool fireOnTrue, bool incrementLevel, int blockID, int constructID, int type);
int PC_CndStackPopLevel();
int PC_CndStackAddConditionsToScript(GenericEventScript **baseScript, char *accumulatedScriptCommands);
int PC_EventScript_Parse(int handle, GenericEventScript **baseScript);
void Menu_Init(menuDef_t *menu, int imageTrack);
void Item_Init(itemDef_s *item, int imageTrack);
void Item_PostParse(itemDef_s *item);
int MenuParse_name(menuDef_t *menu, int handle);
int MenuParse_visible(menuDef_t *menu, int handle);
int MenuParse_visiblityBits(menuDef_t *menu, int handle);
int MenuParse_onFocus(menuDef_t *menu);
int MenuParse_leaveFocus(menuDef_t *menu);
int MenuParse_onOpen(menuDef_t *menu);
int MenuParse_onClose(menuDef_t *menu);
int MenuParse_onESC(menuDef_t *menu);
BOOL MenuParse_execExp(menuDef_t *menu, int handle);
int MenuParse_background(menuDef_t *menu, int handle);
int MenuParse_popup(menuDef_t *menu);
int MenuParse_outOfBounds(menuDef_t *menu);
int MenuParse_soundLoop(menuDef_t *menu, int handle);
void Item_ValidateTypeData(itemDef_s *item, int handle);
int MenuParse_execKey(menuDef_t *menu, int handle);
int MenuParse_legacySplitScreenScale(menuDef_t *menu);
int MenuParse_hiddenDuringScope(menuDef_t *menu);
int MenuParse_hiddenDuringFlashbang(menuDef_t *menu);
int MenuParse_hiddenDuringUI(menuDef_t *menu);
int MenuParse_allowedBinding(menuDef_t *menu, int handle);
int MenuParse_allowSignIn(menuDef_t *menu);
const char *UI_FileText(const char *fileName);
int ItemParse_name(itemDef_s *item, int handle);
int ItemParse_focusSound(itemDef_s *item);
int ItemParse_text(itemDef_s *item, int handle);
int ItemParse_textfile(itemDef_s *item, int handle);
int ItemParse_textsavegame(itemDef_s *item);
int ItemParse_textcinematicsubtitle(itemDef_s *item);
int ItemParse_group(itemDef_s *item, int handle);
int ItemParse_decoration(itemDef_s *item);
int ItemParse_notselectable(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_noScrollBars(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_noBlinkingHighlight(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_usePaging(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_autowrapped(itemDef_s *item);
int ItemParse_horizontalscroll(itemDef_s *item);
int ItemParse_visible(itemDef_s *item, int handle);
int ItemParse_visiblityBits(itemDef_s *item, int handle);
int ItemParse_modal(itemDef_s *item);
int ItemParse_background(itemDef_s *item, int handle);
int ItemParse_doubleClick(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_rightClick(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_onEnter(itemDef_s *item);
int ItemParse_onFocus(itemDef_s *item);
int ItemParse_leaveFocus(itemDef_s *item);
BOOL ItemParse_mouseEnter(itemDef_s *item);
BOOL ItemParse_mouseExit(itemDef_s *item);
BOOL ItemParse_mouseEnterText(itemDef_s *item);
BOOL ItemParse_mouseExitText(itemDef_s *item);
int ItemParse_action(itemDef_s *item);
int ItemParse_accept(itemDef_s *item);
int ItemParse_dvarTest(itemDef_s *item, int handle);
int ItemParse_dvar(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_profile(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int Item_Parse_maxCharsGotoNext(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_dvarStrList(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_profileStrList(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_dvarEnumList(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_actionOnEnterPressOnly(int a1, itemDef_s *a2, itemDef_s *item);
int ItemParse_enableDvar(const char **a1, int a2, itemDef_s *item);
int ItemParse_disableDvar(const char **a1, int a2, itemDef_s *item);
int ItemParse_showDvar(const char **a1, int a2, itemDef_s *item);
int ItemParse_hideDvar(const char **a1, int a2, itemDef_s *item);
int ItemParse_focusDvar(const char **a1, int a2, itemDef_s *item);
BOOL ItemParse_onEvent(itemDef_s *item, int handle);
int ItemParse_execKey(itemDef_s *item, int handle);
BOOL ItemParse_execExp(itemDef_s *item, int handle);
int ItemParse_selectIcon(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_backgroundItemListbox(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_highlightTexture(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_onListboxSelectionChange(int a1, itemDef_s *a2, itemDef_s *item);
void Menu_PostParse(menuDef_t *menu);
MenuList *UI_LoadMenus_FastFile(const char *menuFile);
int PC_Float_Parse(int handle, float *f);
int PC_Color_Parse(int handle, vec4_t *c);
int PC_Int_Parse(int handle, int *i);
int PC_Rect_Parse(float *a1, int handle, rectDef_s *r);
int WindowParse_frame(windowDef_t *window, int handle);
int MenuParse_fullscreen(int *a1, menuDef_t *menu, int handle);
int MenuParse_rect(float *a1, menuDef_t *menu, int handle);
int ItemParse_style(int *a1, itemDef_s *item, int handle);
int ItemParse_border(int *a1, itemDef_s *item, int handle);
int MenuParse_borderSize(float *a1, menuDef_t *menu, int handle);
int MenuParse_backcolor(vec4_t *a1, menuDef_t *menu, int handle);
int MenuParse_forecolor(vec4_t *a1, menuDef_t *menu, int handle);
int MenuParse_bordercolor(vec4_t *a1, menuDef_t *menu, int handle);
int MenuParse_focuscolor(vec4_t *a1, menuDef_t *menu, int handle);
int MenuParse_disablecolor(vec4_t *a1, menuDef_t *menu, int handle);
int MenuParse_outlinecolor(vec4_t *a1, menuDef_t *menu, int handle);
int ItemParse_ownerdrawFlag(int *a1, itemDef_s *item, int handle);
int MenuParse_ownerdraw(int *a1, menuDef_t *menu, int handle);
int MenuParse_fadeClamp(float *a1, menuDef_t *menu, int handle);
int MenuParse_fadeAmount(float *a1, menuDef_t *menu, int handle);
int MenuParse_fadeInAmount(float *a1, menuDef_t *menu, int handle);
int MenuParse_fadeCycle(int *a1, menuDef_t *menu, int handle);
int MenuParse_execKeyInt(int *a1, menuDef_t *menu, int handle);
int MenuParse_blurWorld(float *a1, menuDef_t *menu, int handle);
int MenuParse_ui3dWindowId(int *a1, menuDef_t *menu, int handle);
int MenuParse_priority(int *a1, menuDef_t *menu, int handle);
int MenuParse_openSlideSpeed(int *a1, menuDef_t *menu, int handle);
int MenuParse_closeSlideSpeed(int *a1, menuDef_t *menu, int handle);
int MenuParse_openSlideDirection(int *a1, menuDef_t *menu, int handle);
int MenuParse_closeSlideDirection(int *a1, menuDef_t *menu, int handle);
int MenuParse_openFadingTime(int *a1, menuDef_t *menu, int handle);
int MenuParse_closeFadingTime(int *a1, menuDef_t *menu, int handle);
int MenuParse_control(int *a1, menuDef_t *menu, int handle);
int ItemParse_rect(float *a1, itemDef_s *item, int handle);
int ItemParse_origin(int *a1, itemDef_s *item, int handle);
int ItemParse_type(int *a1, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_elementwidth(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_elementheight(int a1, itemDef_s *a2, itemDef_s *item, int handle);
BOOL ItemParse_special(itemDef_s *item, int handle);
int ItemParse_elementtype(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_columns(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_menuColDef(listBoxDef_s *listPtr, int handle, MenuCell *cells, int cellCount);
int ItemParse_menuItemsDef(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_menuarea(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_userarea(int a1, itemDef_s *a2, itemDef_s *item, int handle);
BOOL ItemParse_bordersize(float *a1, itemDef_s *item, int handle);
BOOL ItemParse_ownerdraw(itemDef_s *item, int handle);
BOOL ItemParse_align(itemDef_s *item, int handle);
int ItemParse_textalign(itemDef_s *item, int handle);
BOOL ItemParse_textalignx(itemDef_s *item, int handle);
BOOL ItemParse_textaligny(itemDef_s *item, int handle);
BOOL ItemParse_textscale(itemDef_s *item, int handle);
BOOL ItemParse_textpadding(itemDef_s *item, int handle);
int ItemParse_fontColor(itemDef_s *item, int handle);
int ItemParse_glowColor(itemDef_s *item, int handle);
int ItemParse_shadowColor(itemDef_s *item, int handle);
BOOL ItemParse_fontBlur(itemDef_s *item, int handle);
BOOL ItemParse_glowSize(itemDef_s *item, int handle);
BOOL ItemParse_shadowSize(itemDef_s *item, int handle);
int ItemParse_shadowOffset(itemDef_s *item, int handle);
BOOL ItemParse_textstyle(itemDef_s *item, int handle);
BOOL ItemParse_rotation(float *a1, itemDef_s *item, int handle);
BOOL ItemParse_textfont(itemDef_s *item, int handle);
int ItemParse_backcolor(itemDef_s *item, int handle);
int ItemParse_forecolor(float *a1, itemDef_s *item, int handle);
int ItemParse_bordercolor(itemDef_s *item, int handle);
int ItemParse_frame(windowDef_t *a1, int a2);
BOOL ItemParse_outlinecolor(vec4_t *a1, itemDef_s *item, int handle);
int ItemParse_profileFloat(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_maxChars(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_maxPaintChars(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_dvarFloat(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_dvarFloatList(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_profileFloatList(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_execKeyInt(int *a1, itemDef_s *item, int handle);
int ItemParse_gameMsgWindowIndex(int *a1, itemDef_s *item, int handle);
int ItemParse_gameMsgWindowMode(int *a1, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_selectBorder(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_elementHighlightColor(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_elementBackgroundColor(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_disableColor(int a1, itemDef_s *a2, itemDef_s *item, int handle);
listBoxDef_s *ItemParse_focusColor(int a1, itemDef_s *a2, itemDef_s *item, int handle);
int ItemParse_ui3dWindowId(int *a1, itemDef_s *item, int handle);
int Asset_Parse(int handle, int imageTrack);
int Item_Parse(int handle, itemDef_s *item);
int MenuParse_itemDef(menuDef_t *menu, int handle);
void Menu_SetupKeywordHash();
int ItemParse_state(itemDef_s *item, int handle);
void Item_SetupKeywordHash();
int Menu_Parse(int handle, menuDef_t *menu);
bool Menu_New(int handle, int imageTrack);
bool UI_ParseMenuInternal(const char *menuFile, int imageTrack);
MenuList *UI_LoadMenu_LoadObj(const char *menuFile);
MenuList *UI_LoadMenu();
int Load_Menu(const char **p, int imageTrack);
MenuList *UI_LoadMenus_LoadObj(const char *menuFile);
MenuList *UI_LoadMenus();

//#include "ui/ui_ui3d_util.h"

//t6/code/src_noserver/ui/ui_utils.cpp
void TRACK_ui_utils();
void Window_SetDynamicFlags(UIContextIndex_t contextIndex, windowDef_t *w, const int flags);
void Window_AddDynamicFlags(UIContextIndex_t contextIndex, windowDef_t *w, const int newFlags);
void Window_RemoveDynamicFlags(UIContextIndex_t contextIndex, windowDef_t *w, const int newFlags);
void Window_SetStaticFlags(windowDef_t *w, const int flags);
void Menu_SetCursorItem(UIContextIndex_t contextIndex, menuDef_t *menu, int cursorItem);
BOOL Item_EnableShowViaDvar(const itemDef_s *item, int flag);
void Item_SetTextRect(UIContextIndex_t contextIndex, itemDef_s *item, const rectDef_s *textRect);
int Item_IsEditFieldDef(itemDef_s *item);
int Item_IsTextDefType(itemDef_s *item);
int Item_IsFocusDefType(itemDef_s *item);
BOOL Item_IsOwnerDrawDefType(itemDef_s *item);
editFieldDef_s *Item_GetEditFieldDef(itemDef_s *item);
multiDef_s *Item_GetMultiDef(itemDef_s *item);
profileMultiDef_s *Item_GetProfileMultiDef(itemDef_s *item);
ownerDrawDef_s *Item_GetOwnerDrawDef(itemDef_s *item);
textDef_s *Item_GetTextDef(itemDef_s *item);
focusItemDef_s *Item_GetFocusItemDef(itemDef_s *item);
listBoxDef_s *Item_GetListBoxDef(itemDef_s *item);
double Item_GetListBoxFeederID(const itemDef_s *item);
enumDvarDef_s *Item_GetEnumDvarName(itemDef_s *item);
gameMsgDef_s *Item_GetGameMsgDef(itemDef_s *item);
void Item_PropertiesToAnimState(itemDef_s *item, animParamsDef_t *animParams);
void Item_AnimStateToProperties(animParamsDef_t *animParams, itemDef_s *item);
int hashForString(const char *str);
void *UI_Alloc(int size, int alignment);
void String_Init();
char *String_Alloc(const char *p);
int Float_Parse(const char **p, float *f);
void UI_GetGameTypesList_LoadObj();
void UI_GetGameTypesList_FastFile();
void UI_GetGameTypesList();
char *UI_GetBusyDotsIndicator();
void UI_ListMenus_f();
void __thiscall CL_SelectStringTableEntryInDvar_f(const StringTable *this);
bool UI_VerifyString(const char *str);
int Item_IsVisible(const LocalClientNum_t localClientNum, UIContextIndex_t contextIndex, itemDef_s *item);
int Item_GetCursorPosOffset(UIContextIndex_t contextIndex, itemDef_s *item, const char *text, int delta);
BOOL ListBox_HasValidCursorPos(UIContextIndex_t contextIndex, itemDef_s *item);
void Item_SetScreenCoords(UIContextIndex_t contextIndex, itemDef_s *item, float x, float y, int horzAlign, int vertAlign);
;

//#include "ui/ui_utils.h"

//#include "ui/ui_utils_api.h"

//t6/code/src_noserver/ui/ui_voting.cpp
bool Voting_SetBoolAttribute(bool *attribute, const char *string);
bool Voting_SetIntAttribute(int *attribute, const char *string);
bool Voting_SetStringAttribute(char *attribute, const char *string, int attributeSize);
bool Voting_SetStringRefAttribute(char *attribute, const char *string, int attributeSize);
char Voting_ParseVersion();
bool Voting_ParseVotingVersion(int *a1, const char *a2);
bool Voting_ParseExpiration(int *a1, const char *a2);
bool Voting_ParseVotingInterval(int *a1, const char *a2);
bool Voting_ParseImageCategory(int *a1, const char *a2);
bool Voting_ParseViewCount(int *a1, const char *a2);
;
;
;
;
bool Voting_ParseVotingItem_IsLocalImage(int a1, const char *a2);
;
;
;
char Voting_ParseKeys(int keyCount, votingHandler_t *keyHandlers, int numKeyHandlers);
char Voting_ParseVoteItemsArray();

