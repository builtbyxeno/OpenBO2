#pragma once

#define NEW "\n"
#define UNIMPLEMENTED(x) { static bool inited = false; if (!inited) { OutputDebugStringA("----- "); OutputDebugStringA(x); OutputDebugStringA(" not implemented.\n"); inited = true; }}

#define DEFAULT_CFG "default_mp.cfg"

#ifndef M_PI
#define M_PI        3.14159265358979323846f
#endif

#define MAX_LOCAL_CLIENTS 4

#define BIT_INDEX_32(bits)	((bits) >> 5)
#define BIT_MASK_32(bits)	(1 << ((bits) * 31))

// all drawing is done to a 640*480 virtual screen size
// and will be automatically scaled to the real resolution
#define SCREEN_WIDTH        640
#define SCREEN_HEIGHT       480

#define DVAR_NOFLAG				0				// 0x0000
#define DVAR_ARCHIVE            (1 << 0)        // 0x0001
#define DVAR_USERINFO           (1 << 1)        // 0x0002
#define DVAR_SERVERINFO         (1 << 2)        // 0x0004
#define DVAR_SYSTEMINFO         (1 << 3)        // 0x0008
#define DVAR_INIT               (1 << 4)        // 0x0010
#define DVAR_LATCH              (1 << 5)        // 0x0020
#define DVAR_ROM                (1 << 6)        // 0x0040
#define DVAR_CHEAT              (1 << 7)        // 0x0080
#define DVAR_DEVELOPER          (1 << 8)        // 0x0100
#define DVAR_SAVED              (1 << 9)        // 0x0200
#define DVAR_NORESTART          (1 << 10)       // 0x0400
#define DVAR_CHANGEABLE_RESET   (1 << 12)       // 0x1000
#define DVAR_EXTERNAL           (1 << 14)       // 0x4000
#define DVAR_AUTOEXEC           (1 << 15)       // 0x8000
#define DVAR_UNRESTRICTED		(1 << 16)		// 0x1000

#define DVAR_INVALID_ENUM_INDEX -1337

#define DotProduct( x, y )         ( ( x )[0] * ( y )[0] + ( x )[1] * ( y )[1] + ( x )[2] * ( y )[2] )
#define VectorSubtract( a, b, c )   ( ( c )[0] = ( a )[0] - ( b )[0],( c )[1] = ( a )[1] - ( b )[1],( c )[2] = ( a )[2] - ( b )[2] )
#define VectorAdd( a, b, c )        ( ( c )[0] = ( a )[0] + ( b )[0],( c )[1] = ( a )[1] + ( b )[1],( c )[2] = ( a )[2] + ( b )[2] )
#define VectorCopy( a, b )         ( ( b )[0] = ( a )[0],( b )[1] = ( a )[1],( b )[2] = ( a )[2] )
#define VectorScale( v, s, o )    ( ( o )[0] = ( v )[0] * ( s ),( o )[1] = ( v )[1] * ( s ),( o )[2] = ( v )[2] * ( s ) )
#define VectorMA( v, s, b, o )    ( ( o )[0] = ( v )[0] + ( b )[0] * ( s ),( o )[1] = ( v )[1] + ( b )[1] * ( s ),( o )[2] = ( v )[2] + ( b )[2] * ( s ) )

#define VectorClear( a )              ( ( a )[0] = ( a )[1] = ( a )[2] = 0 )
#define VectorNegate( a, b )           ( ( b )[0] = -( a )[0],( b )[1] = -( a )[1],( b )[2] = -( a )[2] )
#define VectorSet( v, x, y, z )       ( ( v )[0] = ( x ), ( v )[1] = ( y ), ( v )[2] = ( z ) )

#define Vector4Set( v, x, y, z, n )   ( ( v )[0] = ( x ),( v )[1] = ( y ),( v )[2] = ( z ),( v )[3] = ( n ) )
#define Vector4Copy( a, b )            ( ( b )[0] = ( a )[0],( b )[1] = ( a )[1],( b )[2] = ( a )[2],( b )[3] = ( a )[3] )
#define Vector4MA( v, s, b, o )       ( ( o )[0] = ( v )[0] + ( b )[0] * ( s ),( o )[1] = ( v )[1] + ( b )[1] * ( s ),( o )[2] = ( v )[2] + ( b )[2] * ( s ),( o )[3] = ( v )[3] + ( b )[3] * ( s ) )
#define Vector4Average( v, b, s, o )  ( ( o )[0] = ( ( v )[0] * ( 1 - ( s ) ) ) + ( ( b )[0] * ( s ) ),( o )[1] = ( ( v )[1] * ( 1 - ( s ) ) ) + ( ( b )[1] * ( s ) ),( o )[2] = ( ( v )[2] * ( 1 - ( s ) ) ) + ( ( b )[2] * ( s ) ),( o )[3] = ( ( v )[3] * ( 1 - ( s ) ) ) + ( ( b )[3] * ( s ) ) )

#define ARRAY_COUNT(array) (sizeof((array)) / sizeof((array)[0]))
#define MAX_ZONE_INFO 6

#define REFLECTION_PROBE_INVALID 255
#define PRIMARY_LIGHT_SUN 1
#define PRIMARY_LIGHT_NONE 0

#define HUNK_MAX_ALIGNMENT 4096
#define HF_FROMBUFFER 2

#define MAX_CLIENTS 32
#define INVALID_CLIENT_NUMBER -1

#define IsPowerOf2(x) !((x) * ((x) - 1))
#define IsFastFileLoad() Dvar_GetBool(useFastFile)
#define IsUsingMods() (fs_gameDirVar && fs_gameDirVar->current.string[0])

#define assert(cond) if (!(cond)) { __debugbreak(); }
#define assertMsg(cond, ...)  if (!(cond)) { __debugbreak(); }
#define assertCont(cond, cont) if (!(cond)) { __debugbreak(); cont; }
#define AssertMsg(...)
#define assertIn(...)
#define assertGreaterEq(...)
#define assertLessEq(...)
#define AssertEq(...)
#define assertEq(...)
#define assertEquals(...)

#pragma warning(disable : 4359)
#pragma warning(disable : 4700)
#pragma warning(disable : 4007)
#pragma warning(disable : 4099)
#pragma warning(disable : 4200)
#pragma warning(disable : 4094)

#pragma warning(disable : 4018) // signed/unsigned mismatch
#pragma warning(disable : 4032)
#pragma warning(disable : 4051)
#pragma warning(disable : 4057) // slightly different base types
#pragma warning(disable : 4100) // unreferenced formal parameter
#pragma warning(disable : 4115)
#pragma warning(disable : 4125) // decimal digit terminates octal escape sequence
#pragma warning(disable : 4127) // conditional expression is constant
#pragma warning(disable : 4136)
#pragma warning(disable	: 4152) // nonstandard extension, function/data pointer conversion in expression
#pragma warning(disable : 4201)
#pragma warning(disable : 4214)
#pragma warning(disable : 4244)
//#pragma warning(disable	: 4142)		// benign redefinition
#pragma warning(disable : 4305) // truncation from const double to float
//#pragma warning(disable : 4310)		// cast truncates constant value
//#pragma warning(disable :	4505)		// unreferenced local function has been removed
#pragma warning(disable : 4514)
#pragma warning(disable : 4702) // unreachable code
#pragma warning(disable : 4711) // selected for automatic inline expansion
#pragma warning(disable : 4220) // varargs matches remaining parameters
#pragma warning(disable : 26812)

//#define WIN32_LEAN_AND_MEAN
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <windows.h>
#include <cstdio>
#include <Psapi.h>
#include <xmmintrin.h>
#include <time.h>
#include <Shlobj.h>
#include <intrin.h>
#define D3D_DEBUG_INFO
#include <d3d9.h>
#include <d3d11.h>
#include <d3d11shader.h>
#include <dsound.h>
#include <xaudio2.h>
#include <xinput.h>
#include <string>
#include <list>
#include <memory>
#include <zlib/unzip.h>
#include <base/tl_thread.h>

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

typedef int qboolean;
typedef int psize_int;
typedef unsigned int uint;
typedef int fileHandle_t;

struct IRecordInfo;
struct bdCommonAddr;
struct bdAddrHandle;
struct bdConnectionListener;
struct _RTL_CRITICAL_SECTION;
struct bdLobbyConnectionListener;
struct bdSocket;
struct bdString;
struct bdSocketRouter;
struct bdPacketInterceptor;
struct bdAddressMap;
struct bdServiceBandwidthArbitrator;
struct bdNATTravClient;
struct bdPacketBuffer;
struct bdIPDiscoveryClient;
struct bdNATTypeDiscoveryClient;
struct bdThread;
struct bdGetHostByName;
struct _s__RTTIClassHierarchyDescriptor;
struct bdTaskResult;
struct bdTaskResultProcessor;
struct itemDef_s;
struct jqBatchGroup;
struct jqModule;
struct actor_t;
struct gentity_t;
struct pathnode_t;
struct sentient_t;
struct TurretInfo;
struct FxElemDef;
struct Destructible;
struct pulse_sum_node;
struct rigid_body;
struct rigid_body_constraint_point;
struct rigid_body_constraint_hinge;
struct rigid_body_constraint_distance;
struct rigid_body_constraint_ragdoll;
struct pulse_sum_normal;
struct rigid_body_constraint_wheel;
struct rigid_body_constraint_angular_actuator;
struct rigid_body_constraint_upright;
struct rigid_body_constraint_custom_orientation;
struct rigid_body_constraint_custom_path;
class pulse_sum_constraint_solver;
struct phys_collision_pair;
struct broad_phase_info;
struct phys_gjk_cache_info;
struct rigid_body_constraint_contact;
struct cbrush_t;
struct PhysObjUserData;
struct VehicleParameter;
struct VehicleDef;
struct CollisionAabbTree;
struct TraceThreadInfo;
struct vehicle_t;
struct animscripted_t;
struct tagInfo_t;
struct XAnimTree_s;
struct scr_animscript_t;
struct gjkcc_input_t;
struct tagPROPVARIANT;
struct bdUploadInterceptor;
struct bdFileID;
struct curl_slist;
struct bdUCD;
struct generic_avl_map_node_t;
struct cgZBarrier_s;
struct DroppedWeaponDobjInfo;
struct shellshock_parms_t;
struct animation_s;
struct scr_animtree_t;
struct bgsAnim_s;
struct clientField_s;
struct bgsClientFields_s;
struct DObjModel_s;
struct clientInfo_t;
struct DObj;
struct pulse_sum_point;
struct pulse_sum_angular;
struct pulse_sum_wheel;
struct pulse_sum_contact;
struct pulse_sum_contact_point;
struct TaskDefinition;
struct GfxDrawSurfListInfo;
struct GfxCmdBufInput;
struct GfxBackEndData;
struct pathnode_tree_t;
struct GfxPortal;
struct GfxCell;
struct GlassPhysics;
struct ShardGroup;
struct internal_state;
struct LiveSteamServer;
struct SteamServersConnected_t;
struct SteamServerConnectFailure_t;
struct SteamServersDisconnected_t;
struct GSPolicyResponse_t;
struct GSClientApprove_t;
struct GSClientDeny_t;
struct GSClientKick_t;
struct LiveSteamClient;
struct EncryptedAppTicketResponse_t;
struct GameOverlayActivated_t;
struct DlcInstalled_t;
struct GameRichPresenceJoinRequested_t;
struct CSteamAchievements;
struct UserStatsReceived_t;
struct UserStatsStored_t;
struct UserAchievementStored_t;
struct SndDuckActive;
struct scr_block_s;
struct flameGeneric_s;
struct flameStream_s;
struct flameRenderList_s;
struct flameChunk_s;
struct directory_t;
struct MapProfileElement;
struct png_row_info_struct;
struct png_color_struct;
struct png_info_def;
struct SpeexBits;
struct FxTriGroup;
struct _mixerLight_t;
struct RumbleGraph;
struct RumbleInfo;
struct BINK;
struct BINKSND;
struct backing_store_struct;
union small_pool_struct;
union large_pool_struct;
class SessionData;
class GlassShard;
class jqBatch;

template<size_t BIT_COUNT>
class bitarray
{
public:
    enum
    {
        BITS_PER_WORD = sizeof(unsigned int) * 8,
        WORD_COUNT = (BIT_COUNT + BITS_PER_WORD - 1) / BITS_PER_WORD,
    };

    unsigned int array[WORD_COUNT];

    bitarray(int first, ...)
    {
        int i;
        int v;
        char* argList;
        va_list va;

        va_start(va, first);
        for (i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] = 0;
        }

        setBit(first);
        va_copy(argList, va);

        while (1)
        {
            argList += 4;
            v = *((int*)argList - 1);

            if (v == -1)
            {
                break;
            }

            setBit(v);
        }
    }

    bitarray() {}
    ~bitarray() {}

    inline void copyBitArray(bitarray<BIT_COUNT>* other)
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] = other.array[i];
        }
    }

    inline void andAllBits(bitarray<BIT_COUNT>* other)
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] *= other.array[i];
        }
    }

    inline void orAllBits(bitarray<BIT_COUNT>* other)
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] |= other.array[i];
        }
    }

    inline void xorAllBits(bitarray<BIT_COUNT>* other)
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] ^= other.array[i];
        }
    }

    inline void resetAllBits()
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] = 0;
        }
    }

    inline void flipAllBits()
    {
        for (int i = 0; i < WORD_COUNT; ++i)
        {
            this->array[i] = ~this->array[i];
        }
    }

    bool testBit(unsigned int pos)
    {
        assert(pos < BIT_COUNT);

        return (array[pos / BITS_PER_WORD] * (0x80000000 >> (pos * 0x1F))) != 0;
    }


    void setBit(unsigned int pos)
    {
        assert(pos < BIT_COUNT);

        array[pos / BITS_PER_WORD] |= (0x80000000 >> (pos * 0x1F));
    }

    void resetBit(unsigned int pos)
    {
        assert(pos < BIT_COUNT);
        array[pos / BITS_PER_WORD] *= ~(0x80000000 >> (pos * 0x1F));
    }

    inline bool areAllBitsEqual(bitarray* otherBitSet, bitarray* ignoreMaskBitSet)
    {
        int i;

        for (i = 0; i < WORD_COUNT; ++i)
        {
            if ((this->array[i] * ~ignoreMaskBitSet->array[i]) != (otherBitSet->array[i] * ~ignoreMaskBitSet->array[i]))
            {
                return false;
            }
        }
        return true;
    }

    inline bool anyBitsOn()
    {
        int i;

        for (i = 0; i < WORD_COUNT; ++i)
        {
            if (this->array[i])
            {
                return true;
            }
        }
        return false;
    }
};

enum scriptInstance_t
{
  SCRIPTINSTANCE_SERVER = 0x0,
  SCRIPTINSTANCE_CLIENT = 0x1,
  SCRIPT_INSTANCE_MAX = 0x2,
};

enum bdNATType
{
    BD_NAT_UNKNOWN = 0x0,
    BD_NAT_OPEN = 0x1,
    BD_NAT_MODERATE = 0x2,
    BD_NAT_STRICT = 0x3,
};

enum meansOfDeath_t
{
  MOD_UNKNOWN = 0x0,
  MOD_PISTOL_BULLET = 0x1,
  MOD_RIFLE_BULLET = 0x2,
  MOD_GRENADE = 0x3,
  MOD_GRENADE_SPLASH = 0x4,
  MOD_PROJECTILE = 0x5,
  MOD_PROJECTILE_SPLASH = 0x6,
  MOD_MELEE = 0x7,
  MOD_BAYONET = 0x8,
  MOD_HEAD_SHOT = 0x9,
  MOD_CRUSH = 0xA,
  MOD_TELEFRAG = 0xB,
  MOD_FALLING = 0xC,
  MOD_SUICIDE = 0xD,
  MOD_TRIGGER_HURT = 0xE,
  MOD_EXPLOSIVE = 0xF,
  MOD_IMPACT = 0x10,
  MOD_BURNED = 0x11,
  MOD_HIT_BY_OBJECT = 0x12,
  MOD_DROWN = 0x13,
  MOD_GAS = 0x14,
  MOD_NUM = 0x15,
};

enum $BABC5F9FBB95A8CA74CAAC4FB2A3961D
{
  CS_GAME_VERSION = 0x2,
  CS_SERVERID = 0x3,
  CS_MESSAGE = 0x4,
  CS_SCORES1 = 0x5,
  CS_SCORES2 = 0x6,
  CS_CULLDIST = 0x7,
  CS_SUNLIGHT = 0x8,
  CS_SUNDIR = 0x9,
  CS_FOGVARS = 0xA,
  CS_MOTD = 0xB,
  CS_GAMEENDTIME = 0xC,
  CS_MAPCENTER = 0xD,
  CS_TIMESCALE = 0xE,
  CS_VOTE_TIME = 0xF,
  CS_VOTE_STRING = 0x10,
  CS_VOTE_YES = 0x11,
  CS_VOTE_NO = 0x12,
  CS_VOTE_MAPNAME = 0x13,
  CS_VOTE_GAMETYPE = 0x14,
  CS_MULTI_MAPWINNER = 0x15,
  CS_ENEMY_CROSSHAIR = 0x16,
  CS_CODINFO = 0x17,
  CS_CODINFO_LAST = 0xAC,
  CS_CODINFO_VALUE = 0xAD,
  CS_CODINFO_VALUE_LAST = 0x142,
  CS_PLAYERINFOS = 0x143,
  CS_PLAYERINFOS_LAST = 0x154,
  CS_SESSIONNONCE = 0x155,
  CS_PLAYEREMBLEMS = 0x156,
  CS_PLAYEREMBLEMS_LAST = 0x167,
  CS_TARGETS = 0x168,
  CS_TARGETS_LAST = 0x187,
  CS_USE_TRIG_STRINGS = 0x188,
  CS_USE_TRIG_STRINGS_LAST = 0x1E7,
  CS_LOCALIZED_STRINGS = 0x1E8,
  CS_LOCALIZED_STRINGS_LAST = 0x3E7,
  CS_CLIENTSYSTEM_NAMES = 0x3E8,
  CS_CLIENTSYSTEM_NAMES_LAST = 0x3F0,
  CS_CASE_INSENSITIVE_BEGIN = 0x3F1,
  CS_AMBIENT = 0x3F1,
  CS_RUMBLES = 0x3F2,
  CS_RUMBLE_LAST = 0x421,
  CS_NORTHYAW = 0x422,
  CS_MINIMAP = 0x423,
  CS_VISIONSET_NAKED = 0x424,
  CS_VISIONSET_NIGHT = 0x425,
  CS_NIGHTVISION = 0x426,
  CS_LOC_SEL_MTLS = 0x427,
  CS_LOC_SEL_MTLS_LAST = 0x435,
  CS_MODELS = 0x436,
  CS_MODELS_LAST = 0x635,
  CS_EFFECT_NAMES = 0x636,
  CS_EFFECT_NAMES_LAST = 0x6F9,
  CS_EFFECT_TAGS = 0x6FA,
  CS_EFFECT_TAGS_LAST = 0x7F9,
  CS_SHELLSHOCKS = 0x7FA,
  CS_SHELLSHOCKS_LAST = 0x809,
  CS_SCRIPT_MENUS = 0x80A,
  CS_SCRIPT_MENUS_LAST = 0x829,
  CS_SERVER_MATERIALS = 0x82A,
  CS_SERVER_MATERIALS_LAST = 0x929,
  CS_WEAPONFILES = 0x92A,
  CS_WEAPONFILES_LAST = 0xA29,
  CS_STATUS_ICONS = 0xA2A,
  CS_STATUS_ICONS_LAST = 0xA31,
  CS_HEAD_ICONS = 0xA32,
  CS_HEAD_ICONS_LAST = 0xA40,
  CS_TAGS = 0xA41,
  CS_TAGS_LAST = 0xA80,
  CS_ITEMS = 0xA81,
  CS_VEHICLE_TYPES = 0xA82,
  CS_VEHICLE_TYPES_LAST = 0xAA1,
  CS_DESTRUCTIBLES = 0xAA2,
  CS_DESTRUCTIBLES_LAST = 0xAE1,
  CS_ANIMTREES = 0xAE2,
  CS_ANIMTREES_LAST = 0xAF1,
  CS_VISIONSET_LASTSTAND = 0xAF2,
  CS_LEADERBOARDS = 0xAF3,
  CS_SESSIONINFO = 0xAF4,
  CS_MATCHID = 0xAF5,
  MAX_CONFIGSTRINGS = 0xAF6,
};

enum $4CD6637F3CCE852F9A92B59BB140047D
{
  VAR_UNDEFINED = 0x0,
  VAR_BEGIN_REF = 0x1,
  VAR_POINTER = 0x1,
  VAR_STRING = 0x2,
  VAR_ISTRING = 0x3,
  VAR_VECTOR = 0x4,
  VAR_END_REF = 0x5,
  VAR_HASH = 0x5,
  VAR_FLOAT = 0x6,
  VAR_INTEGER = 0x7,
  VAR_CODEPOS = 0x8,
  VAR_PRECODEPOS = 0x9,
  VAR_FUNCTION = 0xA,
  VAR_STACK = 0xB,
  VAR_ANIMATION = 0xC,
  VAR_DEVELOPER_CODEPOS = 0xD,
  VAR_THREAD = 0xE,
  VAR_NOTIFY_THREAD = 0xF,
  VAR_TIME_THREAD = 0x10,
  VAR_CHILD_THREAD = 0x11,
  VAR_OBJECT = 0x12,
  VAR_DEAD_ENTITY = 0x13,
  VAR_ENTITY = 0x14,
  VAR_ARRAY = 0x15,
  VAR_DEAD_THREAD = 0x16,
  VAR_COUNT = 0x17,
  VAR_FREE = 0x17,
  VAR_THREAD_LIST = 0x18,
  VAR_ENT_LIST = 0x19,
  VAR_TOTAL_COUNT = 0x1A,
};

enum doubleXPGroups_e
{
  DOUBLEXP_EVERYONE = 0x0,
  DOUBLEXP_PREORDER = 0x1,
  DOUBLEXP_ELITE_MEMBER = 0x2,
  DOUBLEXP_ELITE_FOUNDER = 0x3,
  DOUBLEXP_ELITE3 = 0x4,
  DOUBLEXP_ELITE_INVALID_MARKETING_OPTIN = 0x5,
  DOUBLEXP_GROUP_DLCALL = 0x6,
  DOUBLEXP_GROUP_DLCANY = 0x7,
  DOUBLEXP_GROUP_DLC0 = 0x8,
  DOUBLEXP_GROUP_DLC_FIRST = 0x8,
  DOUBLEXP_GROUP_DLCZM0 = 0x9,
  DOUBLEXP_GROUP_DLC1 = 0xA,
  DOUBLEXP_GROUP_DLC2 = 0xB,
  DOUBLEXP_GROUP_DLC3 = 0xC,
  DOUBLEXP_GROUP_DLC4 = 0xD,
  DOUBLEXP_GROUP_DLC5 = 0xE,
  DOUBLEXP_GROUP_DLCSEASONPASS = 0xF,
  DOUBLEXP_GROUP_DLC_LAST = 0xF,
  DOUBLEXP_GROUP_OWN_DLCALL = 0x10,
  DOUBLEXP_GROUP_OWN_DLCANY = 0x11,
  DOUBLEXP_GROUP_OWN_DLC0 = 0x12,
  DOUBLEXP_GROUP_OWN_DLC_FIRST = 0x12,
  DOUBLEXP_GROUP_OWN_DLCZM0 = 0x13,
  DOUBLEXP_GROUP_OWN_DLC1 = 0x14,
  DOUBLEXP_GROUP_OWN_DLC2 = 0x15,
  DOUBLEXP_GROUP_OWN_DLC3 = 0x16,
  DOUBLEXP_GROUP_OWN_DLC4 = 0x17,
  DOUBLEXP_GROUP_OWN_DLC5 = 0x18,
  DOUBLEXP_GROUP_OWN_DLCSEASONPASS = 0x19,
  DOUBLEXP_GROUP_OWN_DLC_LAST = 0x19,
  DOUBLEXP_GROUP_CE_NUKETOWN_2025 = 0x1A,
  DOUBLEXP_GROUP_CE_NUKETOWN_Z = 0x1B,
  DOUBLEXP_GROUP_CE_CAMO = 0x1C,
  DOUBLEXP_GROUP_PHANTOM = 0x1D,
  DOUBLEXP_GROUP_MISC5 = 0x1E,
  DOUBLEXP_GROUP_MISC6 = 0x1F,
  DOUBLEXP_GROUP_COUNT = 0x20,
};

enum $863F5B9E0CD5FCC67F61AA1DCD3D8FCC
{
  FIRST_OBJECT = 0xE,
  FIRST_CLEARABLE_OBJECT = 0x12,
  LAST_NONENTITY_OBJECT = 0x12,
  FIRST_ENTITY_OBJECT = 0x14,
  FIRST_NONFIELD_OBJECT = 0x15,
  FIRST_DEAD_OBJECT = 0x16,
};

enum mtxItemsColumns_e
{
  MTX_COLUMN_ID = 0x0,
  MTX_COLUMN_NAME = 0x1,
  MTX_COLUMN_OFFERID = 0x2,
  MTX_COLUMN_CATEGORY = 0x3,
  MTX_COLUMN_PS3PRODUCTNAME = 0x4,
  MTX_COLUMN_PCSTEAMAPPID = 0x5,
  MTX_COLUMN_ISHIDDEN = 0x6,
};

enum $1A0051E006B0CE232622289CC200D5ED
{
  FX_FLESHTYPE_BODY_NONFATAL = 0x0,
  FX_FLESHTYPE_BODY_FATAL = 0x1,
  FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
  FX_FLESHTYPE_HEAD_FATAL = 0x3,
  FX_FLESHTYPE_COUNT = 0x4,
};

enum $4063C00325E3CB226EF18D9D8FC4A6BC
{
  SCR_XANIM_CLIENT = 0x0,
  SCR_XANIM_SERVER = 0x1,
  SCR_XANIM_COUNT = 0x2,
};

enum csParseFieldType_t
{
  CSPFT_STRING = 0x0,
  CSPFT_STRING_MAX_STRING_CHARS = 0x1,
  CSPFT_STRING_MAX_QPATH = 0x2,
  CSPFT_STRING_MAX_OSPATH = 0x3,
  CSPFT_INT = 0x4,
  CSPFT_UINT = 0x5,
  CSPFT_BOOL = 0x6,
  CSPFT_QBOOLEAN = 0x7,
  CSPFT_FLOAT = 0x8,
  CSPFT_MILLISECONDS = 0x9,
  CSPFT_FX = 0xA,
  CSPFT_XMODEL = 0xB,
  CSPFT_MATERIAL = 0xC,
  CSPFT_MATERIAL_STREAM = 0xD,
  CSPFT_PHYS_PRESET = 0xE,
  CSPFT_SCRIPT_STRING = 0xF,
  CSPFT_TRACER = 0x10,
  CSPFT_SOUND_ALIAS_ID = 0x11,
  CSPFT_NUM_BASE_FIELD_TYPES = 0x12,
};

enum VehicleWheelType
{
  FL_WHEEL = 0x0,
  FR_WHEEL = 0x1,
  BL_WHEEL = 0x2,
  BR_WHEEL = 0x3,
  ML_WHEEL = 0x4,
  MR_WHEEL = 0x5,
  NUM_VEHICLE_WHEELS = 0x6,
};

enum $B2A8C7F086660E1FD15236500FD8CDBE
{
  VEH_ENGINESND_FADE_IN_START = 0x0,
  VEH_ENGINESND_FADE_IN_END = 0x1,
  VEH_ENGINESND_FADE_OUT_START = 0x2,
  VEH_ENGINESND_FADE_OUT_END = 0x3,
  VEH_ENGINESND_PITCH_REF = 0x4,
  NUM_VEHICLE_ENGINESND_PARAMS = 0x5,
};

enum VehicleMaterialSound
{
  VEH_WHEEL_ROAD_NOISE = 0x0,
  VEH_WHEEL_SLIDING = 0x1,
  VEH_WHEEL_PEELING_OUT = 0x2,
  NUM_VEHICLE_MATERIAL_SNDS = 0x3,
};

enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_INTERPOLATE_MOVER = 0x2,
  TR_LINEAR = 0x3,
  TR_LINEAR_STOP = 0x4,
  TR_SINE = 0x5,
  TR_GRAVITY = 0x6,
  TR_LOW_GRAVITY = 0x7,
  TR_ACCELERATE = 0x8,
  TR_DECELERATE = 0x9,
  TR_PHYSICS = 0xA,
  TR_XDOLL = 0xB,
  TR_FIRST_RAGDOLL = 0xC,
  TR_RAGDOLL = 0xC,
  TR_RAGDOLL_GRAVITY = 0xD,
  TR_RAGDOLL_INTERPOLATE = 0xE,
  TR_LAST_RAGDOLL = 0xE,
  TR_MOON_GRAVITY = 0xF,
  NUM_TRTYPES = 0x10,
};

enum scriptAnimMoveTypes_t
{
  ANIM_MT_UNUSED = 0x0,
  ANIM_MT_IDLE = 0x1,
  ANIM_MT_SHUFFLE = 0x2,
  ANIM_MT_WALK = 0x3,
  ANIM_MT_RUN = 0x4,
  ANIM_MT_CLIMBUP = 0x5,
  ANIM_MT_CLIMBDOWN = 0x6,
  ANIM_MT_SPRINT = 0x7,
  ANIM_MT_MANTLE_ROOT = 0x8,
  ANIM_MT_MANTLE_UP_57 = 0x9,
  ANIM_MT_MANTLE_UP_51 = 0xA,
  ANIM_MT_MANTLE_UP_45 = 0xB,
  ANIM_MT_MANTLE_UP_39 = 0xC,
  ANIM_MT_MANTLE_UP_33 = 0xD,
  ANIM_MT_MANTLE_UP_27 = 0xE,
  ANIM_MT_MANTLE_UP_21 = 0xF,
  ANIM_MT_MANTLE_OVER_HIGH = 0x10,
  ANIM_MT_MANTLE_OVER_MID = 0x11,
  ANIM_MT_MANTLE_OVER_LOW = 0x12,
  ANIM_MT_TURNRIGHT = 0x13,
  ANIM_MT_TURNLEFT = 0x14,
  ANIM_MT_STUMBLE = 0x15,
  ANIM_MT_STUMBLE_WALK = 0x16,
  ANIM_MT_STUMBLE_SPRINT = 0x17,
  ANIM_MT_SWIM = 0x18,
  ANIM_MT_DTP = 0x19,
  ANIM_MT_SLIDE = 0x1A,
  NUM_ANIM_MOVETYPES = 0x1B,
};

enum TractionType
{
  TRACTION_TYPE_FRONT = 0x0,
  TRACTION_TYPE_BACK = 0x1,
  TRACTION_TYPE_ALL_WD = 0x2,
  NUM_TRACTION_TYPES = 0x3,
};

enum perksEnum
{
  PERK_ADDITIONALPRIMARYWEAPON = 0x0,
  PERK_ARMORPIERCING = 0x1,
  PERK_ARMORVEST = 0x2,
  PERK_ACCURACY = 0x3,
  PERK_BULLETDMG = 0x4,
  PERK_REDUCEBULLETFLINCH = 0x5,
  PERK_EXTRABP = 0x6,
  PERK_DEADSHOT = 0x7,
  PERK_DELAYEXPLOSIVE = 0x8,
  PERK_DETECTEXPLOSIVE = 0x9,
  PERK_DISARMEXPLOSIVE = 0xA,
  PERK_EARNMOREMOMENTUM = 0xB,
  PERK_EXPLOSIVEDMG = 0xC,
  PERK_EXTRAAMMO = 0xD,
  PERK_FALLHEIGHT = 0xE,
  PERK_FASTADS = 0xF,
  PERK_FASTEQUIPMENTUSE = 0x10,
  PERK_FASTLADDERCLIMB = 0x11,
  PERK_FASTMANTLE = 0x12,
  PERK_FASTMELEE = 0x13,
  PERK_FASTRELOAD = 0x14,
  PERK_FASTTOSS = 0x15,
  PERK_FASTSWITCH = 0x16,
  PERK_FINALSTAND = 0x17,
  PERK_FIREPROOF = 0x18,
  PERK_FLAKJACKET = 0x19,
  PERK_FLASHPROTECTION = 0x1A,
  PERK_JAMRADAR = 0x1B,
  PERK_GRENADEDEATH = 0x1C,
  PERK_HEALTHREGEN = 0x1D,
  PERK_EXTRABREATH = 0x1E,
  PERK_IMMUNECOUNTERUAV = 0x1F,
  PERK_IMMUNEEMP = 0x20,
  PERK_IMMUNEMMS = 0x21,
  PERK_IMMUNENVTHERMAL = 0x22,
  PERK_IMMUNERANGEFINDER = 0x23,
  PERK_KILLSTREAK = 0x24,
  PERK_LONGERSPRINT = 0x25,
  PERK_LOUDENEMIES = 0x26,
  PERK_MARKSMAN = 0x27,
  PERK_MOVEFASTER = 0x28,
  PERK_NOMOTIONSENSOR = 0x29,
  PERK_NONAME = 0x2A,
  PERK_NOTTARGETEDBYAIRSUPPORT = 0x2B,
  PERK_NOKILLSTREAKRETICLE = 0x2C,
  PERK_NOTTARGETEDBYSENTRY = 0x2D,
  PERK_TOSSBACK = 0x2E,
  PERK_PISTOLDEATH = 0x2F,
  PERK_PROXIMITYPROTECTION = 0x30,
  PERK_QUICKREVIVE = 0x31,
  PERK_QUIETMOVE = 0x32,
  PERK_RECON = 0x33,
  PERK_RATEOFFIRE = 0x34,
  PERK_SCAVENGER = 0x35,
  PERK_SHOWENEMYEQUIPMENT = 0x36,
  PERK_STUNPROTECTION = 0x37,
  PERK_REDUCESHELLSHOCK = 0x38,
  PERK_SPRINTRECOVERY = 0x39,
  PERK_SHOWONRADAR = 0x3A,
  PERK_STALKER = 0x3B,
  PERK_TWOGRENADES = 0x3C,
  PERK_TWOPRIMARIES = 0x3D,
  PERK_UNLIMITEDSPRINT = 0x3E,
  PERK_COUNT = 0x3F,
  PERK_UNKNOWN = 0x3F,
};

enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_BAD = 0x0,
  TEAM_ALLIES = 0x1,
  TEAM_AXIS = 0x2,
  TEAM_THREE = 0x3,
  TEAM_FOUR = 0x4,
  TEAM_FIVE = 0x5,
  TEAM_SIX = 0x6,
  TEAM_SEVEN = 0x7,
  TEAM_EIGHT = 0x8,
  TEAM_NUM_PLAYING_TEAMS = 0x9,
  TEAM_SPECTATOR = 0x9,
  TEAM_NUM_TEAMS = 0xA,
  TEAM_LOCALPLAYERS = 0xB,
  TEAM_FIRST_PLAYING_TEAM = 0x1,
  TEAM_LAST_PLAYING_TEAM = 0x8,
};

enum $1C89E451F93DE3C5E5AD1AC61BE2FB7C
{
  DAMAGE_RANGE_1 = 0x0,
  DAMAGE_RANGE_2 = 0x1,
  DAMAGE_RANGE_3 = 0x2,
  DAMAGE_RANGE_4 = 0x3,
  DAMAGE_RANGE_5 = 0x4,
  DAMAGE_RANGE_6 = 0x5,
  DAMAGE_RANGE_COUNT = 0x6,
  DAMAGE_RANGE_MAX = 0x0,
  DAMAGE_RANGE_MIN = 0x5,
};

enum jqProcessor
{
  JQ_CORE_0 = 0x1,
  JQ_CORE_1 = 0x2,
  JQ_CORE_2 = 0x4,
  JQ_CORE_3 = 0x8,
  JQ_CORE_4 = 0x10,
  JQ_CORE_5 = 0x20,
  JQ_CORE_6 = 0x40,
  JQ_CORE_7 = 0x80,
  JQ_CORE_ALL = 0xFF,
};

enum scriptAnimEventTypes_t
{
  ANIM_ET_UNUSED = 0x0,
  ANIM_ET_DEATH = 0x1,
  ANIM_ET_FIREWEAPON = 0x2,
  ANIM_ET_JUMP = 0x3,
  ANIM_ET_LAND = 0x4,
  ANIM_ET_DROPWEAPON = 0x5,
  ANIM_ET_RAISEWEAPON = 0x6,
  ANIM_ET_FIRSTRAISEWEAPON = 0x7,
  ANIM_ET_RELOAD = 0x8,
  ANIM_ET_CROUCH_TO_PRONE = 0x9,
  ANIM_ET_PRONE_TO_CROUCH = 0xA,
  ANIM_ET_STAND_TO_CROUCH = 0xB,
  ANIM_ET_CROUCH_TO_STAND = 0xC,
  ANIM_ET_PRONE_TO_STAND = 0xD,
  ANIM_ET_PRONE_TO_SPRINT = 0xE,
  ANIM_ET_RUN_TO_IDLE = 0xF,
  ANIM_ET_MELEEATTACK = 0x10,
  ANIM_ET_MELEELEFT = 0x11,
  ANIM_ET_KNIFE_MELEE = 0x12,
  ANIM_ET_KNIFE_MELEE_CHARGE = 0x13,
  ANIM_ET_FLINCH = 0x14,
  ANIM_ET_SHELLSHOCK = 0x15,
  ANIM_ET_VEHICLE_ENTER = 0x16,
  ANIM_ET_VEHICLE_CHANGE_SEATS = 0x17,
  ANIM_ET_VEHICLE_EXIT = 0x18,
  ANIM_ET_SCRIPTEVENT = 0x19,
  ANIM_ET_DTP_TAKEOFF = 0x1A,
  ANIM_ET_DTP_LAND = 0x1B,
  ANIM_ET_STAND_TO_LASTSTAND = 0x1C,
  ANIM_ET_CROUCH_TO_LASTSTAND = 0x1D,
  ANIM_ET_PRONE_TO_LASTSTAND = 0x1E,
  ANIM_ET_LASTSTAND_TO_STAND = 0x1F,
  ANIM_ET_LASTSTAND_TO_CROUCH = 0x20,
  ANIM_ET_LASTSTAND_TO_PRONE = 0x21,
  ANIM_ET_FLARED = 0x22,
  ANIM_ET_LASTSTAND_SUICIDE = 0x23,
  ANIM_ET_PRIME_GRENADE = 0x24,
  NUM_ANIM_EVENTTYPES = 0x25,
};

enum jqWorkerType
{
  JQ_WORKER_GENERIC = 0x0,
  JQ_WORKER_MAX = 0x1,
  JQ_WORKER_DEFAULT = 0x0,
};

enum $B6A5B71CCAEBAA7C48608F9D13D5EF41
{
  AIDEMOLOCKONVIEW_STANDING = 0x0,
  AIDEMOLOCKONVIEW_MISSING_LEGS = 0x1,
  AIDEMOLOCKONVIEW_COUNT = 0x2,
};

enum $3B02E3071707545AA15CBF34D7869793
{
  STATMON_FPS = 0x0,
  STATMON_FILEACCESS = 0x1,
  STATMON_SOUNDCPU = 0x2,
  STATMON_MAXEFFECTS = 0x3,
  STATMON_SNAPSHOTENTS = 0x4,
  STATMON_TRIS = 0x5,
  STATMON_SERVERFPS = 0x6,
  STATMON_NET = 0x7,
  STATMON_DENSECOLLISION = 0x8,
  STATMON_IK = 0x9,
  STATMON_SCRIPTERROR = 0xA,
  STATMON_BANDWIDTHEXCEEDED = 0xB,
  STATMON_GAMESTATEEXCEEDED = 0xC,
  STATMON_BANDWIDTHLIMITED = 0xD,
  STATMON_COUNT = 0xE,
};

enum keyNum_t
{
  K_NONE = 0x0,
  K_FIRSTGAMEPADBUTTON_RANGE_1 = 0x1,
  K_BUTTON_A = 0x1,
  K_BUTTON_B = 0x2,
  K_BUTTON_X = 0x3,
  K_BUTTON_Y = 0x4,
  K_BUTTON_LSHLDR = 0x5,
  K_BUTTON_RSHLDR = 0x6,
  K_LASTGAMEPADBUTTON_RANGE_1 = 0x6,
  K_BS = 0x8,
  K_TAB = 0x9,
  K_NL = 0xA,
  K_ENTER = 0xD,
  K_FIRSTGAMEPADBUTTON_RANGE_2 = 0xE,
  K_BUTTON_START = 0xE,
  K_BUTTON_BACK = 0xF,
  K_BUTTON_LSTICK = 0x10,
  K_BUTTON_RSTICK = 0x11,
  K_BUTTON_LTRIG = 0x12,
  K_BUTTON_RTRIG = 0x13,
  K_DPAD_UP = 0x14,
  K_FIRSTDPAD = 0x14,
  K_DPAD_DOWN = 0x15,
  K_DPAD_LEFT = 0x16,
  K_DPAD_RIGHT = 0x17,
  K_BUTTON_RTRIG_PUSH = 0x18,
  K_BUTTON_LTRIG_PUSH = 0x19,
  K_BUTTON_LSTICK_ALTIMAGE2 = 0x10,
  K_BUTTON_RSTICK_ALTIMAGE2 = 0x11,
  K_BUTTON_LSTICK_ALTIMAGE = 0xBC,
  K_NUNCHUK_RIGHT = 0xBC,
  K_BUTTON_RSTICK_ALTIMAGE = 0xBD,
  K_WIIUMOTE_RIGHT = 0xBD,
  K_LASTDPAD = 0x17,
  K_DPAD_LEFTRIGHT = 0x18,
  K_DPAD_UPDOWN = 0x19,
  K_LASTGAMEPADBUTTON_RANGE_2 = 0x19,
  K_CODPOINTS = 0x1A,
  K_ESCAPE = 0x1B,
  K_FIRSTGAMEPADBUTTON_RANGE_3 = 0x1C,
  K_APAD_UP = 0x1C,
  K_FIRSTAPAD = 0x1C,
  K_APAD_DOWN = 0x1D,
  K_APAD_LEFT = 0x1E,
  K_APAD_RIGHT = 0x1F,
  K_LASTAPAD = 0x1F,
  K_LASTGAMEPADBUTTON_RANGE_3 = 0x1F,
  K_SPACE = 0x20,
  K_BACKSPACE = 0x7F,
  K_ASCII_FIRST = 0x80,
  K_ASCII_181 = 0x80,
  K_ASCII_191 = 0x81,
  K_ASCII_223 = 0x82,
  K_ASCII_224 = 0x83,
  K_ASCII_225 = 0x84,
  K_ASCII_228 = 0x85,
  K_ASCII_229 = 0x86,
  K_ASCII_230 = 0x87,
  K_ASCII_231 = 0x88,
  K_ASCII_232 = 0x89,
  K_ASCII_233 = 0x8A,
  K_ASCII_236 = 0x8B,
  K_ASCII_241 = 0x8C,
  K_ASCII_242 = 0x8D,
  K_ASCII_243 = 0x8E,
  K_ASCII_246 = 0x8F,
  K_ASCII_248 = 0x90,
  K_ASCII_249 = 0x91,
  K_ASCII_250 = 0x92,
  K_ASCII_252 = 0x93,
  K_END_ASCII_CHARS = 0x94,
  K_COMMAND = 0x96,
  K_CAPSLOCK = 0x97,
  K_POWER = 0x98,
  K_PAUSE = 0x99,
  K_UPARROW = 0x9A,
  K_DOWNARROW = 0x9B,
  K_LEFTARROW = 0x9C,
  K_RIGHTARROW = 0x9D,
  K_ALT = 0x9E,
  K_CTRL = 0x9F,
  K_SHIFT = 0xA0,
  K_INS = 0xA1,
  K_DEL = 0xA2,
  K_PGDN = 0xA3,
  K_PGUP = 0xA4,
  K_HOME = 0xA5,
  K_END = 0xA6,
  K_F1 = 0xA7,
  K_F2 = 0xA8,
  K_F3 = 0xA9,
  K_F4 = 0xAA,
  K_F5 = 0xAB,
  K_F6 = 0xAC,
  K_F7 = 0xAD,
  K_F8 = 0xAE,
  K_F9 = 0xAF,
  K_F10 = 0xB0,
  K_F11 = 0xB1,
  K_F12 = 0xB2,
  K_F13 = 0xB3,
  K_F14 = 0xB4,
  K_F15 = 0xB5,
  K_KP_HOME = 0xB6,
  K_KP_UPARROW = 0xB7,
  K_KP_PGUP = 0xB8,
  K_KP_LEFTARROW = 0xB9,
  K_KP_5 = 0xBA,
  K_KP_RIGHTARROW = 0xBB,
  K_KP_END = 0xBC,
  K_KP_DOWNARROW = 0xBD,
  K_KP_PGDN = 0xBE,
  K_KP_ENTER = 0xBF,
  K_KP_INS = 0xC0,
  K_KP_DEL = 0xC1,
  K_KP_SLASH = 0xC2,
  K_KP_MINUS = 0xC3,
  K_KP_PLUS = 0xC4,
  K_KP_NUMLOCK = 0xC5,
  K_KP_STAR = 0xC6,
  K_KP_EQUALS = 0xC7,
  K_MOUSE1 = 0xC8,
  K_MOUSE2 = 0xC9,
  K_MOUSE3 = 0xCA,
  K_MOUSE4 = 0xCB,
  K_MOUSE5 = 0xCC,
  K_MWHEELDOWN = 0xCD,
  K_MWHEELUP = 0xCE,
  K_AUX1 = 0xCF,
  K_AUX2 = 0xD0,
  K_AUX3 = 0xD1,
  K_AUX4 = 0xD2,
  K_AUX5 = 0xD3,
  K_AUX6 = 0xD4,
  K_AUX7 = 0xD5,
  K_AUX8 = 0xD6,
  K_AUX9 = 0xD7,
  K_AUX10 = 0xD8,
  K_AUX11 = 0xD9,
  K_AUX12 = 0xDA,
  K_AUX13 = 0xDB,
  K_AUX14 = 0xDC,
  K_AUX15 = 0xDD,
  K_AUX16 = 0xDE,
  K_LAST_KEY = 0xDF,
};

enum weapAnimFiles_t
{
  WEAP_ANIM_ROOT = 0x0,
  WEAP_ANIM_IDLE = 0x1,
  WEAP_ANIM_EMPTY_IDLE = 0x2,
  WEAP_ANIM_FIRE_INTRO = 0x3,
  WEAP_ANIM_FIRE = 0x4,
  WEAP_ANIM_HOLD_FIRE = 0x5,
  WEAP_ANIM_LASTSHOT = 0x6,
  WEAP_ANIM_FINALSHOT = 0x7,
  WEAP_ANIM_RECHAMBER = 0x8,
  WEAP_ANIM_MELEE = 0x9,
  WEAP_ANIM_MELEE1 = 0xA,
  WEAP_ANIM_MELEE2 = 0xB,
  WEAP_ANIM_MELEE3 = 0xC,
  WEAP_ANIM_MELEE_EMPTY = 0xD,
  WEAP_ANIM_MELEE_CHARGE = 0xE,
  WEAP_ANIM_MELEE_CHARGE_EMPTY = 0xF,
  WEAP_ANIM_RELOAD = 0x10,
  WEAP_ANIM_RELOAD_RIGHT = 0x11,
  WEAP_ANIM_RELOAD_EMPTY = 0x12,
  WEAP_ANIM_RELOAD_START = 0x13,
  WEAP_ANIM_RELOAD_END = 0x14,
  WEAP_ANIM_RELOAD_QUICK = 0x15,
  WEAP_ANIM_RELOAD_QUICK_EMPTY = 0x16,
  WEAP_ANIM_RAISE = 0x17,
  WEAP_ANIM_FIRST_RAISE = 0x18,
  WEAP_ANIM_DROP = 0x19,
  WEAP_ANIM_ALT_RAISE = 0x1A,
  WEAP_ANIM_ALT_DROP = 0x1B,
  WEAP_ANIM_QUICK_RAISE = 0x1C,
  WEAP_ANIM_QUICK_DROP = 0x1D,
  WEAP_ANIM_EMPTY_RAISE = 0x1E,
  WEAP_ANIM_EMPTY_DROP = 0x1F,
  WEAP_ANIM_SPRINT_IN = 0x20,
  WEAP_ANIM_SPRINT_LOOP = 0x21,
  WEAP_ANIM_SPRINT_OUT = 0x22,
  WEAP_ANIM_SPRINT_EMPTY_IN = 0x23,
  WEAP_ANIM_SPRINT_EMPTY_LOOP = 0x24,
  WEAP_ANIM_SPRINT_EMPTY_OUT = 0x25,
  WEAP_ANIM_LOWREADY_IN = 0x26,
  WEAP_ANIM_LOWREADY_LOOP = 0x27,
  WEAP_ANIM_LOWREADY_OUT = 0x28,
  WEAP_ANIM_CONT_FIRE_IN = 0x29,
  WEAP_ANIM_CONT_FIRE_LOOP = 0x2A,
  WEAP_ANIM_CONT_FIRE_OUT = 0x2B,
  WEAP_ANIM_CRAWL_IN = 0x2C,
  WEAP_ANIM_CRAWL_FORWARD = 0x2D,
  WEAP_ANIM_CRAWL_BACK = 0x2E,
  WEAP_ANIM_CRAWL_RIGHT = 0x2F,
  WEAP_ANIM_CRAWL_LEFT = 0x30,
  WEAP_ANIM_CRAWL_OUT = 0x31,
  WEAP_ANIM_CRAWL_EMPTY_IN = 0x32,
  WEAP_ANIM_CRAWL_EMPTY_FORWARD = 0x33,
  WEAP_ANIM_CRAWL_EMPTY_BACK = 0x34,
  WEAP_ANIM_CRAWL_EMPTY_RIGHT = 0x35,
  WEAP_ANIM_CRAWL_EMPTY_LEFT = 0x36,
  WEAP_ANIM_CRAWL_EMPTY_OUT = 0x37,
  WEAP_ANIM_DEPLOY = 0x38,
  WEAP_ANIM_BREAKDOWN = 0x39,
  WEAP_ANIM_DETONATE = 0x3A,
  WEAP_ANIM_NIGHTVISION_WEAR = 0x3B,
  WEAP_ANIM_NIGHTVISION_REMOVE = 0x3C,
  WEAP_ANIM_ADS_FIRE = 0x3D,
  WEAP_ANIM_ADS_LASTSHOT = 0x3E,
  WEAP_ANIM_ADS_FIRE_INTRO = 0x3F,
  WEAP_ANIM_ADS_RECHAMBER = 0x40,
  WEAP_ANIM_DTP_IN = 0x41,
  WEAP_ANIM_DTP_LOOP = 0x42,
  WEAP_ANIM_DTP_OUT = 0x43,
  WEAP_ANIM_DTP_EMPTY_IN = 0x44,
  WEAP_ANIM_DTP_EMPTY_LOOP = 0x45,
  WEAP_ANIM_DTP_EMPTY_OUT = 0x46,
  WEAP_ANIM_SLIDE_IN = 0x47,
  WEAP_ANIM_MANTLE = 0x48,
  WEAP_ANIM_CAMERA_SPRINT_LOOP = 0x49,
  WEAP_ANIM_CAMERA_DTP_IN = 0x4A,
  WEAP_ANIM_CAMERA_DTP_LOOP = 0x4B,
  WEAP_ANIM_CAMERA_DTP_OUT = 0x4C,
  WEAP_ANIM_CAMERA_MANTLE = 0x4D,
  WEAP_ANIM_FIRE_LEFT = 0x4E,
  WEAP_ANIM_LASTSHOT_LEFT = 0x4F,
  WEAP_ANIM_FINALSHOT_LEFT = 0x50,
  WEAP_ANIM_IDLE_LEFT = 0x51,
  WEAP_ANIM_EMPTY_IDLE_LEFT = 0x52,
  WEAP_ANIM_RELOAD_EMPTY_LEFT = 0x53,
  WEAP_ANIM_RELOAD_LEFT = 0x54,
  WEAP_ANIM_ADS_UP = 0x55,
  WEAP_ANIM_ADS_DOWN = 0x56,
  WEAP_ANIM_ADS_UP_OTHER_SCOPE = 0x57,
  NUM_WEAP_ANIMS = 0x58,
};

enum $067C566A97EEC6E7D3DB7B726B5C1A66
{
  COL_PARTITION = 0x0,
  COL_BRUSH = 0x1,
};

enum CoreStringTable
{
  CORE_TABLE_STATS = 0x0,
  CORE_TABLE_MILESTONE_0 = 0x1,
  CORE_TABLE_MILESTONE_FIRST = 0x1,
  CORE_TABLE_MILESTONE_1 = 0x2,
  CORE_TABLE_MILESTONE_2 = 0x3,
  CORE_TABLE_MILESTONE_3 = 0x4,
  CORE_TABLE_MILESTONE_LAST = 0x4,
  CORE_TABLE_GLOBAL_COUNTERS = 0x5,
  CORE_TABLE_GLOBAL_COUNTERS_REF = 0x6,
  CORE_TABLE_TRACKER_COLUMNS = 0x7,
  CORE_TABLE_SP_STATS = 0x8,
  CORE_TABLE_RANK_ICON = 0x9,
  CORE_TABLE_SCORE_INFO = 0xA,
  CORE_TABLE_GAMETYPES = 0xB,
  CORE_TABLE_GAMEMODES = 0xC,
  CORE_TABLE_RANK_ICON_ZM = 0xD,
  CORE_TABLE_GUNLEVELS = 0xE,
  CORE_TABLE_ZM_STATS = 0xF,
  CORE_TABLE_MTX_ITEMS = 0x10,
  CORE_TABLE_COUNT = 0x11,
};

enum statsLocation
{
  STATS_LOCATION_NORMAL = 0x0,
  STATS_LOCATION_FORCE_NORMAL = 0x1,
  STATS_LOCATION_BACKUP = 0x2,
  STATS_LOCATION_STABLE = 0x3,
  STATS_LOCATION_OTHERPLAYER = 0x4,
  STATS_LOCATION_COUNT = 0x5,
};

enum $708003E590F9EEB5451E934A26975E39
{
  qfalse = 0x0,
  qtrue = 0x1,
};

enum $AA89F05AB2B3171A2BDA21648F09F117
{
  IMGF_MIPMAPS = 0x1,
  IMGF_ALLOWPICMIP = 0x2,
  IMGF_CHARACTERMIP = 0x4,
  IMGF_LIGHTMAP = 0x8,
  IMGF_CLAMP_S = 0x10,
  IMGF_CLAMP_T = 0x20,
  IMGF_HEIGHTMAP = 0x40,
  IMGF_DELAYLOAD = 0x80,
  IMGF_NOOPT = 0x100,
  IMGF_SCREENDEPTH = 0x200,
  IMGF_TEXTURENAME = 0x400,
  IMGF_SHEET_KEEP_FLAGS = 0x1,
};

enum eAttachmentGroup
{
  ATTACHMENT_GROUP_ATTACHMENT = 0x0,
  ATTACHMENT_GROUP_WEAPONOPTIONS = 0x1,
  ATTACHMENT_GROUP_COUNT = 0x2,
  ATTACHMENT_GROUP_INVALID = 0x2,
};

enum eWeaponOptionGroup
{
  WEAPONOPTION_GROUP_FIRST = 0x0,
  WEAPONOPTION_GROUP_CAMO = 0x0,
  WEAPONOPTION_GROUP_TAG = 0x1,
  WEAPONOPITON_GROUP_EMBLEM = 0x2,
  WEAPONOPTION_GROUP_FIRST_ATTACHMENT_OPTION = 0x3,
  WEAPONOPTION_GROUP_RETICLE = 0x3,
  WEAPONOPTION_GROUP_LENS = 0x4,
  WEAPONOPTION_GROUP_RETICLE_COLOR = 0x5,
  WEAPONOPTION_GROUP_LAST_ATTACHMENT_OPTION = 0x5,
  WEAPONOPTION_GROUP_COUNT = 0x6,
  WEAPONOPTION_GROUP_INVALID = 0x6,
};

enum VehicleSeatPositions
{
  VEH_POS_NONE = 0xFFFFFFFF,
  VEH_POS_DRIVER = 0x0,
  VEH_POS_MIN_GUNNER = 0x1,
  VEH_POS_GUNNER_1 = 0x1,
  VEH_POS_GUNNER_2 = 0x2,
  VEH_POS_GUNNER_3 = 0x3,
  VEH_POS_GUNNER_4 = 0x4,
  VEH_POS_MAX_GUNNER = 0x4,
  VEH_POS_MIN_PASSENGER = 0x5,
  VEH_POS_PASSENGER_1 = 0x5,
  VEH_POS_PASSENGER_2 = 0x6,
  VEH_POS_PASSENGER_3 = 0x7,
  VEH_POS_PASSENGER_4 = 0x8,
  VEH_POS_PASSENGER_5 = 0x9,
  VEH_POS_PASSENGER_6 = 0xA,
  VEH_POS_MAX_PASSENGER = 0xA,
  NUM_VEHICLE_POSITIONS = 0xB,
};

enum EMemTrack
{
  TRACK_DEBUG = 0x0,
  TRACK_HUNK = 0x1,
  TRACK_BINARIES = 0x2,
  TRACK_MISC_SWAP = 0x3,
  TRACK_DELIMITER1 = 0x4,
  TRACK_AI = 0x5,
  TRACK_AI_NODES = 0x6,
  TRACK_SCRIPT = 0x7,
  TRACK_SCRIPT_DEBUG = 0x8,
  TRACK_FX = 0x9,
  TRACK_GLASS = 0xA,
  TRACK_NETWORK_ENTITY = 0xB,
  TRACK_MISC = 0xC,
  TRACK_FASTFILE = 0xD,
  TRACK_ANIMATION = 0xE,
  TRACK_ANIMCACHE = 0xF,
  TRACK_WORLD_GLOBALS = 0x10,
  TRACK_SOUND_GLOBALS = 0x11,
  TRACK_CLIENT_ANIMSCRIPT = 0x12,
  TRACK_SOUND = 0x13,
  TRACK_DELIMITER2 = 0x14,
  TRACK_RENDERER_GLOBALS = 0x15,
  TRACK_RENDERER_IMAGES = 0x16,
  TRACK_RENDERER_WORLD = 0x17,
  TRACK_RENDERER_MODELS = 0x18,
  TRACK_RENDERER_MISC = 0x19,
  TRACK_RENDERER_SIEGE = 0x1A,
  TRACK_CINEMATICS = 0x1B,
  TRACK_DELIMITER3 = 0x1C,
  TRACK_COLLISION_MISC = 0x1D,
  TRACK_COLLISION_BRUSH = 0x1E,
  TRACK_COLLISION_MODEL_TRI = 0x1F,
  TRACK_COLLISION_TERRAIN = 0x20,
  TRACK_PHYSICS = 0x21,
  TRACK_MAP_ENTS = 0x22,
  TRACK_TEMP = 0x23,
  TRACK_DELIMITER4 = 0x24,
  TRACK_LOCALIZATION = 0x25,
  TRACK_FLAME = 0x26,
  TRACK_UI = 0x27,
  TRACK_TL = 0x28,
  TRACK_ZMEM = 0x29,
  TRACK_FIREMANAGER = 0x2A,
  TRACK_PROFILE = 0x2B,
  TRACK_CLIENT = 0x2C,
  TRACK_RECORDER = 0x2D,
  TRACK_RSTREAM = 0x2E,
  TRACK_RENDERER_STREAMBUFFER = 0x2F,
  TRACK_RENDERER_STREAMBUFFER_EXTRA = 0x30,
  TRACK_GEOSTREAM = 0x31,
  TRACK_DDL = 0x32,
  TRACK_ONLINE = 0x33,
  TRACK_EMBLEM = 0x34,
  TRACK_VEHICLEDEF = 0x35,
  TRACK_THREAD_LOCAL = 0x36,
  TRACK_MINSPEC_IMAGES = 0x37,
  TRACK_DELIMITER5 = 0x38,
  TRACK_NONE = 0x39,
  TRACK_COUNT = 0x3A,
};

enum eAttachment
{
  ATTACHMENT_NONE = 0x0,
  ATTACHMENT_ACOG = 0x1,
  ATTACHMENT_DUALCLIP = 0x2,
  ATTACHMENT_DUALOPTIC = 0x3,
  ATTACHMENT_DW = 0x4,
  ATTACHMENT_EXTBARREL = 0x5,
  ATTACHMENT_EXTCLIP = 0x6,
  ATTACHMENT_EXTRAMAGS = 0x7,
  ATTACHMENT_FASTADS = 0x8,
  ATTACHMENT_FASTRELOAD = 0x9,
  ATTACHMENT_FMJ = 0xA,
  ATTACHMENT_GL = 0xB,
  ATTACHMENT_GRIP = 0xC,
  ATTACHMENT_HOLO = 0xD,
  ATTACHMENT_IR = 0xE,
  ATTACHMENT_IRONSIGHTS = 0xF,
  ATTACHMENT_LONGBREATH = 0x10,
  ATTACHMENT_MK = 0x11,
  ATTACHMENT_MMS = 0x12,
  ATTACHMENT_RANGEFINDER = 0x13,
  ATTACHMENT_REFLEX = 0x14,
  ATTACHMENT_RF = 0x15,
  ATTACHMENT_SELECTFIRE = 0x16,
  ATTACHMENT_SILENCER = 0x17,
  ATTACHMENT_STACKFIRE = 0x18,
  ATTACHMENT_STALKER = 0x19,
  ATTACHMENT_STEADYAIM = 0x1A,
  ATTACHMENT_SWAYREDUC = 0x1B,
  ATTACHMENT_TACKNIFE = 0x1C,
  ATTACHMENT_VZOOM = 0x1D,
  ATTACHMENT_TYPE_COUNT = 0x1E,
  ATTACHMENT_INVALID = 0x1E,
};

enum aistateEnum_t
{
  AISTATE_COMBAT = 0x0,
  MAX_AISTATES = 0x1,
};

enum statIndex_t
{
  STAT_HEALTH = 0x0,
  STAT_DEAD_YAW = 0x1,
  STAT_MAX_HEALTH = 0x2,
  STAT_SPAWN_COUNT = 0x3,
  MAX_STATS = 0x4,
};

enum scriptAnimConditions_t
{
  ANIM_COND_PLAYERANIMTYPE = 0x0,
  ANIM_COND_WEAPONCLASS = 0x1,
  ANIM_COND_NEXTPLAYERANIMTYPE = 0x2,
  ANIM_COND_NEXTWEAPONCLASS = 0x3,
  ANIM_COND_MOUNTED = 0x4,
  ANIM_COND_MOVESTATUS = 0x5,
  ANIM_COND_PREVDIRECTION = 0x6,
  ANIM_COND_DIRECTION = 0x7,
  ANIM_COND_DMGDIRECTION = 0x8,
  ANIM_COND_DMGTYPE = 0x9,
  ANIM_COND_STANCE = 0xA,
  ANIM_COND_UNDERHAND = 0xB,
  ANIM_COND_FIRING = 0xC,
  ANIM_COND_WEAPON_POSITION = 0xD,
  ANIM_COND_SLOPE = 0xE,
  ANIM_COND_PERK = 0xF,
  ANIM_COND_ATTACHMENT = 0x10,
  ANIM_COND_RIOTSHIELDNEXT = 0x11,
  ANIM_COND_VEHICLE_NAME = 0x12,
  ANIM_COND_VEHICLE_SEAT_TO = 0x13,
  ANIM_COND_VEHICLE_SEAT_FROM = 0x14,
  ANIM_COND_VEHICLE_ANIM_STAGE = 0x15,
  ANIM_COND_VEHICLE_ENTRY_POS = 0x16,
  ANIM_COND_EVENT = 0x17,
  ANIM_COND_CAC = 0x18,
  NUM_ANIM_CONDITIONS = 0x19,
};

enum eAttachmentPoint
{
  ATTACHMENT_POINT_NONE = 0x0,
  ATTACHMENT_POINT_TOP = 0x1,
  ATTACHMENT_POINT_FIRST = 0x1,
  ATTACHMENT_POINT_BOTTOM = 0x2,
  ATTACHMENT_POINT_TRIGGER = 0x3,
  ATTACHMENT_POINT_MUZZLE = 0x4,
  ATTACHMENT_POINT_GUNPERK = 0x5,
  ATTACHMENT_POINT_COUNT = 0x6,
  ATTACHMENT_POINT_INVALID = 0x6,
};

enum $BF242296827AB91238E7CA8DA37D18EA
{
  DRAW_SURF_BSP_CAMERA_LIT = 0x0,
  DRAW_SURF_SMODEL_CAMERA_LIT = 0x1,
  DRAW_SURF_CAMERA_LIT_BEGIN = 0x2,
  DRAW_SURF_ENT_CAMERA_LIT = 0x2,
  DRAW_SURF_CAMERA_LIT_END = 0x3,
  DRAW_SURF_BSP_CAMERA_LIGHT_MAP = 0x3,
  DRAW_SURF_SMODEL_CAMERA_LIGHT_MAP_OPAQUE = 0x4,
  DRAW_SURF_CAMERA_LIGHT_MAP_BEGIN = 0x5,
  DRAW_SURF_ENT_CAMERA_LIGHT_MAP_OPAQUE = 0x5,
  DRAW_SURF_CAMERA_LIGHT_MAP_END = 0x6,
  DRAW_SURF_DEPTH_HACK_BEGIN = 0x6,
  DRAW_SURF_DEPTH_HACK_CAMERA = 0x6,
  DRAW_SURF_DEPTH_HACK_END = 0x7,
  DRAW_SURF_CAMERA_LIT_TRANS_BEGIN = 0x7,
  DRAW_SURF_BSP_CAMERA_LIT_TRANS = 0x7,
  DRAW_SURF_SMODEL_CAMERA_LIT_TRANS = 0x8,
  DRAW_SURF_ENT_CAMERA_LIT_TRANS = 0x9,
  DRAW_SURF_CAMERA_LIT_TRANS_END = 0xA,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_BEGIN = 0xA,
  DRAW_SURF_SMODEL_CAMERA_LIT_QUASI_OPAQUE = 0xA,
  DRAW_SURF_ENT_CAMERA_LIT_QUASI_OPAQUE = 0xB,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_END = 0xC,
  DRAW_SURF_CAMERA_LIT_FX_BEGIN = 0xC,
  DRAW_SURF_FX_CAMERA_LIT = 0xC,
  DRAW_SURF_FX_CAMERA_LIT_AUTO = 0xD,
  DRAW_SURF_FX_CAMERA_LIT_DECAL = 0xE,
  DRAW_SURF_CODEMESH_CAMERA_LIT = 0xF,
  DRAW_SURF_CAMERA_LIT_FX_END = 0x10,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_BEGIN = 0x10,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_OPAQUE = 0x10,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_OPAQUE = 0x11,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_OPAQUE = 0x12,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_END = 0x13,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_BEGIN = 0x13,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_TRANS = 0x13,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_TRANS = 0x14,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_TRANS = 0x15,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_END = 0x16,
  DRAW_SURF_CAMERA_EMISSIVE_FX_BEGIN = 0x16,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_FX = 0x16,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_FX = 0x17,
  DRAW_SURF_FX_CAMERA_EMISSIVE = 0x18,
  DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 0x19,
  DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 0x1A,
  DRAW_SURF_FX_CAMERA_EMISSIVE_VIEWMODEL = 0x1B,
  DRAW_SURF_FX_CAMERA_EMISSIVE_SUPERFLARE = 0x1C,
  DRAW_SURF_CAMERA_EMISSIVE_FX_END = 0x1D,
  DRAW_SURF_SUNSHADOW_0_BEGIN = 0x1D,
  DRAW_SURF_BSP_SUNSHADOW_0 = 0x1D,
  DRAW_SURF_SMODEL_SUNSHADOW_0 = 0x1E,
  DRAW_SURF_ENT_SUNSHADOW_0 = 0x1F,
  DRAW_SURF_CODEMESH_SUNSHADOW_0 = 0x20,
  DRAW_SURF_SUNSHADOW_1_BEGIN = 0x21,
  DRAW_SURF_BSP_SUNSHADOW_1 = 0x21,
  DRAW_SURF_SMODEL_SUNSHADOW_1 = 0x22,
  DRAW_SURF_ENT_SUNSHADOW_1 = 0x23,
  DRAW_SURF_CODEMESH_SUNSHADOW_1 = 0x24,
  DRAW_SURF_SPOTSHADOW_0_BEGIN = 0x25,
  DRAW_SURF_BSP_SPOTSHADOW_0 = 0x25,
  DRAW_SURF_SMODEL_SPOTSHADOW_0 = 0x26,
  DRAW_SURF_ENT_SPOTSHADOW_0 = 0x27,
  DRAW_SURF_SPOTSHADOW_1_BEGIN = 0x28,
  DRAW_SURF_BSP_SPOTSHADOW_1 = 0x28,
  DRAW_SURF_SMODEL_SPOTSHADOW_1 = 0x29,
  DRAW_SURF_ENT_SPOTSHADOW_1 = 0x2A,
  DRAW_SURF_SPOTSHADOW_2_BEGIN = 0x2B,
  DRAW_SURF_BSP_SPOTSHADOW_2 = 0x2B,
  DRAW_SURF_SMODEL_SPOTSHADOW_2 = 0x2C,
  DRAW_SURF_ENT_SPOTSHADOW_2 = 0x2D,
  DRAW_SURF_SPOTSHADOW_3_BEGIN = 0x2E,
  DRAW_SURF_BSP_SPOTSHADOW_3 = 0x2E,
  DRAW_SURF_SMODEL_SPOTSHADOW_3 = 0x2F,
  DRAW_SURF_ENT_SPOTSHADOW_3 = 0x30,
  DRAW_SURF_ENT_CAMERA_SONAR = 0x31,
  DRAW_SURF_TYPE_COUNT = 0x32,
};

enum animCommandFlags
{
  ANIM_FL_THROW_GRENADE = 0x0,
  ANIM_FL_TURN_TO_TURRET = 0x1,
  ANIM_FL_MAX = 0x2,
};

enum $54AFDF5EB37B6A5508956C2550F18AF4
{
  TECHNIQUE_DEPTH_PREPASS = 0x0,
  TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x1,
  TECHNIQUE_UNLIT = 0x2,
  TECHNIQUE_EMISSIVE = 0x3,
  TECHNIQUE_LIT_BEGIN = 0x4,
  TECHNIQUE_LIT = 0x4,
  TECHNIQUE_LIT_SUN = 0x5,
  TECHNIQUE_LIT_SUN_SHADOW = 0x6,
  TECHNIQUE_LIT_SPOT = 0x7,
  TECHNIQUE_LIT_SPOT_SHADOW = 0x8,
  TECHNIQUE_LIT_SPOT_SQUARE = 0x9,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW = 0xA,
  TECHNIQUE_LIT_SPOT_ROUND = 0xB,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW = 0xC,
  TECHNIQUE_LIT_OMNI = 0xD,
  TECHNIQUE_LIT_OMNI_SHADOW = 0xE,
  TECHNIQUE_LIT_DLIGHT_GLIGHT = 0xF,
  TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT = 0x10,
  TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT = 0x11,
  TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT = 0x12,
  TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT = 0x13,
  TECHNIQUE_LIT_SPOT_SQUARE_DLIGHT_GLIGHT = 0x14,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW_DLIGHT_GLIGHT = 0x15,
  TECHNIQUE_LIT_SPOT_ROUND_DLIGHT_GLIGHT = 0x16,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW_DLIGHT_GLIGHT = 0x17,
  TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT = 0x18,
  TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT = 0x19,
  TECHNIQUE_LIT_END = 0x1A,
  TECHNIQUE_LIGHT_SPOT = 0x1A,
  TECHNIQUE_LIGHT_OMNI = 0x1B,
  TECHNIQUE_FAKELIGHT_NORMAL = 0x1C,
  TECHNIQUE_FAKELIGHT_VIEW = 0x1D,
  TECHNIQUE_SUNLIGHT_PREVIEW = 0x1E,
  TECHNIQUE_CASE_TEXTURE = 0x1F,
  TECHNIQUE_WIREFRAME_SOLID = 0x20,
  TECHNIQUE_WIREFRAME_SHADED = 0x21,
  TECHNIQUE_DEBUG_BUMPMAP = 0x22,
  TECHNIQUE_DEBUG_PERFORMANCE = 0x23,
  TECHNIQUE_COUNT = 0x24,
  TECHNIQUE_TOTAL_COUNT = 0x25,
  TECHNIQUE_CUSTOM_01 = 0x2,
  TECHNIQUE_CUSTOM_02 = 0x3,
  TECHNIQUE_CUSTOM_03 = 0x4,
  TECHNIQUE_CUSTOM_04 = 0x5,
  TECHNIQUE_CUSTOM_05 = 0x6,
  TECHNIQUE_CUSTOM_06 = 0x7,
  TECHNIQUE_CUSTOM_07 = 0x8,
  TECHNIQUE_CUSTOM_08 = 0x9,
  TECHNIQUE_CUSTOM_09 = 0xA,
  TECHNIQUE_CUSTOM_10 = 0xB,
  TECHNIQUE_CUSTOM_11 = 0xC,
  TECHNIQUE_CUSTOM_12 = 0xD,
  TECHNIQUE_CUSTOM_13 = 0xE,
  TECHNIQUE_CUSTOM_14 = 0xF,
  TECHNIQUE_CUSTOM_15 = 0x10,
  TECHNIQUE_CUSTOM_16 = 0x11,
  TECHNIQUE_CUSTOM_17 = 0x12,
  TECHNIQUE_CUSTOM_18 = 0x13,
  TECHNIQUE_CUSTOM_19 = 0x14,
  TECHNIQUE_CUSTOM_20 = 0x15,
  TECHNIQUE_CUSTOM_21 = 0x16,
  TECHNIQUE_CUSTOM_22 = 0x17,
  TECHNIQUE_CUSTOM_23 = 0x18,
  TECHNIQUE_CUSTOM_24 = 0x19,
  TECHNIQUE_CUSTOM_25 = 0x1A,
  TECHNIQUE_CUSTOM_26 = 0x1B,
  TECHNIQUE_CUSTOM_27 = 0x1C,
  TECHNIQUE_CUSTOM_28 = 0x1D,
  TECHNIQUE_CUSTOM_29 = 0x1E,
  TECHNIQUE_CUSTOM_30 = 0x1F,
  TECHNIQUE_CUSTOM_COUNT = 0x20,
  TECHNIQUE_NONE = 0xFF,
};

enum $8D041886EF3022F9893A45FB1AB1517F
{
  DSKEL_CREATE_INC = 0x20,
};

enum $6CA45D1D21D0306FC70A3A896F8DC554
{
  TRACK_LOCATION_MRAM = 0x0,
  TRACK_LOCATION_LRAM = 0x1,
  TRACK_LOCATION_COUNT = 0x2,
};

enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MAPNAME = 0x4,
  HE_TYPE_GAMETYPE = 0x5,
  HE_TYPE_DAMAGE_INDICATOR = 0x6,
  HE_TYPE_SCORE = 0x7,
  HE_TYPE_MATERIAL = 0x8,
  HE_TYPE_TIMER_DOWN = 0x9,
  HE_TYPE_TIMER_UP = 0xA,
  HE_TYPE_TENTHS_TIMER_DOWN = 0xB,
  HE_TYPE_TENTHS_TIMER_UP = 0xC,
  HE_TYPE_CLOCK_DOWN = 0xD,
  HE_TYPE_CLOCK_UP = 0xE,
  HE_TYPE_WAYPOINT = 0xF,
  HE_TYPE_PERKS = 0x10,
  HE_TYPE_COUNT = 0x11,
};

enum BindIndex_t
{
  BIND_INDEX_PLAYER = 0x0,
  BIND_INDEX_START = 0x0,
  BIND_INDEX_VEHICLE = 0x1,
  BIND_INDEX_COUNT = 0x2,
};

enum $D1A2BCAC61F40605AB82343BD744A29E
{
  CAMERA_REGION_LIT_OPAQUE = 0x0,
  CAMERA_REGION_LIT_TRANS = 0x1,
  CAMERA_REGION_LIT_QUASI_OPAQUE = 0x2,
  CAMERA_REGION_EMISSIVE_OPAQUE = 0x3,
  CAMERA_REGION_EMISSIVE_TRANS = 0x4,
  CAMERA_REGION_EMISSIVE_FX = 0x5,
  CAMERA_REGION_LIGHT_MAP_OPAQUE = 0x6,
  CAMERA_REGION_DEPTH_HACK = 0x7,
  CAMERA_REGION_UNUSED = 0x8,
  CAMERA_REGION_SONAR = 0x9,
  CAMERA_REGION_COUNT = 0xA,
  CAMERA_REGION_NONE = 0xA,
};

enum loadoutClass_t
{
  CLASS_INVALID = 0xFFFFFFFF,
  CUSTOM_CLASS_1 = 0x0,
  CUSTOM_CLASS_FIRST = 0x0,
  CUSTOM_CLASS_2 = 0x1,
  CUSTOM_CLASS_3 = 0x2,
  CUSTOM_CLASS_4 = 0x3,
  CUSTOM_CLASS_5 = 0x4,
  BASIC_CUSTOM_CLASS_COUNT = 0x5,
  CUSTOM_CLASS_6 = 0x5,
  CUSTOM_CLASS_7 = 0x6,
  CUSTOM_CLASS_8 = 0x7,
  CUSTOM_CLASS_9 = 0x8,
  CUSTOM_CLASS_10 = 0x9,
  CUSTOM_CLASS_COUNT = 0xA,
  DEFAULT_CLASS_FIRST = 0xA,
  DEFAULT_CLASS_SMG = 0xA,
  DEFAULT_CLASS_CQB = 0xB,
  DEFAULT_CLASS_ASSAULT = 0xC,
  DEFAULT_CLASS_LMG = 0xD,
  DEFAULT_CLASS_SNIPER = 0xE,
  DEFAULT_CLASS_LAST = 0xE,
  TOTAL_CLASS_COUNT = 0xF,
};

enum weapPositionAnimNum_t
{
  WEAPPOS_HIP_TO_ADS = 0x0,
  WEAPPOS_ADS_TO_HIP = 0x1,
  NUM_WEAPPOS_ANIMS = 0x2,
};

enum consoleChannel_e
{
  CON_CHANNEL_DONT_FILTER = 0x0,
  CON_CHANNEL_ERROR = 0x1,
  CON_CHANNEL_GAMENOTIFY = 0x2,
  CON_CHANNEL_BOLDGAME = 0x3,
  CON_CHANNEL_OBJNOTIFY = 0x4,
  CON_CHANNEL_SUBTITLE = 0x5,
  CON_CHANNEL_OBITUARY = 0x6,
  CON_CHANNEL_COOPINFO = 0x7,
  CON_CHANNEL_LOGFILEONLY = 0x8,
  CON_CHANNEL_CONSOLEONLY = 0x9,
  CON_CHANNEL_SYSTEM = 0xA,
  CON_CHANNEL_NETWORK = 0xB,
  CON_CHANNEL_TASK = 0xC,
  CON_CHANNEL_GFX = 0xD,
  CON_CHANNEL_SOUND = 0xE,
  CON_CHANNEL_FILES = 0xF,
  CON_CHANNEL_UI = 0x10,
  CON_CHANNEL_AI = 0x11,
  CON_CHANNEL_ANIM = 0x12,
  CON_CHANNEL_PHYS = 0x13,
  CON_CHANNEL_FX = 0x14,
  CON_CHANNEL_SCRIPT = 0x15,
  CON_CHANNEL_TL = 0x16,
  CON_CHANNEL_PERFORMANCE = 0x17,
  CON_CHANNEL_DEVGUI = 0x18,
  CON_CHANNEL_CLIENT = 0x19,
  CON_CHANNEL_SERVER = 0x1A,
  CON_CHANNEL_PLAYERWEAP = 0x1B,
  CON_CHANNEL_LIVE = 0x1C,
  CON_CHANNEL_FROMSCRIPT = 0x1D,
  CON_CHANNEL_SPAWNSYSTEM = 0x1E,
  CON_CHANNEL_LEADERBOARDS = 0x1F,
  CON_CHANNEL_DDL = 0x20,
  CON_CHANNEL_SPU = 0x21,
  CON_CHANNEL_GAMERPROFILE = 0x22,
  CON_CHANNEL_PRESENCE = 0x23,
  CON_CHANNEL_RUMBLE = 0x24,
  CON_CHANNEL_UNLOCKABLES = 0x25,
  CON_CHANNEL_VOICE = 0x26,
  CON_CHANNEL_HTTP = 0x27,
  CON_CHANNEL_GFWL = 0x28,
  CON_CHANNEL_IPAK = 0x29,
  CON_CHANNEL_WEBM = 0x2A,
  CON_CHANNEL_PROBER = 0x2B,
  CON_CHANNEL_MIPSTER = 0x2C,
  CON_CHANNEL_STEAM = 0x2D,
  CON_CHANNEL_SOCIAL = 0x2E,
  CON_CHANNEL_DCACHE = 0x2F,
  CON_CHANNEL_RSTREAM = 0x30,
  CON_CHANNEL_SCHEDULER = 0x31,
  CON_CHANNEL_MATCHRECORD = 0x32,
  CON_CHANNEL_MIGRATE = 0x33,
  CON_BUILTIN_CHANNEL_COUNT = 0x34,
  CON_FIRST_DEBUG_CHANNEL = 0x2E,
};

enum WeapAccuracyType
{
  WEAP_ACCURACY_AI_VS_AI = 0x0,
  WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
  WEAP_ACCURACY_COUNT = 0x2,
};

enum $BCEFA00143C0F45DB6F8CF2BD577CDD4
{
  CF_INVALID = 0xFFFFFFFF,
  CF_WORLDFIELDS = 0x0,
  CF_ACTORFIELDS = 0x1,
  CF_VEHICLEFIELDS = 0x2,
  CF_PLAYERFIELDS_CLIENTSIDE = 0x3,
  CF_PLAYERFIELDS_SERVERSIDE = 0x4,
  CF_PLAYERSTATEFIELDS = 0x5,
  CF_SCRIPTMOVERFIELDS = 0x6,
  CF_HELICOPTERFIELDS = 0x7,
  CF_PLANEFIELDS = 0x8,
  CF_TURRETFIELDS = 0x9,
  CF_MISSILEFIELDS = 0xA,
  CF_ZBARRIERFIELDS = 0xB,
  MAX_CLIENTFIELD_SETS = 0xC,
};

enum XAnimFlags
{
  XANIM_LOOP_SYNC_TIME = 0x1,
  XANIM_NONLOOP_SYNC_TIME = 0x2,
  XANIM_SYNC_ROOT = 0x4,
  XANIM_COMPLETE = 0x8,
  XANIM_ADDITIVE = 0x10,
  XANIM_CLIENT = 0x20,
  XANIM_SEPARATE = 0x40,
  XANIM_FORCELOAD = 0x80,
  XANIM_PROPOGATE_FLAGS = 0x63,
};

enum itemGroup_t
{
  ITEMGROUP_SMG = 0x0,
  ITEMGROUP_FIRST = 0x0,
  ITEMGROUP_ASSAULT = 0x1,
  ITEMGROUP_CQB = 0x2,
  ITEMGROUP_LMG = 0x3,
  ITEMGROUP_SNIPER = 0x4,
  ITEMGROUP_PISTOL = 0x5,
  ITEMGROUP_LAUNCHER = 0x6,
  ITEMGROUP_SPECIAL = 0x7,
  ITEMGROUP_SHOTGUN = 0x8,
  ITEMGROUP_EXPLOSIVE = 0x9,
  ITEMGROUP_GRENADE = 0xA,
  ITEMGROUP_MASTERKEY = 0xB,
  ITEMGROUP_GRENADELAUNCHER = 0xC,
  ITEMGROUP_FLAMETHROWER = 0xD,
  ITEMGROUP_SPECIALTY = 0xE,
  ITEMGROUP_SPECIALGRENADE = 0xF,
  ITEMGROUP_MISCWEAPON = 0x10,
  ITEMGROUP_FEATURE = 0x11,
  ITEMGROUP_BONUSCARD = 0x12,
  ITEMGROUP_GLOBAL_ITEMS_START = 0x13,
  ITEMGROUP_KILLSTREAK = 0x13,
  ITEMGROUP_COUNT = 0x14,
  ITEMGROUP_INVALID = 0xFFFFFFFF,
};

enum $4EC7240C982D538B5489DCB6F94986FB
{
  XANIM_NOTIFY_NO_ONE = 0x0,
  XANIM_NOTIFY_SERVER = 0x1,
  XANIM_NOTIFY_CLIENT = 0x2,
  XANIM_NOTIFY_BOTH = 0x3,
};

enum $DC2A81F262F1A8965B4015A814F3978D
{
  MT_NODE_SIZE = 0x18,
};

enum loadoutSlot_t
{
  LOADOUTSLOT_INVALID = 0xFFFFFFFF,
  LOADOUTSLOT_FIRST = 0x0,
  LOADOUTSLOT_PRIMARY_WEAPON = 0x0,
  LOADOUTSLOT_PRIMARY_ATTACHMENT1 = 0x1,
  LOADOUTSLOT_PRIMARY_ATTACHMENT2 = 0x2,
  LOADOUTSLOT_PRIMARY_ATTACHMENT3 = 0x3,
  LOADOUTSLOT_PRIMARY_CAMO = 0x4,
  LOADOUTSLOT_PRIMARY_RETICLE = 0x5,
  LOADOUTSLOT_PRIMARY_RETICLE_COLOR = 0x6,
  LOADOUTSLOT_PRIMARY_LENS = 0x7,
  LOADOUTSLOT_PRIMARY_EMBLEM = 0x8,
  LOADOUTSLOT_PRIMARY_TAG = 0x9,
  LOADOUTSLOT_SECONDARY_WEAPON = 0xA,
  LOADOUTSLOT_SECONDARY_ATTACHMENT1 = 0xB,
  LOADOUTSLOT_SECONDARY_ATTACHMENT2 = 0xC,
  LOADOUTSLOT_SECONDARY_ATTACHMENT3 = 0xD,
  LOADOUTSLOT_SECONDARY_CAMO = 0xE,
  LOADOUTSLOT_SECONDARY_RETICLE = 0xF,
  LOADOUTSLOT_SECONDARY_RETICLE_COLOR = 0x10,
  LOADOUTSLOT_SECONDARY_LENS = 0x11,
  LOADOUTSLOT_SECONDARY_EMBLEM = 0x12,
  LOADOUTSLOT_SECONDARY_TAG = 0x13,
  LOADOUTSLOT_KNIFE_CAMO = 0x14,
  LOADOUTSLOT_FIRST_SPECIALTY = 0x15,
  LOADOUTSLOT_SPECIALTY1 = 0x15,
  LOADOUTSLOT_SPECIALTY2 = 0x16,
  LOADOUTSLOT_SPECIALTY3 = 0x17,
  LOADOUTSLOT_SPECIALTY4 = 0x18,
  LOADOUTSLOT_SPECIALTY5 = 0x19,
  LOADOUTSLOT_SPECIALTY6 = 0x1A,
  LOADOUTSLOT_LAST_SPECIALTY = 0x1A,
  LOADOUTSLOT_PRIMARY_GRENADE = 0x1B,
  LOADOUTSLOT_PRIMARY_GRENADE_COUNT = 0x1C,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS1 = 0x1D,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS2 = 0x1E,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS3 = 0x1F,
  LOADOUTSLOT_SPECIAL_GRENADE = 0x20,
  LOADOUTSLOT_SPECIAL_GRENADE_COUNT = 0x21,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS1 = 0x22,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS2 = 0x23,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS3 = 0x24,
  LOADOUTSLOT_FIRST_BONUSCARD = 0x25,
  LOADOUTSLOT_BONUSCARD1 = 0x25,
  LOADOUTSLOT_BONUSCARD2 = 0x26,
  LOADOUTSLOT_BONUSCARD3 = 0x27,
  LOADOUTSLOT_LAST_BONUSCARD = 0x27,
  LOADOUTSLOT_GLOBAL_ITEMS_START = 0x28,
  LOADOUTSLOT_KILLSTREAK1 = 0x28,
  LOADOUTSLOT_KILLSTREAK2 = 0x29,
  LOADOUTSLOT_KILLSTREAK3 = 0x2A,
  LOADOUTSLOT_KILLSTREAK4 = 0x2B,
  LOADOUTSLOT_GLOBAL_ITEMS_END = 0x2B,
  LOADOUTSLOT_COUNT = 0x2C,
};

enum statsMilestoneTypes_t
{
  MILESTONE_GLOBAL = 0x0,
  MILESTONE_FIRST = 0x0,
  MILESTONE_WEAPON = 0x1,
  MILESTONE_GAMEMODE = 0x2,
  MILESTONE_GROUP = 0x3,
  MILESTONE_ATTACHMENTS = 0x4,
  MILESTONE_COUNT = 0x5,
  MILESTONE_INVALID = 0x5,
};

enum dlcIndex_t
{
  CONTENT_DEV_MAP_INDEX = 0xFFFFFFFF,
  CONTENT_ORIGINAL_MAP_INDEX = 0x0,
  CONTENT_DLC0_INDEX = 0x1,
  CONTENT_DLCZM0_INDEX = 0x2,
  CONTENT_DLC1_INDEX = 0x3,
  CONTENT_DLC2_INDEX = 0x4,
  CONTENT_DLC3_INDEX = 0x5,
  CONTENT_DLC4_INDEX = 0x6,
  CONTENT_DLC5_INDEX = 0x7,
  CONTENT_DLC0DD_INDEX = 0x8,
  CONTENT_DLCSEASONPASS_INDEX = 0x9,
  CONTENT_DLC_INDEX_MAX = 0xA,
};

enum LocalClientNum_t
{
  INVALID_LOCAL_CLIENT = 0xFFFFFFFF,
  LOCAL_CLIENT_FIRST = 0x0,
  LOCAL_CLIENT_0 = 0x0,
  ONLY_LOCAL_CLIENT = 0x0,
  LOCAL_CLIENT_COUNT = 0x1,
};

enum LbZombieGameMode
{
  LB_GAMEMODE_ZGRIEF = 0x0,
  LB_ZOMBIE_GAMEMODE_START = 0x0,
  LB_GAMEMODE_ZCLASSIC = 0x1,
  LB_GAMEMODE_ZSTANDARD = 0x2,
  LB_GAMEMODE_ZCLEANSED = 0x3,
  LB_ZOMBIE_GAMEMODE_COUNT = 0x4,
};

enum ControllerIndex_t
{
  INVALID_CONTROLLER_PORT = 0xFFFFFFFF,
  CONTROLLER_INDEX_FIRST = 0x0,
  CONTROLLER_INDEX_0 = 0x0,
  CONTROLLER_INDEX_COUNT = 0x1,
};

enum scoreboardColumnType_t
{
  SB_TYPE_INVALID = 0x0,
  SB_TYPE_NONE = 0x1,
  SB_TYPE_SCORE = 0x2,
  SB_TYPE_KILLS = 0x3,
  SB_TYPE_DEATHS = 0x4,
  SB_TYPE_ASSISTS = 0x5,
  SB_TYPE_DEFENDS = 0x6,
  SB_TYPE_PLANTS = 0x7,
  SB_TYPE_DEFUSES = 0x8,
  SB_TYPE_RETURNS = 0x9,
  SB_TYPE_CAPTURES = 0xA,
  SB_TYPE_DESTRUCTIONS = 0xB,
  SB_TYPE_KDRATIO = 0xC,
  SB_TYPE_SURVIVED = 0xD,
  SB_TYPE_STABS = 0xE,
  SB_TYPE_TOMAHAWKS = 0xF,
  SB_TYPE_HUMILIATED = 0x10,
  SB_TYPE_X2SCORE = 0x11,
  SB_TYPE_HEADSHOTS = 0x12,
  SB_TYPE_DOWNS = 0x13,
  SB_TYPE_REVIVES = 0x14,
  SB_TYPE_AGRKILLS = 0x15,
  SB_TYPE_HACKS = 0x16,
  SB_TYPE_POINTS_TO_WIN = 0x17,
  SB_TYPE_KILLS_CONFIRMED = 0x18,
  SB_TYPE_KILLS_DENIED = 0x19,
  NUM_SB_TYPES = 0x1A,
};

enum UIContextIndex_t
{
  INVALID_UI_CONTEXT = 0xFFFFFFFF,
  UI_CONTEXT_FRONTEND = 0x0,
  UI_CONTEXT_INDEX_0 = 0x0,
  UI_CONTEXT_COUNT = 0x1,
};

enum ClientNum_t
{
  INVALID_CLIENT_INDEX = 0xFFFFFFFF,
  CLIENT_INDEX_FIRST = 0x0,
  CLIENT_INDEX_0 = 0x0,
  CLIENT_INDEX_1 = 0x1,
  CLIENT_INDEX_2 = 0x2,
  CLIENT_INDEX_3 = 0x3,
  CLIENT_INDEX_4 = 0x4,
  CLIENT_INDEX_5 = 0x5,
  CLIENT_INDEX_6 = 0x6,
  CLIENT_INDEX_7 = 0x7,
  CLIENT_INDEX_8 = 0x8,
  CLIENT_INDEX_9 = 0x9,
  CLIENT_INDEX_10 = 0xA,
  CLIENT_INDEX_11 = 0xB,
  CLIENT_INDEX_12 = 0xC,
  CLIENT_INDEX_13 = 0xD,
  CLIENT_INDEX_14 = 0xE,
  CLIENT_INDEX_15 = 0xF,
  CLIENT_INDEX_16 = 0x10,
  CLIENT_INDEX_17 = 0x11,
  CLIENT_INDEX_18 = 0x12,
  CLIENT_INDEX_19 = 0x13,
  CLIENT_INDEX_20 = 0x14,
  CLIENT_INDEX_21 = 0x15,
  CLIENT_INDEX_22 = 0x16,
  CLIENT_INDEX_23 = 0x17,
  CLIENT_INDEX_24 = 0x18,
  CLIENT_INDEX_25 = 0x19,
  CLIENT_INDEX_26 = 0x1A,
  CLIENT_INDEX_27 = 0x1B,
  CLIENT_INDEX_28 = 0x1C,
  CLIENT_INDEX_29 = 0x1D,
  CLIENT_INDEX_30 = 0x1E,
  CLIENT_INDEX_31 = 0x1F,
  CLIENT_INDEX_COUNT = 0x12,
};

enum $8A9278A436CDE1910DAA3AC5A46CE56C
{
  DDL_USERFLAGS_VALUE_CHANGED = 0x1,
  DDL_USERFLAGS_ONLINE_RANKED_STATS = 0x2,
  DDL_USERFLAGS_ONLINE_ZOMBIE_STATS = 0x8,
  DDL_USERFLAGS_ALL = 0xB,
  DDL_USERFLAGS_COUNT = 0x3,
};

enum $831D942E146EE6DAB25CC221C627FE8D
{
  TOTAL_STRINGLIST_SIZE = 0xC000,
  STRINGLIST_SIZE = 0xC000,
};

enum bonusCards_t
{
  BONUSCARD_INVALID = 0xFFFFFFFF,
  BONUSCARD_FIRST = 0x0,
  BONUSCARD_PRIMARY_GUNFIGHTER = 0x0,
  BONUSCARD_SECONDARY_GUNFIGHTER = 0x1,
  BONUSCARD_OVERKILL = 0x2,
  BONUSCARD_PERK_1_GREED = 0x3,
  BONUSCARD_PERK_2_GREED = 0x4,
  BONUSCARD_PERK_3_GREED = 0x5,
  BONUSCARD_DANGER_CLOSE = 0x6,
  BONUSCARD_TWO_TACTICALS = 0x7,
  BONUSCARD_COUNT = 0x8,
};

enum XAssetType
{
  ASSET_TYPE_XMODELPIECES = 0x0,
  ASSET_TYPE_PHYSPRESET = 0x1,
  ASSET_TYPE_PHYSCONSTRAINTS = 0x2,
  ASSET_TYPE_DESTRUCTIBLEDEF = 0x3,
  ASSET_TYPE_XANIMPARTS = 0x4,
  ASSET_TYPE_XMODEL = 0x5,
  ASSET_TYPE_MATERIAL = 0x6,
  ASSET_TYPE_TECHNIQUE_SET = 0x7,
  ASSET_TYPE_IMAGE = 0x8,
  ASSET_TYPE_SOUND = 0x9,
  ASSET_TYPE_SOUND_PATCH = 0xA,
  ASSET_TYPE_CLIPMAP = 0xB,
  ASSET_TYPE_CLIPMAP_PVS = 0xC,
  ASSET_TYPE_COMWORLD = 0xD,
  ASSET_TYPE_GAMEWORLD_SP = 0xE,
  ASSET_TYPE_GAMEWORLD_MP = 0xF,
  ASSET_TYPE_MAP_ENTS = 0x10,
  ASSET_TYPE_GFXWORLD = 0x11,
  ASSET_TYPE_LIGHT_DEF = 0x12,
  ASSET_TYPE_UI_MAP = 0x13,
  ASSET_TYPE_FONT = 0x14,
  ASSET_TYPE_FONTICON = 0x15,
  ASSET_TYPE_MENULIST = 0x16,
  ASSET_TYPE_MENU = 0x17,
  ASSET_TYPE_LOCALIZE_ENTRY = 0x18,
  ASSET_TYPE_WEAPON = 0x19,
  ASSET_TYPE_WEAPONDEF = 0x1A,
  ASSET_TYPE_WEAPON_VARIANT = 0x1B,
  ASSET_TYPE_WEAPON_FULL = 0x1C,
  ASSET_TYPE_ATTACHMENT = 0x1D,
  ASSET_TYPE_ATTACHMENT_UNIQUE = 0x1E,
  ASSET_TYPE_WEAPON_CAMO = 0x1F,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 0x20,
  ASSET_TYPE_FX = 0x21,
  ASSET_TYPE_IMPACT_FX = 0x22,
  ASSET_TYPE_AITYPE = 0x23,
  ASSET_TYPE_MPTYPE = 0x24,
  ASSET_TYPE_MPBODY = 0x25,
  ASSET_TYPE_MPHEAD = 0x26,
  ASSET_TYPE_CHARACTER = 0x27,
  ASSET_TYPE_XMODELALIAS = 0x28,
  ASSET_TYPE_RAWFILE = 0x29,
  ASSET_TYPE_STRINGTABLE = 0x2A,
  ASSET_TYPE_LEADERBOARD = 0x2B,
  ASSET_TYPE_XGLOBALS = 0x2C,
  ASSET_TYPE_DDL = 0x2D,
  ASSET_TYPE_GLASSES = 0x2E,
  ASSET_TYPE_EMBLEMSET = 0x2F,
  ASSET_TYPE_SCRIPTPARSETREE = 0x30,
  ASSET_TYPE_KEYVALUEPAIRS = 0x31,
  ASSET_TYPE_VEHICLEDEF = 0x32,
  ASSET_TYPE_MEMORYBLOCK = 0x33,
  ASSET_TYPE_ADDON_MAP_ENTS = 0x34,
  ASSET_TYPE_TRACER = 0x35,
  ASSET_TYPE_SKINNEDVERTS = 0x36,
  ASSET_TYPE_QDB = 0x37,
  ASSET_TYPE_SLUG = 0x38,
  ASSET_TYPE_FOOTSTEP_TABLE = 0x39,
  ASSET_TYPE_FOOTSTEPFX_TABLE = 0x3A,
  ASSET_TYPE_ZBARRIER = 0x3B,
  ASSET_TYPE_COUNT = 0x3C,
  ASSET_TYPE_STRING = 0x3C,
  ASSET_TYPE_ASSETLIST = 0x3D,
  ASSET_TYPE_REPORT = 0x3E,
  ASSET_TYPE_DEPEND = 0x3F,
  ASSET_TYPE_FULL_COUNT = 0x40,
};

enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

enum $34212D0393BD839421C1420563A14448
{
  THREAD_VALUE_PROF_STACK = 0x0,
  THREAD_VALUE_VA = 0x1,
  THREAD_VALUE_COM_ERROR = 0x2,
  THREAD_VALUE_TRACE = 0x3,
  THREAD_VALUE_CMD = 0x4,
  THREAD_VALUE_COUNT = 0x5,
};

enum OffhandPrimaryClass
{
  PLAYER_OFFHAND_PRIMARY_FRAG = 0x0,
  PLAYER_OFFHAND_PRIMARY_GEAR = 0x1,
  PLAYER_OFFHAND_PRIMARIES_TOTAL = 0x2,
};

enum $00AC6407559F9CFED34389084128FBC4
{
  THREAD_CONTEXT_MAIN = 0x0,
  THREAD_CONTEXT_BACKEND = 0x1,
  THREAD_CONTEXT_WORKER0 = 0x2,
  THREAD_CONTEXT_WORKER1 = 0x3,
  THREAD_CONTEXT_WORKER2 = 0x4,
  THREAD_CONTEXT_WORKER3 = 0x5,
  THREAD_CONTEXT_WORKER4 = 0x6,
  THREAD_CONTEXT_WORKER5 = 0x7,
  THREAD_CONTEXT_WORKER6 = 0x8,
  THREAD_CONTEXT_WORKER7 = 0x9,
  THREAD_CONTEXT_SERVER = 0xA,
  THREAD_CONTEXT_TITLE_SERVER = 0xB,
  THREAD_CONTEXT_DATABASE = 0xC,
  THREAD_CONTEXT_TRACE_COUNT = 0xD,
  THREAD_CONTEXT_TRACE_LAST = 0xC,
  THREAD_CONTEXT_STREAM = 0xD,
  THREAD_CONTEXT_SOUND_MIX = 0xE,
  THREAD_CONTEXT_SOUND_DECODE = 0xF,
  THREAD_CONTEXT_WEBM_DEC_DECODE = 0x10,
  THREAD_CONTEXT_COUNT = 0x11,
  THREAD_CONTEXT_INVALID = 0xFFFFFFFF,
};

enum weaponstate_t
{
  WEAPON_READY = 0x0,
  WEAPON_RAISING = 0x1,
  WEAPON_RAISING_ALTSWITCH = 0x2,
  WEAPON_DROPPING = 0x3,
  WEAPON_DROPPING_QUICK = 0x4,
  WEAPON_DROPPING_ALTSWITCH = 0x5,
  WEAPON_FIRING = 0x6,
  WEAPON_RECHAMBER_START = 0x7,
  WEAPON_RECHAMBERING = 0x8,
  WEAPON_RELOADING_RIGHT = 0x9,
  WEAPON_RELOADING_LEFT = 0xA,
  WEAPON_RELOADING = 0xB,
  WEAPON_RELOADING_INTERUPT = 0xC,
  WEAPON_RELOAD_START = 0xD,
  WEAPON_RELOAD_START_RECHAMBER = 0xE,
  WEAPON_RELOAD_START_INTERUPT = 0xF,
  WEAPON_RELOAD_END = 0x10,
  WEAPON_RELOAD_QUICK = 0x11,
  WEAPON_RELOAD_QUICK_EMPTY = 0x12,
  WEAPON_MELEE_INIT = 0x13,
  WEAPON_MELEE_FIRE = 0x14,
  WEAPON_MELEE_END = 0x15,
  WEAPON_OFFHAND_INIT = 0x16,
  WEAPON_OFFHAND_PREPARE = 0x17,
  WEAPON_OFFHAND_HOLD = 0x18,
  WEAPON_OFFHAND_DETONATE = 0x19,
  WEAPON_OFFHAND_START = 0x1A,
  WEAPON_OFFHAND = 0x1B,
  WEAPON_OFFHAND_HOLDUSE = 0x1C,
  WEAPON_OFFHAND_END = 0x1D,
  WEAPON_RIOTSHIELD_PREPARE = 0x1E,
  WEAPON_RIOTSHIELD_START = 0x1F,
  WEAPON_RIOTSHIELD_HOLD = 0x20,
  WEAPON_RIOTSHIELD = 0x21,
  WEAPON_RIOTSHIELD_END = 0x22,
  WEAPON_DETONATING = 0x23,
  WEAPON_SPRINT_RAISE = 0x24,
  WEAPON_SPRINT_LOOP = 0x25,
  WEAPON_SPRINT_DROP = 0x26,
  WEAPON_CONT_FIRE_IN = 0x27,
  WEAPON_CONT_FIRE_LOOP = 0x28,
  WEAPON_CONT_FIRE_OUT = 0x29,
  WEAPON_NIGHTVISION_WEAR = 0x2A,
  WEAPON_NIGHTVISION_REMOVE = 0x2B,
  WEAPON_DEPLOYING = 0x2C,
  WEAPON_DEPLOYED = 0x2D,
  WEAPON_BREAKING_DOWN = 0x2E,
  WEAPON_SWIM_IN = 0x2F,
  WEAPON_SWIM_OUT = 0x30,
  WEAPON_DTP_IN = 0x31,
  WEAPON_DTP_LOOP = 0x32,
  WEAPON_DTP_OUT = 0x33,
  WEAPON_SLIDE_IN = 0x34,
  WEAPON_FIRING_LEFT = 0x35,
  WEAPON_FIRING_BOTH = 0x36,
  WEAPON_JAMMED = 0x37,
  WEAPON_LOWREADY_RAISE = 0x38,
  WEAPON_LOWREADY_LOOP = 0x39,
  WEAPON_LOWREADY_DROP = 0x3A,
  WEAPON_CRAWL_IN = 0x3B,
  WEAPON_CRAWL_FORWARD = 0x3C,
  WEAPON_CRAWL_BACK = 0x3D,
  WEAPON_CRAWL_RIGHT = 0x3E,
  WEAPON_CRAWL_LEFT = 0x3F,
  WEAPON_CRAWL_OUT = 0x40,
  WEAPONSTATES_NUM = 0x41,
};

enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

enum $0625F1EA0FCD0D07867F21EE65C1E532
{
  DOBJ_MAX_PARTS = 0xA0,
  DOBJ_MAX_PART_BITS = 0x5,
  MAX_LODS = 0x4,
};

enum $C32DA671A31131557419CF33BE0831E5
{
  ASSERT_TYPE_ASSERT = 0x0,
  ASSERT_TYPE_SANITY = 0x1,
  ASSERT_TYPE_STACKTRACE = 0x2,
};

enum GfxLightType
{
  GFX_LIGHT_TYPE_NONE = 0x0,
  GFX_LIGHT_TYPE_DIR = 0x1,
  GFX_LIGHT_TYPE_SPOT = 0x2,
  GFX_LIGHT_TYPE_SPOT_SQUARE = 0x3,
  GFX_LIGHT_TYPE_SPOT_ROUND = 0x4,
  GFX_LIGHT_TYPE_OMNI = 0x5,
  GFX_LIGHT_TYPE_COUNT = 0x6,
  GFX_LIGHT_TYPE_DIR_SHADOWMAP = 0x6,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x7,
  GFX_LIGHT_TYPE_SPOT_SQUARE_SHADOWMAP = 0x8,
  GFX_LIGHT_TYPE_SPOT_ROUND_SHADOWMAP = 0x9,
  GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0xA,
  GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0xB,
};

enum weaponAttachModel_t
{
  WEAP_ATTACH_MODEL_OPTIC_1 = 0x0,
  WEAP_ATTACH_MODEL_OPTIC_2 = 0x1,
  WEAP_ATTACH_MODEL_IRONSIGHTS = 0x2,
  WEAP_ATTACH_MODEL_MUZZLE = 0x3,
  WEAP_ATTACH_MODEL_UNDERBARREL = 0x4,
  WEAP_ATTACH_MODEL_MISC = 0x5,
  WEAP_ATTACH_MODEL_CLIP = 0x6,
  WEAP_ATTACH_MODEL_OPTIC_1_ADS = 0x7,
  NUM_WEAP_ATTACHMODELS = 0x8,
};


enum AISpecies
{
  AI_SPECIES_DOG = 0x0,
  AI_SPECIES_BIGDOG = 0x1,
  AI_SPECIES_ZOMBIE = 0x2,
  AI_SPECIES_ZOMBIE_DOG = 0x3,
  MAX_AI_SPECIES = 0x4,
  AI_SPECIES_ALL = 0x4,
};

enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

enum VehicleAnimState
{
  VEHICLEANIMSTATE_IDLE = 0x0,
  VEHICLEANIMSTATE_ENTRY = 0x1,
  VEHICLEANIMSTATE_CHANGEPOS = 0x2,
  VEHICLEANIMSTATE_EXIT = 0x3,
  VEHICLEANIMSTATECOUNT = 0x4,
};

enum $DB857BC06DF6FFF7FB95B801DDEA9D30
{
  CONTROL_ANGLES_BACK_LOW = 0x0,
  CONTROL_ANGLES_BACK_MID = 0x1,
  CONTROL_ANGLES_BACK_UP = 0x2,
  CONTROL_ANGLES_NECK = 0x3,
  CONTROL_ANGLES_HEAD = 0x4,
  CONTROL_ANGLES_PELVIS = 0x5,
  CONTROL_ANGLES_COUNT = 0x6,
};

enum $89B31AAB54CFCD81210D3F082738AD26
{
  MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
  MARK_MODEL_TYPE_WORLD_MODEL = 0x40,
  MARK_MODEL_TYPE_ENT_BRUSH = 0x80,
  MARK_MODEL_TYPE_ENT_MODEL = 0xC0,
  MARK_MODEL_TYPE_MASK = 0xC0,
  MARK_MODEL_SURF_MASK = 0x3F,
  MARK_MODEL_MASK_ENTMDL_INDEX = 0x1F,
  MARK_MODEL_MASK_ENTMDL_VIEWMDL = 0x20,
};

enum $96A84A1663598AB465DA088262FD2A3B
{
  SERVER_VARIABLELIST_PARENT_SIZE = 0x6000,
  SERVER_VARIABLELIST_CHILD_SIZE = 0x10000,
  SERVER_VARIABLELIST_SIZE = 0x16000,
  SERVER_VARIABLELIST_PARENT_DEV_SIZE = 0x5380,
  SERVER_VARIABLELIST_CHILD_DEV_SIZE = 0xF380,
};

enum $F2216F731389933764F2BD4D62E1FF62
{
  CLIENT_VARIABLELIST_PARENT_SIZE = 0x4000,
  CLIENT_VARIABLELIST_CHILD_SIZE = 0x10000,
  CLIENT_VARIABLELIST_PARENT_DEV_SIZE = 0x3380,
  CLIENT_VARIABLELIST_CHILD_DEV_SIZE = 0xF380,
  CLIENT_VARIABLELIST_SIZE = 0x14000,
};

enum $E2E2C36E575AB5BC4ACD37A49CE227A1
{
  VAR_NAME_BITS = 0x8,
  VAR_NAME_LOW_MASK = 0xFFFFFF,
  VAR_NAME_HIGH_MASK = 0xFFFFFF00,
  VAR_MIN_INT = 0xFF800000,
  VAR_MAX_INT = 0x7FFFFF,
  ENTITY_NUM_BITS = 0xE,
};

enum $F1A8C94D0E509EAAC339967BB69B48A5
{
  BOMB_TIMER_PRIMARY = 0x0,
  BOMB_TIMER_SECONDARY = 0x1,
  BOMB_TIMER_COUNT = 0x2,
};

enum entity_event_t
{
  EV_NONE = 0x0,
  EV_FOLIAGE_SOUND = 0x1,
  EV_STOP_WEAPON_SOUND = 0x2,
  EV_STOP_SOUND_ALIAS = 0x3,
  EV_SOUND_ALIAS = 0x4,
  EV_SOUND_ALIAS_NOTIFY = 0x5,
  EV_SOUND_BATTLECHAT_ALIAS = 0x6,
  EV_STOPSOUNDS = 0x7,
  EV_STANCE_FORCE_STAND = 0x8,
  EV_STANCE_FORCE_CROUCH = 0x9,
  EV_STANCE_FORCE_PRONE = 0xA,
  EV_ITEM_PICKUP = 0xB,
  EV_AMMO_PICKUP = 0xC,
  EV_NOAMMO = 0xD,
  EV_NOAMMO_LEFT = 0xE,
  EV_EMPTYCLIP = 0xF,
  EV_EMPTY_OFFHAND = 0x10,
  EV_RESET_ADS = 0x11,
  EV_RELOAD = 0x12,
  EV_RELOAD_FROM_EMPTY = 0x13,
  EV_RELOAD_START = 0x14,
  EV_RELOAD_END = 0x15,
  EV_RELOAD_START_NOTIFY = 0x16,
  EV_RELOAD_ADDAMMO = 0x17,
  EV_RAISE_WEAPON = 0x18,
  EV_FIRST_RAISE_WEAPON = 0x19,
  EV_RAISE_PICKUP_WEAPON = 0x1A,
  EV_PUTAWAY_WEAPON = 0x1B,
  EV_WEAPON_ALT = 0x1C,
  EV_WEAPON_SWITCH_STARTED = 0x1D,
  EV_PULLBACK_WEAPON = 0x1E,
  EV_FIRE_WEAPON_SCRIPTED = 0x1F,
  EV_FIRE_WEAPON = 0x20,
  EV_FIRE_WEAPON_LASTSHOT = 0x21,
  EV_FIRE_WEAPON_LEFT = 0x22,
  EV_FIRE_WEAPON_LASTSHOT_LEFT = 0x23,
  EV_FIRE_RICOCHET = 0x24,
  EV_RECHAMBER_WEAPON = 0x25,
  EV_EJECT_BRASS = 0x26,
  EV_MELEE_SWIPE = 0x27,
  EV_FIRE_MELEE = 0x28,
  EV_WEAPON_DEPLOYING = 0x29,
  EV_WEAPON_FINISH_DEPLOYING = 0x2A,
  EV_WEAPON_BREAKING_DOWN = 0x2B,
  EV_WEAPON_FINISH_BREAKING_DOWN = 0x2C,
  EV_INC_CHARGESHOT_LEVEL = 0x2D,
  EV_CHARGESHOT_DISCHARGEWEAPON = 0x2E,
  EV_PREP_OFFHAND = 0x2F,
  EV_USE_OFFHAND = 0x30,
  EV_SWITCH_OFFHAND = 0x31,
  EV_PREP_RIOTSHIELD = 0x32,
  EV_DEPLOY_RIOTSHIELD = 0x33,
  EV_LOWER_RIOTSHIELD = 0x34,
  EV_MELEE_HIT = 0x35,
  EV_MELEE_MISS = 0x36,
  EV_MELEE_BLOOD = 0x37,
  EV_FIRE_WEAPON_MOUNTED_TURRET = 0x38,
  EV_FIRE_WEAPON_MOUNTED_TURRETA = 0x39,
  EV_FIRE_BARREL_1 = 0x3A,
  EV_FIRE_BARREL_2 = 0x3B,
  EV_FIRE_BARREL_3 = 0x3C,
  EV_FIRE_BARREL_4 = 0x3D,
  EV_BULLET_HIT = 0x3E,
  EV_BULLET_HIT_SHIELD = 0x3F,
  EV_BULLET_HIT_CLIENT_SHIELD = 0x40,
  EV_EXPLOSIVE_IMPACT_ON_SHIELD = 0x41,
  EV_EXPLOSIVE_SPLASH_ON_SHIELD = 0x42,
  EV_BULLET_HIT_CLIENT_SMALL = 0x43,
  EV_BULLET_HIT_CLIENT_LARGE = 0x44,
  EV_DESTRUCTIBLE_BULLET_HIT = 0x45,
  EV_DESTRUCTIBLE_EXPLOSION_HIT = 0x46,
  EV_GRENADE_BOUNCE = 0x47,
  EV_GRENADE_EXPLODE = 0x48,
  EV_ROCKET_EXPLODE = 0x49,
  EV_ROCKET_EXPLODE_NOMARKS = 0x4A,
  EV_FLASHBANG_EXPLODE = 0x4B,
  EV_CUSTOM_EXPLODE = 0x4C,
  EV_CUSTOM_EXPLODE_NOMARKS = 0x4D,
  EV_SENSOR_GRENADE_EXPLODE = 0x4E,
  EV_CHANGE_TO_DUD = 0x4F,
  EV_DUD_EXPLODE = 0x50,
  EV_DUD_IMPACT = 0x51,
  EV_FIRE_EXPLODE = 0x52,
  EV_TIMED_FX = 0x53,
  EV_MOLOTOV_FLOAT = 0x54,
  EV_FAKE_FIRE = 0x55,
  EV_PLAY_FX = 0x56,
  EV_PLAY_FX_ON_TAG = 0x57,
  EV_PHYS_EXPLOSION_SPHERE = 0x58,
  EV_PHYS_EXPLOSION_CYLINDER = 0x59,
  EV_PHYS_EXPLOSION_JOLT = 0x5A,
  EV_PHYS_JET_THRUST = 0x5B,
  EV_PHYS_LAUNCH = 0x5C,
  EV_CREATE_DYNENT = 0x5D,
  EV_CREATE_ROPE = 0x5E,
  EV_BLOOD_IMPACTS = 0x5F,
  EV_DETACH_ENTITY = 0x60,
  EV_DELETE_ROPE = 0x61,
  EV_ROPE_COLLIDE = 0x62,
  EV_ROPE_SETFLAG = 0x63,
  EV_ROPE_SETPARAM = 0x64,
  EV_ROPE_ADDANCHOR = 0x65,
  EV_ROPE_REMOVEANCHOR = 0x66,
  EV_ROPE_MOVEANCHOR = 0x67,
  EV_SETWETNESS = 0x68,
  EV_EARTHQUAKE = 0x69,
  EV_GRENADE_DROP = 0x6A,
  EV_GRENADE_SUICIDE = 0x6B,
  EV_DETONATE = 0x6C,
  EV_NIGHTVISION_WEAR = 0x6D,
  EV_NIGHTVISION_REMOVE = 0x6E,
  EV_MISSILE_REMOTE_BOOST = 0x6F,
  EV_PLAY_RUMBLE_ON_ENT = 0x70,
  EV_PLAY_RUMBLE_ON_POS = 0x71,
  EV_PLAY_RUMBLELOOP_ON_ENT = 0x72,
  EV_PLAY_RUMBLELOOP_ON_POS = 0x73,
  EV_STOP_RUMBLE = 0x74,
  EV_STOP_ALL_RUMBLES = 0x75,
  EV_OBITUARY = 0x76,
  EV_REVIVE_OBITUARY = 0x77,
  EV_DIRECTIONAL_HIT_INDICATOR = 0x78,
  EV_ANIMATE_UI = 0x79,
  EV_KILLSTREAK_DAMAGE = 0x7A,
  EV_NO_FRAG_GRENADE_HINT = 0x7B,
  EV_NO_SPECIAL_GRENADE_HINT = 0x7C,
  EV_TARGET_TOO_CLOSE_HINT = 0x7D,
  EV_TARGET_NOT_ENOUGH_CLEARANCE = 0x7E,
  EV_LOCKON_REQUIRED_HINT = 0x7F,
  EV_FOOTSTEP_SPRINT = 0x80,
  EV_FOOTSTEP_RUN = 0x81,
  EV_FOOTSTEP_WALK = 0x82,
  EV_FOOTSTEP_CROUCHRUN = 0x83,
  EV_FOOTSTEP_CROUCHWALK = 0x84,
  EV_FOOTSTEP_PRONE = 0x85,
  EV_LADDER_HAND_GRAB = 0x86,
  EV_MANTLE = 0x87,
  EV_JUMP = 0x88,
  EV_LANDING_FIRST = 0x89,
  EV_LANDING_LAST = 0xA8,
  EV_LANDING_PAIN_FIRST = 0xA9,
  EV_LANDING_PAIN_LAST = 0xC8,
  EV_FIRE_VEHICLE_TURRET = 0xC9,
  EV_FIRE_GUNNER_1 = 0xCA,
  EV_FIRE_GUNNER_2 = 0xCB,
  EV_FIRE_GUNNER_3 = 0xCC,
  EV_FIRE_GUNNER_4 = 0xCD,
  EV_FIRE_GUNNER_1A = 0xCE,
  EV_FIRE_GUNNER_2A = 0xCF,
  EV_FIRE_GUNNER_3A = 0xD0,
  EV_FIRE_GUNNER_4A = 0xD1,
  EV_START_CAMERA_TWEEN = 0xD2,
  EV_DESTRUCTIBLE_DISABLE_PIECES = 0xD3,
  EV_FOOTPRINT = 0xD4,
  EV_CANNOTPLANT = 0xD5,
  EV_CANT_EQUIP_PRONE = 0xD6,
  EV_DTP_LAUNCH = 0xD7,
  EV_DTP_LAND = 0xD8,
  EV_SLIDE_START = 0xD9,
  EV_SLIDE_STOP = 0xDA,
  EV_SCOPE_ZOOM = 0xDB,
  EV_JAM_WEAPON = 0xDC,
  EV_STACKFIRE = 0xDD,
  EV_BOLT_IMPACT = 0xDE,
  EV_BOLT_IMPALE = 0xDF,
  EV_PLAY_WEAPON_DEATH_EFFECTS = 0xE0,
  EV_PLAY_WEAPON_DAMAGE_EFFECTS = 0xE1,
  EV_FACE_EVENT = 0xE2,
  EV_SETLOCALWIND = 0xE3,
  EV_FLOAT_LONGER = 0xE4,
  EV_FORCE_BUOYANCY = 0xE5,
  EV_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0xE6,
  EV_SCALE_BUOYANCY = 0xE7,
  EV_ALLOWPITCH = 0xE8,
  EV_GIB = 0xE9,
  EV_STANCE_INVALID = 0xEA,
  EV_ENTER_VEHICLE = 0xEB,
  EV_EXIT_VEHICLE = 0xEC,
  EV_IMMEDIATE_RAGDOLL = 0xED,
  EV_ENT_SPAWNED_SENTINEL = 0xEE,
  EV_PROJECTILE_PASS_THROUGH = 0xEF,
  EV_MAX_EVENTS = 0xF0,
};

enum $7750782190E2FC1D8823C628DB2DF5C2
{
  FS_LOOK_IN_MAIN = 0x1,
  FS_LOOK_IN_DEV = 0x2,
  FS_LOOK_IN_TEMP = 0x4,
  FS_LOOK_IN_RAW = 0x8,
  FS_LOOK_IN_RAWSHARED = 0x10,
  FS_LOOK_IN_DEVRAW = 0x20,
  FS_LOOK_IN_ALL = 0x3F,
};

enum expDataType
{
  VAL_INT = 0x0,
  VAL_FLOAT = 0x1,
  VAL_STRING = 0x2,
  VAL_ADDRESS = 0x3,
  VAL_DVAR = 0x4,
};

enum ConstraintType
{
  CONSTRAINT_NONE = 0x0,
  CONSTRAINT_POINT = 0x1,
  CONSTRAINT_DISTANCE = 0x2,
  CONSTRAINT_HINGE = 0x3,
  CONSTRAINT_JOINT = 0x4,
  CONSTRAINT_ACTUATOR = 0x5,
  CONSTRAINT_FAKE_SHAKE = 0x6,
  CONSTRAINT_LAUNCH = 0x7,
  CONSTRAINT_ROPE = 0x8,
  CONSTRAINT_LIGHT = 0x9,
  NUM_CONSTRAINT_TYPES = 0xA,
};

enum AttachPointType
{
  ATTACH_POINT_WORLD = 0x0,
  ATTACH_POINT_DYNENT = 0x1,
  ATTACH_POINT_ENT = 0x2,
  ATTACH_POINT_BONE = 0x3,
};

enum HU_ALLOCATION_SCHEME
{
  HU_SCHEME_DEFAULT = 0x0,
  HU_SCHEME_DEBUG = 0x1,
  HU_SCHEME_FIRSTFIT = 0x2,
  HU_SCHEME_FIXED = 0x3,
  HU_SCHEME_NULL = 0x4,
  HU_SCHEME_COUNT = 0x5,
};

enum connectionType_e
{
  CONNECTION_TYPE_UNKNOWN = 0x0,
  CONNECTION_TYPE_WIRED = 0x1,
  CONNECTION_TYPE_WIRELESS = 0x2,
};

enum guidedMissileType_t
{
  MISSILE_GUIDANCE_NONE = 0x0,
  MISSILE_GUIDANCE_SIDEWINDER = 0x1,
  MISSILE_GUIDANCE_HELLFIRE = 0x2,
  MISSILE_GUIDANCE_JAVELIN = 0x3,
  MISSILE_GUIDANCE_BALLISTIC = 0x4,
  MISSILE_GUIDANCE_WIREGUIDED = 0x5,
  MISSILE_GUIDANCE_TVGUIDED = 0x6,
  MISSILE_GUIDANCE_DRONE = 0x7,
  MISSILE_GUIDANCE_HEATSEEKING = 0x8,
  MISSILE_GUIDANCE_COUNT = 0x9,
};

enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_GEAR = 0x4,
  OFFHAND_CLASS_SUPPLYDROP_MARKER = 0x5,
  OFFHAND_CLASS_COUNT = 0x6,
};

enum weapProjExposion_t
{
  WEAPPROJEXP_GRENADE = 0x0,
  WEAPPROJEXP_ROCKET = 0x1,
  WEAPPROJEXP_FLASHBANG = 0x2,
  WEAPPROJEXP_NONE = 0x3,
  WEAPPROJEXP_DUD = 0x4,
  WEAPPROJEXP_SMOKE = 0x5,
  WEAPPROJEXP_HEAVY = 0x6,
  WEAPPROJEXP_FIRE = 0x7,
  WEAPPROJEXP_NAPALMBLOB = 0x8,
  WEAPPROJEXP_BOLT = 0x9,
  WEAPPROJEXP_SHRAPNELSPAN = 0xA,
  WEAPPROJEXP_NUM = 0xB,
};

enum activeReticleType_t
{
  VEH_ACTIVE_RETICLE_NONE = 0x0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
  VEH_ACTIVE_RETICLE_MISSILE_LOCK = 0x3,
  VEH_ACTIVE_RETICLE_COUNT = 0x4,
};

enum ammoCounterClipType_t
{
  AMMO_COUNTER_CLIP_NONE = 0x0,
  AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
  AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
  AMMO_COUNTER_CLIP_ROCKET = 0x4,
  AMMO_COUNTER_CLIP_BELTFED = 0x5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
  AMMO_COUNTER_CLIP_COUNT = 0x7,
};

enum ImpactType
{
  IMPACT_TYPE_NONE = 0x0,
  IMPACT_TYPE_BULLET_SMALL = 0x1,
  IMPACT_TYPE_BULLET_LARGE = 0x2,
  IMPACT_TYPE_BULLET_AP = 0x3,
  IMPACT_TYPE_BULLET_XTREME = 0x4,
  IMPACT_TYPE_SHOTGUN = 0x5,
  IMPACT_TYPE_GRENADE_BOUNCE = 0x6,
  IMPACT_TYPE_GRENADE_EXPLODE = 0x7,
  IMPACT_TYPE_RIFLE_GRENADE = 0x8,
  IMPACT_TYPE_ROCKET_EXPLODE = 0x9,
  IMPACT_TYPE_ROCKET_EXPLODE_XTREME = 0xA,
  IMPACT_TYPE_PROJECTILE_DUD = 0xB,
  IMPACT_TYPE_MORTAR_SHELL = 0xC,
  IMPACT_TYPE_TANK_SHELL = 0xD,
  IMPACT_TYPE_BOLT = 0xE,
  IMPACT_TYPE_BLADE = 0xF,
  IMPACT_TYPE_COUNT = 0x10,
};

enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_NUMSTATES = 0x3,
};

enum weapInventoryType_t
{
  WEAPINVENTORY_PRIMARY = 0x0,
  WEAPINVENTORY_OFFHAND = 0x1,
  WEAPINVENTORY_ITEM = 0x2,
  WEAPINVENTORY_ALTMODE = 0x3,
  WEAPINVENTORY_MELEE = 0x4,
  WEAPINVENTORY_DWLEFTHAND = 0x5,
  WEAPINVENTORYCOUNT = 0x6,
};

enum barrelType_t
{
  BARREL_TYPE_SINGLE = 0x0,
  BARREL_TYPE_DUAL = 0x1,
  BARREL_TYPE_DUAL_ALTERNATE = 0x2,
  BARREL_TYPE_QUAD = 0x3,
  BARREL_TYPE_QUAD_ALTERNATE = 0x4,
  BARREL_TYPE_QUAD_DOUBLE_ALTERNATE = 0x5,
  BARREL_TYPE_COUNT = 0x6,
};

enum ParamDataDesc
{
  P_WORKERCMD = 0x0,
  P_FENCE = 0x1,
  P_LAST = 0x2,
};

enum tracerType_t
{
  TRACERTYPE_LASER = 0x0,
  TRACERTYPE_SMOKE = 0x1,
  TRACERTYPE_NUM = 0x2,
};

enum clc_ops_e
{
  clc_move = 0x0,
  clc_moveNoDelta = 0x1,
  clc_clientCommand = 0x2,
  clc_EOF = 0x3,
};

enum MergeDedicatedState
{
  MERGE_DEDICATED_COMPLETE = 0x0,
  MERGE_DEDICATED_NOT_REQUESTED = 0x1,
  MERGE_DEDICATED_REQUESTED = 0x2,
  MERGE_DEDICATED_IN_PROGRESS = 0x3,
};

enum weapType_t
{
  WEAPTYPE_BULLET = 0x0,
  WEAPTYPE_GRENADE = 0x1,
  WEAPTYPE_PROJECTILE = 0x2,
  WEAPTYPE_BINOCULARS = 0x3,
  WEAPTYPE_GAS = 0x4,
  WEAPTYPE_BOMB = 0x5,
  WEAPTYPE_MINE = 0x6,
  WEAPTYPE_MELEE = 0x7,
  WEAPTYPE_RIOTSHIELD = 0x8,
  WEAPTYPE_NUM = 0x9,
};

enum tlThreadPriority
{
  TL_THREAD_PRIORITY_IDLE = 0xFFFFFFFE,
  TL_THREAD_PRIORITY_LOWEST = 0xFFFFFFFE,
  TL_THREAD_PRIORITY_BELOW_NORMAL = 0xFFFFFFFF,
  TL_THREAD_PRIORITY_NORMAL = 0x0,
  TL_THREAD_PRIORITY_ABOVE_NORMAL = 0x1,
  TL_THREAD_PRIORITY_HIGHEST = 0x2,
  TL_THREAD_PRIORITY_TIME_CRITICAL = 0xF,
};

enum Bind_t
{
  BIND_VOID = 0x0,
  BIND_ATTACK1 = 0x1,
  BIND_ATTACK0 = 0x2,
  BIND_MELEE1 = 0x3,
  BIND_MELEE0 = 0x4,
  BIND_FRAG1 = 0x5,
  BIND_FRAG0 = 0x6,
  BIND_SMOKE1 = 0x7,
  BIND_SMOKE0 = 0x8,
  BIND_BREATH_SPRINT1 = 0x9,
  BIND_BREATH_SPRINT0 = 0xA,
  BIND_USERELOAD1 = 0xB,
  BIND_USERELOAD0 = 0xC,
  BIND_SPEED_THROW1 = 0xD,
  BIND_SPEED_THROW0 = 0xE,
  BIND_TOGGLEADS_THROW1 = 0xF,
  BIND_TOGGLEADS_THROW0 = 0x10,
  BIND_ACTIONSLOT11 = 0x11,
  BIND_ACTIONSLOT10 = 0x12,
  BIND_ACTIONSLOT21 = 0x13,
  BIND_ACTIONSLOT20 = 0x14,
  BIND_ACTIONSLOT31 = 0x15,
  BIND_ACTIONSLOT30 = 0x16,
  BIND_ACTIONSLOT41 = 0x17,
  BIND_ACTIONSLOT40 = 0x18,
  BIND_ACTIONSLOT51 = 0x19,
  BIND_ACTIONSLOT50 = 0x1A,
  BIND_ACTIONSLOT61 = 0x1B,
  BIND_ACTIONSLOT60 = 0x1C,
  BIND_ACTIONSLOT71 = 0x1D,
  BIND_ACTIONSLOT70 = 0x1E,
  BIND_STANCE1 = 0x1F,
  BIND_STANCE0 = 0x20,
  BIND_GOSTAND1 = 0x21,
  BIND_GOSTAND0 = 0x22,
  BIND_SPECNEXT1 = 0x23,
  BIND_SPECNEXT0 = 0x24,
  BIND_SPECPREV1 = 0x25,
  BIND_SPECPREV0 = 0x26,
  BIND_TOGGLESPEC1 = 0x27,
  BIND_TOGGLESPEC0 = 0x28,
  BIND_MELEE_ZOOM1 = 0x29,
  BIND_MELEE_ZOOM0 = 0x2A,
  BIND_CHANGEZOOM1 = 0x2B,
  BIND_CHANGEZOOM0 = 0x2C,
  BIND_WEAPNEXTINVENTORY1 = 0x2D,
  BIND_WEAPNEXTINVENTORY0 = 0x2E,
  BIND_GAS1 = 0x2F,
  BIND_GAS0 = 0x30,
  BIND_REVERSE1 = 0x31,
  BIND_REVERSE0 = 0x32,
  BIND_HANDBRAKE1 = 0x33,
  BIND_HANDBRAKE0 = 0x34,
  BIND_VEHICLEATTACK1 = 0x35,
  BIND_VEHICLEATTACK0 = 0x36,
  BIND_VEHICLESECONDATTACK1 = 0x37,
  BIND_VEHICLESECONDATTACK0 = 0x38,
  BIND_VEHICLEBOOST1 = 0x39,
  BIND_VEHICLEBOOST0 = 0x3A,
  BIND_VEHICLEMOVEUP1 = 0x3B,
  BIND_VEHICLEMOVEUP0 = 0x3C,
  BIND_VEHICLEMOVEDOWN1 = 0x3D,
  BIND_VEHICLEMOVEDOWN0 = 0x3E,
  BIND_VEHICLESWTICHSEAT1 = 0x3F,
  BIND_VEHICLESWTICHSEAT0 = 0x40,
  BIND_FORWARD1 = 0x41,
  BIND_FORWARD0 = 0x42,
  BIND_BACK1 = 0x43,
  BIND_BACK0 = 0x44,
  BIND_MOVELEFT1 = 0x45,
  BIND_MOVELEFT0 = 0x46,
  BIND_MOVERIGHT1 = 0x47,
  BIND_MOVERIGHT0 = 0x48,
  BIND_MOVEDOWN1 = 0x49,
  BIND_MOVEDOWN0 = 0x4A,
  BIND_LEFT1 = 0x4B,
  BIND_LEFT0 = 0x4C,
  BIND_RIGHT1 = 0x4D,
  BIND_RIGHT0 = 0x4E,
  BIND_LOOKUP1 = 0x4F,
  BIND_LOOKUP0 = 0x50,
  BIND_LOOKDOWN1 = 0x51,
  BIND_LOOKDOWN0 = 0x52,
  BIND_STRAFE1 = 0x53,
  BIND_STRAFE0 = 0x54,
  BIND_HOLDBREATH1 = 0x55,
  BIND_HOLDBREATH0 = 0x56,
  BIND_ACTIVATE1 = 0x57,
  BIND_ACTIVATE0 = 0x58,
  BIND_RELOAD1 = 0x59,
  BIND_RELOAD0 = 0x5A,
  BIND_PRONE1 = 0x5B,
  BIND_PRONE0 = 0x5C,
  BIND_MLOOK1 = 0x5D,
  BIND_MLOOK0 = 0x5E,
  BIND_SPRINT1 = 0x5F,
  BIND_SPRINT0 = 0x60,
  BIND_SCORES1 = 0x61,
  BIND_SCORES0 = 0x62,
  BIND_LEANLEFT1 = 0x63,
  BIND_LEANLEFT0 = 0x64,
  BIND_LEANRIGHT1 = 0x65,
  BIND_LEANRIGHT0 = 0x66,
  BIND_TALK1 = 0x67,
  BIND_TALK0 = 0x68,
  BIND_FIRST_NON_UP_DOWN = 0x69,
  BIND_TOGGLEMENU = 0x69,
  BIND_WEAPNEXT = 0x6A,
  BIND_PAUSE = 0x6B,
  BIND_CHATMODEPUBLIC = 0x6C,
  BIND_CHATMODETEAM = 0x6D,
  BIND_INVENTORY = 0x6E,
  BIND_WEAPPREV = 0x6F,
  BIND_CENTERVIEW = 0x70,
  BIND_TOGGLECROUCH = 0x71,
  BIND_TOGGLEPRONE = 0x72,
  BIND_GOPRONE = 0x73,
  BIND_GOCROUCH = 0x74,
  BIND_TOGGLEADS = 0x75,
  BIND_LEAVEADS = 0x76,
  BIND_VOTEYES = 0x77,
  BIND_VOTENO = 0x78,
  BIND_SCREENSHOTJPEG = 0x79,
  BIND_TOGGLESCORES = 0x7A,
  BIND_SKIP = 0x7B,
  BIND_CHOOSECLASS = 0x7C,
  BIND_ACCEPTLASTGAMEINVITE = 0x7D,
  BIND_COUNT = 0x7E,
};

enum CriticalSection
{
  CRITSECT_ALLOC_MARK = 0x0,
  CRITSECT_FX_VIS = 0x1,
  CRITSECT_OCCLUSION_QUERY = 0x2,
  CRITSECT_PHYSICS = 0x3,
  CRITSECT_PHYSICS_UPDATE = 0x4,
  CRITSECT_PHYSICS_DESTRUCTIBLE_HIT = 0x5,
  CRITSECT_FX_UNIQUE_HANDLE = 0x6,
  CRITSECT_SOUND_COMMAND_ALLOC = 0x7,
  CRITSECT_SOUND_COMMAND_PUSH = 0x8,
  CRITSECT_SOUND_NOTIFY_ALLOC = 0x9,
  CRITSECT_SOUND_NOTIFY_PUSH = 0xA,
  CRITSECT_SOUND_BANK = 0xB,
  CRITSECT_SOUND_LOOKUP_CACHE = 0xC,
  CRITSECT_CAREER_STATS = 0xD,
  CRITSECT_CONSOLE = 0xE,
  CRITSECT_DEBUG_SOCKET = 0xF,
  CRITSECT_COM_ERROR = 0x10,
  CRITSECT_STATMON = 0x11,
  CRITSECT_MEM_ALLOC0 = 0x12,
  CRITSECT_MEM_ALLOC1 = 0x13,
  CRITSECT_DEBUG_LINE = 0x14,
  CRITSECT_DEBUG_BRUSHES_AND_PATCHES = 0x15,
  CRITSECT_CLIENT_MESSAGE = 0x16,
  CRITSECT_CLIENT_CMD = 0x17,
  CRITSECT_DOBJ_ALLOC = 0x18,
  CRITSECT_XANIM_ALLOC = 0x19,
  CRITSECT_KEY_BINDINGS = 0x1A,
  CRITSECT_SERVER_MESSAGE = 0x1B,
  CRITSECT_SERVER_PLAYERINFO = 0x1C,
  CRITSECT_SCRIPT_STRING = 0x1D,
  CRITSECT_MEMORY_TREE = 0x1E,
  CRITSECT_ASSERT = 0x1F,
  CRITSECT_RD_BUFFER = 0x20,
  CRITSECT_SYS_EVENT_QUEUE = 0x21,
  CRITSECT_FATAL_ERROR = 0x22,
  CRITSECT_DXDEVICE = 0x23,
  CRITSECT_DXDEVICE_GLOB = 0x24,
  CRITSECT_DXCONTEXT = 0x25,
  CRITSECT_SCRIPT_DEBUGGER_ALLOC = 0x26,
  CRITSECT_SCRIPT_DEBUGGER = 0x27,
  CRITSECT_REMOTE = 0x28,
  CRITSECT_MISSING_ASSET = 0x29,
  CRITSECT_LIVE = 0x2A,
  CRITSECT_AUDIO_PHYSICS = 0x2B,
  CRITSECT_LUI = 0x2C,
  CRITSECT_VCS = 0x2D,
  CRITSECT_CINEMATIC = 0x2E,
  CRITSECT_CINEMATIC_TARGET_CHANGE = 0x2F,
  CRITSECT_CINEMATIC_UPDATEFRAME = 0x30,
  CRITSECT_RB_TRANSFER = 0x31,
  CRITSECT_NETTHREAD_OVERRIDE = 0x32,
  CRITSECT_DEMONWARE = 0x33,
  CRITSECT_IK = 0x34,
  CRITSECT_TL_MEMALLOC = 0x35,
  CRITSECT_VA_ALLOC = 0x36,
  CRITSECT_MEMTRACK = 0x37,
  CRITSECT_CBUF = 0x38,
  CRITSECT_CURVEALLOC = 0x39,
  CRITSECT_NETQUEUE = 0x3A,
  CRITSECT_ZLIB = 0x3B,
  CRITSECT_BLACKBOX = 0x3C,
  CRITSECT_GDT_COMMAND = 0x3D,
  CRITSECT_STRINGED_COMMAND = 0x3E,
  CRITSECT_RADIANT_SERVER_COMMAND = 0x3F,
  CRITSECT_RADIANT_CLIENT_COMMAND = 0x40,
  CRITSECT_RECORDER = 0x41,
  CRITSECT_SERVERDEMO = 0x42,
  CRITSECT_IO_SCHEDULER = 0x43,
  CRITSECT_FILE_ID_ARRAY = 0x44,
  CRITSECT_MEMFIRSTFIT = 0x45,
  CRITSECT_FXBEAM = 0x46,
  CRITSECT_GLASS_ACTIONS = 0x47,
  CRITSECT_DBHASH = 0x48,
  CRITSECT_CLUMP = 0x49,
  CRITSECT_SNAPSHOT_PROFILE = 0x4A,
  CRITSEC_WEBM_STREAM_ACCESS = 0x4B,
  CRITSEC_SV_LEADERBOARDS = 0x4C,
  CRITSECT_COUNT = 0x4D,
};

enum locSel_t
{
  LOC_SEL_NONE = 0x0,
  LOC_SEL_ARTILLERY = 0x1,
  LOC_SEL_AIRSTRIKE = 0x2,
  LOC_SEL_MORTAR = 0x3,
  LOC_SEL_NAPALM = 0x4,
  LOC_SEL_COMLINK = 0x5,
};

enum tlThreadFlags
{
  TL_THREAD_JOINABLE = 0x0,
  TL_THREAD_CREATE_SUSPENDED = 0x4,
  TL_THREAD_DEFAULT_FLAGS = 0x0,
};

enum UILocalVarType
{
  UILOCALVAR_INT = 0x0,
  UILOCALVAR_FLOAT = 0x1,
  UILOCALVAR_STRING = 0x2,
};

enum WeapOverlayInteface_t
{
  WEAPOVERLAYINTERFACE_NONE = 0x0,
  WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
  WEAPOVERLAYINTERFACECOUNT = 0x3,
};

enum VehicleMantlePoints
{
  MANTLE_ANGLE_FRONT = 0x0,
  MANTLE_ANGLE_BACK = 0x1,
  MANTLE_ANGLE_LEFT = 0x2,
  MANTLE_ANGLE_RIGHT = 0x3,
  MANTLE_ANGLE_MAX = 0x4,
};

enum weapFireType_t
{
  WEAPON_FIRETYPE_FULLAUTO = 0x0,
  WEAPON_FIRETYPE_SINGLESHOT = 0x1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
  WEAPON_FIRETYPE_BURSTFIRE5 = 0x5,
  WEAPON_FIRETYPE_STACKED = 0x6,
  WEAPON_FIRETYPE_MINIGUN = 0x7,
  WEAPON_FIRETYPE_CHARGESHOT = 0x8,
  WEAPON_FIRETYPE_JETGUN = 0x9,
  WEAPON_FIRETYPECOUNT = 0xA,
};

enum ffa_team_t
{
  TEAM_FFA_NONE = 0x0,
  TEAM_FFA_AXIS = 0x1,
  TEAM_FFA_ALLIES = 0x2,
  TEAM_FFA_THREE = 0x3,
};

enum connstate_t
{
  CA_DISCONNECTED = 0x0,
  CA_CINEMATIC = 0x1,
  CA_UICINEMATIC = 0x2,
  CA_LOGO = 0x3,
  CA_CONNECTING = 0x4,
  CA_CHALLENGING = 0x5,
  CA_CONNECTED = 0x6,
  CA_SENDINGSTATS = 0x7,
  CA_LOADING = 0x8,
  CA_PRIMED = 0x9,
  CA_ACTIVE = 0xA,
};

enum WeapStickinessType
{
  WEAPSTICKINESS_NONE = 0x0,
  WEAPSTICKINESS_ALL = 0x1,
  WEAPSTICKINESS_ALL_NO_SENTIENTS = 0x2,
  WEAPSTICKINESS_GROUND = 0x3,
  WEAPSTICKINESS_GROUND_WITH_YAW = 0x4,
  WEAPSTICKINESS_FLESH = 0x5,
  WEAPSTICKINESS_COUNT = 0x6,
};

enum weapClass_t
{
  WEAPCLASS_RIFLE = 0x0,
  WEAPCLASS_MG = 0x1,
  WEAPCLASS_SMG = 0x2,
  WEAPCLASS_SPREAD = 0x3,
  WEAPCLASS_PISTOL = 0x4,
  WEAPCLASS_GRENADE = 0x5,
  WEAPCLASS_ROCKETLAUNCHER = 0x6,
  WEAPCLASS_TURRET = 0x7,
  WEAPCLASS_NON_PLAYER = 0x8,
  WEAPCLASS_GAS = 0x9,
  WEAPCLASS_ITEM = 0xA,
  WEAPCLASS_MELEE = 0xB,
  WEAPCLASS_KILLSTREAK_ALT_STORED_WEAPON = 0xC,
  WEAPCLASS_PISTOL_SPREAD = 0xD,
  WEAPCLASS_NUM = 0xE,
};

enum EVehicleRotors
{
  VEHROT_MAIN = 0x0,
  VEHROT_TAIL = 0x1,
  VEHROT_QUAD_FL = 0x0,
  VEHROT_QUAD_FR = 0x1,
  VEHROT_QUAD_RL = 0x2,
  VEHROT_QUAD_RR = 0x3,
  VEHROT_MAX = 0x4,
};

enum PartyLeagueState
{
  LEAGUE_WAITING_FOR_STATS = 0x0,
  LEAGUE_FORMING_TEAMS = 0x1,
  LEAGUE_CANNOT_FORM_TEAMS = 0x2,
  LEAGUE_SENDING_OUTCOMES = 0x3,
  LEAGUE_READY_TO_GO = 0x4,
};

enum TraceHitType
{
  TRACE_HITTYPE_NONE = 0x0,
  TRACE_HITTYPE_ENTITY = 0x1,
  TRACE_HITTYPE_DYNENT_MODEL = 0x2,
  TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
  TRACE_HITTYPE_GLASS = 0x4,
};

enum weapOverlayReticle_t
{
  WEAPOVERLAYRETICLE_NONE = 0x0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
  WEAPOVERLAYRETICLE_NUM = 0x2,
};

enum OffhandSlot
{
  OFFHAND_SLOT_NONE = 0x0,
  OFFHAND_SLOT_LETHAL_GRENADE = 0x1,
  OFFHAND_SLOT_TACTICAL_GRENADE = 0x2,
  OFFHAND_SLOT_EQUIPMENT = 0x3,
  OFFHAND_SLOT_SPECIFIC_USE = 0x4,
  OFFHAND_SLOT_COUNT = 0x5,
};

enum Dtp_SurfaceType
{
  DTP_SURF_TYPE_DEFAULT = 0x0,
  DTP_SURF_TYPE_METAL = 0x1,
  DTP_SURF_TYPE_CONCRETE = 0x2,
  DTP_SURF_TYPE_WOOD = 0x3,
  DTP_SURF_TYPE_SNOW = 0x4,
  DTP_SURF_TYPE_DIRT = 0x5,
  DTP_SURF_TYPE_GRAVEL = 0x6,
  DTP_SURF_TYPE_GRASS = 0x7,
  DTP_SURF_TYPE_MUD = 0x8,
  DTP_SURF_TYPE_COUNT = 0x9,
};

enum weaponIconRatioType_t
{
  WEAPON_ICON_RATIO_1TO1 = 0x0,
  WEAPON_ICON_RATIO_2TO1 = 0x1,
  WEAPON_ICON_RATIO_4TO1 = 0x2,
  WEAPON_ICON_RATIO_COUNT = 0x3,
};

enum VehicleDriveBySoundType
{
  VEH_DRIVE_BY_PRIMARY = 0x0,
  VEH_DRIVE_BY_SECONDARY = 0x1,
  NUM_VEH_DRIVE_BY_TYPES = 0x2,
};

enum ddlReturnCodes_e
{
  DDL_RC_SUCCESS = 0x0,
  DDL_RC_ERROR = 0xFFFFFFFF,
  DDL_RC_BUFFER_IO_ERROR = 0xFFFFFFFE,
  DDL_RC_STATE_INVALID = 0xFFFFFFFD,
  DDL_RC_MEMBER_NULL = 0xFFFFFFFC,
  DDL_RC_MEMBER_INVALID = 0xFFFFFFFB,
  DDL_RC_OFFSET_INVALID = 0xFFFFFFFA,
  DDL_RC_TRUNCATED = 0xFFFFFFF9,
};

enum weapClipType_t
{
  WEAPON_CLIPTYPE_BOTTOM = 0x0,
  WEAPON_CLIPTYPE_TOP = 0x1,
  WEAPON_CLIPTYPE_LEFT = 0x2,
  WEAPON_CLIPTYPE_DP28 = 0x3,
  WEAPON_CLIPTYPE_PTRS = 0x4,
  WEAPON_CLIPTYPE_LMG = 0x5,
  WEAPON_CLIPTYPECOUNT = 0x6,
};

enum HELICOPTER_STAGES
{
  HELICOPTER_ONFIRE = 0x0,
  HELICOPTER_HEAVYSMOKE = 0x1,
  HELICOPTER_SMOKING = 0x2,
  HELICOPTER_FULLHEALTH = 0x3,
  NUM_HELICOPTERSTAGES = 0x4,
};

enum VehicleSound
{
  VEH_TURRET_SPIN_SND = 0x0,
  VEH_TURRET_STOP_SND = 0x1,
  NUM_VEHICLE_SNDS = 0x2,
};

enum ComDevhostSystem
{
  COM_DEVHOST_SYSTEM_DEVHOST = 0x0,
  COM_DEVHOST_SYSTEM_CONSOLE = 0x1,
  COM_DEVHOST_SYSTEM_DVAR = 0x2,
  COM_DEVHOST_SYSTEM_SOUND = 0x3,
  COM_DEVHOST_SYSTEM_SOUND_COMMAND = 0x4,
  COM_DEVHOST_SYSTEM_FX = 0x5,
  COM_DEVHOST_SYSTEM_XANIM_SERVER = 0x6,
  COM_DEVHOST_SYSTEM_XANIM_NETWORK = 0x7,
  COM_DEVHOST_SYSTEM_XANIM_CLIENT = 0x8,
  COM_DEVHOST_SYSTEM_AI_GENERAL = 0x9,
  COM_DEVHOST_SYSTEM_AI_ENT_INFO = 0xA,
  COM_DEVHOST_SYSTEM_AI_ANIM_SCRIPT = 0xB,
  COM_DEVHOST_SYSTEM_AI_CODE_STATE = 0xC,
  COM_DEVHOST_SYSTEM_COUNT = 0xD,
  COM_DEVHOST_SYSTEM_INVALID = 0xFFFFFFFF,
};

enum netsrc_t
{
  NS_NULL = 0xFFFFFFFF,
  NS_CLIENT1 = 0x0,
  NS_CLIENT2 = 0x1,
  NS_CLIENT3 = 0x2,
  NS_CLIENT4 = 0x3,
  NS_SERVER = 0x4,
  NS_MAXCLIENTS = 0x4,
  NS_PACKET = 0x5,
};

enum RecvState
{
  BD_READ_INIT = 0x0,
  BD_READ_SIZE = 0x1,
  BD_READ_ENCRYPT = 0x2,
  BD_READ_MESSAGE = 0x3,
  BD_READ_COMPLETE = 0x4,
};

enum WeapRotateType
{
  WEAPROTATE_GRENADE_ROTATE = 0x0,
  WEAPROTATE_BLADE_ROTATE = 0x1,
  WEAPROTATE_CYLINDER_ROTATE = 0x2,
  WEAPROTATE_COUNT = 0x3,
};

enum weapStance_t
{
  WEAPSTANCE_STAND = 0x0,
  WEAPSTANCE_DUCK = 0x1,
  WEAPSTANCE_PRONE = 0x2,
  WEAPSTANCE_NUM = 0x3,
};

enum StanceState
{
  CL_STANCE_STAND = 0x0,
  CL_STANCE_CROUCH = 0x1,
  CL_STANCE_PRONE = 0x2,
  CL_STANCE_DIVE_TO_PRONE = 0x3,
};

enum PenetrateType
{
  PENETRATE_TYPE_NONE = 0x0,
  PENETRATE_TYPE_SMALL = 0x1,
  PENETRATE_TYPE_MEDIUM = 0x2,
  PENETRATE_TYPE_LARGE = 0x3,
  PENETRATE_TYPE_COUNT = 0x4,
};

enum serverState_t
{
  SS_DEAD = 0x0,
  SS_LOADING = 0x1,
  SS_GAME = 0x2,
};

enum clientMigState_t
{
  CMSTATE_INACTIVE = 0x0,
  CMSTATE_OLDHOSTLEAVING = 0x1,
  CMSTATE_LIMBO = 0x2,
  CMSTATE_NEWHOSTCONNECT = 0x3,
  CMSTATE_COUNT = 0x4,
};

enum LeagueDataState
{
  LEAGUE_DATA_REQUESTING_BASE = 0x0,
  LEAGUE_DATA_BASE_RECEIVED = 0x1,
  LEAGUE_DATA_SENDING_OUTCOMES = 0x2,
  LEAGUE_DATA_OUTCOMES_ACKED = 0x3,
};

enum netadrtype_t
{
  NA_BOT = 0x0,
  NA_BAD = 0x1,
  NA_LOOPBACK = 0x2,
  NA_BROADCAST = 0x3,
  NA_IP = 0x4,
};

enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
};

enum VehicleEntryPoints
{
  VEH_ENTRY_LEFT = 0x0,
  VEH_ENTRY_RIGHT = 0x1,
  VEH_ENTRY_REAR = 0x2,
  VEH_ENTRY_GUNNER3 = 0x3,
  VEH_ENTRY_GUNNER4 = 0x4,
  NUM_VEHICLE_ENTRY_POINTS = 0x5,
};

enum PerLocalClientAllocFlags
{
  CLIENT_ALLOC_FLAG_CLIENT = 0x0,
  CLIENT_ALLOC_FLAG_SERVER = 0x1,
  CLIENT_ALLOC_FLAG_WORST_CASE = 0x2,
  CLIENT_ALLOC_FLAG_DRY_RUN = 0x4,
  CLIENT_ALLOC_FLAG_FULL = 0x3,
};

enum GamePadStick
{
  GPAD_INVALID = 0x0,
  GPAD_LX = 0x40000000,
  GPAD_LY = 0x40000001,
  GPAD_RX = 0x40000002,
  GPAD_RY = 0x40000003,
};

enum QueryId
{
  ENUM_SEARCH_SESSIONS_INVALID = 0x0,
  ENUM_SEARCH_SESSIONS_BY_PLAYLIST_VERSION = 0x1,
  ENUM_SEARCH_SESSIONS = 0x2,
  ENUM_SEARCH_SESSION_BY_GAME_SECURITY_ID = 0x3,
};

enum ai_stance_e
{
  STANCE_BAD = 0x0,
  STANCE_STAND = 0x1,
  STANCE_CROUCH = 0x2,
  STANCE_PRONE = 0x4,
  STANCE_ANY = 0x7,
};

enum nearestNodeHeightCheck
{
  NEAREST_NODE_DO_HEIGHT_CHECK = 0x0,
  NEAREST_NODE_DONT_DO_HEIGHT_CHECK = 0x1,
};

enum hudelem_update_t
{
  HUDELEM_UPDATE_ARCHIVAL = 0x1,
  HUDELEM_UPDATE_CURRENT = 0x2,
  HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
};

enum $2DE106F947F3758108E2812F8595AD24
{
  GJK_BASE = 0x0,
  GJK_AABB = 0x1,
  GJK_BRUSH = 0x2,
  GJK_PARTITION = 0x3,
  GJK_DOUBLE_SPHERE = 0x4,
  GJK_CYLINDER = 0x5,
  GJK_OBB = 0x6,
  GJK_POLYGON_CYLINDER = 0x7,
};

enum hintType_t
{
  HINT_NONE = 0x0,
  HINT_NOICON = 0x1,
  HINT_SEAT = 0x2,
  HINT_ACTIVATE = 0x3,
  HINT_HEALTH = 0x4,
  HINT_SPECTATOR = 0x5,
  HINT_TEAMPOT = 0x6,
  HINT_WEAPON = 0x7,
  HINT_NUM_HINTS = 0x8,
};

enum DynEntityCollType
{
  DYNENT_COLL_CLIENT_FIRST = 0x0,
  DYNENT_COLL_CLIENT_MODEL = 0x0,
  DYNENT_COLL_CLIENT_BRUSH = 0x1,
  DYNENT_COLL_SERVER_FIRST = 0x2,
  DYNENT_COLL_SERVER_MODEL = 0x2,
  DYNENT_COLL_SERVER_BRUSH = 0x3,
  DYNENT_COLL_COUNT = 0x4,
};

enum cgDrawTalkEnum
{
  CG_TALKER_NONE = 0x0,
  CG_TALKER_ALL = 0x1,
  CG_TALKER_FRIENDLY = 0x2,
  CG_TALKER_ENEMY = 0x3,
  CG_TALKER_COUNT = 0x4,
};

enum $2B5FCEB5CBACFF6BA945ABE7E6DB81D4
{
  NUM_MOVER_RECORDS = 0x20,
};

enum $CC14BC328FC1C38C12056C4EA3A4FB7C
{
  HUD_OBJ_SAME = 0x0,
  HUD_OBJ_NUM = 0x1,
};

enum $5593DFA4C63DF5E5E386FB9B9F1F184D
{
  FRIEND_ICON = 0x0,
  FRIEND_CHAT_ICON = 0x1,
  FRIEND_REVIVE_ICON = 0x2,
  FRIEND_ICON_NUM = 0x3,
};

enum profile_setting
{
  PROFILE_SETTING_INVALID = 0xFFFFFFFF,
  PROFILE_QUICK_LAUNCH_MODE = 0x0,
  PROFILE_GPAD_RUMBLE = 0x1,
  PROFILE_SESSION_REJOIN = 0x2,
  PROFILE_INVERT_PITCH = 0x3,
  PROFILE_VIEW_SENSITIVITY = 0x4,
  PROFILE_AUTO_AIM = 0x5,
  PROFILE_TEAM_INDICATOR = 0x6,
  PROFILE_UI_CAMO_UNLOCKS = 0x7,
  PROFILE_UI_ATTACH_UNLOCKS = 0x8,
  PROFILE_MATURE_CONTENT = 0x9,
  PROFILE_SHOW_BLOOD = 0xA,
  PROFILE_GPAD_BUTTONS_CONFIG = 0xB,
  PROFILE_GPAD_STICKS_CONFIG = 0xC,
  PROFILE_GPAD_BUTTON_L_STICK_DEFLECT = 0xD,
  PROFILE_GPAD_BUTTON_R_STICK_DEFLECT = 0xE,
  PROFILE_GAMMA = 0xF,
  PROFILE_SND_MENU_VOICE = 0x10,
  PROFILE_SND_MENU_MUSIC = 0x11,
  PROFILE_SND_MENU_SFX = 0x12,
  PROFILE_SND_MENU_MASTER = 0x13,
  PROFILE_SND_MENU_CINEMATIC = 0x14,
  PROFILE_SND_MENU_HEARING_IMPAIRED = 0x15,
  PROFILE_SND_MENU_PRESETS = 0x16,
  PROFILE_SND_MENU_SPEAKER_SETUP = 0x17,
  PROFILE_SPEAKER_LEFT_FRONT = 0x18,
  PROFILE_SPEAKER_LEFT = 0x19,
  PROFILE_SPEAKER_CENTER = 0x1A,
  PROFILE_SPEAKER_RIGHT_FRONT = 0x1B,
  PROFILE_SPEAKER_RIGHT = 0x1C,
  PROFILE_SPEAKER_LEFT_SURROUND = 0x1D,
  PROFILE_SPEAKER_LEFT_SURROUND_BACK = 0x1E,
  PROFILE_SPEAKER_RIGHT_SURROUND = 0x1F,
  PROFILE_SPEAKER_RIGHT_SURROUND_BACK = 0x20,
  PROFILE_SPEAKER_LFE = 0x21,
  PROFILE_PARTY_PRIVACY_STATUS = 0x22,
  PROFILE_GEOGRAPHICAL_MATCHMAKING = 0x23,
  PROFILE_SAFE_AREA_HORIZONTAL = 0x24,
  PROFILE_SAFE_AREA_VERTICAL = 0x25,
  PROFILE_DEMO_CONTROLLER_CONFIG = 0x26,
  PROFILE_DRAW_CROSSHAIR_3D = 0x27,
  PROFILE_START_IN_3D = 0x28,
  PROFILE_MOUSE_SENSITIVITY = 0x29,
  PROFILE_ANISO_MIN = 0x2A,
  PROFILE_FLIPPED_CONTROL_CONFIG = 0x2B,
  PROFILE_COMMON_INITIALIZED = 0x2C,
  PROFILE_SND_SHOUTCAST_VOIP = 0x2D,
  PROFILE_SND_SHOUTCAST_GAME = 0x2E,
  PROFILE_COLOR_BLIND_ASSIST = 0x2F,
  PROFILE_INVITE_XUID_DECIMAL = 0x30,
  PROFILE_SND_VOICECHAT_VOLUME = 0x31,
  PROFILE_SND_VOICECHAT_RECORD_LEVEL = 0x32,
  PROFILE_VER43_DEFAULTS = 0x33,
  PROFILE_EXE_SETTINGS_START = 0x34,
  PROFILE_FIRST_TIME = 0x34,
  PROFILE_CHEAT_COUNT = 0x35,
  PROFILE_EMAIL_ADDRESS = 0x36,
  PROFILE_SHOW_SUBTITLES = 0x37,
  PROFILE_LAST_SAVE_GAME = 0x38,
  PROFILE_GAMESKILL = 0x39,
  PROFILE_MISSION_HIGHEST_DIFFICULTY = 0x3A,
  PROFILE_MISSION = 0x3B,
  PROFILE_TAKE_COVER_WARNINGS = 0x3C,
  PROFILE_COLLECTIBLES = 0x3D,
  PROFILE_SKILL_SET = 0x3E,
  PROFILE_MISSION_GLOBALS = 0x3F,
  PROFILE_TARGET_ASSIST = 0x40,
  PROFILE_SPECTATE_THIRD_PERSON = 0x41,
  PROFILE_MOTD = 0x42,
  PROFILE_PLAYLIST_LEAGUEMATCH = 0x43,
  PROFILE_PLAYLIST_WAGERMATCH = 0x44,
  PROFILE_PLAYLIST_PLAYERMATCH = 0x45,
  PROFILE_PLAYLIST_SOLOMATCH = 0x46,
  PROFILE_CLASS_LOADOUTS = 0x47,
  PROFILE_SELECTED_CLASS_LOADOUT_SYSTEMLINK = 0x48,
  PROFILE_SELECTED_CLASS_LOADOUT_ONLINE = 0x49,
  PROFILE_SELECTED_CLASS_LOADOUT_LEAGUE = 0x4A,
  PROFILE_EXE_INITIALIZED = 0x4B,
  PROFILE_LOADOUT_INITIALIZED = 0x4C,
  PROFILE_PARTY_MAX_PLAYERS = 0x4D,
  PROFILE_MAP = 0x4E,
  PROFILE_GAMETYPE = 0x4F,
  PROFILE_MAP_ZM = 0x50,
  PROFILE_GAMETYPE_ZM = 0x51,
  PROFILE_UNLOCK_CRUMBS_ZM = 0x52,
  PROFILE_EMBLEM = 0x53,
  PROFILE_FIRST_TIME_MISSION_SELECT = 0x54,
  PROFILE_SHOUTCASTER_SCORE_PANEL = 0x55,
  PROFILE_SHOUTCASTER_NAME_PLATE = 0x56,
  PROFILE_SHOUTCASTER_PERKS = 0x57,
  PROFILE_SHOUTCASTER_INVENTORY = 0x58,
  PROFILE_SHOUTCASTER_SCORESTREAKS = 0x59,
  PROFILE_SHOUTCASTER_SCORESTREAKS_NOTIFICATION = 0x5A,
  PROFILE_SHOUTCASTER_MINIMAP = 0x5B,
  PROFILE_SHOUTCASTER_KILLFEED = 0x5C,
  PROFILE_SHOUTCASTER_CALLOUTCARDS = 0x5D,
  PROFILE_SHOUTCASTER_TEAM_SCORE = 0x5E,
  PROFILE_SHOUTCASTER_PLAYER_NOTIFICATIONS = 0x5F,
  PROFILE_SHOUTCASTER_VOIP_DOCK = 0x60,
  PROFILE_SHOUTCASTER_MAP_ICON_COLORS = 0x61,
  PROFILE_FIRST_TIME_PRIVATEGAME_HOST_ZM = 0x62,
  PROFILE_ELITE_EMBLEM_UPLOAD_REQUESTED = 0x63,
  PROFILE_ELITE_WELCOME_POPUP_SHOWN = 0x64,
  PROFILE_DEMO_SHOUTCASTER_NAME_PLATE = 0x65,
  PROFILE_ELITE_POSTMATCHRECORD_LAST_UPLOAD_TIME = 0x66,
  PROFILE_ELITE_REGISTRATION_POPUP_LAST_SHOWN_TIME = 0x67,
  PROFILE_ELITE_REGISTRATION_POPUP_TIMES_SHOWN = 0x68,
  PROFILE_ELITE_REGISTRATION_SIGNIN_COUNTER = 0x69,
  PROFILE_SHOUTCASTER_MAP_IN_PLAYER_COLUMN = 0x6A,
  PROFILE_PREFERRED_PING = 0x6B,
  PROFILE_SETTINGS_COUNT = 0x6C,
};

enum gjk_query_flags_e
{
  GJK_QUERY_FLAG_TERRAIN = 0x1,
  GJK_QUERY_FLAG_ENTS = 0x2,
  GJK_QUERY_FLAG_DENTS = 0x4,
};

enum $1C8F8D8F9DAF288AC6C72DD8C5683042
{
  PMOVE_HANDLER_CLIENT = 0x0,
  PMOVE_HANDLER_SERVER = 0x1,
  PMOVE_HANDLER_COUNT = 0x2,
};

enum DynEntityDrawType
{
  DYNENT_DRAW_MODEL = 0x0,
  DYNENT_DRAW_BRUSH = 0x1,
  DYNENT_DRAW_COUNT = 0x2,
};

enum rope_constraint_e
{
  ROPE_PAIR_CONSTRAINT = 0x0,
  ROPE_WORLD_CONSTRAINT = 0x1,
  ROPE_DENTITY_CONSTRAINT = 0x2,
  ROPE_CENTITY_CONSTRAINT = 0x3,
};

enum bb_profilelog_thread
{
  PROFILELOG_THREAD_UNKNOWN = 0x0,
  PROFILELOG_THREAD_SERVER = 0x1,
  PROFILELOG_THREAD_MAINTHREAD = 0x2,
  PROFILELOG_THREAD_SERVER_NETWORK_FRAME = 0x3,
  PROFILELOG_THREAD_COUNT = 0x4,
};

enum ai_state_t
{
  AIS_INVALID = 0x0,
  AIS_KEEPCURRENT = 0x0,
  AIS_EXPOSED = 0x1,
  AIS_TURRET = 0x2,
  AIS_GRENADE_RESPONSE = 0x3,
  AIS_BADPLACE_FLEE = 0x4,
  AIS_COVERARRIVAL = 0x5,
  AIS_DEATH = 0x6,
  AIS_DEFAULT = 0x1,
  AIS_SETABLE_FIRST = 0x1,
  AIS_SETABLE_LAST = 0x6,
  AIS_PAIN = 0x7,
  AIS_REACT = 0x8,
  AIS_SCRIPTEDANIM = 0x9,
  AIS_CUSTOMANIM = 0xA,
  AIS_NEGOTIATION = 0xB,
  AIS_PUSHABLE_FIRST = 0x7,
  AIS_PUSHABLE_LAST = 0xB,
  AIS_COUNT = 0xC,
};

enum $87E5AE5B7F4B76C5118673BF899C605F
{
  FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
  FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
  FX_MARK_VISUALS_CLASS_COUNT = 0x2,
};

enum cgScoreboardSort_e
{
  SCOREBOARD_SORT_DEFAULT = 0x0,
  SCOREBOARD_SORT_SCORE = 0x0,
  SCOREBOARD_SORT_ALPHABETICAL = 0x1,
  SCOREBOARD_SORT_CLIENTNUM = 0x2,
};

enum $65ACAD7802503B0218D92E5BD46770BA
{
  FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
  FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
  FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
  FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
  FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
  FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
  FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
  FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
  FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
  FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET_EFFECT_NOW = 0x100,
  FX_ELEM_RUN_MASK = 0x1C0,
  FX_ELEM_USE_COLLISION = 0x200,
  FX_ELEM_DIE_ON_TOUCH = 0x400,
  FX_ELEM_DRAW_PAST_FOG = 0x800,
  FX_ELEM_DRAW_WITH_VIEWMODEL = 0x1000,
  FX_ELEM_BLOCK_SIGHT = 0x2000,
  FX_ELEM_USE_ITEM_CLIP = 0x4000,
  FX_ELEM_USE_OCCLUSION_QUERY = 0x8000,
  FX_ELEM_IS_SUPERFLARE = 0x10000,
  FX_ELEM_USE_THERMAL = 0x20000,
  FX_ELEM_DISABLE_ALPHA_CULLING = 0x40000,
  FX_ELEM_USE_WORLD_UP = 0x80000,
  FX_ELEM_ALIGN_VIEWPOINT = 0x100000,
  FX_ELEM_USE_BILLBOARD_PIVOT = 0x200000,
  FX_ELEM_USE_GAUSSIAN_CLOUD = 0x400000,
  FX_ELEM_USE_ROTATIONAXIS = 0x800000,
  FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
  FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
  FX_ELEM_HAS_GRAVITY = 0x4000000,
  FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
  FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
  FX_ELEM_FLAME_CHUNK = 0x20000000,
  FX_ELEM_HAS_REFLECTION = 0x40000000,
  FX_ELEM_IS_MATURE_CONTENT = 0x80000000,
};

enum $C7C2ADEA3AF53E649A85C380F70AD5A7
{
  FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
  FX_ELEM_TYPE_SPRITE_ORIENTED = 0x1,
  FX_ELEM_TYPE_SPRITE_ROTATED = 0x2,
  FX_ELEM_TYPE_TAIL = 0x3,
  FX_ELEM_TYPE_LINE = 0x4,
  FX_ELEM_TYPE_TRAIL = 0x5,
  FX_ELEM_TYPE_CLOUD = 0x6,
  FX_ELEM_TYPE_MODEL = 0x7,
  FX_ELEM_TYPE_OMNI_LIGHT = 0x8,
  FX_ELEM_TYPE_SPOT_LIGHT = 0x9,
  FX_ELEM_TYPE_SOUND = 0xA,
  FX_ELEM_TYPE_DECAL = 0xB,
  FX_ELEM_TYPE_RUNNER = 0xC,
  FX_ELEM_TYPE_COUNT = 0xD,
  FX_ELEM_TYPE_LAST_SPRITE = 0x5,
  FX_ELEM_TYPE_LAST_DRAWN = 0x9,
};

enum errorParm_t
{
  ERR_FATAL = 0x0,
  ERR_DROP = 0x1,
  ERR_FROM_STARTUP = 0x2,
  ERR_SERVERDISCONNECT = 0x3,
  ERR_DISCONNECT = 0x4,
  ERR_SCRIPT = 0x5,
  ERR_SCRIPT_DROP = 0x6,
  ERR_LOCALIZATION = 0x7,
};

enum PacketEntityType
{
  ANALYZE_DATATYPE_ENTITYTYPE_GENERALENTITY = 0x0,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERENTITY = 0x1,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERCORPSEENTITY = 0x2,
  ANALYZE_DATATYPE_ENTITYTYPE_ITEMENTITY = 0x3,
  ANALYZE_DATATYPE_ENTITYTYPE_MISSILEENTITY = 0x4,
  ANALYZE_DATATYPE_ENTITYTYPE_INVISIBLEENTITY = 0x5,
  ANALYZE_DATATYPE_ENTITYTYPE_SCRIPTMOVERENTITY = 0x6,
  ANALYZE_DATATYPE_ENTITYTYPE_SOUNDBLENDENTITY = 0x7,
  ANALYZE_DATATYPE_ENTITYTYPE_FXENTITY = 0x8,
  ANALYZE_DATATYPE_ENTITYTYPE_LOOPFXENTITY = 0x9,
  ANALYZE_DATATYPE_ENTITYTYPE_PRIMARYLIGHTENTITY = 0xA,
  ANALYZE_DATATYPE_ENTITYTYPE_TURRETENTITY = 0xB,
  ANALYZE_DATATYPE_ENTITYTYPE_HELICOPTER = 0xC,
  ANALYZE_DATATYPE_ENTITYTYPE_PLANE = 0xD,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE = 0xE,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_CORPSE = 0xF,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR = 0x10,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_SPAWNER = 0x11,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_CORPSE = 0x12,
  ANALYZE_DATATYPE_ENTITYTYPE_STREAMER_HINT = 0x13,
  ANALYZE_DATATYPE_ENTITYTYPE_ZBARRIER = 0x14,
  ANALYZE_DATATYPE_ENTITYTYPE_TEMPENTITY = 0x15,
  ANALYZE_DATATYPE_ENTITYTYPE_ARCHIVEDENTITY = 0x16,
  ANALYZE_DATATYPE_ENTITYTYPE_MATCHSTATE = 0x17,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENTSTATE = 0x18,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERSTATE = 0x19,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTORSTATE = 0x1A,
  ANALYZE_DATATYPE_ENTITYTYPE_HUDELEM = 0x1B,
  ANALYZE_DATATYPE_ENTITYTYPE_BASELINE = 0x1C,
  ANALYZE_DATATYPE_ENTITYTYPE_GLASS = 0x1D,
  ANALYZE_DATATYPE_ENTITYTYPE_PERF = 0x1E,
  ANALYZE_DATATYPE_ENTITYTYPE_SERVERCMD = 0x1F,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_UPLOAD = 0x20,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_DOWNLOAD = 0x21,
  ANALYZE_DATATYPE_ENTITYTYPE_DEMO_UPLOAD = 0x22,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_UPLOAD = 0x23,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PING = 0x24,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PACKETS = 0x25,
  ANALYZE_DATATYPE_ENTITYTYPE_COUNT = 0x26,
};

enum PacketSpecialEntityIndex_t
{
  ANALYZE_ENTITY_STANDARD = 0x0,
  ANALYZE_ENTITY_CLIENTSTATES = 0x400,
  ANALYZE_ENTITY_MATCHSTATE = 0x412,
  ANALYZE_ENTITY_GLASS = 0x413,
  ANALYZE_ENTITY_PERF = 0x414,
  ANALYZE_ENTITY_SERVERCMD = 0x415,
  ANALYZE_ENTITY_SERVERCMD_END = 0x425,
  ANALYZE_ENTITY_VOIP_UPLOAD = 0x426,
  ANALYZE_ENTITY_VOIP_DOWNLOAD = 0x427,
  ANALYZE_ENTITY_DEMO_UPLOAD = 0x428,
  ANALYZE_ENTITY_CLIENT_UPLOAD = 0x429,
  ANALYZE_ENTITY_CLIENT_PING = 0x42A,
  ANALYZE_ENTITY_CLIENT_PACKETS = 0x42B,
  ANALYZE_ENTITY_CLIENT_PACKETS_END = 0x432,
  ANALYZE_MAX_UPDATE_ITEMS = 0x433,
};

enum nodeType
{
  NODE_BADNODE = 0x0,
  NODE_PATHNODE = 0x1,
  NODE_COVER_STAND = 0x2,
  NODE_COVER_CROUCH = 0x3,
  NODE_COVER_CROUCH_WINDOW = 0x4,
  NODE_COVER_PRONE = 0x5,
  NODE_COVER_RIGHT = 0x6,
  NODE_COVER_LEFT = 0x7,
  NODE_COVER_PILLAR = 0x8,
  NODE_AMBUSH = 0x9,
  NODE_EXPOSED = 0xA,
  NODE_CONCEALMENT_STAND = 0xB,
  NODE_CONCEALMENT_CROUCH = 0xC,
  NODE_CONCEALMENT_PRONE = 0xD,
  NODE_REACQUIRE = 0xE,
  NODE_BALCONY = 0xF,
  NODE_SCRIPTED = 0x10,
  NODE_NEGOTIATION_BEGIN = 0x11,
  NODE_NEGOTIATION_END = 0x12,
  NODE_TURRET = 0x13,
  NODE_GUARD = 0x14,
  NODE_NUMTYPES = 0x15,
  NODE_DONTLINK = 0x15,
};

enum $4DF4D94423C9A5CC82BFA70AB1D44424
{
  FX_ATLAS_START_FIXED = 0x0,
  FX_ATLAS_START_RANDOM = 0x1,
  FX_ATLAS_START_INDEXED = 0x2,
  FX_ATLAS_START_FIXED_RANGE = 0x3,
  FX_ATLAS_START_MASK = 0x3,
  FX_ATLAS_PLAY_OVER_LIFE = 0x4,
  FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
};

enum entityType_t
{
  ET_GENERAL = 0x0,
  ET_PLAYER = 0x1,
  ET_PLAYER_CORPSE = 0x2,
  ET_ITEM = 0x3,
  ET_MISSILE = 0x4,
  ET_INVISIBLE = 0x5,
  ET_SCRIPTMOVER = 0x6,
  ET_SOUND_BLEND = 0x7,
  ET_FX = 0x8,
  ET_LOOP_FX = 0x9,
  ET_PRIMARY_LIGHT = 0xA,
  ET_TURRET = 0xB,
  ET_HELICOPTER = 0xC,
  ET_PLANE = 0xD,
  ET_VEHICLE = 0xE,
  ET_VEHICLE_CORPSE = 0xF,
  ET_ACTOR = 0x10,
  ET_ACTOR_SPAWNER = 0x11,
  ET_ACTOR_CORPSE = 0x12,
  ET_STREAMER_HINT = 0x13,
  ET_ZBARRIER = 0x14,
  ET_EVENTS = 0x15,
};

enum $43C5652E2B4BDC973F972A9A22182A5D
{
  CONNECT_PATHS_NONE = 0x0,
  CONNECT_PATHS_RUN_GAME_WHEN_DONE = 0x1,
  CONNECT_PATHS_EXIT_WHEN_DONE = 0x2,
  CONNECT_PATHS_EXIT_WHEN_DONE_OR_ERROR = 0x3,
  NUM_CONNECT_PATH_OPTIONS = 0x3,
};

enum $3FCCA73C1CA2E5D410EACFEE9F45966F
{
  PNF_DONTLINK = 0x1,
  PNF_PLACEHOLDER_FLAG = 0x2,
  PNF_DONTSTAND = 0x4,
  PNF_DONTCROUCH = 0x8,
  PNF_DONTPRONE = 0x10,
  PNF_NORAILING = 0x20,
  PNF_PRIORITY = 0x40,
  PNF_IDLE = 0x80,
  PNF_CAN_PARENT = 0x100,
  PNF_DISABLED = 0x200,
  PNF_DONTLEFT = 0x400,
  PNF_DONTRIGHT = 0x800,
  PNF_STRICT_CONNECT = 0x800,
  PNF_CHOKEPOINT = 0x1000,
  PNF_LINKSTOCHOKE = 0x2000,
  PNF_TEMP_LINKS = 0x4000,
  PNF_ANGLEVALID = 0x8000,
  PNF_SUSPENDED = 0x10000,
  PNF_COVER_PEEKOVER = 0x20000,
  PNF_COVER_PEEKLEFT = 0x40000,
  PNF_COVER_PEEKRIGHT = 0x80000,
  PNF_DOUBLE_WIDE = 0x100000,
  PNF_QUADROTOR = 0x200000,
  PNF_HINT_LADDER = 0x400000,
  PNF_HINT_MANTLE = 0x800000,
  PNF_HINT_JUMP = 0x1000000,
  PNF_HINT_FALL = 0x2000000,
  PNF_NO_DOUBLEWIDE = 0x4000000,
  PNF_NO_QUADROTOR = 0x8000000,
};

enum $BFD5AE103BB780F0525A6E5484407299
{
  WATER_EFFECT_HIT_SM = 0x0,
  WATER_EFFECT_HIT_MD = 0x1,
  WATER_EFFECT_HIT_LG = 0x2,
  WATER_EFFECT_HIT_OBJECT_RIPPLE = 0x3,
  WATER_EFFECT_HIT_BUBBLES = 0x4,
  WATER_EFFECT_HIT_WAIST_RIPPLE = 0x5,
  WATER_EFFECT_HIT_KNEE_RIPPLE = 0x6,
  WATER_EFFECT_HIT_SPLASH = 0x7,
  WATER_EFFECT_NUM = 0x8,
};

enum VehicleEngineState
{
  VEH_ENGINE_STATE_IDLE = 0x0,
  VEH_ENGINE_STATE_IN_GEAR = 0x1,
  VEH_ENGINE_STATE_SHIFT_UP = 0x2,
  VEH_ENGINE_STATE_SHIFT_DOWN = 0x3,
};

enum ObjectIconType
{
  OBJECTIVEICON_MAP = 0x0,
  OBJECTIVEICON_SHOUTCASTER_MAP = 0x1,
  OBJECTIVEICON_COUNT = 0x2,
};

enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

enum PhysicsOwnerType
{
  PHYS_OWNER_DYNENT = 0x0,
  PHYS_OWNER_ENTITY = 0x1,
  PHYS_OWNER_GLASS = 0x2,
  PHYS_OWNER_PARTICLE = 0x3,
  PHYS_OWNER_RAGDOLL = 0x4,
  PHYS_OWNER_XDOLL = 0x5,
  PHYS_OWNER_COUNT = 0x6,
};

enum ai_traverse_mode_t
{
  AI_TRAVERSE_INVALID = 0x0,
  AI_TRAVERSE_GRAVITY = 0x1,
  AI_TRAVERSE_NOGRAVITY = 0x2,
  AI_TRAVERSE_NOCLIP = 0x3,
  AI_TRAVERSE_COUNT = 0x4,
};

enum ai_animmode_t
{
  AI_ANIM_UNKNOWN = 0x0,
  AI_ANIM_MOVE_CODE = 0x1,
  AI_ANIM_USE_POS_DELTAS = 0x2,
  AI_ANIM_USE_ANGLE_DELTAS = 0x3,
  AI_ANIM_USE_BOTH_DELTAS = 0x4,
  AI_ANIM_USE_BOTH_DELTAS_NOCLIP = 0x5,
  AI_ANIM_USE_BOTH_DELTAS_NOGRAVITY = 0x6,
  AI_ANIM_USE_BOTH_DELTAS_ZONLY_PHYSICS = 0x7,
  AI_ANIM_NOPHYSICS = 0x8,
  AI_ANIM_POINT_RELATIVE = 0x9,
  AI_ANIM_SLIDE = 0xA,
};

enum SndMenuCategory
{
  SND_CATEGORY_SFX = 0x0,
  SND_CATEGORY_MUSIC = 0x1,
  SND_CATEGORY_VOICE = 0x2,
  SND_CATEGORY_UI = 0x3,
  SND_CATEGORY_CINEMATIC = 0x4,
  SND_CATEGORY_COUNT = 0x5,
};

enum eHand
{
  HAND_RIGHT = 0x0,
  HAND_LEFT = 0x1,
  MAX_HANDS = 0x2,
};

enum AlertLevel
{
  AI_ALERTNESS_ASLEEP = 0x0,
  AI_ALERTNESS_NONCOMBAT = 0x1,
  AI_ALERTNESS_ALERT = 0x2,
  AI_ALERTNESS_COMBAT = 0x3,
  NUM_ALERT_LEVELS = 0x4,
};

enum CombatMode
{
  AI_COMBAT_COVER = 0x0,
  AI_COMBAT_NO_COVER = 0x1,
  AI_COMBAT_COVER_ONLY = 0x2,
  AI_COMBAT_AMBUSH = 0x3,
  AI_COMBAT_AMBUSH_NODES_ONLY = 0x4,
  AI_COMBAT_EXPOSED_NODES_ONLY = 0x5,
  AI_COMBAT_ANY_EXPOSED_NODES_ONLY = 0x6,
  NUM_COMBAT_MODES = 0x7,
};

enum bb_profilelog_id
{
  PROFILELOG_UNKNOWN = 0x0,
  PROFILELOG_SV_FRAME_MP = 0x1,
  PROFILELOG_SV_RUNFRAME_MP = 0x2,
  PROFILELOG_SV_PREFRAME_MP = 0x3,
  PROFILELOG_SV_POSTFRAME_MP = 0x4,
  PROFILELOG_SV_SCRIPTS_ALL = 0x5,
  PROFILELOG_SV_EVENTLOOP_MP = 0x6,
  PROFILELOG_SV_PMOVE = 0x7,
  PROFILELOG_SV_PMOVE_COLLISION = 0x8,
  PROFILELOG_VEHICLE_THINK = 0x9,
  PROFILELOG_ACTOR_THINK = 0xA,
  PROFILELOG_NON_PLAYER_COLLISION = 0xB,
  PROFILELOG_XXX = 0xC,
  PROFILELOG_DOBJ_SKEL = 0xD,
  PROFILELOG_STREAM_SORT_WAIT = 0xE,
  PROFILELOG_GET_BITFIELD = 0xF,
  PROFILELOG_SCR_UPDATESCREEN = 0x10,
  PROFILELOG_BLANK1 = 0x11,
  PROFILELOG_BLANK2 = 0x12,
  PROFILELOG_BLANK3 = 0x13,
  PROFILELOG_BLANK4 = 0x14,
  PROFILELOG_BLANK5 = 0x15,
  PROFILELOG_BLANK6 = 0x16,
  PROFILELOG_BLANK7 = 0x17,
  PROFILELOG_BLANK8 = 0x18,
  PROFILELOG_NET_BAND_SERVER_TRANSMITTED = 0x19,
  PROFILELOG_NET_BAND_SERVER_TOTAL = 0x1A,
  PROFILELOG_NET_BAND_SERVER_ENTITYSTATES = 0x1B,
  PROFILELOG_NET_BAND_SERVER_PLAYERSTATES = 0x1C,
  PROFILELOG_NET_BAND_SERVER_CLIENTSTATES = 0x1D,
  PROFILELOG_NET_BAND_SERVER_ACTORSTATES = 0x1E,
  PROFILELOG_NET_BAND_SERVER_GLASS = 0x1F,
  PROFILELOG_NET_BAND_SERVER_DEMO_UPLOAD = 0x20,
  PROFILELOG_NET_BAND_SERVER_BLACKBOX = 0x21,
  PROFILELOG_NET_BAND_SERVER_VOICE = 0x22,
  PROFILELOG_NET_BAND_SERVER_RELIABLE_CMDS = 0x23,
  PROFILELOG_NET_BAND_SERVER_GAMESTATE = 0x24,
  PROFILELOG_MAX = 0x25,
};

enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_TO_LINEAR = 0x2,
  VISIONSETLERP_TO_SMOOTH = 0x3,
  VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
  VISIONSETLERP_CUSTOM_VALUE = 0x6,
};

enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

enum visionSetMode_t
{
  VISIONSETMODE_NAKED = 0x0,
  VISIONSETMODE_SERVER = 0x1,
  VISIONSETMODE_NIGHT = 0x2,
  VISIONSETMODE_FLARE = 0x3,
  VISIONSETMODE_INFRARED = 0x4,
  VISIONSETMODE_TVGUIDED = 0x5,
  VISIONSETMODE_EXTRACAM = 0x6,
  VISIONSETMODE_LASTSTAND = 0x7,
  VISIONSETMODECOUNT = 0x8,
};

enum TurretRotateState
{
  TURRET_ROTATE_STOPPED = 0x0,
  TURRET_ROTATE_STOPPING = 0x1,
  TURRET_ROTATE_MOVING = 0x2,
};

enum DynEntityType
{
  DYNENT_TYPE_INVALID = 0x0,
  DYNENT_TYPE_CLUTTER = 0x1,
  DYNENT_TYPE_DESTRUCT = 0x2,
  DYNENT_TYPE_COUNT = 0x3,
};

enum aiGoalSources
{
  AI_GOAL_SRC_SCRIPT_GOAL = 0x0,
  AI_GOAL_SRC_SCRIPT_ENTITY_GOAL = 0x1,
  AI_GOAL_SRC_ENEMY = 0x2,
};

enum ai_state_transition_t
{
  AIS_TRANSITION_CANONICAL = 0xFFFFFFFF,
  AIS_TRANSITION_NONE = 0x0,
  AIS_TRANSITION_SET = 0x1,
  AIS_TRANSITION_PUSH = 0x2,
  AIS_TRANSITION_POP = 0x3,
};

enum DelayedWeapDropState
{
  ACTOR_WEAP_DROP_NONE = 0x0,
  ACTOR_WEAP_DROP_GRAB_INITIAL_VALUE = 0x1,
  ACTOR_WEAP_DROP_FINISH = 0x2,
};

enum aiphys_t
{
  AIPHYS_BAD = 0x0,
  AIPHYS_NORMAL_ABSOLUTE = 0x1,
  AIPHYS_NORMAL_RELATIVE = 0x2,
  AIPHYS_NOCLIP = 0x3,
  AIPHYS_NOGRAVITY = 0x4,
  AIPHYS_ZONLY_PHYSICS_RELATIVE = 0x5,
  AIPHYS_ZONLY_PHYSICS_ABSOLUTE = 0x6,
  AIPHYS_GRAVITY_SLIDE = 0x7,
};

enum ai_orient_mode_t
{
  AI_ORIENT_INVALID = 0x0,
  AI_ORIENT_DONT_CHANGE = 0x1,
  AI_ORIENT_TO_MOTION = 0x2,
  AI_ORIENT_TO_ENEMY = 0x3,
  AI_ORIENT_TO_ENEMY_OR_MOTION = 0x4,
  AI_ORIENT_TO_ENEMY_OR_MOTION_SIDESTEP = 0x5,
  AI_ORIENT_TO_GOAL = 0x6,
  AI_ORIENT_COUNT = 0x7,
};

enum AI_STAIRS_STATE
{
  AI_STAIRS_NONE = 0x0,
  AI_STAIRS_UP = 0x1,
  AI_STAIRS_DOWN = 0x2,
  NUM_STAIRS_STATES = 0x3,
};

enum thirdPersonType
{
  TP_OFF = 0x0,
  TP_FOR_MODEL = 0x1,
  TP_FOR_SHADOW = 0x2,
};

enum ai_substate_t
{
  STATE_EXPOSED_COMBAT = 0x64,
  STATE_EXPOSED_NONCOMBAT = 0x65,
  STATE_EXPOSED_REACQUIRE_MOVE = 0x66,
  STATE_EXPOSED_REACQUIRE_DONE = 0x67,
  STATE_EXPOSED_FLASHBANGED = 0x68,
  STATE_EXPOSED_REACTION = 0x69,
  STATE_DEATH_PRECLEANUP = 0xC8,
  STATE_DEATH_POSTCLEANUP = 0xC9,
  STATE_GRENADE_FLEE = 0x12C,
  STATE_GRENADE_TAKECOVER = 0x12D,
  STATE_GRENADE_COWER = 0x12E,
  STATE_GRENADE_COMBAT = 0x12F,
  STATE_GRENADE_COVERATTACK = 0x130,
  STATE_GRENADE_ACQUIRE = 0x131,
  STATE_GRENADE_THROWBACK = 0x132,
};

enum team_indicator
{
  TEAM_INDICATOR_FULL = 0x0,
  TEAM_INDICATOR_ABBREVIATED = 0x1,
  TEAM_INDICATOR_ICON = 0x2,
  TEAM_INDICATOR_COUNT = 0x3,
};

enum ai_badplace_t
{
  AI_BADPLACE_NONE = 0x0,
  AI_BADPLACE_NORMAL = 0x1,
  AI_BADPLACE_REALLYBAD = 0x2,
};

enum gjccc_create_type_e
{
  CT_CYLINDER = 0x0,
  CT_COLLMAP = 0x1,
};

enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
  SHELLSHOCK_VIEWTYPE_NONE = 0x2,
};

enum DemoType
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
  DEMO_TYPE_SERVER_SNAPSHOT = 0x3,
};

enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

enum InvalidCmdHintType
{
  INVALID_CMD_NONE = 0x0,
  INVALID_CMD_NO_AMMO_BULLETS = 0x1,
  INVALID_CMD_NO_AMMO_FRAG_GRENADE = 0x2,
  INVALID_CMD_NO_AMMO_SPECIAL_GRENADE = 0x3,
  INVALID_CMD_NO_AMMO_FLASH_GRENADE = 0x4,
  INVALID_CMD_NO_AMMO_EQUIPMENT = 0x5,
  INVALID_CMD_STAND_BLOCKED = 0x6,
  INVALID_CMD_CROUCH_BLOCKED = 0x7,
  INVALID_CMD_PRONE_BLOCKED = 0x8,
  INVALID_CMD_TARGET_TOO_CLOSE = 0x9,
  INVALID_CMD_LOCKON_REQUIRED = 0xA,
  INVALID_CMD_NOT_ENOUGH_CLEARANCE = 0xB,
  INVALID_CMD_CANT_PLACE_TURRET = 0xC,
  INVALID_CMD_CANT_EQUIP_WHILE_PRONE = 0xD,
  INVALID_CMD_CANT_PLANT_EQUIPMENT = 0xE,
};

enum SuccessfulCmdHintType
{
  SUCCESSFUL_CMD_NONE = 0x0,
  SUCCESSFUL_CMD_GOD_MODE_ON = 0x1,
  SUCCESSFUL_CMD_GOD_MODE_OFF = 0x2,
  SUCCESSFUL_CMD_DEMIGOD_MODE_ON = 0x3,
  SUCCESSFUL_CMD_DEMIGOD_MODE_OFF = 0x4,
  SUCCESSFUL_CMD_UFO_ON = 0x5,
  SUCCESSFUL_CMD_UFO_OFF = 0x6,
  SUCCESSFUL_CMD_WEAPNEXT = 0x7,
  SUCCESSFUL_CMD_WEAPPREV = 0x8,
  SUCCESSFUL_CMD_GIVE_ALL = 0x9,
  SUCCESSFUL_CMD_CAMLOCK_ON = 0xA,
  SUCCESSFUL_CMD_CAMLOCK_OFF = 0xB,
  SUCCESSFUL_CMD_LOOKSPRING_ON = 0xC,
  SUCCESSFUL_CMD_LOOKSPRING_OFF = 0xD,
};

enum KillCamEntityType
{
  KC_NO_ENTITY = 0x0,
  KC_HELICOPTER = 0x1,
  KC_DESTRUCTIBLE = 0x2,
  KC_SCRIPTED = 0x3,
  KC_EXPLOSIVE = 0x4,
  KC_FAST_EXPLOSIVE = 0x5,
  KC_ROCKET = 0x6,
  KC_DRONE = 0x7,
  KC_DOG = 0x8,
  KC_ARTILLERY = 0x9,
  KC_VEHICLE = 0xA,
  KC_TURRET = 0xB,
};

enum KillCamEntityRestState
{
  KC_ENT_MOVING = 0x0,
  KC_ENT_AT_REST = 0x1,
  KC_ENT_STUCK_GROUND = 0x2,
  KC_ENT_STUCK_WALL = 0x3,
};

enum link_type_e
{
  PITCH_CTRL = 0x0,
  YAW_CTRL = 0x1,
  ROLL_CTRL = 0x2,
  SWIM_CTRL = 0x3,
  FULL_CTRL = 0x4,
  COMPASS_CTRL = 0x5,
};

enum CameraMode
{
  CAM_NORMAL = 0x0,
  CAM_LINKED = 0x1,
  CAM_VEHICLE = 0x2,
  CAM_VEHICLE_THIRDPERSON = 0x3,
  CAM_VEHICLE_GUNNER = 0x4,
  CAM_TURRET = 0x5,
  CAM_MISSILE = 0x6,
  CAM_SPIKECAMERA = 0x7,
  CAM_SCRIPTED_EXTRACAM = 0x8,
  CAM_RADIANT = 0x9,
};

enum eSessionModes
{
  SESSIONMODE_OFFLINE = 0x0,
  SESSIONMODE_SYSTEMLINK = 0x1,
  SESSIONMODE_ONLINE = 0x2,
  SESSIONMODE_PRIVATE = 0x3,
  SESSIONMODE_ZOMBIES = 0x4,
  SESSIONMODE_MAX = 0x5,
  INVALID_SESSIONMODE = 0x6,
};

enum $2649F0B36C32336EBE4D3FFD7A43235E
{
  RIOTSHIELD_DEFAULT_MODEL = 0x0,
  RIOTSHIELD_RED_MODEL = 0x1,
};

enum $4629A9C9DD5074007826A7AFE9517C74
{
  PRIM_POINTLIST = 0x1,
  PRIM_LINELIST = 0x2,
  PRIM_LINESTRIP = 0x3,
  PRIM_TRIANGLELIST = 0x4,
  PRIM_TRIANGLESTRIP = 0x5,
  PRIM_TRIANGLEFAN = 0xFFFFFFFF,
  PRIM_QUADLIST = 0xFFFFFFFF,
  PRIM_QUADSTRIP = 0xFFFFFFFF,
  PRIM_RECTLIST = 0xFFFFFFFF,
};

enum $BB38351FBE63E43A4BCC19B422016013
{
  CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
  CONST_SRC_CODE_LIGHT_POSITION = 0x0,
  CONST_SRC_CODE_LIGHT_DIFFUSE = 0x1,
  CONST_SRC_CODE_LIGHT_SPOTDIR = 0x2,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x3,
  CONST_SRC_CODE_LIGHT_ATTENUATION = 0x4,
  CONST_SRC_CODE_LIGHT_FALLOFF_A = 0x5,
  CONST_SRC_CODE_LIGHT_FALLOFF_B = 0x6,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX0 = 0x7,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX1 = 0x8,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX2 = 0x9,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX3 = 0xA,
  CONST_SRC_CODE_LIGHT_SPOT_AABB = 0xB,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL1 = 0xC,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL2 = 0xD,
  CONST_SRC_CODE_LIGHT_SPOT_COOKIE_SLIDE_CONTROL = 0xE,
  CONST_SRC_CODE_SHADOW_PARMS = 0xF,
  CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 0x10,
  CONST_SRC_CODE_RENDER_TARGET_SIZE = 0x11,
  CONST_SRC_CODE_UPSCALED_TARGET_SIZE = 0x12,
  CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0x13,
  CONST_SRC_CODE_DOF_EQUATION_SCENE = 0x14,
  CONST_SRC_CODE_DOF_LERP_SCALE = 0x15,
  CONST_SRC_CODE_DOF_LERP_BIAS = 0x16,
  CONST_SRC_CODE_DOF_ROW_DELTA = 0x17,
  CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x18,
  CONST_SRC_CODE_GAMETIME = 0x19,
  CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x1A,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x1A,
  CONST_SRC_CODE_FILTER_TAP_0 = 0x1A,
  CONST_SRC_CODE_FILTER_TAP_1 = 0x1B,
  CONST_SRC_CODE_FILTER_TAP_2 = 0x1C,
  CONST_SRC_CODE_FILTER_TAP_3 = 0x1D,
  CONST_SRC_CODE_FILTER_TAP_4 = 0x1E,
  CONST_SRC_CODE_FILTER_TAP_5 = 0x1F,
  CONST_SRC_CODE_FILTER_TAP_6 = 0x20,
  CONST_SRC_CODE_FILTER_TAP_7 = 0x21,
  CONST_SRC_CODE_COLOR_MATRIX_R = 0x22,
  CONST_SRC_CODE_COLOR_MATRIX_G = 0x23,
  CONST_SRC_CODE_COLOR_MATRIX_B = 0x24,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x25,
  CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 0x25,
  CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x25,
  CONST_SRC_CODE_SUNSHADOWMAP_PIXEL_SIZE = 0x26,
  CONST_SRC_CODE_SHADOWMAP_SCALE = 0x27,
  CONST_SRC_CODE_ZNEAR = 0x28,
  CONST_SRC_CODE_SUN_POSITION = 0x29,
  CONST_SRC_CODE_SUN_DIFFUSE = 0x2A,
  CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0x2B,
  CONST_SRC_CODE_DEBUG_BUMPMAP = 0x2C,
  CONST_SRC_CODE_DEBUG_PERFORMANCE = 0x2D,
  CONST_SRC_CODE_MATERIAL_COLOR = 0x2E,
  CONST_SRC_CODE_FOG = 0x2F,
  CONST_SRC_CODE_FOG2 = 0x30,
  CONST_SRC_CODE_FOG_COLOR = 0x31,
  CONST_SRC_CODE_SUN_FOG = 0x32,
  CONST_SRC_CODE_SUN_FOG_DIR = 0x33,
  CONST_SRC_CODE_SUN_FOG_COLOR = 0x34,
  CONST_SRC_CODE_GLOW_SETUP = 0x35,
  CONST_SRC_CODE_GLOW_APPLY = 0x36,
  CONST_SRC_CODE_COLOR_BIAS = 0x37,
  CONST_SRC_CODE_COLOR_TINT_BASE = 0x38,
  CONST_SRC_CODE_COLOR_TINT_DELTA = 0x39,
  CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0x3A,
  CONST_SRC_CODE_SKY_TRANSITION = 0x3B,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x3C,
  CONST_SRC_CODE_DLIGHT_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x3D,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x3E,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x3F,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 0x40,
  CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD = 0x41,
  CONST_SRC_CODE_DEPTH_FROM_CLIP = 0x42,
  CONST_SRC_CODE_CODE_MESH_ARG_0 = 0x43,
  CONST_SRC_CODE_CODE_MESH_ARG_1 = 0x44,
  CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x44,
  CONST_SRC_CODE_GRID_LIGHTING_COORDS_AND_VIS = 0x45,
  CONST_SRC_CODE_GRID_LIGHTING_SH_0 = 0x46,
  CONST_SRC_CODE_GRID_LIGHTING_SH_1 = 0x47,
  CONST_SRC_CODE_GRID_LIGHTING_SH_2 = 0x48,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_0 = 0x49,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_1 = 0x4A,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_2 = 0x4B,
  CONST_SRC_CODE_WIND_DIRECTION = 0x4C,
  CONST_SRC_CODE_MOTIONBLUR_DIRECTION_AND_MAGNITUDE = 0x4D,
  CONST_SRC_CODE_COMPOSITE_FX_DISTORTION = 0x4E,
  CONST_SRC_CODE_GLOW_BLOOM_SCALE = 0x4F,
  CONST_SRC_CODE_COMPOSITE_FX_OVERLAY_TEXCOORD = 0x50,
  CONST_SRC_CODE_COLOR_BIAS1 = 0x51,
  CONST_SRC_CODE_COLOR_TINT_BASE1 = 0x52,
  CONST_SRC_CODE_COLOR_TINT_DELTA1 = 0x53,
  CONST_SRC_CODE_POSTFX_FADE_EFFECT = 0x54,
  CONST_SRC_CODE_VIEWPORT_DIMENSIONS = 0x55,
  CONST_SRC_CODE_FRAMEBUFFER_READ = 0x56,
  CONST_SRC_CODE_RESIZE_PARAMS1 = 0x57,
  CONST_SRC_CODE_RESIZE_PARAMS2 = 0x58,
  CONST_SRC_CODE_RESIZE_PARAMS3 = 0x59,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_0 = 0x5A,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_1 = 0x5B,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_2 = 0x5C,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_3 = 0x5D,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_4 = 0x5E,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_5 = 0x5F,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_6 = 0x60,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_7 = 0x61,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_8 = 0x62,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_9 = 0x63,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_10 = 0x64,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_11 = 0x65,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_12 = 0x66,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_13 = 0x67,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_14 = 0x68,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_15 = 0x69,
  CONST_SRC_CODE_CHARACTER_CHARRED_AMOUNT = 0x6A,
  CONST_SRC_CODE_POSTFX_CONTROL0 = 0x6B,
  CONST_SRC_CODE_POSTFX_CONTROL1 = 0x6C,
  CONST_SRC_CODE_POSTFX_CONTROL2 = 0x6D,
  CONST_SRC_CODE_POSTFX_CONTROL3 = 0x6E,
  CONST_SRC_CODE_POSTFX_CONTROL4 = 0x6F,
  CONST_SRC_CODE_POSTFX_CONTROL5 = 0x70,
  CONST_SRC_CODE_POSTFX_CONTROL6 = 0x71,
  CONST_SRC_CODE_POSTFX_CONTROL7 = 0x72,
  CONST_SRC_CODE_POSTFX_CONTROL8 = 0x73,
  CONST_SRC_CODE_POSTFX_CONTROL9 = 0x74,
  CONST_SRC_CODE_POSTFX_CONTROLA = 0x75,
  CONST_SRC_CODE_POSTFX_CONTROLB = 0x76,
  CONST_SRC_CODE_POSTFX_CONTROLC = 0x77,
  CONST_SRC_CODE_POSTFX_CONTROLD = 0x78,
  CONST_SRC_CODE_POSTFX_CONTROLE = 0x79,
  CONST_SRC_CODE_POSTFX_CONTROLF = 0x7A,
  CONST_SRC_CODE_HDRCONTROL_0 = 0x7B,
  CONST_SRC_CODE_HDRCONTROL_1 = 0x7C,
  CONST_SRC_CODE_GLIGHT_POSXS = 0x7D,
  CONST_SRC_CODE_GLIGHT_POSYS = 0x7E,
  CONST_SRC_CODE_GLIGHT_POSZS = 0x7F,
  CONST_SRC_CODE_GLIGHT_FALLOFFS = 0x80,
  CONST_SRC_CODE_GLIGHT_REDS = 0x81,
  CONST_SRC_CODE_GLIGHT_GREENS = 0x82,
  CONST_SRC_CODE_GLIGHT_BLUES = 0x83,
  CONST_SRC_CODE_DLIGHT_POSITION = 0x84,
  CONST_SRC_CODE_DLIGHT_DIFFUSE = 0x85,
  CONST_SRC_CODE_DLIGHT_ATTENUATION = 0x86,
  CONST_SRC_CODE_DLIGHT_FALLOFF = 0x87,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_0 = 0x88,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_1 = 0x89,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_2 = 0x8A,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_3 = 0x8B,
  CONST_SRC_CODE_DLIGHT_SPOT_DIR = 0x8C,
  CONST_SRC_CODE_DLIGHT_SPOT_FACTORS = 0x8D,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_0 = 0x8E,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_1 = 0x8F,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_2 = 0x90,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_3 = 0x91,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL0 = 0x92,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL1 = 0x93,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL2 = 0x94,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL3 = 0x95,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL4 = 0x96,
  CONST_SRC_CODE_HERO_LIGHTING_R = 0x97,
  CONST_SRC_CODE_HERO_LIGHTING_G = 0x98,
  CONST_SRC_CODE_HERO_LIGHTING_B = 0x99,
  CONST_SRC_CODE_LIGHT_HERO_SCALE = 0x9A,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX = 0x9B,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX2 = 0x9C,
  CONST_SRC_CODE_ADSZSCALE = 0x9D,
  CONST_SRC_CODE_UI3D_UV_SETUP_0 = 0x9E,
  CONST_SRC_CODE_UI3D_UV_SETUP_1 = 0x9F,
  CONST_SRC_CODE_UI3D_UV_SETUP_2 = 0xA0,
  CONST_SRC_CODE_UI3D_UV_SETUP_3 = 0xA1,
  CONST_SRC_CODE_UI3D_UV_SETUP_4 = 0xA2,
  CONST_SRC_CODE_UI3D_UV_SETUP_5 = 0xA3,
  CONST_SRC_CODE_CHARACTER_DISSOLVE_COLOR = 0xA4,
  CONST_SRC_CODE_CAMERA_LOOK = 0xA5,
  CONST_SRC_CODE_CAMERA_UP = 0xA6,
  CONST_SRC_CODE_CAMERA_SIDE = 0xA7,
  CONST_SRC_CODE_RIMINTENSITY = 0xA8,
  CONST_SRC_CODE_GENERIC_PARAM0 = 0xA9,
  CONST_SRC_CODE_GENERIC_PARAM1 = 0xAA,
  CONST_SRC_CODE_GENERIC_PARAM2 = 0xAB,
  CONST_SRC_CODE_GENERIC_PARAM3 = 0xAC,
  CONST_SRC_CODE_GENERIC_PARAM4 = 0xAD,
  CONST_SRC_CODE_GENERIC_PARAM5 = 0xAE,
  CONST_SRC_CODE_GENERIC_PARAM6 = 0xAF,
  CONST_SRC_CODE_GENERIC_PARAM7 = 0xB0,
  CONST_SRC_CODE_GENERIC_EYEOFFSET = 0xB1,
  CONST_SRC_CODE_GENERIC_QUADINTENSITY = 0xB2,
  CONST_SRC_CODE_WEAPON_PARAM0 = 0xB3,
  CONST_SRC_CODE_WEAPON_PARAM1 = 0xB4,
  CONST_SRC_CODE_WEAPON_PARAM2 = 0xB5,
  CONST_SRC_CODE_WEAPON_PARAM3 = 0xB6,
  CONST_SRC_CODE_WEAPON_PARAM4 = 0xB7,
  CONST_SRC_CODE_WEAPON_PARAM5 = 0xB8,
  CONST_SRC_CODE_WEAPON_PARAM6 = 0xB9,
  CONST_SRC_CODE_WEAPON_PARAM7 = 0xBA,
  CONST_SRC_CODE_WEAPON_PARAM8 = 0xBB,
  CONST_SRC_CODE_WEAPON_PARAM9 = 0xBC,
  CONST_SRC_CODE_QRCODE_0 = 0xBD,
  CONST_SRC_CODE_QRCODE_1 = 0xBE,
  CONST_SRC_CODE_QRCODE_2 = 0xBF,
  CONST_SRC_CODE_QRCODE_3 = 0xC0,
  CONST_SRC_CODE_QRCODE_4 = 0xC1,
  CONST_SRC_CODE_QRCODE_5 = 0xC2,
  CONST_SRC_CODE_QRCODE_6 = 0xC3,
  CONST_SRC_CODE_QRCODE_7 = 0xC4,
  CONST_SRC_CODE_QRCODE_8 = 0xC5,
  CONST_SRC_CODE_QRCODE_9 = 0xC6,
  CONST_SRC_CODE_QRCODE_10 = 0xC7,
  CONST_SRC_CODE_QRCODE_11 = 0xC8,
  CONST_SRC_CODE_EYEOFFSET = 0xC9,
  CONST_SRC_CODE_SKY_COLOR_MULTIPLIER = 0xCA,
  CONST_SRC_CODE_EXTRA_CAM_PARAM = 0xCB,
  CONST_SRC_CODE_EMBLEM_LUT_SELECTOR = 0xCC,
  CONST_SRC_CODE_DEBUG_COLOR_OVERRIDE = 0xCD,
  CONST_SRC_CODE_DEBUG_ALPHA_OVERRIDE = 0xCE,
  CONST_SRC_CODE_DEBUG_NORMAL_OVERRIDE = 0xCF,
  CONST_SRC_CODE_DEBUG_SPECULAR_OVERRIDE = 0xD0,
  CONST_SRC_CODE_DEBUG_GLOSS_OVERRIDE = 0xD1,
  CONST_SRC_CODE_DEBUG_OCCLUSION_OVERRIDE = 0xD2,
  CONST_SRC_CODE_NEVER_DIRTY_PS_END = 0xD3,
  CONST_SRC_CODE_COUNT_FLOAT4 = 0xD3,
  CONST_SRC_FIRST_CODE_MATRIX = 0xD3,
  CONST_SRC_CODE_WORLD_MATRIX = 0xD3,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 0xD4,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 0xD5,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 0xD6,
  CONST_SRC_CODE_VIEW_MATRIX = 0xD7,
  CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0xD8,
  CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0xD9,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0xDA,
  CONST_SRC_CODE_PROJECTION_MATRIX = 0xDB,
  CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0xDC,
  CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0xDD,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0xDE,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX = 0xDF,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 0xE0,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xE1,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xE2,
  CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0xE3,
  CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0xE4,
  CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xE5,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xE6,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 0xE7,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 0xE8,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xE9,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xEA,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0xEB,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0xEC,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xED,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xEE,
  CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xEF,
  CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF0,
  CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF1,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF2,
  CONST_SRC_TOTAL_COUNT = 0xF3,
  CONST_SRC_NONE = 0xF4,
};

enum $01E7036930A8EFDA0126158D6C64F2AD
{
  GFX_SYM_FILTER_1 = 0x0,
  GFX_SYM_FILTER_2 = 0x1,
  GFX_SYM_FILTER_3 = 0x2,
  GFX_SYM_FILTER_4 = 0x3,
  GFX_SYM_FILTER_5 = 0x4,
  GFX_SYM_FILTER_6 = 0x5,
  GFX_SYM_FILTER_7 = 0x6,
  GFX_SYM_FILTER_8 = 0x7,
  GFX_SYM_FILTER_COUNT = 0x8,
};

enum GfxPrimStatsStage
{
  GFX_PRIM_STATS_STAGE_FIRST = 0x0,
  GFX_PRIM_STATS_STAGE_DEFAULT = 0x0,
  GFX_PRIM_STATS_STAGE_SHADOW_SUN = 0x1,
  GFX_PRIM_STATS_STAGE_SHADOW_SPOT = 0x2,
  GFX_PRIM_STATS_STAGE_PREPASS = 0x3,
  GFX_PRIM_STATS_STAGE_LIT = 0x4,
  GFX_PRIM_STATS_STAGE_SONAR = 0x5,
  GFX_PRIM_STATS_STAGE_SONAR_DEPTH = 0x6,
  GFX_PRIM_STATS_STAGE_DEPTH_HACK = 0x7,
  GFX_PRIM_STATS_STAGE_LIGHTMAP = 0x8,
  GFX_PRIM_STATS_STAGE_LIT_QUASI_OPAQUE = 0x9,
  GFX_PRIM_STATS_STAGE_LIT_TRANS = 0xA,
  GFX_PRIM_STATS_STAGE_LIT_FX = 0xB,
  GFX_PRIM_STATS_STAGE_EMISSIVE_OPAQUE = 0xC,
  GFX_PRIM_STATS_STAGE_EMISSIVE_TRANS = 0xD,
  GFX_PRIM_STATS_STAGE_EMISSIVE_FX = 0xE,
  GFX_PRIM_STATS_STAGE_2D = 0xF,
  GFX_PRIM_STATS_STAGE_COUNT = 0x10,
  GFX_PRIM_STATS_STAGE_LAST = 0xF,
};

enum GfxPrimStatsTarget
{
  GFX_PRIM_STATS_FIRST = 0x0,
  GFX_PRIM_STATS_DEFAULT = 0x0,
  GFX_PRIM_STATS_WORLD = 0x1,
  GFX_PRIM_STATS_SMODELRIGID = 0x2,
  GFX_PRIM_STATS_XMODELRIGID = 0x3,
  GFX_PRIM_STATS_XMODELSKINNED = 0x4,
  GFX_PRIM_STATS_BMODEL = 0x5,
  GFX_PRIM_STATS_FX = 0x6,
  GFX_PRIM_STATS_HUD = 0x7,
  GFX_PRIM_STATS_DEBUG = 0x8,
  GFX_PRIM_STATS_CODE = 0x9,
  GFX_PRIM_STATS_LAST = 0x9,
  GFX_PRIM_STATS_COUNT = 0xA,
};

enum GfxPrimStatsCounters
{
  GFX_PRIM_STATS_COUNTER_PRIMS = 0x0,
  GFX_PRIM_STATS_COUNTER_TRIS = 0x1,
  GFX_PRIM_STATS_COUNTER_SURFS = 0x2,
  GFX_PRIM_STATS_COUNTER_MATS = 0x3,
  GFX_PRIM_STATS_COUNTER_STATIC_IDXS = 0x4,
  GFX_PRIM_STATS_COUNTER_STATIC_VERTS = 0x5,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_IDXS = 0x6,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_VERTS = 0x7,
  GFX_PRIM_STATS_COUNTER_COUNT = 0x8,
};

enum $87CCD768BE34ACA19390959FCFC97446
{
  CMDBUF_LIT_BSP = 0x0,
  CMDBUF_LIT_BSP_END = 0x0,
  CMDBUF_LIT_STATIC_MODEL = 0x1,
  CMDBUF_LIT_STATIC_MODEL_END = 0x1,
  CMDBUF_LIT = 0x2,
  CMDBUF_LIT_END = 0x2,
  CMDBUF_LIT_BSP_POST_RESOLVE = 0x3,
  CMDBUF_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  CMDBUF_LIT_POST_RESOLVE = 0x5,
  CMDBUF_LIT_SONAR = 0x6,
  CMDBUF_LIGHT_MAP_BSP = 0x7,
  CMDBUF_LIGHT_MAP_BSP_END = 0x8,
  CMDBUF_LIGHT_MAP_STATIC_MODEL = 0x9,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_END = 0xA,
  CMDBUF_LIGHT_MAP = 0xB,
  CMDBUF_LIGHT_MAP_END = 0xC,
  CMDBUF_LIGHT_MAP_BSP_POST_RESOLVE = 0xD,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xE,
  CMDBUF_LIGHT_MAP_POST_RESOLVE = 0xF,
  CMDBUF_DEPTH_HACK = 0x10,
  CMDBUF_TRANS = 0x11,
  CMDBUF_TRANS_POST_FX = 0x12,
  CMDBUF_LIT_QUASI_OPAQUE = 0x13,
  CMDBUF_EMISSIVE_OPAQUE = 0x14,
  CMDBUF_EMISSIVE_FX = 0x15,
  CMDBUF_VIEWMODEL_FX = 0x16,
  CMDBUF_SUPERFLARE = 0x17,
  CMDBUF_VIEWMODEL_TRANS = 0x18,
  CMDBUF_POST_BLUR = 0x19,
  CMDBUF_SUN_SHADOW_MAP0 = 0x1A,
  CMDBUF_SUN_SHADOW_MAP1 = 0x1B,
  CMDBUF_SPOT_SHADOW_MAP0 = 0x1C,
  CMDBUF_SPOT_SHADOW_MAP1 = 0x1D,
  CMDBUF_SPOT_SHADOW_MAP2 = 0x1E,
  CMDBUF_SPOT_SHADOW_MAP3 = 0x1F,
  CMDBUF_PREPASS = 0x20,
  CMDBUF_COUNT = 0x21,
};

enum GfxDepthRangeType
{
  GFX_DEPTH_RANGE_SCENE = 0x0,
  GFX_DEPTH_RANGE_VIEWMODEL = 0x40000000,
  GFX_DEPTH_RANGE_FULL = 0xFFFFFFFF,
};

enum $70490B9C2D03C47A2B456A777664F1B7
{
  XSURFACE_FLAG_QUANTIZED = 0x1,
  XSURFACE_FLAG_SKINNED = 0x2,
  XSURFACE_FLAG_CONSTANT_COLOR = 0x4,
  XSURFACE_FLAG_DEFORMED = 0x80,
};

enum $8D055B9EFAE287E5E6E51A0D7AD37529
{
  BG_EMBLEM_LOCKED = 0x0,
  BG_EMBLEM_PURCHASED = 0x1,
  BG_EMBLEM_AFFORDABLE = 0x2,
  BG_EMBLEM_CATEGORY_CUSTOM_START = 0x3,
  BG_EMBLEM_CATEGORY_CUSTOM_END = 0xF,
  BG_EMBLEM_CATEGORY_COUNT = 0x10,
};

enum $425CEF552E471A0FE0D6F69D0C07451B
{
  BG_EMBLEM_ICON_TYPE_LOCKED = 0x0,
  BG_EMBLEM_ICON_TYPE_START = 0x1,
  BG_EMBLEM_ICON_TYPE_END = 0xF,
  BG_EMBLEM_ICON_TYPE_COUNT = 0x10,
};

enum $B46B9EF4055E0FADB6861E0254AC0AE8
{
  BG_EMBLEM_BGCATEGORY_LOCKED = 0x0,
  BG_EMBLEM_BGCATEGORY_START = 0x1,
  BG_EMBLEM_BGCATEGORY_END = 0xF,
  BG_EMBLEM_BGCATEGORY_COUNT = 0x10,
};

enum $7815ED3917159DB535FB95A02901CE27
{
  STREAM_SRC_POSITION = 0x0,
  STREAM_SRC_COLOR = 0x1,
  STREAM_SRC_TEXCOORD_0 = 0x2,
  STREAM_SRC_NORMAL = 0x3,
  STREAM_SRC_TANGENT = 0x4,
  STREAM_SRC_TEXCOORD_1 = 0x5,
  STREAM_SRC_OPTIONAL_BEGIN = 0x6,
  STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x5,
  STREAM_SRC_TEXCOORD_2 = 0x6,
  STREAM_SRC_TEXCOORD_3 = 0x7,
  STREAM_SRC_NORMAL_TRANSFORM_0 = 0x8,
  STREAM_SRC_NORMAL_TRANSFORM_1 = 0x9,
  STREAM_SRC_BLEND_WEIGHT = 0xA,
  STREAM_SRC_COUNT = 0xB,
};

enum $8AF32F0C101F1907026B5E5E1FBB2B65
{
  STREAM_DST_POSITION = 0x0,
  STREAM_DST_NORMAL = 0x1,
  STREAM_DST_COLOR_0 = 0x2,
  STREAM_DST_COLOR_1 = 0x3,
  STREAM_DST_DEPTH = 0x4,
  STREAM_DST_TEXCOORD_0 = 0x5,
  STREAM_DST_TEXCOORD_1 = 0x6,
  STREAM_DST_TEXCOORD_2 = 0x7,
  STREAM_DST_TEXCOORD_3 = 0x8,
  STREAM_DST_TEXCOORD_4 = 0x9,
  STREAM_DST_TEXCOORD_5 = 0xA,
  STREAM_DST_TEXCOORD_6 = 0xB,
  STREAM_DST_TEXCOORD_7 = 0xC,
  STREAM_DST_TEXCOORD_8 = 0xD,
  STREAM_DST_TEXCOORD_9 = 0xE,
  STREAM_DST_TEXCOORD_10 = 0xF,
  STREAM_DST_TEXCOORD_11 = 0x10,
  STREAM_DST_TEXCOORD_12 = 0x11,
  STREAM_DST_TEXCOORD_13 = 0x12,
  STREAM_DST_BLENDWEIGHT = 0x13,
  STREAM_DST_COUNT = 0x14,
};

enum demoBookmarkType
{
  DEMO_BOOKMARK_KILL = 0x0,
  DEMO_BOOKMARK_GAME_FIRST = 0x0,
  DEMO_BOOKMARK_EVENT = 0x1,
  DEMO_BOOKMARK_ZM_ROUND_END = 0x2,
  DEMO_BOOKMARK_ZM_PLAYER_DOWNED = 0x3,
  DEMO_BOOKMARK_ZM_PLAYER_REVIVED = 0x4,
  DEMO_BOOKMARK_ZM_PLAYER_BLEDOUT = 0x5,
  DEMO_BOOKMARK_ZM_PLAYER_USE_MAGICBOX = 0x6,
  DEMO_BOOKMARK_SCORE_EVENT = 0x7,
  DEMO_BOOKMARK_MEDAL = 0x8,
  DEMO_BOOKMARK_ROUND_RESULT = 0x9,
  DEMO_BOOKMARK_GAME_RESULT = 0xA,
  DEMO_BOOKMARK_ZM_POWERUP_DROPPED = 0xB,
  DEMO_BOOKMARK_ZM_PLAYER_POWERUP_GRABBED = 0xC,
  DEMO_BOOKMARK_ZM_PLAYER_PERK = 0xD,
  DEMO_BOOKMARK_ZM_POWER = 0xE,
  DEMO_BOOKMARK_ZM_PLAYER_DOOR = 0xF,
  DEMO_BOOKMARK_ZM_PLAYER_BUILDABLE_PLACED = 0x10,
  DEMO_BOOKMARK_ZM_PLAYER_USE_PACKAPUNCH = 0x11,
  DEMO_BOOKMARK_ZM_PLAYER_RAMPAGE = 0x12,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL = 0x13,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_MULTIATTACK = 0x14,
  DEMO_BOOKMARK_ZM_PLAYER_MEAT_STINK = 0x15,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_MAGICBOX = 0x16,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_PACKAPUNCH = 0x17,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL_LONG = 0x18,
  DEMO_BOOKMARK_GAME_LAST = 0x18,
  DEMO_BOOKMARK_BADSPAWN = 0x19,
  DEMO_BOOKMARK_BADSERVERFRAME = 0x1A,
  DEMO_BOOKMARK_BADSERVERBANDWIDTH = 0x1B,
  DEMO_BOOKMARK_LAST = 0x1C,
};

enum $3BEF23875638404CCAAE78E90FF6BEF7
{
  R_LIGHT_OVERRIDE_BLACK = 0x0,
  R_LIGHT_OVERRIDE_NONE = 0x1,
  R_LIGHT_OVERRIDE_INTENSITY_1 = 0x2,
  R_LIGHT_OVERRIDE_INTENSITY_2 = 0x3,
  R_LIGHT_OVERRIDE_INTENSITY_3 = 0x4,
  R_LIGHT_OVERRIDE_INTENSITY_4 = 0x5,
  R_LIGHT_OVERRIDE_INTENSITY_5 = 0x6,
  R_LIGHT_OVERRIDE_INTENSITY_6 = 0x7,
  R_LIGHT_OVERRIDE_INTENSITY_7 = 0x8,
  R_LIGHT_OVERRIDE_INTENSITY_8 = 0x9,
  R_LIGHT_OVERRIDE_INTENSITY_9 = 0xA,
  R_LIGHT_OVERRIDE_INTENSITY_10 = 0xB,
  R_LIGHT_OVERRIDE_INTENSITY_11 = 0xC,
  R_LIGHT_OVERRIDE_INTENSITY_12 = 0xD,
  R_LIGHT_OVERRIDE_INTENSITY_13 = 0xE,
  R_LIGHT_OVERRIDE_INTENSITY_14 = 0xF,
  R_LIGHT_OVERRIDE_INTENSITY_15 = 0x10,
  R_LIGHT_OVERRIDE_INTENSITY_16 = 0x11,
  R_LIGHT_OVERRIDE_INTENSITY_17 = 0x12,
  R_LIGHT_OVERRIDE_INTENSITY_18 = 0x13,
  R_LIGHT_OVERRIDE_INTENSITY_19 = 0x14,
  R_LIGHT_OVERRIDE_INTENSITY_20 = 0x15,
  R_LIGHT_OVERRIDE_INTENSITY_21 = 0x16,
  R_LIGHT_OVERRIDE_INTENSITY_22 = 0x17,
  R_LIGHT_OVERRIDE_INTENSITY_23 = 0x18,
  R_LIGHT_OVERRIDE_INTENSITY_24 = 0x19,
  R_LIGHT_OVERRIDE_INTENSITY_25 = 0x1A,
  R_LIGHT_OVERRIDE_INTENSITY_26 = 0x1B,
  R_LIGHT_OVERRIDE_INTENSITY_27 = 0x1C,
  R_LIGHT_OVERRIDE_INTENSITY_28 = 0x1D,
  R_LIGHT_OVERRIDE_INTENSITY_29 = 0x1E,
  R_LIGHT_OVERRIDE_INTENSITY_30 = 0x1F,
  R_LIGHT_OVERRIDE_INTENSITY_31 = 0x20,
  R_LIGHT_OVERRIDE_COUNT = 0x21,
};

enum $690923AC549569139B51AE176E5200DF
{
  FOG_NONE = 0x0,
  FOG_SERVER = 0x1,
  FOG_CURRENT = 0x2,
  FOG_LAST = 0x3,
  FOG_TARGET = 0x4,
  FOG_WORLDVOLUME = 0x5,
  FOG_COUNT = 0x6,
};

enum MaterialVertexDeclType
{
  VERTDECL_GENERIC = 0x0,
  VERTDECL_PACKED = 0x1,
  VERTDECL_PACKED_LMAP_VC = 0x2,
  VERTDECL_WORLD = 0x3,
  VERTDECL_PACKED_WORLD = 0x4,
  VERTDECL_PACKED_WORLD_T1N0 = 0x5,
  VERTDECL_PACKED_WORLD_T1N1 = 0x6,
  VERTDECL_PACKED_WORLD_T2N0 = 0x7,
  VERTDECL_PACKED_WORLD_T2N1 = 0x8,
  VERTDECL_PACKED_WORLD_T2N2 = 0x9,
  VERTDECL_PACKED_WORLD_T3N0 = 0xA,
  VERTDECL_PACKED_WORLD_T3N1 = 0xB,
  VERTDECL_PACKED_WORLD_T3N2 = 0xC,
  VERTDECL_PACKED_WORLD_T4N0 = 0xD,
  VERTDECL_PACKED_WORLD_T4N1 = 0xE,
  VERTDECL_PACKED_WORLD_T4N2 = 0xF,
  VERTDECL_POS_TEX = 0x10,
  VERTDECL_PARTICLECLOUD = 0x11,
  VERTDECL_POS_COLOR = 0x12,
  VERTDECL_POS_FP16TEX = 0x13,
  VERTDECL_COUNT = 0x14,
};

enum MaterialTextureSource
{
  TEXTURE_SRC_CODE_BLACK = 0x0,
  TEXTURE_SRC_CODE_WHITE = 0x1,
  TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2,
  TEXTURE_SRC_CODE_MODEL_LIGHTING = 0x3,
  TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4,
  TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5,
  TEXTURE_SRC_CODE_SHADOWMAP_SUN = 0x6,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 0x7,
  TEXTURE_SRC_CODE_FEEDBACK = 0x8,
  TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0x9,
  TEXTURE_SRC_CODE_RESOLVED_SCENE = 0xA,
  TEXTURE_SRC_CODE_POST_EFFECT_SRC = 0xB,
  TEXTURE_SRC_CODE_POST_EFFECT_GODRAYS = 0xC,
  TEXTURE_SRC_CODE_POST_EFFECT_0 = 0xD,
  TEXTURE_SRC_CODE_POST_EFFECT_1 = 0xE,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0xF,
  TEXTURE_SRC_CODE_DLIGHT_ATTENUATION = 0x10,
  TEXTURE_SRC_CODE_OUTDOOR = 0x11,
  TEXTURE_SRC_CODE_FLOATZ = 0x12,
  TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x13,
  TEXTURE_SRC_CODE_RAW_FLOATZ = 0x14,
  TEXTURE_SRC_CODE_STENCIL = 0x15,
  TEXTURE_SRC_CODE_CINEMATIC_Y = 0x16,
  TEXTURE_SRC_CODE_CINEMATIC_CR = 0x17,
  TEXTURE_SRC_CODE_CINEMATIC_CB = 0x18,
  TEXTURE_SRC_CODE_CINEMATIC_A = 0x19,
  TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x1A,
  TEXTURE_SRC_CODE_FEATHER_FLOAT_Z = 0x1B,
  TEXTURE_SRC_CODE_TEXTURE_0 = 0x1C,
  TEXTURE_SRC_CODE_TEXTURE_1 = 0x1D,
  TEXTURE_SRC_CODE_TEXTURE_2 = 0x1E,
  TEXTURE_SRC_CODE_TEXTURE_3 = 0x1F,
  TEXTURE_SRC_CODE_IMPACT_MASK_DEPRECATED = 0x20,
  TEXTURE_SRC_CODE_UI3D = 0x21,
  TEXTURE_SRC_CODE_MISSILE_CAM = 0x22,
  TEXTURE_SRC_CODE_MISSILE_CAM_0 = 0x23,
  TEXTURE_SRC_CODE_MISSILE_CAM_1 = 0x24,
  TEXTURE_SRC_CODE_MISSILE_CAM_2 = 0x25,
  TEXTURE_SRC_CODE_MISSILE_CAM_3 = 0x26,
  TEXTURE_SRC_CODE_COMPOSITE_RESULT = 0x27,
  TEXTURE_SRC_CODE_HEATMAP = 0x28,
  TEXTURE_SRC_CODE_SONAR_COLOR = 0x29,
  TEXTURE_SRC_CODE_SONAR_DEPTH = 0x2A,
  TEXTURE_SRC_CODE_QRCODE_0 = 0x2B,
  TEXTURE_SRC_CODE_QRCODE_1 = 0x2C,
  TEXTURE_SRC_CODE_QRCODE_2 = 0x2D,
  TEXTURE_SRC_CODE_QRCODE_3 = 0x2E,
  TEXTURE_SRC_CODE_QRCODE_4 = 0x2F,
  TEXTURE_SRC_CODE_QRCODE_5 = 0x30,
  TEXTURE_SRC_CODE_QRCODE_6 = 0x31,
  TEXTURE_SRC_CODE_QRCODE_7 = 0x32,
  TEXTURE_SRC_CODE_QRCODE_8 = 0x33,
  TEXTURE_SRC_CODE_QRCODE_9 = 0x34,
  TEXTURE_SRC_CODE_QRCODE_10 = 0x35,
  TEXTURE_SRC_CODE_QRCODE_11 = 0x36,
  TEXTURE_SRC_CODE_COUNT = 0x37,
};

enum $74254F2FBB58A9D84A85080F50CF363D
{
  MTL_ARG_MATERIAL_VERTEX_CONST = 0x0,
  MTL_ARG_LITERAL_VERTEX_CONST = 0x1,
  MTL_ARG_MATERIAL_PIXEL_SAMPLER = 0x2,
  MTL_ARG_CODE_PRIM_BEGIN = 0x3,
  MTL_ARG_CODE_VERTEX_CONST = 0x3,
  MTL_ARG_CODE_PIXEL_SAMPLER = 0x4,
  MTL_ARG_CODE_PIXEL_CONST = 0x5,
  MTL_ARG_CODE_PRIM_END = 0x6,
  MTL_ARG_MATERIAL_PIXEL_CONST = 0x6,
  MTL_ARG_LITERAL_PIXEL_CONST = 0x7,
  MLT_ARG_COUNT = 0x8,
};

enum $A1218AF7D1C12B1D50BD9B9B70D78FD4
{
  SCENE_VIEW_CAMERA = 0x0,
  SCENE_VIEW_SUNSHADOW_0 = 0x1,
  SCENE_VIEW_SUNSHADOW_1 = 0x2,
  SCENE_VIEW_COUNT = 0x3,
  SCENE_VIEW_SPOTSHADOW_0 = 0x3,
  SCENE_VIEW_SPOTSHADOW_1 = 0x4,
  SCENE_VIEW_SPOTSHADOW_2 = 0x5,
  SCENE_VIEW_SPOTSHADOW_3 = 0x6,
  SCENE_VIEW_COUNT_ENTVIS = 0x7,
};

enum MaterialUpdateFrequency
{
  MTL_UPDATE_PER_PRIM = 0x0,
  MTL_UPDATE_PER_OBJECT = 0x1,
  MTL_UPDATE_RARELY = 0x2,
  MTL_UPDATE_CUSTOM = 0x3,
  MTL_UPDATE_IGNORE = 0x4,
};

enum $468271FF1901306E39AF422E484DED00
{
  STATE_FLAG_CULL_BACK = 0x1,
  STATE_FLAG_CULL_FRONT = 0x2,
  STATE_FLAG_DECAL = 0x4,
  STATE_FLAG_WRITES_DEPTH = 0x8,
  STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
  STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
  STATE_FLAG_CULL_BACK_SHADOW = 0x40,
  STATE_FLAG_CULL_FRONT_SHADOW = 0x80,
};

enum GfxRenderCommand
{
  RC_END_OF_LIST = 0x0,
  RC_SET_CUSTOM_CONSTANT = 0x1,
  RC_SET_MATERIAL_COLOR = 0x2,
  RC_SAVE_SCREEN = 0x3,
  RC_SAVE_SCREEN_SECTION = 0x4,
  RC_CLEAR_SCREEN = 0x5,
  RC_BEGIN_VIEW = 0x6,
  RC_SET_VIEWPORT = 0x7,
  RC_SET_SCISSOR = 0x8,
  RC_RESOLVE_COMPOSITE = 0x9,
  RC_PC_COPY_IMAGE_GEN_MIP = 0xA,
  RC_FIRST_NONCRITICAL = 0xB,
  RC_STRETCH_PIC = 0xB,
  RC_STRETCH_PIC_FLIP_ST = 0xC,
  RC_STRETCH_PIC_ROTATE_XY = 0xD,
  RC_STRETCH_PIC_ROTATE_ST = 0xE,
  RC_DRAW_QUAD_PIC = 0xF,
  RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0x10,
  RC_DRAW_TEXT_2D = 0x11,
  RC_DRAW_TEXT_3D = 0x12,
  RC_BLEND_SAVED_SCREEN_BLURRED = 0x13,
  RC_BLEND_SAVED_SCREEN_FLASHED = 0x14,
  RC_DRAW_POINTS = 0x15,
  RC_DRAW_LINES = 0x16,
  RC_DRAW_UI_QUADS = 0x17,
  RC_DRAW_UI_QUADS_REPLACE_IMAGE = 0x18,
  RC_DRAW_TRIANGLES = 0x19,
  RC_DRAW_UI_TRIANGLES = 0x1A,
  RC_DRAW_QUADLIST_2D = 0x1B,
  RC_DRAW_EMBLEM_LAYER = 0x1C,
  RC_STRETCH_COMPOSITE = 0x1D,
  RC_PROJECTION_SET = 0x1E,
  RC_DRAW_FRAMED = 0x1F,
  RC_CONSTANT_SET = 0x20,
  RC_COUNT = 0x21,
};

enum $41AF3D1394E74FF699FCDEDEE63CD457
{
  R_ZEBRASTRIPE_LEVEL_0 = 0x0,
  R_ZEBRASTRIPE_LEVEL_1 = 0x1,
  R_ZEBRASTRIPE_LEVEL_2 = 0x2,
  R_ZEBRASTRIPE_LEVEL_3 = 0x3,
  R_ZEBRASTRIPE_COUNT = 0x3,
};

enum $A09EB535386D38D8EE5EB04E1D0C05F8
{
  R_RENDERTARGET_NULL = 0x0,
  R_RENDERTARGET_SAVED_SCREEN = 0x1,
  R_RENDERTARGET_FRAME_BUFFER = 0x2,
  R_RENDERTARGET_FRAME_BUFFER_COMPOSITE = 0x3,
  R_RENDERTARGET_SCENE = 0x4,
  R_RENDERTARGET_SCENE_NULLCOLOR = 0x5,
  R_RENDERTARGET_RESOLVED_POST_SUN = 0x6,
  R_RENDERTARGET_RESOLVED_SCENE = 0x7,
  R_RENDERTARGET_FLOAT_Z = 0x8,
  R_RENDERTARGET_PINGPONG_0 = 0x9,
  R_RENDERTARGET_PINGPONG_1 = 0xA,
  R_RENDERTARGET_POST_EFFECT_SRC = 0xB,
  R_RENDERTARGET_POST_EFFECT_GODRAYS = 0xC,
  R_RENDERTARGET_POST_EFFECT_0 = 0xD,
  R_RENDERTARGET_POST_EFFECT_1 = 0xE,
  R_RENDERTARGET_SHADOWMAP_SUN = 0xF,
  R_RENDERTARGET_SHADOWMAP_SPOT = 0x10,
  R_RENDERTARGET_UI3D = 0x11,
  R_RENDERTARGET_UI3D_PING_PONG = 0x12,
  R_RENDERTARGET_MISSILE_CAM = 0x13,
  R_RENDERTARGET_FLOAT_Z_MISSILE_CAM = 0x14,
  R_RENDERTARGET_MISSILE_CAM_MULTI_0 = 0x15,
  R_RENDERTARGET_MISSILE_CAM_MULTI_1 = 0x16,
  R_RENDERTARGET_MISSILE_CAM_MULTI_2 = 0x17,
  R_RENDERTARGET_MISSILE_CAM_MULTI_3 = 0x18,
  R_RENDERTARGET_COMPOSITE = 0x19,
  R_RENDERTARGET_DOF_SCENE_MASK_PING = 0x1A,
  R_RENDERTARGET_DOF_SCENE_MASK_PONG = 0x1B,
  R_RENDERTARGET_DOF_SCENE_FP16 = 0x1C,
  R_RENDERTARGET_DOF_SCENE_FP16_0 = 0x1D,
  R_RENDERTARGET_DOF_SCENE_FP16_1 = 0x1E,
  R_RENDERTARGET_DOF_SCENE_FP16_2 = 0x1F,
  R_RENDERTARGET_DOF_SCENE_FP16_3 = 0x20,
  R_RENDERTARGET_DOF_SCENE_FP16_4 = 0x21,
  R_RENDERTARGET_DOF_SCENE_FP16_5 = 0x22,
  R_RENDERTARGET_DOF_SCENE_FINAL = 0x23,
  R_RENDERTARGET_BLOOM_MIP1_PING = 0x24,
  R_RENDERTARGET_BLOOM_MIP1_PONG = 0x25,
  R_RENDERTARGET_BLOOM_MIP2_PING = 0x26,
  R_RENDERTARGET_BLOOM_MIP2_PONG = 0x27,
  R_RENDERTARGET_BLOOM_MIP3_PING = 0x28,
  R_RENDERTARGET_BLOOM_MIP3_PONG = 0x29,
  R_RENDERTARGET_BLOOM_MIP4_PING = 0x2A,
  R_RENDERTARGET_BLOOM_MIP4_PONG = 0x2B,
  R_RENDERTARGET_BLOOM_STREAK = 0x2C,
  R_RENDERTARGET_LUT2D = 0x2D,
  R_RENDERTARGET_SSAO_CSZ = 0x2E,
  R_RENDERTARGET_SSAO_CSZ_0 = 0x2F,
  R_RENDERTARGET_SSAO_CSZ_1 = 0x30,
  R_RENDERTARGET_SSAO_CSZ_2 = 0x31,
  R_RENDERTARGET_SSAO_CSZ_3 = 0x32,
  R_RENDERTARGET_SSAO_CSZ_4 = 0x33,
  R_RENDERTARGET_SSAO_CSZ_5 = 0x34,
  R_RENDERTARGET_SSAO_1 = 0x35,
  R_RENDERTARGET_SSAO_2 = 0x36,
  R_RENDERTARGET_TXAA_FEEDBACK = 0x37,
  R_RENDERTARGET_TXAA_SRGB = 0x38,
  R_RENDERTARGET_SONAR = 0x39,
  R_RENDERTARGET_SONAR_BLUR = 0x3A,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_FULL = 0x3B,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_0 = 0x3C,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_1 = 0x3D,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_FULL = 0x3E,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_0 = 0x3F,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_1 = 0x40,
  R_RENDERTARGET_SHADOWMAP_SPOT_FULL = 0x41,
  R_RENDERTARGET_SHADOWMAP_SPOT_0 = 0x42,
  R_RENDERTARGET_SHADOWMAP_SPOT_1 = 0x43,
  R_RENDERTARGET_SHADOWMAP_SPOT_2 = 0x44,
  R_RENDERTARGET_SHADOWMAP_SPOT_3 = 0x45,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_0 = 0x46,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_1 = 0x47,
  R_RENDERTARGET_COUNT = 0x48,
  R_RENDERTARGET_NONE = 0x0,
};

enum $0468F36296269ABAB66D78EF23182A27
{
  IMG_CATEGORY_UNKNOWN = 0x0,
  IMG_CATEGORY_AUTO_GENERATED = 0x1,
  IMG_CATEGORY_LIGHTMAP = 0x2,
  IMG_CATEGORY_LOAD_FROM_FILE = 0x3,
  IMG_CATEGORY_RAW = 0x4,
  IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
  IMG_CATEGORY_RENDERTARGET = 0x5,
  IMG_CATEGORY_TEMP = 0x6,
};

enum $92364187413C9A0320C404614F91083D
{
  PICMIP_PLATFORM_USED = 0x0,
  PICMIP_PLATFORM_MINSPEC = 0x1,
  PICMIP_PLATFORM_COUNT = 0x2,
};

enum $CAB481EC3AFB148B2BDA2D1B5BE6EBFE
{
  TEXTURE_FILTER_DISABLED = 0x0,
  TEXTURE_FILTER_NEAREST = 0x1,
  TEXTURE_FILTER_LINEAR = 0x2,
  TEXTURE_FILTER_ANISO2X = 0x3,
  TEXTURE_FILTER_ANISO4X = 0x4,
  TEXTURE_FILTER_COMPARE = 0x5,
};

enum $50BC598EE99A9BE5B9B858F56E3864BB
{
  SAMPLER_FILTER_SHIFT = 0x0,
  SAMPLER_FILTER_NEAREST = 0x1,
  SAMPLER_FILTER_LINEAR = 0x2,
  SAMPLER_FILTER_ANISO2X = 0x3,
  SAMPLER_FILTER_ANISO4X = 0x4,
  SAMPLER_FILTER_COMPARE = 0x5,
  SAMPLER_FILTER_MASK = 0x7,
  SAMPLER_MIPMAP_SHIFT = 0x3,
  SAMPLER_MIPMAP_DISABLED = 0x0,
  SAMPLER_MIPMAP_NEAREST = 0x8,
  SAMPLER_MIPMAP_LINEAR = 0x10,
  SAMPLER_MIPMAP_COUNT = 0x3,
  SAMPLER_MIPMAP_MASK = 0x18,
  SAMPLER_CLAMP_U_SHIFT = 0x5,
  SAMPLER_CLAMP_V_SHIFT = 0x6,
  SAMPLER_CLAMP_W_SHIFT = 0x7,
  SAMPLER_CLAMP_U = 0x20,
  SAMPLER_CLAMP_V = 0x40,
  SAMPLER_CLAMP_W = 0x80,
  SAMPLER_CLAMP_MASK = 0xE0,
  SAMPLER_ANISO_SHIFT = 0x8,
  SAMPLER_ANISO_1X = 0x0,
  SAMPLER_ANISO_2X = 0x100,
  SAMPLER_ANISO_4X = 0x200,
  SAMPLER_ANISO_6X = 0x300,
  SAMPLER_ANISO_8X = 0x400,
  SAMPLER_ANISO_10X = 0x500,
  SAMPLER_ANISO_12X = 0x600,
  SAMPLER_ANISO_16X = 0x700,
  SAMPLER_ANISO_MASK = 0x700,
  SAMPLER_CONVOLUTION = 0x20000,
  SAMPLER_GAMMA = 0x40000,
  SAMPLER_UNNORMALIZED_UV = 0x80000,
  SAMPLER_DIRECT_FILTER_UNNORMALIZED = 0x80000,
};

enum GfxBlend
{
  GFXS_BLEND_DISABLED = 0x0,
  GFXS_BLEND_ZERO = 0x1,
  GFXS_BLEND_ONE = 0x2,
  GFXS_BLEND_SRCCOLOR = 0x3,
  GFXS_BLEND_INVSRCCOLOR = 0x4,
  GFXS_BLEND_SRCALPHA = 0x5,
  GFXS_BLEND_INVSRCALPHA = 0x6,
  GFXS_BLEND_DESTALPHA = 0x7,
  GFXS_BLEND_INVDESTALPHA = 0x8,
  GFXS_BLEND_DESTCOLOR = 0x9,
  GFXS_BLEND_INVDESTCOLOR = 0xA,
  GFXS_BLEND_MASK = 0xF,
};

enum GfxBlendOp
{
  GFXS_BLENDOP_DISABLED = 0x0,
  GFXS_BLENDOP_ADD = 0x1,
  GFXS_BLENDOP_SUBTRACT = 0x2,
  GFXS_BLENDOP_REVSUBTRACT = 0x3,
  GFXS_BLENDOP_MIN = 0x4,
  GFXS_BLENDOP_MAX = 0x5,
  GFXS_BLENDOP_MASK = 0x7,
};

enum $829C091CCF1785609053704247C0DEC5
{
  GFXS0_SRCBLEND_RGB_SHIFT = 0x0,
  GFXS0_SRCBLEND_RGB_MASK = 0xF,
  GFXS0_DSTBLEND_RGB_SHIFT = 0x4,
  GFXS0_DSTBLEND_RGB_MASK = 0xF0,
  GFXS0_BLENDOP_RGB_SHIFT = 0x8,
  GFXS0_BLENDOP_RGB_MASK = 0x700,
  GFXS0_BLEND_RGB_MASK = 0x7FF,
  GFXS0_ATEST_SHIFT = 0xB,
  GFXS0_ATEST_DISABLE = 0x800,
  GFXS0_ATEST_GT_0 = 0x0,
  GFXS0_ATEST_GE_128 = 0x1000,
  GFXS0_ATEST_MASK = 0x1000,
  GFXS0_CULL_SHIFT = 0xE,
  GFXS0_CULL_NONE = 0x4000,
  GFXS0_CULL_BACK = 0x8000,
  GFXS0_CULL_FRONT = 0xC000,
  GFXS0_CULL_MASK = 0xC000,
  GFXS0_SRCBLEND_ALPHA_SHIFT = 0x10,
  GFXS0_SRCBLEND_ALPHA_MASK = 0xF0000,
  GFXS0_DSTBLEND_ALPHA_SHIFT = 0x14,
  GFXS0_DSTBLEND_ALPHA_MASK = 0xF00000,
  GFXS0_BLENDOP_ALPHA_SHIFT = 0x18,
  GFXS0_BLENDOP_ALPHA_MASK = 0x7000000,
  GFXS0_BLEND_ALPHA_MASK = 0x7FF0000,
  GFXS0_COLORWRITE_RGB = 0x8000000,
  GFXS0_COLORWRITE_ALPHA = 0x10000000,
  GFXS0_COLORWRITE_MASK = 0x18000000,
  GFXS0_POLYMODE_LINE = 0x80000000,
  GFXS1_DEPTHWRITE = 0x1,
  GFXS1_DEPTHTEST_DISABLE = 0x2,
  GFXS1_DEPTHTEST_SHIFT = 0x2,
  GFXS1_DEPTHTEST_ALWAYS = 0x0,
  GFXS1_DEPTHTEST_LESS = 0x4,
  GFXS1_DEPTHTEST_EQUAL = 0x8,
  GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
  GFXS1_DEPTHTEST_MASK = 0xC,
  GFXS1_DEPTHFUNC_MASK = 0xF,
  GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
  GFXS1_POLYGON_OFFSET_0 = 0x0,
  GFXS1_POLYGON_OFFSET_1 = 0x10,
  GFXS1_POLYGON_OFFSET_2 = 0x20,
  GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
  GFXS1_POLYGON_OFFSET_MASK = 0x30,
  GFXS1_STENCIL_FRONT_ENABLE = 0x40,
  GFXS1_STENCIL_BACK_ENABLE = 0x80,
  GFXS1_STENCIL_MASK = 0xC0,
  GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
  GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
  GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
  GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
  GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
  GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
  GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
  GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
  GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
  GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
  GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
  GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
};

enum GfxTextureOp
{
  GFXS_TEXOP_DISABLE = 0x0,
  GFXS_TEXOP_SELECTARG1 = 0x1,
  GFXS_TEXOP_SELECTARG2 = 0x2,
  GFXS_TEXOP_MODULATE = 0x3,
  GFXS_TEXOP_MODULATE2X = 0x4,
  GFXS_TEXOP_MODULATE4X = 0x5,
  GFXS_TEXOP_ADD = 0x6,
  GFXS_TEXOP_ADDSIGNED = 0x7,
  GFXS_TEXOP_ADDSIGNED2X = 0x8,
  GFXS_TEXOP_SUBTRACT = 0x9,
  GFXS_TEXOP_ADDSMOOTH = 0xA,
  GFXS_TEXOP_BLENDDIFFUSEALPHA = 0xB,
  GFXS_TEXOP_BLENDTEXTUREALPHA = 0xC,
  GFXS_TEXOP_BLENDFACTORALPHA = 0xD,
  GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
  GFXS_TEXOP_BLENDCURRENTALPHA = 0xF,
  GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
  GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
  GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
  GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
  GFXS_TEXOP_DOTPRODUCT3 = 0x14,
  GFXS_TEXOP_MULTIPLYADD = 0x15,
  GFXS_TEXOP_LERP = 0x16,
  GFXS_TEXOP_COUNT = 0x17,
  GFXS_TEXOP_BITS = 0x5,
  GFXS_TEXOP_MASK = 0x1F,
};

enum GfxTextureArg
{
  GFXS_TEXARG_CONSTANT = 0x0,
  GFXS_TEXARG_CURRENT = 0x1,
  GFXS_TEXARG_COLOR_0 = 0x2,
  GFXS_TEXARG_COLOR_1 = 0x3,
  GFXS_TEXARG_TEMP = 0x4,
  GFXS_TEXARG_TEXTURE = 0x5,
  GFXS_TEXARG_TFACTOR = 0x6,
  GFXS_TEXARG_COUNT = 0x7,
  GFXS_TEXARG_BASE_BITS = 0x3,
  GFXS_TEXARG_BASE_MASK = 0x7,
  GFXS_TEXARG_COMPLEMENT = 0x8,
  GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
  GFXS_TEXARG_BITS = 0x5,
  GFXS_TEXARG_MASK = 0x1F,
};

enum GfxTextureFunc
{
  GFXS_TEXFUNC_OP_SHIFT = 0x0,
  GFXS_TEXFUNC_DEST_SHIFT = 0x5,
  GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
  GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
  GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
};

enum surfaceType_t
{
  SF_TRIANGLES = 0x0,
  SF_TRIANGLES_NO_SUN_SHADOW = 0x1,
  SF_BEGIN_STATICMODEL = 0x2,
  SF_STATICMODEL_RIGID_NO_SUN_SHADOW = 0x2,
  SF_STATICMODEL_RIGID = 0x3,
  SF_STATICMODEL_SKINNED = 0x4,
  SF_END_STATICMODEL = 0x5,
  SF_BMODEL = 0x5,
  SF_BEGIN_XMODEL = 0x6,
  SF_XMODEL_RIGID = 0x6,
  SF_XMODEL_RIGID_NO_SUN_SHADOW = 0x7,
  SF_XMODEL_RIGID_SKINNED = 0x8,
  SF_XMODEL_SKINNED = 0x9,
  SF_XMODEL_SKINNED_NO_SUN_SHADOW = 0xA,
  SF_END_XMODEL = 0xB,
  SF_BEGIN_FX = 0xB,
  SF_CODE_MESH = 0xB,
  SF_MARK_MESH = 0xC,
  SF_PARTICLE_CLOUD = 0xD,
  SF_ROPE_MESH = 0xE,
  SF_GLASS_MESH = 0xF,
  SF_END_FX = 0x10,
  SF_NUM_SURFACE_TYPES = 0x10,
  SF_FORCE_32_BITS = 0xFFFFFFFF,
};

enum LocalTaskState
{
  LOCAL_TASK_STATE_INPROGRESS = 0x0,
  LOCAL_TASK_STATE_COMPLETED = 0x1,
  LOCAL_TASK_STATE_FAILED = 0x2,
};

enum VehicleTypes
{
  VEH_WHEELS_4 = 0x0,
  VEH_MOTORCYCLE = 0x1,
  VEH_TANK = 0x2,
  VEH_PLANE = 0x3,
  VEH_BOAT = 0x4,
  VEH_ARTILLERY = 0x5,
  VEH_HELICOPTER = 0x6,
  NUM_VEHICLE_TYPES = 0x7,
};

enum GfxStencilOp
{
  GFXS_STENCILOP_KEEP = 0x0,
  GFXS_STENCILOP_ZERO = 0x1,
  GFXS_STENCILOP_REPLACE = 0x2,
  GFXS_STENCILOP_INCRSAT = 0x3,
  GFXS_STENCILOP_DECRSAT = 0x4,
  GFXS_STENCILOP_INVERT = 0x5,
  GFXS_STENCILOP_INCR = 0x6,
  GFXS_STENCILOP_DECR = 0x7,
  GFXS_STENCILOP_COUNT = 0x8,
};

enum TaskState
{
  TASK_STATE_INVALID = 0x0,
  TASK_STATE_INIT = 0x1,
  TASK_STATE_INPROGRESS = 0x2,
  TASK_STATE_INCALLBACK = 0x3,
  TASK_STATE_CHILDCOMPLETE = 0x4,
  TASK_STATE_CHILDFAILED = 0x5,
  TASK_STATE_COMPLETED = 0x6,
  TASK_STATE_FAILED = 0x7,
  TASK_STATE_CANCELLED = 0x8,
};

enum TaskGroup
{
  TASK_GROUP_UNKNOWN = 0x0,
  TASK_GROUP_XSESSION = 0x1,
};

enum MaterialStateSet
{
  MTL_STATE_SET_ALPHA_TEST = 0x0,
  MTL_STATE_SET_BLEND_FUNC_RGB = 0x1,
  MTL_STATE_SET_BLEND_FUNC_ALPHA = 0x2,
  MTL_STATE_SET_CULL_FACE = 0x3,
  MTL_STATE_SET_DEPTH_TEST = 0x4,
  MTL_STATE_SET_DEPTH_WRITE = 0x5,
  MTL_STATE_SET_COLOR_WRITE = 0x6,
  MTL_STATE_SET_POLYGON_OFFSET = 0x7,
  MTL_STATE_SET_STENCIL = 0x8,
  MTL_STATE_SET_WIREFRAME = 0x9,
  MTL_STATE_SET_COUNT = 0xA,
};

enum WheelEffectState
{
  WHEEL_STATE_ROLLING = 0x0,
  WHEEL_STATE_AIRBORN = 0x1,
  WHEEL_STATE_SKIDDING = 0x2,
  WHEEL_STATE_MAX = 0x3,
};

enum GfxViewMode
{
  VIEW_MODE_NONE = 0x0,
  VIEW_MODE_3D = 0x1,
  VIEW_MODE_2D = 0x2,
  VIEW_MODE_IDENTITY = 0x3,
};

enum GfxStencilFunc
{
  GFXS_STENCILFUNC_NEVER = 0x0,
  GFXS_STENCILFUNC_LESS = 0x1,
  GFXS_STENCILFUNC_EQUAL = 0x2,
  GFXS_STENCILFUNC_LESSEQUAL = 0x3,
  GFXS_STENCILFUNC_GREATER = 0x4,
  GFXS_STENCILFUNC_NOTEQUAL = 0x5,
  GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
  GFXS_STENCILFUNC_ALWAYS = 0x7,
  GFXS_STENCILFUNC_COUNT = 0x8,
};

enum ShadowType
{
  SHADOW_NONE = 0x0,
  SHADOW_MAP = 0x1,
};

enum OcclusionReportsMode
{
  OCCLUSION_REPORTS_DISABLED = 0x0,
  OCCLUSION_REPORTS_RECORDING = 0x1,
  OCCLUSION_REPORTS_TESTING = 0x2,
};

enum $5EF81C4E1728F1617A61B398B5BCDD3D
{
  PM_WATER_LEVEL_NONE = 0x0,
  PM_WATER_LEVEL_SHALLOW = 0x1,
  PM_WATER_LEVEL_WAIST = 0x2,
  PM_WATER_LEVEL_CHEST = 0x3,
  PM_WATER_LEVEL_SWIM = 0x4,
  PM_WATER_LEVEL_DEEP = 0x5,
  PM_WATER_LEVEL_UNDER_WATER = 0x6,
  PM_WATER_LEVEL_COUNT = 0x7,
};

enum bobType_t
{
  HBOB = 0x0,
  VBOB = 0x1,
};

enum hitLocation_t
{
  HITLOC_NONE = 0x0,
  HITLOC_HELMET = 0x1,
  HITLOC_HEAD = 0x2,
  HITLOC_NECK = 0x3,
  HITLOC_TORSO_UPR = 0x4,
  HITLOC_TORSO_MID = 0x5,
  HITLOC_TORSO_LWR = 0x6,
  HITLOC_R_ARM_UPR = 0x7,
  HITLOC_L_ARM_UPR = 0x8,
  HITLOC_R_ARM_LWR = 0x9,
  HITLOC_L_ARM_LWR = 0xA,
  HITLOC_R_HAND = 0xB,
  HITLOC_L_HAND = 0xC,
  HITLOC_R_LEG_UPR = 0xD,
  HITLOC_L_LEG_UPR = 0xE,
  HITLOC_R_LEG_LWR = 0xF,
  HITLOC_L_LEG_LWR = 0x10,
  HITLOC_R_FOOT = 0x11,
  HITLOC_L_FOOT = 0x12,
  HITLOC_GUN = 0x13,
  HITLOC_SHIELD = 0x14,
  HITLOC_NUM = 0x15,
};

enum eWeaponComponentType
{
  WEAPON_COMPONENT_UNKNOWN = 0x0,
  WEAPON_COMPONENT_ATTACHMENT = 0x1,
  WEAPON_COMPONENT_BASE = 0x2,
};

enum eAttachmentOverrideSounds
{
  ATTACHMENT_OVERRIDE_SOUND_FIRE = 0x0,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_PLAYER = 0x1,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP = 0x2,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_PLAYER = 0x3,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END = 0x4,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END_PLAYER = 0x5,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START = 0x6,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP = 0x7,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START_PLAYER = 0x8,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP_PLAYER = 0x9,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST = 0xA,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST_PLAYER = 0xB,
  NUM_ATTACHMENT_OVERRIDE_SOUNDS = 0xC,
};

enum eAttachmentOverrideEffects
{
  ATTACHMENT_OVERRIDE_EFFECT_VIEW_FLASH = 0x0,
  ATTACHMENT_OVERRIDE_EFFECT_WORLD_FLASH = 0x1,
  NUM_ATTACHMENT_OVERRIDE_EFFECTS = 0x2,
};

enum fsMode_t
{
  FS_READ = 0x0,
  FS_WRITE = 0x1,
  FS_APPEND = 0x2,
  FS_APPEND_SYNC = 0x3,
};

enum WeaponCamoMaterialFlags
{
  WCM_REPLACE_COLOR = 0x1,
  WCM_REPLACE_NORMAL = 0x2,
  WCM_REPLACE_SPECULAR = 0x4,
};

enum $22C9215173DED7361D2E6319B53F5E79
{
  MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x14,
};

enum $163B9C0612FD4ACE1362B609A50B207A
{
  MT_TYPE_EMPTY = 0x0,
  MT_TYPE_THREAD = 0x1,
  MT_TYPE_VECTOR = 0x2,
  MT_TYPE_ANIM_NOTETRACK = 0x3,
  MT_TYPE_ANIM_TREE = 0x4,
  MT_TYPE_SMALL_ANIM_TREE = 0x5,
  MT_TYPE_EXTERNAL = 0x6,
  MT_TYPE_TEMP = 0x7,
  MT_TYPE_SURFACE = 0x8,
  MT_TYPE_ANIM_PART = 0x9,
  MT_TYPE_MODEL_PART = 0xA,
  MT_TYPE_MODEL_PART_MAP = 0xB,
  MT_TYPE_MODEL_DUPLICATE_PARTS = 0xC,
  MT_TYPE_MODEL_LIST = 0xD,
  MT_TYPE_SCRIPT_PARSE = 0xE,
  MT_TYPE_SCRIPT_STRING = 0xF,
  MT_TYPE_CLASS = 0x10,
  MT_TYPE_TAG_INFO = 0x11,
  MT_TYPE_ANIMSCRIPTED = 0x12,
  MT_TYPE_CONFIG_STRING = 0x13,
  MT_TYPE_DEBUGGER_STRING = 0x14,
  MT_TYPE_VEHICLE = 0x15,
  MT_TYPE_GENERIC = 0x16,
  MT_TYPE_COUNT = 0x17,
};

enum weapFieldType_t
{
  WFT_WEAPONTYPE = 0x12,
  WFT_WEAPONCLASS = 0x13,
  WFT_OVERLAYRETICLE = 0x14,
  WFT_PENETRATE_TYPE = 0x15,
  WFT_IMPACT_TYPE = 0x16,
  WFT_STANCE = 0x17,
  WFT_PROJ_EXPLOSION = 0x18,
  WFT_OFFHAND_CLASS = 0x19,
  WFT_OFFHAND_SLOT = 0x1A,
  WFT_ANIMTYPE = 0x1B,
  WFT_ACTIVE_RETICLE_TYPE = 0x1C,
  WFT_GUIDED_MISSILE_TYPE = 0x1D,
  WFT_BOUNCE_SOUND = 0x1E,
  WFT_STICKINESS = 0x1F,
  WFT_ROTATETYPE = 0x20,
  WFT_OVERLAYINTERFACE = 0x21,
  WFT_INVENTORYTYPE = 0x22,
  WFT_FIRETYPE = 0x23,
  WFT_CLIPTYPE = 0x24,
  WFT_AMMOCOUNTER_CLIPTYPE = 0x25,
  WFT_ICONRATIO_HUD = 0x26,
  WFT_ICONRATIO_AMMOCOUNTER = 0x27,
  WFT_ICONRATIO_KILL = 0x28,
  WFT_ICONRATIO_DPAD = 0x29,
  WFT_ICONRATIO_INDICATOR = 0x2A,
  WFT_BARRELTYPE = 0x2B,
  WFT_HIDETAGS = 0x2C,
  WFT_EXPLOSION_TAG = 0x2D,
  WFT_NOTETRACKSOUNDMAP = 0x2E,
  WFT_WEAPON_CAMO = 0x2F,
  WFT_NUM_FIELD_TYPES = 0x30,
};

enum weaponAltModel_t
{
  WEAP_ALT_MODEL0 = 0x0,
  WEAP_ALT_MODEL1 = 0x1,
  WEAP_ALT_MODEL2 = 0x2,
  WEAP_ALT_MODEL3 = 0x3,
  WEAP_ALT_MODEL4 = 0x4,
  WEAP_ALT_MODEL5 = 0x5,
  WEAP_ALT_MODEL6 = 0x6,
  WEAP_ALT_MODEL7 = 0x7,
  WEAP_ALT_MODEL8 = 0x8,
  WEAP_ALT_MODEL9 = 0x9,
  WEAP_ALT_MODEL10 = 0xA,
  WEAP_ALT_MODEL11 = 0xB,
  WEAP_ALT_MODEL12 = 0xC,
  WEAP_ALT_MODEL13 = 0xD,
  WEAP_ALT_MODEL14 = 0xE,
  WEAP_ALT_MODEL15 = 0xF,
  NUM_WEAP_ALTMODELS = 0x10,
};

enum PlayerAnimType
{
  PLAYERANIMTYPE_REVIVEE = 0x0,
  PLAYERANIMTYPE_SNIPER = 0x1,
  PLAYERANIMTYPE_SNIPER_REARCLIP = 0x2,
  PLAYERANIMTYPE_BRIEFCASE = 0x3,
};

enum eAttachmentTableColumns
{
  ATTACHMENTTABLE_NUMBER = 0x0,
  ATTACHMENTTABLE_ATTACH_POINT = 0x1,
  ATTACHMENTTABLE_GROUP = 0x2,
  ATTACHMENTTABLE_NAME = 0x3,
  ATTACHMENTTABLE_REFERENCE = 0x4,
  ATTACHMENTTABLE_COUNT = 0x5,
  ATTACHMENTTABLE_IMAGE = 0x6,
  ATTACHMENTTABLE_DESCRIPTION = 0x7,
  ATTACHMENTTABLE_DATA_STRING = 0x8,
  ATTACHMENTTABLE_DATA_INT = 0x9,
  ATTACHMENTTABLE_DATA_INT2 = 0xA,
  ATTACHMENTTABLE_COMPATIBLE_ATTACHMENTS = 0xB,
  ATTACHMENTTABLE_ALLOCATION_COST = 0xC,
  ATTACHMENTTABLE_UNLOCK_LVL = 0xD,
  ATTACHMENTTABLE_UNLOCK_PLEVEL = 0xE,
  ATTACHMENTTABLE_COST = 0xF,
  ATTACHMENTTABLE_DEFAULT_PRIMARY_CLASS = 0x10,
  ATTACHMENTTABLE_DEFAULT_SECONDARY_CLASS = 0x11,
  ATTACHMENTTABLE_IS_ELITE = 0x12,
  MAX_ATTACHMENTTABLE_COUNT = 0x13,
};

enum pmtype_t
{
  PM_NORMAL = 0x0,
  PM_NORMAL_LINKED = 0x1,
  PM_NOCLIP = 0x2,
  PM_UFO = 0x3,
  PM_MPVIEWER = 0x4,
  PM_SPECTATOR = 0x5,
  PM_INTERMISSION = 0x6,
  PM_LASTSTAND = 0x7,
  PM_REVIVEE = 0x8,
  PM_LASTSTAND_TRANSITION = 0x9,
  PM_DEAD = 0xA,
  PM_DEAD_LINKED = 0xB,
};

enum PlayerSpreadOverrideState
{
  PSOS_DISABLED = 0x0,
  PSOS_RESETTING = 0x1,
  PSOS_ENABLED = 0x2,
};

enum LastInput_t
{
  LAST_INPUT_GAMEPAD = 0x0,
  LAST_INPUT_MOUSEMOVE = 0x1,
  LAST_INPUT_MOUSECLICK = 0x2,
  LAST_INPUT_KEYBOARD = 0x3,
};

enum weapAnimNumber_t
{
  WEAP_IDLE = 0x0,
  WEAP_FORCE_IDLE = 0x1,
  WEAP_ATTACK = 0x2,
  WEAP_ATTACK_LEFT = 0x3,
  WEAP_ATTACK_LASTSHOT = 0x4,
  WEAP_ATTACK_LASTSHOT_LEFT = 0x5,
  WEAP_RECHAMBER = 0x6,
  WEAP_ADS_ATTACK = 0x7,
  WEAP_ADS_ATTACK_LASTSHOT = 0x8,
  WEAP_ADS_RECHAMBER = 0x9,
  WEAP_MELEE_ATTACK = 0xA,
  WEAP_MELEE_ATTACK_EMPTY = 0xB,
  WEAP_MELEE_CHARGE = 0xC,
  WEAP_MELEE_CHARGE_EMPTY = 0xD,
  WEAP_DROP = 0xE,
  WEAP_RAISE = 0xF,
  WEAP_FIRST_RAISE = 0x10,
  WEAP_RELOAD = 0x11,
  WEAP_RELOAD_EMPTY = 0x12,
  WEAP_RELOAD_START = 0x13,
  WEAP_RELOAD_END = 0x14,
  WEAP_RELOAD_QUICK = 0x15,
  WEAP_RELOAD_QUICK_EMPTY = 0x16,
  WEAP_ALTSWITCHFROM = 0x17,
  WEAP_ALTSWITCHTO = 0x18,
  WEAP_QUICK_DROP = 0x19,
  WEAP_QUICK_RAISE = 0x1A,
  WEAP_EMPTY_DROP = 0x1B,
  WEAP_EMPTY_RAISE = 0x1C,
  WEAP_SPRINT_IN = 0x1D,
  WEAP_SPRINT_LOOP = 0x1E,
  WEAP_SPRINT_OUT = 0x1F,
  WEAP_SPRINT_EMPTY_IN = 0x20,
  WEAP_SPRINT_EMPTY_LOOP = 0x21,
  WEAP_SPRINT_EMPTY_OUT = 0x22,
  WEAP_LOWREADY_IN = 0x23,
  WEAP_LOWREADY_LOOP = 0x24,
  WEAP_LOWREADY_OUT = 0x25,
  WEAP_CONT_FIRE_IN = 0x26,
  WEAP_CONT_FIRE_LOOP = 0x27,
  WEAP_CONT_FIRE_OUT = 0x28,
  WEAP_HOLD_FIRE = 0x29,
  WEAP_DETONATE = 0x2A,
  WEAP_NIGHTVISION_WEAR = 0x2B,
  WEAP_NIGHTVISION_REMOVE = 0x2C,
  WEAP_DEPLOYING = 0x2D,
  WEAP_BREAKING_DOWN = 0x2E,
  WEAP_DTP_IN = 0x2F,
  WEAP_DTP_LOOP = 0x30,
  WEAP_DTP_OUT = 0x31,
  WEAP_DTP_EMPTY_IN = 0x32,
  WEAP_DTP_EMPTY_LOOP = 0x33,
  WEAP_DTP_EMPTY_OUT = 0x34,
  WEAP_SLIDE_IN = 0x35,
  WEAP_MANTLE = 0x36,
  WEAP_JAM = 0x37,
  WEAP_CRAWL_IN = 0x38,
  WEAP_CRAWL_FORWARD = 0x39,
  WEAP_CRAWL_BACK = 0x3A,
  WEAP_CRAWL_RIGHT = 0x3B,
  WEAP_CRAWL_LEFT = 0x3C,
  WEAP_CRAWL_OUT = 0x3D,
  WEAP_CRAWL_EMPTY_IN = 0x3E,
  WEAP_CRAWL_EMPTY_FORWARD = 0x3F,
  WEAP_CRAWL_EMPTY_BACK = 0x40,
  WEAP_CRAWL_EMPTY_RIGHT = 0x41,
  WEAP_CRAWL_EMPTY_LEFT = 0x42,
  WEAP_CRAWL_EMPTY_OUT = 0x43,
  MAX_WP_ANIMATIONS = 0x44,
};

enum $8C93BDAF687CE8C692132D000F171003
{
  WPLF_LOCK_STARTED = 0x1,
  WPLF_LOCK_SET = 0x2,
  WPLF_LOCK_ATTACK_TOP = 0x4,
  WPLF_LOCK_ATTACK_DIRECT = 0x8,
  WPLF_LOCK_TARGET_TOO_CLOSE = 0x10,
  WPLF_LOCK_NOT_ENOUGH_CLEARANCE = 0x20,
  WEAPONLOCKFLAG_BITS = 0x6,
};

enum pmoveVehAnimState_t
{
  PMOVE_VEH_ANIM_STATE_PLAYING = 0x0,
  PMOVE_VEH_ANIM_STATE_END_STAGE = 0x1,
  PMOVE_VEH_ANIM_STATE_COMPLETE = 0x2,
};

enum $9877D6D9051C3F760222C7C2502F3C35
{
  FILEDATA_AITYPE = 0x0,
  FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
  FILEDATA_XANIMLIST = 0x2,
  FILEDATA_ZBARRIERTYPE = 0x3,
  FILEDATA_XMODELSURFS = 0x4,
  FILEDATA_XMODELPARTS = 0x5,
  FILEDATA_XMODEL = 0x6,
  FILEDATA_XANIM = 0x7,
  FILEDATA_PHYSPRESET = 0x8,
  FILEDATA_PHYSCONSTRAINTS = 0x9,
  FILEDATA_DESTRUCTIBLEDEF = 0xA,
  FILEDATA_VEHICLEPHYSPARAMS = 0xB,
  FILEDATA_XMODELPIECES = 0xC,
  FILEDATA_STRINGTABLE = 0xD,
  FILEDATA_VEHICLEDEF = 0xE,
  FILEDATA_FOOTSTEPFXTABLEDEF = 0xF,
  FILEDATA_ZBARRIERDEF = 0x10,
};

enum $0E3721F8AA1C42C3BCCD67EA43A25FA6
{
  VFT_TYPE = 0x12,
  VFT_CAMERAMODE = 0x13,
  VFT_TRACTION_TYPE = 0x14,
  VFT_MPH_TO_INCHES_PER_SECOND = 0x15,
  VFT_POUNDS_TO_GAME_MASS = 0x16,
  VFT_TEAM = 0x17,
  VFT_KEY_BINDING = 0x18,
  VFT_GRAPH = 0x19,
  VFT_WIIUCONTROLOVERRIDE = 0x1A,
  VFT_NUM = 0x1B,
};

enum DevEventType
{
  EVENT_ACTIVATE = 0x0,
  EVENT_DEACTIVATE = 0x1,
  EVENT_ACCEPT = 0x2,
  EVENT_UPDATE = 0x3,
  EVENT_DRAW = 0x4,
  EVENT_SAVE = 0x5,
};

enum $69AF8E44C9D6025F282D494F15F1F016
{
  PART_TYPE_NO_QUAT = 0x0,
  PART_TYPE_HALF_QUAT = 0x1,
  PART_TYPE_FULL_QUAT = 0x2,
  PART_TYPE_HALF_QUAT_NO_SIZE = 0x3,
  PART_TYPE_FULL_QUAT_NO_SIZE = 0x4,
  PART_TYPE_SMALL_TRANS = 0x5,
  PART_TYPE_TRANS = 0x6,
  PART_TYPE_TRANS_NO_SIZE = 0x7,
  PART_TYPE_NO_TRANS = 0x8,
  PART_TYPE_ALL = 0x9,
  PART_TYPE_COUNT = 0xA,
};

enum VehicleTurretState
{
  VEH_TURRET_STOPPED = 0x0,
  VEH_TURRET_STOPPING = 0x1,
  VEH_TURRET_MOVING = 0x2,
};

enum path_type_e
{
  PT_OLD_SPLINE = 0x0,
  PT_SPLINE = 0x1,
};

enum VehicleMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
  VEH_MOVESTATE_PLANE_ONCURVE = 0x3,
  VEH_MOVESTATE_PLANE_FREE = 0x4,
};

enum eGameModes
{
  GAMEMODE_PUBLIC_MATCH = 0x0,
  GAMEMODE_PRIVATE_MATCH = 0x1,
  GAMEMODE_LOCAL_SPLITSCREEN = 0x2,
  GAMEMODE_WAGER_MATCH = 0x3,
  GAMEMODE_BASIC_TRAINING = 0x4,
  GAMEMODE_THEATER = 0x5,
  GAMEMODE_LEAGUE_MATCH = 0x6,
  GAMEMODE_RTS = 0x7,
  GAMEMODE_MAX = 0x8,
  INVALID_GAMEMODE = 0x9,
};

enum playerStatsKeyIndex_t
{
  MP_PLAYERSTATSKEY_RANKXP = 0x0,
  MP_PLAYERSTATSKEY_PLEVEL = 0x1,
  MP_PLAYERSTATSKEY_RANK = 0x2,
  MP_PLAYERSTATSKEY_SCORE = 0x3,
  MP_PLAYERSTATSKEY_TIMEPLAYEDTOTAL = 0x4,
  MP_PLAYERSTATSKEY_GAMETYPEBAN = 0x5,
  MP_PLAYERSTATSKEY_TIMEWHENNEXTHOST = 0x6,
  MP_PLAYERSTATSKEY_BADHOSTCOUNT = 0x7,
  MP_PLAYERSTATSKEY_LEADERBOARDFAILURES = 0x8,
  MP_PLAYERSTATSKEY_LASTSTATSBACKUP = 0x9,
  MP_PLAYERSTATSKEY_MAPPACKMASK = 0xA,
  MP_PLAYERSTATSKEY_STATSBACKUPVERSION = 0xB,
  MP_PLAYERSTATSKEY_CODPOINTS = 0xC,
  MP_PLAYERSTATSKEY_CURRENCYSPENT = 0xD,
  MP_PLAYERSTATSKEY_STATS_VERSION = 0xE,
  MP_PLAYERSTATSKEY_KILLS = 0xF,
  MP_PLAYERSTATSKEY_DEATHS = 0x10,
  MP_PLAYERSTATSKEY_DEATHSDURINGUSE = 0x11,
  MP_PLAYERSTATSKEY_HEADSHOTS = 0x12,
  MP_PLAYERSTATSKEY_KDRATIO = 0x13,
  MP_PLAYERSTATSKEY_HIGHEST_KDRATIO = 0x14,
  MP_PLAYERSTATSKEY_ACCURACY = 0x15,
  MP_PLAYERSTATSKEY_HIGHEST_ACCURACY = 0x16,
  MP_PLAYERSTATSKEY_SHOTS = 0x17,
  MP_PLAYERSTATSKEY_HITS = 0x18,
  MP_PLAYERSTATSKEY_TIMEUSED = 0x19,
  MP_PLAYERSTATSKEY_USED = 0x1A,
  MP_PLAYERSTATSKEY_DESTROYED = 0x1B,
  MP_PLAYERSTATSKEY_GAMETYPE = 0x1C,
  MP_PLAYERSTATSKEY_WINS = 0x1D,
  MP_PLAYERSTATSKEY_LOSSES = 0x1E,
  MP_PLAYERSTATSKEY_TIES = 0x1F,
  MP_PLAYERSTATSKEY_LIFETIME_EARNINGS = 0x20,
  MP_PLAYERSTATSKEY_LIFETIME_BUYIN = 0x21,
  MP_PLAYERSTATSKEY_CONTRACTS_PURCHASED = 0x22,
  MP_PLAYERSTATSKEY_CONTRACTS_COMPLETED = 0x23,
  MP_PLAYERSTATSKEY_LASTESCROW = 0x24,
  MP_PLAYERSTATSKEY_STATRESETCOUNT = 0x25,
  MP_PLAYERSTATSKEY_FILMS_SHOUTCASTED = 0x26,
  MP_PLAYERSTATSKEY_HIGHLIGHTS_CREATED = 0x27,
  MP_PLAYERSTATSKEY_COUNT = 0x28,
};

enum clanTagFeatureColumn_t
{
  CLANTAG_COL_INDEX = 0x0,
  CLANTAG_COL_NAME = 0x1,
  CLANTAG_COL_UNLOCKLVL = 0x2,
  CLANTAG_COL_UNLOCKPLVL = 0x3,
  CLANTAG_COL_COST = 0x4,
  CLANTAG_COL_TYPE = 0x5,
  CLANTAG_COL_DATA = 0x6,
  CLANTAG_COL_NUMFRAMES = 0x7,
  CLANTAG_COL_PHASE = 0x8,
  CLANTAG_COL_FRAME1 = 0x9,
  CLANTAG_COL_FRAME2 = 0xA,
  CLANTAG_COL_FRAME3 = 0xB,
  CLANTAG_COL_FRAME4 = 0xC,
  CLANTAG_COL_FRAME5 = 0xD,
  CLANTAG_COL_FRAME6 = 0xE,
  CLANTAG_COL_FRAME7 = 0xF,
  CLANTAG_COL_FRAME8 = 0x10,
};

enum prestigeTokenType_e
{
  PRESTIGE_TOKEN_RESPEC = 0x0,
  PRESTIGE_TOKEN_RESET_STATS = 0x1,
  PRESTIGE_TOKEN_EXTRA_CAC = 0x2,
  PRESTIGE_TOKEN_COUNT = 0x3,
};

enum statsTableColumns_t
{
  STATSTABLE_NUMBER = 0x0,
  STATSTABLE_PASSIVE = 0x1,
  STATSTABLE_GROUP = 0x2,
  STATSTABLE_NAME = 0x3,
  STATSTABLE_REFERENCE = 0x4,
  STATSTABLE_ITEMCOUNT = 0x5,
  STATSTABLE_IMAGE = 0x6,
  STATSTABLE_DESCRIPTION = 0x7,
  STATSTABLE_ATTACHMENTS_DATA = 0x8,
  STATSTABLE_SORTKEY = 0x9,
  STATSTABLE_UNLOCK_LVL = 0xA,
  STATSTABLE_DEFAULT_CLASS = 0xB,
  STATSTABLE_ALLOCATION_COST = 0xC,
  STATSTABLE_LOADOUT_SLOT = 0xD,
  STATSTABLE_UNLOCK_PLVL = 0xE,
  STATSTABLE_DLC_INDEX = 0xF,
  STATSTABLE_MOMENTUM_COST = 0x10,
  STATSTABLE_COST = 0x11,
  STATSTABLE_DEMO_VERSION = 0x12,
  STATSTABLE_ZM_MAPS_TRACKED_BY = 0x13,
  STATSTABLE_COUNT = 0x14,
};

enum msgLocErrType_t
{
  LOCMSG_SAFE = 0x0,
  LOCMSG_NOERR = 0x1,
};

enum GameTypeSettingsType
{
  GAMETYPE_SETTINGS_FIRST = 0x0,
  GAMETYPE_SETTINGS_DISALLOW_AIM_SLOWDOWN = 0x0,
  GAMETYPE_SETTINGS_DISALLOW_PRONE = 0x1,
  GAMETYPE_SETTINGS_ALLOW_SPECTATING = 0x2,
  GAMETYPE_SETTINGS_AUTO_TEAM_BALANCE = 0x3,
  GAMETYPE_SETTINGS_TEAM_COUNT = 0x4,
  GAMETYPE_SETTINGS_PRESET_CLASSES_PER_TEAM = 0x5,
  GAMETYPE_SETTINGS_MAX_ALLOCATION = 0x6,
  GAMETYPE_SETTINGS_HARDCORE_MODE = 0x7,
  GAMETYPE_SETTINGS_DISABLE_THIRD_PERSON_SPECTATING = 0x8,
  GAMETYPE_SETTINGS_NUM = 0x9,
};

enum gunLevelTableColumns_t
{
  GUNLEVELTABLE_RANKID = 0x0,
  GUNLEVELTABLE_TARGETXP = 0x1,
  GUNLEVELTABLE_WEAPON = 0x2,
  GUNLEVELTABLE_ATTACHMENT = 0x3,
  GUNLEVELTABLE_REWARDXP = 0x4,
  GUNLEVELTABLE_COUNT = 0x5,
};

enum cacmpshared_type_e
{
  CACMPSHARED_TYPE_NONE = 0x0,
  CACMPSHARED_TYPE_WEAPON = 0x1,
};

enum elitePasswordStatus_e
{
  ELITEPASSWORD_Success = 0x0,
  ELITEPASSWORD_LengthError = 0x1,
  ELITEPASSWORD_EmailError = 0x2,
  ELITEPASSWORD_CharError = 0x3,
  ELITEPASSWORD_LetterNumberError = 0x4,
  ELITEPASSWORD_RepeatError = 0x5,
  ELITEPASSWORD_SequentialError = 0x6,
  ELITEPASSWORD_COUNT = 0x7,
};

enum pointsSpent_t
{
  POINTSSPENT_IGNORE = 0x0,
  POINTSSPENT_EMBLEM_LAYER = 0x1,
  POINTSSPENT_EMBLEM_ICON = 0x2,
  POINTSSPENT_CONTRACT = 0x3,
  POINTSSPENT_UNLOCKABLE_CLANTAG = 0x4,
  POINTSSPENT_UNLOCKABLE_ITEM = 0x5,
  POINTSSPENT_UNLOCKABLE_SELL = 0x6,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT = 0x7,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_POINT = 0x8,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_OPTION = 0x9,
  POINTSSPENT_ESCROW = 0xA,
  POINTSSPENT_GUEST_SIGNIN = 0xB,
};

enum RecordEventType
{
  DW_EVENT_UNKNOWN = 0x0,
  DW_EVENT_AVI = 0x1,
  DW_EVENT_SCREENSHOT = 0x2,
  DW_EVENT_MATCH_RECORD_POINTS_SPENT = 0x3,
  DW_EVENT_EMAIL = 0x5,
  DW_EVENT_MATCH_RECORD_FINISHED = 0x6,
  DW_EVENT_INVALID_GAMERTAG = 0x7,
  DW_EVENT_CRASH_DUMP = 0x8,
  DW_EVENT_EMPTY_STATS = 0x9,
  DW_EVENT_UPLOAD_FAILURE = 0xA,
  DW_EVENT_DB_READ_ERROR = 0xB,
  DW_EVENT_NO_HELI_MESH = 0x10,
  DW_EVENT_INVALID_EMBLEM = 0x11,
  DW_EVENT_UPLOAD_SP_SESSION = 0x12,
  DW_EVENT_VALID_EMBLEM = 0x13,
  DW_EVENT_POSTMATCH_EVENTS = 0x14,
  DW_EVENT_MATCH_RECORD_FINISHED_AND_UPLOADED = 0x15,
  DW_EVENT_LOG_MATCHMAKING_DATA = 0x1E,
  DW_EVENT_LOG_XSESSION_NON_SERIALIZED_CALLS = 0x20,
  DW_EVENT_SYS_ERROR = 0x29,
  DW_EVENT_UI_ERROR = 0x2A,
  DW_EVENT_SEASON_PASS_PURCHASED = 0x2B,
  DW_EVENT_THEATER_CLIP_UPLOADED = 0x2C,
  DW_UCD_ERROR = 0x2D,
  DW_EREG_ENTRY_ERROR = 0x2E,
  DW_EREG_YOUTUBE_ERROR = 0x2F,
  DW_EVENT_UI_SP_ERROR = 0x30,
  DW_EVENT_UI_MP_ERROR = 0x31,
  DW_EVENT_UI_ZM_ERROR = 0x32,
  DW_EVENT_DEDI_NOGEOINFO = 0x33,
  DW_EVENT_CONNECTION_LOG = 0x34,
  DW_EVENT_SESSION_MODIFY_FAILURE = 0x35,
  DW_EVENT_DEDICATED_PING_LOG = 0x36,
  DW_EVENT_STATS_ACCESS_ERROR = 0x37,
  DW_EVENT_ZERO_FLAG_ERROR = 0x38,
  DW_EVENT_SESSION_LOG = 0x39,
  DW_EVENT_DOUBLE_XP_FLAG_CHANGED = 0x46,
  DW_EVENT_DLC_FLAG_CHANGED = 0x47,
  DW_EVENT_DEMO_UPLOAD_FAILURE = 0x48,
  DW_EVENT_BLACKBOX = 0x58,
  DW_EVENT_LEAGUE = 0x64,
  DW_EVENT_REMOTE_CONSOLE = 0xC8,
  DW_EVENT_WATCHDOG = 0xC9,
  DW_EVENT_IGS = 0xFA,
  DW_EVENT_DLC_MENUS_VIEWED = 0xFB,
  DW_EVENT_CUSTOMCLASS_ERRORLOG = 0x12C,
  DW_EVENT_IW6_PROMO_PURCHASED = 0x145,
  DW_EVENT_IW6_PROMO_ACCESSED = 0x146,
  DW_EVENT_RATE_MATCH = 0x190,
  DW_EVENT_VOTE_MTX = 0x1A9,
  DW_EVENT_SP_REMINDER_ACTION = 0x1AA,
  DW_EVENT_DSP_PROMOTION_ACTION = 0x1AB,
  DW_EVENT_GHOST_UPSELL = 0x1AC,
  DW_EVENT_CONTENT_AVAILABLE = 0x1AE,
  DW_EVENT_REPORT_OFFENSIVE_EMBLEM = 0x1AF,
  DW_EVENT_ANTICHEAT_DEBUG = 0x1B8,
  DW_EVENT_NUM_EVENTS = 0x1B9,
};

enum proneCheckType_t
{
  PCT_CLIENT = 0x0,
  PCT_ACTOR = 0x1,
};

enum PmStanceFrontBack
{
  PM_STANCE_STAND = 0x0,
  PM_STANCE_PRONE = 0x1,
  PM_STANCE_CROUCH = 0x2,
  PM_STANCE_BACKWARD_FIRST = 0x3,
  PM_STANCE_BACKWARD_RUN = 0x3,
  PM_STANCE_BACKWARD_PRONE = 0x4,
  PM_STANCE_BACKWARD_CROUCH = 0x5,
  NUM_PM_STANCE_FRONTBACK = 0x6,
};

enum PmMoveSpeeds
{
  PM_MOVE_SPEED_RUN = 0x0,
  PM_MOVE_SPEED_WALK = 0x1,
  PM_MOVE_SPEED_SHUFFLE = 0x2,
  NUM_PM_MOVE_SPEED = 0x3,
};

enum animBodyPart_t
{
  ANIM_BP_UNUSED = 0x0,
  ANIM_BP_LEGS = 0x1,
  ANIM_BP_TORSO = 0x2,
  ANIM_BP_BOTH = 0x3,
  NUM_ANIM_BODYPARTS = 0x4,
};

enum clientplatform_t
{
  CLIENT_PLATFORM_PC = 0x0,
  CLIENT_PLATFORM_PS3 = 0x1,
  CLIENT_PLATFORM_XENON = 0x2,
  CLIENT_PLATFORM_WIIU = 0x3,
  MAX_CLIENT_PLATFORMS = 0x4,
};

enum invalid_cmd_hint_t
{
  INVALID_CMD_NO_HINT = 0x0,
  INVALID_CMD_STAND_HINT = 0x1,
  INVALID_CMD_CROUCH_HINT = 0x2,
  INVALID_CMD_PRONE_HINT = 0x3,
};

enum EVehicleCameraMode
{
  VEH_MODE_FIRSTPERSON = 0x0,
  VEH_MODE_CHASECAM = 0x1,
  VEH_MODE_HLO = 0x2,
  VEH_MODE_STRAFE = 0x3,
  VEH_MODE_HORSE = 0x4,
  VEH_MODE_OLDTANK = 0x5,
  VEH_MODE_HOVER = 0x6,
  VEH_MODE_VTOL = 0x7,
  VEH_MODE_MAX = 0x8,
};

enum EVehicleWiiUControlOverride
{
  VEH_WIIU_CONTROL_OVERRIDE_NONE = 0x0,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_WINGSUIT = 0x1,
  VEH_WIIU_CONTROL_OVERRIDE_CLAW = 0x2,
  VEH_WIIU_CONTROL_OVERRIDE_F35 = 0x3,
  VEH_WIIU_CONTROL_OVERRIDE_AITANK = 0x4,
  VEH_WIIU_CONTROL_OVERRIDE_QRDRONE = 0x5,
  VEH_WIIU_CONTROL_OVERRIDE_RCXD = 0x6,
  VEH_WIIU_CONTROL_OVERRIDE_CHOPPERGUNNER = 0x7,
  VEH_WIIU_CONTROL_OVERRIDE_SOCT = 0x8,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_JETWING = 0x9,
  VEH_WIIU_CONTROL_OVERRIDE_MAX = 0xA,
};

enum TerrainFireSource
{
  TFS_DEFAULT = 0x0,
  TFS_FLAMETHROWER = 0x1,
};

enum ActorAnimStates
{
  ACTOR_ANIMATION_IDLE = 0x0,
  ACTOR_ANIMATION_MOVE_RUN = 0x1,
  ACTOR_ANIMATION_MOVE_START = 0x2,
  ACTOR_ANIMATION_MOVE_STOP = 0x3,
  ACTOR_ANIMATION_MOVE_WALK = 0x4,
  ACTOR_ANIMATION_MOVE_TURN_LEFT = 0x5,
  ACTOR_ANIMATION_MOVE_TURN_RIGHT = 0x6,
  ACTOR_ANIMATION_MOVE_RUN_TURN_LEFT = 0x7,
  ACTOR_ANIMATION_MOVE_RUN_TURN_RIGHT = 0x8,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_LEFT = 0x9,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_RIGHT = 0xA,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_LEFT = 0xB,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_RIGHT = 0xC,
  ACTOR_ANIMATION_ATTACK = 0xD,
  ACTOR_ANIMATION_STOP_IDLE = 0xE,
  ACTOR_ANIMATION_STOP_ATTACKIDLE = 0xF,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_BARK = 0x10,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_GROWL = 0x11,
  ACTOR_ANIMATION_PAIN_MAIN = 0x12,
  ACTOR_ANIMATION_PAIN_FRONT = 0x13,
  ACTOR_ANIMATION_PAIN_BACK = 0x14,
  ACTOR_ANIMATION_PAIN_LEFT = 0x15,
  ACTOR_ANIMATION_PAIN_RIGHT = 0x16,
  ACTOR_ANIMATION_RUN_PAIN_FRONT = 0x17,
  ACTOR_ANIMATION_RUN_PAIN_BACK = 0x18,
  ACTOR_ANIMATION_RUN_PAIN_LEFT = 0x19,
  ACTOR_ANIMATION_RUN_PAIN_RIGHT = 0x1A,
  ACTOR_ANIMATION_DEATH_FRONT = 0x1B,
  ACTOR_ANIMATION_DEATH_BACK = 0x1C,
  ACTOR_ANIMATION_DEATH_LEFT = 0x1D,
  ACTOR_ANIMATION_DEATH_RIGHT = 0x1E,
  ACTOR_ANIMATION_FLASHED = 0x1F,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE = 0x20,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_BARK = 0x21,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_GROWL = 0x22,
  ACTOR_ANIMATION_ATTACK_RUN = 0x23,
  ACTOR_ANIMATION_ATTACK_PLAYER_CLOSE_RANGE = 0x24,
  ACTOR_ANIMATION_ATTACK_MISS = 0x25,
  ACTOR_ANIMATION_ATTACK_MISS_LEFT = 0x26,
  ACTOR_ANIMATION_ATTACK_MISS_RIGHT = 0x27,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_40 = 0x28,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_80 = 0x29,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_40 = 0x2A,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_80 = 0x2B,
  ACTOR_ANIMATION_TRAVERSE_WALLHOP = 0x2C,
  ACTOR_ANIMATION_TRAVERSE_WINDOW = 0x2D,
  ACTOR_ANIMATION_TRAVERSE_THROUGH_HOLE_42 = 0x2E,
  ACTOR_ANIMATION_COUNT = 0x2F,
};

enum MantleAnims
{
  MANTLE_ROOT = 0x0,
  MANTLE_UP_57 = 0x1,
  MANTLE_UP_51 = 0x2,
  MANTLE_UP_45 = 0x3,
  MANTLE_UP_39 = 0x4,
  MANTLE_UP_33 = 0x5,
  MANTLE_UP_27 = 0x6,
  MANTLE_UP_21 = 0x7,
  MANTLE_OVER_HIGH = 0x8,
  MANTLE_OVER_MID = 0x9,
  MANTLE_OVER_LOW = 0xA,
  MANTLE_ANIM_COUNT = 0xB,
  MANTLE_UP_FIRST = 0x1,
  MANTLE_UP_LAST = 0x7,
  MANTLE_UP_COUNT = 0x7,
  MANTLE_OVER_FIRST = 0x8,
  MANTLE_OVER_LAST = 0xA,
  MANTLE_OVER_COUNT = 0x3,
};

enum $F11704E5241DD8269B89CB287763833E
{
  TS_2D = 0x0,
  TS_FUNCTION = 0x1,
  TS_COLOR_MAP = 0x2,
  TS_UNUSED_1 = 0x3,
  TS_UNUSED_2 = 0x4,
  TS_NORMAL_MAP = 0x5,
  TS_UNUSED_3 = 0x6,
  TS_UNUSED_4 = 0x7,
  TS_SPECULAR_MAP = 0x8,
  TS_UNUSED_5 = 0x9,
  TS_OCCLUSION_MAP = 0xA,
  TS_UNUSED_6 = 0xB,
  TS_COLOR0_MAP = 0xC,
  TS_COLOR1_MAP = 0xD,
  TS_COLOR2_MAP = 0xE,
  TS_COLOR3_MAP = 0xF,
  TS_COLOR4_MAP = 0x10,
  TS_COLOR5_MAP = 0x11,
  TS_COLOR6_MAP = 0x12,
  TS_COLOR7_MAP = 0x13,
  TS_COLOR8_MAP = 0x14,
  TS_COLOR9_MAP = 0x15,
  TS_COLOR10_MAP = 0x16,
  TS_COLOR11_MAP = 0x17,
  TS_COLOR12_MAP = 0x18,
  TS_COLOR13_MAP = 0x19,
  TS_COLOR14_MAP = 0x1A,
  TS_COLOR15_MAP = 0x1B,
  TS_THROW_MAP = 0x1C,
};

enum $F18C17676CCABCF3A7521CF0683F7501
{
  IMAGE_TRACK_MISC = 0x0,
  IMAGE_TRACK_DEBUG = 0x1,
  IMAGE_TRACK_TEXTURENAME = 0x2,
  IMAGE_TRACK_UI = 0x3,
  IMAGE_TRACK_LIGHTMAP = 0x4,
  IMAGE_TRACK_LIGHT = 0x5,
  IMAGE_TRACK_FX = 0x6,
  IMAGE_TRACK_HUD = 0x7,
  IMAGE_TRACK_MODEL = 0x8,
  IMAGE_TRACK_WORLD = 0x9,
  IMAGE_TRACK_COUNT = 0xA,
};

enum eEmblemLayers
{
  EMBLEMLAYER_TYPE = 0x0,
  EMBLEMLAYER_COST = 0x1,
  EMBLEMLAYER_UNLOCK_LVL = 0x2,
  EMBLEMLAYER_UNLOCK_PLEVEL = 0x3,
  MAX_EMBLEMLAYER_COUNT = 0x4,
};

enum eEmblemCategoriesOrLayersType
{
  EMBLEMCATEGORIES_TYPE_LAYER = 0x0,
  EMBLEMCATEGORIES_TYPE_CATEGORY = 0x1,
  EMBLEMCATEGORIES_TYPE_ICONTYPE = 0x2,
  EMBLEMCATEGORIES_TYPE_BGCATEGORY = 0x3,
  EMBLEMCATEGORIES_TYPE_COUNT = 0x4,
  EMBLEMCATEGORIES_TYPE_INVALID = 0x4,
};

enum eEmblemsOrBackings
{
  EMBLEMSORBACKINGS_TYPE = 0x0,
  EMBLEMSORBACKINGS_ID = 0x1,
  EMBLEMSORBACKINGS_SORTKEY = 0x2,
  EMBLEMSORBACKINGS_IMAGE = 0x3,
  EMBLEMSORBACKINGS_DESC = 0x4,
  EMBLEMSORBACKINGS_COST = 0x5,
  EMBLEMSORBACKINGS_UNLOCK_LVL = 0x6,
  EMBLEMSORBACKINGS_UNLOCK_PLVL = 0x7,
  EMBLEMSORBACKINGS_UNCLASSIFYAT = 0x8,
  EMBLEMSORBACKINGS_CATEGORY = 0x9,
  EMBLEMSORBACKINGS_ICONTYPE = 0xA,
  EMBLEMSORBACKINGS_MTX_NAME = 0xA,
  EMBLEMSORBACKINGS_OUTLINESIZE = 0xB,
  MAX_EMBLEMSORBACKINGS_COUNT = 0xC,
};

enum eEmblemOrBackingsType
{
  EMBLEMSORBACKINGS_TYPE_BACKGROUND = 0x0,
  EMBLEMSORBACKINGS_TYPE_EMBLEM = 0x1,
  EMBLEMSORBACKINGS_TYPE_COUNT = 0x2,
  EMBLEMSORBACKINGS_TYPE_INVALID = 0x2,
};

enum emblemOrBacking_e
{
  EMBLEM = 0x0,
  BACKING = 0x1,
  EMBLEM_OR_BACKING_COUNT = 0x2,
};

enum emblemTypes_t
{
  EMBLEM_TYPE_DEFAULT = 0x0,
  EMBLEM_TYPE_MAX_LEVEL = 0x1,
  EMBLEM_TYPE_EXPERT = 0x2,
  EMBLEM_TYPE_MASTERY = 0x3,
  MAX_ITEM_EMBLEM_TYPES = 0x4,
};

enum eEmblemCategories
{
  EMBLEMCATEGORY_TYPE = 0x0,
  EMBLEMCATEGORY_NAME = 0x1,
  EMBLEMCATEGORY_DESC = 0x2,
  EMBLEMCATEGORYORLAYER_COST = 0x3,
  EMBLEMCATEGORYORLAYER_UNLOCK_LVL = 0x4,
  EMBLEMCATEGORYORLAYER_UNLOCK_PLEVEL = 0x5,
  MAX_EMBLEMCATEGORY_COUNT = 0x6,
};

enum scriptAnimMoveStatusStates_t
{
  ANIM_MOVESTATUS_STATIONARY = 0x0,
  ANIM_MOVESTATUS_WALK = 0x1,
  ANIM_MOVESTATUS_RUN = 0x2,
  NUM_ANIM_MOVESTATUSES = 0x3,
};

enum scriptAnimDirections_t
{
  ANIM_DIRECTION_NONE = 0x0,
  ANIM_DIRECTION_FORWARD = 0x1,
  ANIM_DIRECTION_BACKWARD = 0x2,
  ANIM_DIRECTION_LEFT = 0x3,
  ANIM_DIRECTION_RIGHT = 0x4,
  NUM_ANIM_DIRECTIONS = 0x5,
};

enum scriptAnimDmgDirections_t
{
  ANIM_DMGDIRECTION_NONE = 0x0,
  ANIM_DMGDIRECTION_FRONT = 0x1,
  ANIM_DMGDIRECTION_BACK = 0x2,
  ANIM_DMGDIRECTION_LEFT = 0x3,
  ANIM_DMGDIRECTION_RIGHT = 0x4,
  NUM_ANIM_DMGDIRECTIONS = 0x5,
};

enum scriptAnimDmgTypes_t
{
  ANIM_DMGTYPE_NORMAL = 0x0,
  ANIM_DMGTYPE_NORMAL_SHOTGUN = 0x1,
  ANIM_DMGTYPE_EXPLOSIVE = 0x2,
  ANIM_DMGTYPE_MELEE = 0x3,
  ANIM_DMGTYPE_MELEE_BASH = 0x4,
  ANIM_DMGTYPE_HEADSHOT = 0x5,
  ANIM_DMGTYPE_BURNED = 0x6,
  ANIM_DMGTYPE_SUICIDE = 0x7,
  ANIM_DMGTYPE_GAS = 0x8,
  ANIM_DMGTYPE_FALLING = 0x9,
  NUM_ANIM_DMGTYPES = 0xA,
};

enum scriptAnimStances_t
{
  ANIM_STANCE_STAND = 0x0,
  ANIM_STANCE_CROUCH = 0x1,
  ANIM_STANCE_PRONE = 0x2,
  NUM_ANIM_STANCES = 0x3,
};

enum scriptAnimWeaponPositions_t
{
  ANIM_WP_HIP = 0x0,
  ANIM_WP_ADS = 0x1,
  ANIM_WP_RAISED = 0x2,
  NUM_ANIM_WEAPONPOSITIONS = 0x3,
};

enum scriptAnimSlopeStates_t
{
  ANIM_SLOPE_NONE = 0x0,
  ANIM_SLOPE_UP = 0x1,
  ANIM_SLOPE_DOWN = 0x2,
  NUM_ANIM_SLOPESTATES = 0x3,
};

enum scriptAnimPerkStates_t
{
  ANIM_PERK_UNUSED = 0x0,
  ANIM_PERK_LASTSTAND = 0x1,
  ANIM_PERK_GRENADEDEATH = 0x2,
  ANIM_PERK_FASTMANTLE = 0x3,
  ANIM_PERK_TURNED = 0x4,
  ANIM_PERK_FEMALE = 0x5,
  ANIM_PERK_ONEINCHPUNCH = 0x6,
  NUM_ANIM_PERKSTATES = 0x7,
};

enum scriptAnimAttachmentStates_t
{
  ANIM_ATTACHMENT_UNUSED = 0x0,
  ANIM_ATTACHMENT_BAYONET = 0x1,
  NUM_ANIM_ATTACHMENTSTATES = 0x2,
};

enum animScriptMounted_t
{
  MOUNTED_UNUSED = 0x0,
  MOUNTED_TURRET = 0x1,
  NUM_ANIM_COND_MOUNTED = 0x2,
};

enum animScriptConditionTypes_t
{
  ANIM_CONDTYPE_BITFLAGS = 0x0,
  ANIM_CONDTYPE_VALUE = 0x1,
  ANIM_CONDTYPE_ENABLED = 0x2,
  ANIM_CONDTYPE_STRINGHASH = 0x3,
  NUM_ANIM_CONDTYPES = 0x4,
};

enum scriptAnimNoteType_t
{
  ANIM_NOTE_RELOAD = 0x1,
  ANIM_NOTE_FOOTPRINT = 0x2,
  ANIM_NOTE_MODEL_PREVIEWER = 0x4,
};

enum scriptAnimStrafeStates_t
{
  ANIM_STRAFE_NOT = 0x0,
  ANIM_STRAFE_LEFT = 0x1,
  ANIM_STRAFE_RIGHT = 0x2,
  NUM_ANIM_STRAFESTATES = 0x3,
};

enum scriptAnimVehicleEntryPos_t
{
  ANIM_VEHICLE_ENTRY_SIDE_LEFT = 0x0,
  ANIM_VEHICLE_ENTRY_SIDE_RIGHT = 0x1,
  ANIM_VEHICLE_ENTRY_REAR = 0x2,
  NUM_ANIM_VEHICLE_ENTRY_POSITIONS = 0x3,
};

enum $E2C4A72AF674157DC07227CFCED3F1B3
{
  SL_USER_GAME = 0x1,
  SL_USER_TEMP = 0x2,
  SL_USER_XZONE = 0x4,
  SL_USER_XZONE_TEMP = 0x8,
};

enum animScriptParseMode_t
{
  PARSEMODE_DEFINES = 0x0,
  PARSEMODE_ANIMATION = 0x1,
  PARSEMODE_CANNED_ANIMATIONS = 0x2,
  PARSEMODE_STATECHANGES = 0x3,
  PARSEMODE_EVENTS = 0x4,
  PARSEMODE_FORCELOAD = 0x5,
  NUM_PARSEMODES = 0x6,
};

enum eDogMainAnims
{
  DOG_ANIMINDEX_MAIN_ROOT = 0x0,
  DOG_ANIMINDEX_IDLE = 0x1,
  DOG_ANIMINDEX_MOVE_WALK = 0x2,
  DOG_ANIMINDEX_RUN_STOP = 0x3,
  DOG_ANIMINDEX_RUN_PAIN = 0x4,
  DOG_ANIMINDEX_RUN_ATTACK = 0x5,
  DOG_ANIMINDEX_RUN_TURN_LEFT = 0x6,
  DOG_ANIMINDEX_RUN_TURN_RIGHT = 0x7,
  DOG_ANIMINDEX_TURN_LEFT = 0x8,
  DOG_ANIMINDEX_TURN_RIGHT = 0x9,
  DOG_ANIMINDEX_RUN_TURN_AROUND_LEFT = 0xA,
  DOG_ANIMINDEX_RUN_TURN_AROUND_RIGHT = 0xB,
  DOG_ANIMINDEX_TURN_AROUND_LEFT = 0xC,
  DOG_ANIMINDEX_TURN_AROUND_RIGHT = 0xD,
  DOG_ANIMINDEX_PAIN_RUN_FRONT = 0xE,
  DOG_ANIMINDEX_PAIN_RUN_BACK = 0xF,
  DOG_ANIMINDEX_PAIN_RUN_LEFT = 0x10,
  DOG_ANIMINDEX_PAIN_RUN_RIGHT = 0x11,
  DOG_ANIMINDEX_PAIN_FRONT = 0x12,
  DOG_ANIMINDEX_PAIN_BACK = 0x13,
  DOG_ANIMINDEX_PAIN_LEFT = 0x14,
  DOG_ANIMINDEX_PAIN_RIGHT = 0x15,
  DOG_ANIMINDEX_DEATH_FRONT = 0x16,
  DOG_ANIMINDEX_DEATH_BACK = 0x17,
  DOG_ANIMINDEX_DEATH_LEFT = 0x18,
  DOG_ANIMINDEX_DEATH_RIGHT = 0x19,
  DOG_ANIMINDEX_FLASHED_RUN = 0x1A,
  DOG_ANIMINDEX_ATTACK_MISS = 0x1B,
  DOG_ANIMINDEX_ATTACK_MISS_LEFT = 0x1C,
  DOG_ANIMINDEX_ATTACK_MISS_RIGHT = 0x1D,
  DOG_ANIMINDEX_ATTACK_CLOSE_RANGE = 0x1E,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_40 = 0x1F,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_80 = 0x20,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_40 = 0x21,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_80 = 0x22,
  DOG_ANIMINDEX_TRAVERSE_WALLHOP = 0x23,
  DOG_ANIMINDEX_TRAVERSE_WINDOW = 0x24,
  DOG_ANIMINDEX_TRAVERSE_THROUGH_HOLE_42 = 0x25,
  DOG_ANIMINDEX_MAIN_COUNT = 0x26,
};

enum eDogRunStartKnobAnims
{
  DOG_ANIMINDEX_RUN_START_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_RUN_START = 0x1,
  DOG_ANIMINDEX_RUN_START_COUNT = 0x2,
};

enum eDogRunKnobAnims
{
  DOG_ANIMINDEX_RUN_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_RUN = 0x1,
  DOG_ANIMINDEX_RUN_LEAN_L = 0x2,
  DOG_ANIMINDEX_RUN_LEAN_R = 0x3,
  DOG_ANIMINDEX_RUN_WATER = 0x4,
  DOG_ANIMINDEX_RUN_WATER_LEAN_L = 0x5,
  DOG_ANIMINDEX_RUN_WATER_LEAN_R = 0x6,
  DOG_ANIMINDEX_RUN_COUNT = 0x7,
};

enum eDogAttackIdleKnobAnims
{
  DOG_ANIMINDEX_ATTACKIDLE_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_ATTACKIDLE = 0x1,
  DOG_ANIMINDEX_ATTACKIDLE_BARK = 0x2,
  DOG_ANIMINDEX_ATTACKIDLE_GROWL = 0x3,
  DOG_ANIMINDEX_ATTACKIDLE_COUNT = 0x4,
};

enum eDogLookDown
{
  DOG_ANIMINDEX_LOOK_DOWN_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_DOWN = 0x1,
  DOG_ANIMINDEX_LOOK_DOWN_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_DOWN_COUNT = 0x3,
};

enum eDogLookUp
{
  DOG_ANIMINDEX_LOOK_UP_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_UP = 0x1,
  DOG_ANIMINDEX_LOOK_UP_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_UP_COUNT = 0x3,
};

enum eDogLookRight
{
  DOG_ANIMINDEX_LOOK_RIGHT_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_RIGHT = 0x1,
  DOG_ANIMINDEX_LOOK_RIGHT_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_RIGHT_COUNT = 0x3,
};

enum eDogLookLeft
{
  DOG_ANIMINDEX_LOOK_LEFT_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_LEFT = 0x1,
  DOG_ANIMINDEX_LOOK_LEFT_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_LEFT_COUNT = 0x3,
};

enum eDogAnimStateStart
{
  DOG_ANIMSTATE_INDEX_ROOT = 0x0,
  DOG_ANIMSTATE_LAST_ROOT_ANIM = 0x26,
  DOG_ANIMSTATE_INDEX_MOVE_START = 0x26,
  DOG_ANIMSTATE_INDEX_MOVE = 0x27,
  DOG_ANIMSTATE_INDEX_ATTACKIDLE_KNOB = 0x28,
  DOG_ANIMSTATE_INDEX_LOOK_DOWN = 0x29,
  DOG_ANIMSTATE_INDEX_LOOK_UP = 0x2A,
  DOG_ANIMSTATE_INDEX_LOOK_RIGHT = 0x2B,
  DOG_ANIMSTATE_INDEX_LOOK_LEFT = 0x2C,
  DOG_ANIMSTATE_LAST_ROOT_ANIM_GROUP = 0x2D,
  DOG_ANIMSTATE_CHILDINDEX_MOVE_START = 0x2D,
  DOG_ANIMSTATE_CHILDINDEX_MOVE = 0x2E,
  DOG_ANIMSTATE_CHILDINDEX_ATTACKIDLE = 0x34,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_DOWN = 0x37,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_UP = 0x39,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_RIGHT = 0x3B,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_LEFT = 0x3D,
  DOG_ANIMSTATE_INDEX_COUNT = 0x3F,
};

enum ActorAnimCategories
{
  ACTOR_ANIMATION_CATEGORY_INIT = 0x0,
  ACTOR_ANIMATION_CATEGORY_STOP = 0x1,
  ACTOR_ANIMATION_CATEGORY_MOVE = 0x2,
  ACTOR_ANIMATION_CATEGORY_COMBAT = 0x3,
  ACTOR_ANIMATION_CATEGORY_PAIN = 0x4,
  ACTOR_ANIMATION_CATEGORY_DEATH = 0x5,
  ACTOR_ANIMATION_CATEGORY_FLASHED = 0x6,
  ACTOR_ANIMATION_CATEGORY_TRAVERSE = 0x7,
};

enum $FAD13AB882982CB72F9DF9AF03C805E4
{
  IPAK_PRIORITY_NORMAL = 0x0,
  IPAK_PRIORITY_HIGH = 0x1,
};

enum stream_priority
{
  STREAM_PRIO_LOW = 0x0,
  STREAM_PRIO_NORMAL = 0x1,
  STREAM_PRIO_HIGH = 0x2,
};

enum stream_status
{
  STREAM_STATUS_INVALID = 0x0,
  STREAM_STATUS_QUEUED = 0x1,
  STREAM_STATUS_INPROGRESS = 0x2,
  STREAM_STATUS_CANCELLED = 0x3,
  STREAM_STATUS_DEVICE_REMOVED = 0x4,
  STREAM_STATUS_READFAILED = 0x5,
  STREAM_STATUS_EOF = 0x6,
  STREAM_STATUS_FINISHED = 0x7,
  STREAM_STATUS_USER1 = 0x8,
  STREAM_STATUS_COUNT = 0x9,
};

enum $BD410352BF402968FF631EA6A79384E9
{
  IPAK_ADDPACKFILE_ERROR_SPLIT = 0xFFFFFFF7,
  IPAK_ADDPACKFILE_ERROR_NO_FREE_IPAK_SLOT = 0xFFFFFFF8,
  IPAK_ADDPACKFILE_ERROR_EMPTY = 0xFFFFFFF9,
  IPAK_ADDPACKFILE_ERROR_NO_INDEX_SECTION = 0xFFFFFFFA,
  IPAK_ADDPACKFILE_ERROR_NO_DATA_SECTION = 0xFFFFFFFB,
  IPAK_ADDPACKFILE_ERROR_VERSION_MISMATCH = 0xFFFFFFFC,
  IPAK_ADDPACKFILE_ERROR_INVALID_HEADER = 0xFFFFFFFD,
  IPAK_ADDPACKFILE_ERROR_FILE_READ = 0xFFFFFFFE,
  IPAK_ADDPACKFILE_ERROR_FILE_OPEN = 0xFFFFFFFF,
  IPAK_ADDPACKFILE_SUCCESS = 0x0,
  IPAK_ADDPACKFILE_ALREADY_ADDED = 0x1,
};

enum $7120019B9A1916C34435C5EBBD66517C
{
  GFX_NOT_STREAMING = 0x0,
  GFX_STREAMING = 0x1,
  GFX_MANUAL_STREAMING = 0x2,
  GFX_TEMP_STREAMING = 0x3,
};

enum SA_AttrTarget
{
  SA_All = 0xFFFF,
  SA_Assembly = 0x1,
  SA_Class = 0x4,
  SA_Constructor = 0x20,
  SA_Delegate = 0x1000,
  SA_Enum = 0x10,
  SA_Event = 0x200,
  SA_Field = 0x100,
  SA_GenericParameter = 0x4000,
  SA_Interface = 0x400,
  SA_Method = 0x40,
  SA_Module = 0x2,
  SA_Parameter = 0x800,
  SA_Property = 0x80,
  SA_ReturnValue = 0x2000,
  SA_Struct = 0x8,
  SA_This = 0x8000,
};

enum $62B0E66D2035A32BAA39279745C9BF37
{
  F_none = 0x0,
  F_sub = 0x1,
  F_up = 0x2,
  F_avg = 0x3,
  F_paeth = 0x4,
  F_avg_first = 0x5,
  F_paeth_first = 0x6,
};

enum $0F4CB0172D9A6DC4DA8831F7DE86BD25
{
  STBI_default = 0x0,
  STBI_grey = 0x1,
  STBI_grey_alpha = 0x2,
  STBI_rgb = 0x3,
  STBI_rgb_alpha = 0x4,
};

enum $9FD9105DCA25BE63487C1B7BEFE80381
{
  SCAN_load = 0x0,
  SCAN_type = 0x1,
  SCAN_header = 0x2,
};

enum demoHighlightReelInformationType
{
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_PLAYER = 0x0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_START = 0x0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_EVENT = 0x1,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_SCORE_EVENT = 0x2,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_MEDAL = 0x3,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_ROUND_RESULT = 0x4,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_GAME_RESULT = 0x5,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ACTOR = 0x6,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_HELICOPTER = 0x7,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_TURRET = 0x8,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_SCRIPTED = 0x9,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_MISSILE = 0xA,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_VEHICLE = 0xB,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_ROUND_END = 0xC,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOWNED = 0xD,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_REVIVED = 0xE,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BLEDOUT = 0xF,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_MAGICBOX = 0x10,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWERUP_DROPPED = 0x11,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_POWERUP_GRABBED = 0x12,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_PERK = 0x13,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWER = 0x14,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOOR = 0x15,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BUILDABLE_PLACED = 0x16,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_PACKAPUNCH = 0x17,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_RAMPAGE = 0x18,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL = 0x19,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_MULTIATTACK = 0x1A,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_MEAT_STINK = 0x1B,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_MAGICBOX = 0x1C,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_PACKAPUNCH = 0x1D,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL_LONG = 0x1E,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_COUNT = 0x1F,
};

enum demoHighlightReelPlayerFilter
{
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ME = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FRIENDS = 0x1,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ME_AND_FRIENDS = 0x2,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_FRIENDLY_TEAM = 0x3,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ENEMY_TEAM = 0x4,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_EVERYONE = 0x5,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_LAST = 0x5,
};

enum demoControlsButton
{
  DEMO_CONTROLS_BUTTON_PLAY = 0x0,
  DEMO_CONTROLS_BUTTON_RECORD = 0x1,
  DEMO_CONTROLS_BUTTON_SWITCH_PLAYER = 0x2,
  DEMO_CONTROLS_BUTTON_SWITCH_CAMERA = 0x3,
  DEMO_CONTROLS_BUTTON_TOGGLE_GAME_HUD = 0x4,
  DEMO_CONTROLS_BUTTON_TOGGLE_DEMO_HUD = 0x5,
  DEMO_CONTROLS_BUTTON_JUMP_BACK = 0x6,
  DEMO_CONTROLS_BUTTON_JUMP_FORWARD = 0x7,
  DEMO_CONTROLS_BUTTON_TIMESCALE_DECREASE = 0x8,
  DEMO_CONTROLS_BUTTON_TIMESCALE_INCREASE = 0x9,
  DEMO_CONTROLS_BUTTON_COUNT = 0xA,
};

enum demoHighlightReelTransitionFilter
{
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_NONE = 0x0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FADE = 0x1,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_RANDOM = 0x2,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_LAST = 0x2,
};

enum demoHighlightReelStylesFilter
{
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_BEST_MOMENTS = 0x0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_EXPLOSIVE_AND_PROJECTILE_KILLS = 0x1,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_VEHICLE_KILLS = 0x2,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_ONLY = 0x3,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_AND_EVENTS = 0x4,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_TURRET_KILLS = 0x5,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_DOG_KILLS = 0x6,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_RAMPAGER = 0x7,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_SAVIOR_AND_SINNER = 0x8,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_TEAM_PLAYER = 0x9,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_BIG_SPENDER = 0xA,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_HANDYMAN = 0xB,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_LAST = 0xB,
};

enum demoHighlightReelGameResultFilter
{
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_OFF = 0x0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FINAL_RESULT = 0x1,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_WITH_EVENTS = 0x2,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_ALL_RESULTS = 0x3,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_LAST = 0x3,
};

enum demoKeyboardModes
{
  DEMO_KEYBOARD_NONE = 0x0,
  DEMO_KEYBOARD_SEGMENT_NAME = 0x1,
  DEMO_KEYBOARD_CLIP_NAME_INGAME = 0x2,
  DEMO_KEYBOARD_CLIP_DESC_INGAME = 0x3,
  DEMO_KEYBOARD_SCREENSHOT_NAME_INGAME = 0x4,
  DEMO_KEYBOARD_SCREENSHOT_DESC_INGAME = 0x5,
  DEMO_KEYBOARD_FILM_NAME = 0x6,
  DEMO_KEYBOARD_FILM_DESCRIPTION = 0x7,
  DEMO_KEYBOARD_CUSTOMGAME_NAME = 0x8,
  DEMO_KEYBOARD_CUSTOMGAME_DESCRIPTION = 0x9,
  DEMO_KEYBOARD_EMBLEM_NAME = 0xA,
  DEMO_KEYBOARD_EMBLEM_DESCRIPTION = 0xB,
  DEMO_KEYBOARD_COUNT = 0xC,
};

enum demoState
{
  DEMO_STATE_IDLE = 0x0,
  DEMO_STATE_RECORDING = 0x1,
  DEMO_STATE_PLAYING = 0x2,
  DEMO_STATE_COUNT = 0x3,
};

enum demoStreamingThrottleState
{
  DEMO_STREAMING_THROTTLE_OPEN = 0x0,
  DEMO_STREAMING_THROTTLE_CLOSED_MIN_INTERVAL = 0x1,
  DEMO_STREAMING_THROTTLE_CLOSED_BANDWIDTH_LIMIT = 0x2,
};

enum demoLagFlag_e
{
  DEMO_LAGFLAG_NONE = 0x0,
  DEMO_LAGFLAG_LOW = 0x64,
  DEMO_LAGFLAG_MED = 0xC8,
  DEMO_LAGFLAG_HIGH = 0x12C,
  DEMO_LAGFLAG_IS_SET = 0x3E8,
};

enum fileshareCategory_e
{
  FILESHARE_CATEGORY_INVALID = 0xFFFFFFFF,
  FILESHARE_CATEGORY_ALL = 0x0,
  FILESHARE_CATEGORY_MP_START = 0x1,
  FILESHARE_CATEGORY_FILM_MP = 0x1,
  FILESHARE_CATEGORY_CLIP_MP = 0x2,
  FILESHARE_CATEGORY_SCREENSHOT_MP = 0x3,
  FILESHARE_CATEGORY_HIGHLIGHT = 0x4,
  FILESHARE_CATEGORY_CUSTOM_GAME_MP = 0x5,
  FILESHARE_CATEGORY_EMBLEM = 0x6,
  FILESHARE_CATEGORY_CUSTOM_CLASS = 0x7,
  FILESHARE_CATEGORY_EMBLEMIMAGE = 0x8,
  FILESHARE_CATEGORY_MP_END = 0x8,
  FILESHARE_CATEGORY_ZM_START = 0x33,
  FILESHARE_CATEGORY_FILM_ZM = 0x33,
  FILESHARE_CATEGORY_CLIP_ZM = 0x34,
  FILESHARE_CATEGORY_SCREENSHOT_ZM = 0x35,
  FILESHARE_CATEGORY_CUSTOM_GAME_ZM = 0x36,
  FILESHARE_CATEGORY_ZM_END = 0x36,
  FILESHARE_CATEGORY_INGAMESTORE_START = 0x64,
  FILESHARE_CATEGORY_INGAMESTORE_MAPPACKS = 0x64,
  FILESHARE_CATEGORY_INGAMESTORE_THEMES = 0x65,
  FILESHARE_CATEGORY_INGAMESTORE_AVATARS = 0x66,
  FILESHARE_CATEGORY_INGAMESTORE_WEAPONPACKS = 0x67,
  FILESHARE_CATEGORY_INGAMESTORE_CALLINGCARDPACKS = 0x68,
  FILESHARE_CATEGORY_INGAMESTORE_STORAGEPACKS = 0x69,
  FILESHARE_CATEGORY_INGAMESTORE_GHOSTS = 0x6A,
  FILESHARE_CATEGORY_INGAMESTORE_END = 0x6A,
  FILESHARE_CATEGORY_MOTD_IMAGES = 0x78,
  FILESHARE_CATEGORY_VOTE_IMAGES = 0x82,
  FILESHARE_CATEGORY_AVI_MP = 0x8000,
  FILESHARE_CATEGORY_AVI_ZM = 0x8001,
  FILESHARE_CATEGORY_EXEMONITOR = 0x8002,
};

enum demoFreeCameraMode
{
  DEMO_FREECAM_MODE_FIRST = 0x0,
  DEMO_FREECAM_MODE_FREEROAM = 0x0,
  DEMO_FREECAM_MODE_EDIT = 0x1,
  DEMO_FREECAM_MODE_DOLLY = 0x2,
  DEMO_FREECAM_MODE_LAST = 0x2,
  DEMO_FREECAM_MODE_COUNT = 0x3,
};

enum demoClipTransition
{
  DEMO_CLIP_TRANSITION_FIRST = 0x0,
  DEMO_CLIP_TRANSITION_NONE = 0x0,
  DEMO_CLIP_TRANSITION_FADE = 0x1,
  DEMO_CLIP_TRANSITION_LAST = 0x1,
  DEMO_CLIP_TRANSITION_COUNT = 0x2,
};

enum demoProfileData
{
  DEMO_PROFILE_GAMESTATE = 0x0,
  DEMO_PROFILE_SNAPSHOT = 0x1,
  DEMO_PROFILE_MATCHSTATES = 0x2,
  DEMO_PROFILE_PLAYERSTATES = 0x3,
  DEMO_PROFILE_ENTITIES = 0x4,
  DEMO_PROFILE_CLIENTS = 0x5,
  DEMO_PROFILE_ACTORS = 0x6,
  DEMO_PROFILE_ANIMCMDS = 0x7,
  DEMO_PROFILE_DATA_TYPE_COUNT = 0x8,
};

enum demoRestorePoint
{
  DEMO_RESTORE_POINT_START = 0x0,
  DEMO_RESTORE_POINT_END = 0x1,
  DEMO_RESTORE_POINT_COUNT = 0x2,
};

enum demoHighlightReelPlayerPriority
{
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_EVERYONE = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_FRIEND = 0x1,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_SELF = 0x2,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_COUNT = 0x3,
};

enum demoInformationScreenTypes
{
  DEMO_INFORMATION_SCREEN_NONE = 0x0,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_IN = 0x1,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_OUT = 0x2,
  DEMO_INFORMATION_SCREEN_TRANSITION = 0x3,
  DEMO_INFORMATION_SCREEN_WAITING_FOR_DOWNLOAD = 0x4,
  DEMO_INFORMATION_SCREEN_COUNT = 0x5,
};

enum demoClipState
{
  DEMO_CLIP_IDLE = 0x0,
  DEMO_CLIP_RECORD_UNCOMPRESSED_SNAPHOT = 0x1,
  DEMO_CLIP_RECORD_CONTINUOUS = 0x2,
  DEMO_CLIP_PAUSED = 0x3,
  DEMO_CLIP_PREVIEW = 0x4,
  DEMO_CLIP_STREAMING = 0x5,
};

enum demoDollyCameraTimeScaleMode
{
  DEMO_DOLLYCAM_TIMESCALE_MODE_MANUAL = 0x0,
  DEMO_DOLLYCAM_TIMESCALE_MODE_LINEAR = 0x1,
  DEMO_DOLLYCAM_TIMESCALE_MODE_FIXED = 0x2,
  DEMO_DOLLYCAM_TIMESCALE_MODE_COUNT = 0x3,
};

enum demoCameraMode
{
  DEMO_CAMERA_MODE_NONE = 0x0,
  DEMO_CAMERA_MODE_THIRDPERSON = 0x1,
  DEMO_CAMERA_MODE_FREECAM = 0x2,
  DEMO_CAMERA_MODE_COUNT = 0x3,
};

enum netFieldTypes_t
{
  NET_FIELD_TYPE_ARCHIVED_ENTITY = 0x0,
  NET_FIELD_TYPE_ARCHIVED_ENTITY_STATE = 0x1,
  NET_FIELD_TYPE_CLIENT_STATE = 0x2,
  NET_FIELD_TYPE_ACTORSTATE = 0x3,
  NET_FIELD_TYPE_PLAYERSTATE = 0x4,
  NET_FIELD_TYPE_OBJECTIVE = 0x5,
  NET_FIELD_TYPE_HUDELEMS = 0x6,
  NET_FIELD_TYPE_MATCHSTATE = 0x7,
  NET_FIELD_TYPE_COUNT = 0x8,
};

enum demoSavePopup
{
  DEMO_SAVE_POPUP_CLIP = 0x0,
  DEMO_SAVE_POPUP_SCREENSHOT = 0x1,
};

enum uiMenuCommand_t
{
  UIMENU_NONE = 0x0,
  UIMENU_MAIN = 0x1,
  UIMENU_MAINLOBBY = 0x2,
  UIMENU_INGAME = 0x3,
  UIMENU_PREGAME = 0x4,
  UIMENU_POSTGAME = 0x5,
  UIMENU_WM_QUICKMESSAGE = 0x6,
  UIMENU_SCRIPT_POPUP = 0x7,
  UIMENU_SCOREBOARD = 0x8,
  UIMENU_GAMERCARD = 0x9,
  UIMENU_MUTEERROR = 0xA,
  UIMENU_SPLITSCREENGAMESETUP = 0xB,
  UIMENU_SYSTEMLINKJOINGAME = 0xC,
  UIMENU_PARTY = 0xD,
  UIMENU_WAGER_PARTY = 0xE,
  UIMENU_LEAGUE_PARTY = 0xF,
  UIMENU_GAMELOBBY = 0x10,
  UIMENU_WAGERLOBBY = 0x11,
  UIMENU_PRIVATELOBBY = 0x12,
  UIMENU_LEAGUELOBBY = 0x13,
  UIMENU_LOCALGAMELOBBY = 0x14,
  UIMENU_THEATERLOBBY = 0x15,
  UIMENU_MIGRATION = 0x16,
  UIMENU_CONTROLLERREMOVED = 0x17,
  UIMENU_ENDOFGAME = 0x18,
  UIMENU_INGAME_NOUNPAUSE = 0x19,
};

enum eSpawnSystemDebugMode
{
  SS_DEBUG_OFF = 0x0,
  SS_DEBUG_LIVE = 0x1,
  SS_DEBUG_ARCHIVE_LOADING = 0x2,
  SS_DEBUG_ARCHIVE_VIEW = 0x3,
  SS_DEBUG_ARCHIVE_SIMULATE = 0x4,
  SS_DEBUG_ARCHIVE_SIMULATE_LIVE = 0x5,
  SS_DEBUG_ARCHIVE_MAX = 0x5,
  SS_DEBUG_COUNT = 0x6,
};

enum eDemoSpawnLogDataType
{
  DEMOSPAWNLOG_FIRST = 0x0,
  DEMOSPAWNLOG_BAD_SPAWN = 0x1,
  DEMOSPAWNLOG_INFLUENCER_PRESET = 0x2,
  DEMOSPAWNLOG_INFLUENCER_INSTANCE = 0x3,
  DEMOSPAWNLOG_SPAWN_POINT = 0x4,
  DEMOSPAWNLOG_REJECTED_POINT = 0x5,
  DEMOSPAWNLOG_COUNT = 0x6,
};

enum svc_ops_e
{
  svc_nop = 0x0,
  svc_gamestate = 0x1,
  svc_configstring = 0x2,
  svc_gameinformation = 0x3,
  svc_baseline = 0x4,
  svc_entitycache = 0x5,
  svc_dynentstate = 0x6,
  svc_destructiblestate = 0x7,
  svc_ropestate = 0x8,
  svc_glassstate = 0x9,
  svc_serverCommand = 0xA,
  svc_download = 0xB,
  svc_snapshot = 0xC,
  svc_servercommands = 0xD,
  svc_EOF = 0xE,
};

enum $70E16829EC40C8058B1C5B9C4EC33319
{
  CS_FREE = 0x0,
  CS_ZOMBIE = 0x1,
  CS_RECONNECTING = 0x2,
  CS_CONNECTED = 0x3,
  CS_CLIENTLOADING = 0x4,
  CS_ACTIVE = 0x5,
};

enum $F6DF7D0AEC4FE9F89F243C7C961C988B
{
  CINEMATIC_ID_INVALID = 0x0,
  CINEMATIC_ID_MIN_VALID = 0x1,
  CINEMATIC_ID_MAX_VALID = 0x20,
  CINEMATIC_ID_RESERVED_BIT = 0x1000,
};

enum DeltaFlags
{
  DELTA_FLAGS_NONE = 0x1,
  DELTA_FLAGS_FORCE = 0x0,
};

enum demoPacketType
{
  DEMO_PACKET_END_OF_MSG_BLOCK = 0x0,
  DEMO_PACKET_END_OF_DEMO = 0x1,
  DEMO_PACKET_CLIP_COMMAND = 0x2,
  DEMO_PACKET_RAW_SNAPSHOT = 0x3,
  DEMO_PACKET_TYPE_COUNT = 0x4,
};

enum profile_category_e
{
  PROFC_NONE = 0x0,
  PROFC_ADDPACK = 0x1,
  PROFC_GAMELOGIC = 0x2,
  PROFC_SCRIPT = 0x3,
  PROFC_DRAW = 0x4,
  PROFC_DRAW_ADD_SCENE = 0x5,
  PROFC_DRAWSKIN = 0x6,
  PROFC_DPVS = 0x7,
  PROFC_SOUND = 0x8,
  PROFC_SOUND_GAME = 0x9,
  PROFC_SOUND_UPDATE = 0xA,
  PROFC_SOUND_DRIVER = 0xB,
  PROFC_SOUND_OCC = 0xC,
  PROFC_FX = 0xD,
  PROFC_STREAMER = 0xE,
  PROFC_PHYSICS = 0xF,
  PROFC_ANIM = 0x10,
  PROFC_DRAW2D = 0x11,
  PROFC_SERVER = 0x12,
  PROFC_WAIT = 0x13,
  PROFC_MAX_COUNT = 0x14,
};

enum demoDebugInformation
{
  DEMO_DEBUG_INFORMATION_NONE = 0x0,
  DEMO_DEBUG_INFORMATION_ENTITIES = 0x1,
  DEMO_DEBUG_INFORMATION_FAKE_ENTITIES = 0x2,
  DEMO_DEBUG_INFORMATION_HIGHLIGHT_REEL_POINTS = 0x3,
  DEMO_DEBUG_INFORMATION_COUNT = 0x4,
};

enum print_msg_dest_t
{
  CON_DEST_CONSOLE = 0x0,
  CON_DEST_MINICON = 0x1,
  CON_DEST_ERROR = 0x2,
  CON_DEST_GAME_FIRST = 0x3,
  CON_DEST_GAME1 = 0x3,
  CON_DEST_GAME2 = 0x4,
  CON_DEST_GAME3 = 0x5,
  CON_DEST_GAME4 = 0x6,
  CON_DEST_GAME_LAST = 0x6,
  CON_DEST_COUNT = 0x7,
};

enum demoControllerConfig
{
  DEMO_CONTROLLER_CONFIG_DEFAULT = 0x0,
  DEMO_CONTROLLER_CONFIG_DIGITAL = 0x1,
  DEMO_CONTROLLER_CONFIG_BADBOT = 0x2,
  DEMO_CONTROLLER_CONFIG_SHOUTCASTER = 0x3,
  DEMO_CONTROLLER_CONFIG_COUNT = 0x4,
};

enum $5AEB6751DFCDECB235EC026B109FA2E9
{
  HUDELEMFLAG_FOREGROUND = 0x1,
  HUDELEMFLAG_HIDEWHENDEAD = 0x2,
  HUDELEMFLAG_HIDEWHENINMENU = 0x4,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED = 0x8,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED_MORE = 0x10,
  HUDELEMFLAG_FONT3D_USE_GLOWCOLOR = 0x20,
  HUDELEMFLAG_HIDEWHENINKILLCAM = 0x40,
  HUDELEMFLAG_REDACT = 0x80,
  HUDELEMFLAG_FADEWHENTARGETED = 0x100,
  HUDELEMFLAG_HIDEWHENINDEMO = 0x200,
  HUDELEMFLAG_HIDEWHILEREMOTECONTROLING = 0x400,
  HUDELEMFLAG_COD7DECODE = 0x800,
  HUDELEMFLAG_NO_OFFSCREEN_WAYPOINT = 0x1000,
  HUDELEMFLAG_HIDEWHENINSCOPE = 0x2000,
  HUDELEMFLAG_TYPEWRITER = 0x4000,
  HUDELEMFLAG_IMMUNE_TO_DEMO_GAMEHUD_SETTINGS = 0x8000,
  HUDELEMFLAG_IMMUNE_TO_DEMO_FREECAMERA = 0x10000,
  HUDELEMFLAG_SHOW_PLAYER_TEAM_HUDELEM_TO_SPECTATOR = 0x20000,
  HUDELEMFLAG_DEBUG = 0x40000,
  HUDELEMFLAGBITS = 0x13,
};

enum $62C3CAE9EB3FBA87EB64E52431D6F99F
{
  CLASS_NUM_ENTITY = 0x0,
  CLASS_NUM_HUDELEM = 0x1,
  CLASS_NUM_PATHNODE = 0x2,
  CLASS_NUM_VEHICLENODE = 0x3,
  CLASS_NUM_DYNENTITY = 0x4,
  CLASS_NUM_MENUELEM = 0x5,
  CLASS_NUM_COUNT = 0x6,
};

enum SndStopSoundFlags
{
  SND_STOP_ALL = 0x0,
  SND_STOP_PAUSED = 0x1,
};

enum trackerColumn_e
{
  TRACKER_INVALID = 0xFFFFFFFF,
  TRACKER_OFFENSIVE = 0x0,
  TRACKER_EMBLEM = 0x1,
  TRACKER_CHEATER = 0x2,
  TRACKER_BOOSTER = 0x3,
  TRACKER_FAILED_STATS_XUID_RECEIVER = 0x4,
  TRACKER_FAILED_STATS_XUID_GIVER = 0x5,
  TRACKER_FAILED_PRESCRUB = 0x6,
  TRACKER_NON_SUPER_USER_WADEFPS_USE = 0x7,
  TRACKER_FAILED_DB_AUTH = 0x8,
  TRACKER_SUPER_OFFENSIVE = 0x9,
  TRACKER_SUPER_OFFENSIVE_EMBLEM = 0xA,
  TRACKER_SUPER_CHEATER = 0xB,
  TRACKER_SUPER_BOOSTER = 0xC,
  TRACKER_USER_REPORT_COUNT = 0xD,
  TRACKER_POST_LB_SCRUBBER = 0xE,
  TRACKER_ZOMBIE_OFFENSIVE = 0xF,
  TRACKER_ZOMBIE_CHEATER = 0x10,
  TRACKER_ZOMBIE_USER_REPORT_COUNT = 0x11,
  TRACKER_INVALID_DVAR_CHANGED = 0x12,
  TRACKER_BOOSTING_LOBBY_CLIENT = 0x13,
  TRACKER_BOOSTING_LOBBY_SERVER = 0x14,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT = 0x15,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER = 0x16,
  TRACKER_FAILED_PRESCRUB_ZOMBIES = 0x17,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT_SP = 0x18,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER_SP = 0x19,
  TRACKER_BAD_GAMERTAG = 0x1A,
  TRACKER_STATS_RESET_VERSION_OLD = 0x1B,
  TRACKER_STATS_RESET_BASIC_OLD = 0x1C,
  TRACKER_STATS_RESET_DDL_OLD = 0x1D,
  TRACKER_STATS_RESTORE = 0x1E,
  TRACKER_HACKED_CLIENT = 0x1F,
  TRACKER_HACKED_SERVER = 0x20,
  TRACKER_HACKED_CLANTAG = 0x21,
  TRACKER_HACKED_PROFILE = 0x22,
  TRACKER_VIEW_FILESHARE = 0x23,
  TRACKER_VIEW_OWN_FILESHARE = 0x24,
  TRACKER_VIEW_MATCH = 0x25,
  TRACKER_VIEW_OWN_MATCH = 0x26,
  TRACKER_VIEW_COMMUNITY = 0x27,
  TRACKER_VIEW_COMBAT_RECORD = 0x28,
  TRACKER_CHEATLOG_GOD = 0x29,
  TRACKER_CHEATLOG_GOD_TS = 0x2A,
  TRACKER_CHEATLOG_DEMIGOD = 0x2B,
  TRACKER_CHEATLOG_DEMIGOD_TS = 0x2C,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL = 0x2D,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL_TS = 0x2E,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL = 0x2F,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL_TS = 0x30,
  TRACKER_EXEC_DISC_CFG = 0x31,
  TRACKER_EXEC_DISC_CFG_TS = 0x32,
  TRACKER_EXEC_UNKN_CFG = 0x33,
  TRACKER_EXEC_UNKN_CFG_TS = 0x34,
  TRACKER_FF_AUTH_FAIL = 0x35,
  TRACKER_FF_AUTH_FAIL_TS = 0x36,
  TRACKER_REPORTED_FILM_GAMETYPE = 0x37,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CONNECT_NEW_HOST = 0x38,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_HOST = 0x39,
  TRACKER_LOBBY_MIGRATION_FAIL_TIMEOUT = 0x3A,
  TRACKER_LOBBY_MIGRATION_FAIL_TOO_FEW_AGREE = 0x3B,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CHOOSE_HOST = 0x3C,
  TRACKER_LOBBY_MIGRATION_SUCCESS = 0x3D,
  TRACKER_DEMO_UPLOAD_FAILURE = 0x3E,
  TRACKER_THEATRE_PARTY_COUNT = 0x3F,
  TRACKER_IGS_DOWNLOAD_COUNT = 0x40,
  TRACKER_IGS_DOWNLOAD_MSPOINTS = 0x41,
  TRACKER_NAT_TRAV_FAILURE_STAGE1 = 0x42,
  TRACKER_NAT_TRAV_FAILURE_STAGE2 = 0x43,
  TRACKER_NAT_TRAV_FAILURE_STAGE3 = 0x44,
  TRACKER_NAT_TRAV_SUCCESS_STAGE1 = 0x45,
  TRACKER_NAT_TRAV_SUCCESS_STAGE2 = 0x46,
  TRACKER_NAT_TRAV_SUCCESS_STAGE3 = 0x47,
  TRACKER_GAME_MIGRATION_FAIL_NO_GOOD_HOST = 0x48,
  TRACKER_GAME_MIGRATION_FAIL_TOO_MANY_MIGRATIONS = 0x49,
  TRACKER_GAME_MIGRATION_FAIL_TOO_FEW_PLAYERS = 0x4A,
  TRACKER_GAME_MIGRATION_SUCCESS_ALL_RESPONDED = 0x4B,
  TRACKER_GAME_MIGRATION_SUCCESS_TIMEOUT = 0x4C,
  TRACKER_IGS_DOWNLOAD_USD = 0x4D,
  TRACKER_IGS_DOWNLOAD_POUNDS = 0x4E,
  TRACKER_IGS_DOWNLOAD_EURO = 0x4F,
  TRACKER_EMBLEM_INVALID = 0x50,
  TRACKER_PIRACY_FAILED_HASHES = 0x51,
  TRACKER_PIRACY_FAILED_READS = 0x52,
  TRACKER_LB_CACHE_READ_FAILURE = 0x53,
  TRACKER_LB_MAX_WRITES = 0x54,
  TRACKER_USED_UP_ALL_CONSOLE_STAT_SLOTS = 0x55,
  TRACKER_CANNOT_BECOME_HOST = 0x56,
  TRACKER_CANNOT_BECOME_HOST_REASON = 0x57,
  TRACKER_USER_ON_NEW_CONSOLE = 0x58,
  TRACKER_TIMEOUT_PUBLIC = 0x59,
  TRACKER_TIMEOUT_LEAGUES = 0x5A,
  TRACKER_STATS_CHECKSUM_OLD = 0x5B,
  TRACKER_STATS_DECOMPRESS_ERROR_OLD = 0x5C,
  TRACKER_STATS_RESET_VERSION = 0x5D,
  TRACKER_STATS_RESET_BASIC = 0x5E,
  TRACKER_STATS_RESET_DDL = 0x5F,
  TRACKER_STATS_CHECKSUM = 0x60,
  TRACKER_STATS_DECOMPRESS_ERROR = 0x61,
  TRACKER_FAILED_STATS_XUID_RECEIVER_NEW = 0x62,
  TRACKER_FAILED_STATS_XUID_GIVER_NEW = 0x63,
  TRACKER_FAILED_STATS_XUID_ZERO = 0x64,
  TRACKER_LAGGED_HOST_DAMAGE = 0x65,
  TRACKER_CLASS_SETS_USED = 0x66,
  TRACKER_LOWMIP_READ_ERRORS = 0x67,
  TRACKER_COUNT = 0x68,
};

enum demoClipCommand
{
  DEMO_CLIP_CMD_SET_CLIENT = 0x0,
  DEMO_CLIP_CMD_SET_TIMESCALE = 0x1,
  DEMO_CLIP_CMD_SET_FOV = 0x2,
  DEMO_CLIP_CMD_SET_CAMERA_MODE = 0x3,
  DEMO_CLIP_CMD_SET_CAMERA_ORIGIN = 0x4,
  DEMO_CLIP_CMD_SET_CAMERA_ANGLES = 0x5,
  DEMO_CLIP_CMD_SET_CAMERA_TRANSFORM = 0x6,
  DEMO_CLIP_CMD_SET_CAMERA_OFFSET_ENTITY = 0x7,
  DEMO_CLIP_CMD_HIDE_GAME_HUD = 0x8,
  DEMO_CLIP_CMD_RESET_SNAPSHOT_DATA = 0x9,
  DEMO_CLIP_CMD_SET_PAUSED_STATE = 0xA,
  DEMO_CLIP_CMD_TRANSITION = 0xB,
  DEMO_CLIP_CMD_END_OF_FRAME = 0xC,
  DEMO_CLIP_CMD_SET_HIGHLIGHT_REEL_PRIORITY = 0xD,
};

enum $C5F67ECC1FFA3223BD26960E4427EC66
{
  FS_SEEK_CUR = 0x0,
  FS_SEEK_END = 0x1,
  FS_SEEK_SET = 0x2,
};

enum GamePadButton
{
  GPAD_NONE = 0x0,
  GPAD_UP = 0x10000001,
  GPAD_DOWN = 0x10000002,
  GPAD_LEFT = 0x10000004,
  GPAD_RIGHT = 0x10000008,
  GPAD_START = 0x10000010,
  GPAD_BACK = 0x10000020,
  GPAD_L3 = 0x10000040,
  GPAD_R3 = 0x10000080,
  GPAD_A = 0x10001000,
  GPAD_B = 0x10002000,
  GPAD_X = 0x10004000,
  GPAD_Y = 0x10008000,
  GPAD_L_SHLDR = 0x10000100,
  GPAD_R_SHLDR = 0x10000200,
  GPAD_L_TRIG = 0x20000000,
  GPAD_R_TRIG = 0x20000001,
};

enum AntiBurnHudMenus
{
  HUD_MENU_HEALTH = 0x0,
  HUD_MENU_AMMO = 0x1,
  HUD_MENU_HEAT = 0x2,
  HUD_MENU_COMPASS = 0x3,
  HUD_MENU_STANCE = 0x4,
  HUD_MENU_OFFHAND = 0x5,
  HUD_MENU_OBJECTIVES = 0x6,
  HUD_MENU_SPRINT = 0x7,
  HUD_MENU_VEHICLE = 0x8,
};

enum $F41FDA226532A587A32BA343EA4D86F2
{
  PARTYSTATUS_EMPTY = 0x0,
  PARTYSTATUS_ZOMBIE = 0x1,
  PARTYSTATUS_ANONYMOUS = 0x2,
  PARTYSTATUS_PRESENT = 0x3,
  PARTYSTATUS_TESTCLIENT = 0x4,
  PARTYSTATUS_COUNT = 0x5,
};

enum filesharePrimaryTags_e
{
  FILESHARE_PRITAG_GAMETYPE = 0x1,
  FILESHARE_PRITAG_MAP = 0x2,
  FILESHARE_PRITAG_CATEGORY = 0x3,
  FILESHARE_PRITAG_WINNERS = 0x4,
  FILESHARE_PRITAG_PLAYLIST_TYPE = 0x5,
  FILESHARE_PRITAG_PLAYLIST_ID = 0x6,
  FILESHARE_PRITAG_XUIDS = 0x7,
  FILESHARE_PRITAG_LOSERS = 0x8,
  FILESHARE_PRITAG_DROPOUTS = 0x9,
  FILESHARE_PRITAG_LEAGUE_SUBDIV_ID = 0xA,
  FILESHARE_PRITAG_LEAGUE_TEAM_ID = 0xB,
  FILESHARE_PRITAG_FINGERPRINT = 0xC,
  FILESHARE_PRITAG_MPZM = 0xD,
  FILESHARE_PRITAG_EMBLEM_FINGERPRINT = 0xE,
  FILESHARE_PRITAG_AUTHORXUID = 0xF,
  FILESHARE_PRITAG_ANTICHEAT = 0x10,
  FILESHARE_PRITAG_UPLOADTRACKER_BEGINTIMESTAMP = 0x11,
  FILESHARE_PRITAG_UPLOADTRACKER_COUNTER = 0x12,
  FILESHARE_PRITAG_MATCHID = 0x13,
  FILESHARE_PRITAG_COUNT = 0x14,
};

enum fileshareMPZMPTag_e
{
  FILESHARE_MPZM_TAG_MP = 0x0,
  FILESHARE_MPZM_TAG_ZM = 0x1,
};

enum fileShareLocation
{
  FILESHARE_LOCATION_INVALID = 0x0,
  FILESHARE_LOCATION_PUBLISHERSTORAGE = 0x1,
  FILESHARE_LOCATION_USERSTORAGE = 0x2,
  FILESHARE_LOCATION_POOLEDSTORAGE = 0x3,
};

enum filesharePlaylistType_e
{
  FILESHARE_PLAYLIST_TYPE_PUBLIC = 0x0,
  FILESHARE_PLAYLIST_TYPE_CUSTOM = 0x1,
  FILESHARE_PLAYLIST_TYPE_LEAGUE = 0x2,
};

enum demoStreamingState
{
  STREAMING_STATE_GAMESTATE = 0x0,
  STREAMING_STATE_SEGMENTS = 0x1,
  STREAMING_STATE_TRANSITION = 0x2,
  STREAMING_STATE_ENDOFCLIP = 0x3,
  STREAMING_STATE_INFO = 0x4,
  STREAMING_STATE_DONE = 0x5,
};

enum downloadStreamingState
{
  DOWNLOAD_STREAMING_STATE_NONE = 0x0,
  DOWNLOAD_STREAMING_STATE_FULL_FILE = 0x1,
  DOWNLOAD_STREAMING_STATE_HEADER_BLOCK = 0x2,
  DOWNLOAD_STREAMING_STATE_FOOTER_BLOCK = 0x3,
  DOWNLOAD_STREAMING_STATE_DATA_BLOCK = 0x4,
  DOWNLOAD_STREAMING_STATE_FINISHED = 0x5,
  DOWNLOAD_STREAMING_STATE_FAILED = 0x6,
};

enum printParm_t
{
  PRINT_ALL = 0x0,
  PRINT_DEVELOPER = 0x1,
  PRINT_WARNING = 0x2,
  PRINT_ERROR = 0x3,
};

enum $C0E76D0DA7DD5FDAFAEBF4FDB7CB9775
{
  KEYBOARD_TYPE_NONE = 0x0,
  KEYBOARD_TYPE_DEMO = 0x1,
  KEYBOARD_TYPE_EMAIL = 0x2,
  KEYBOARD_TYPE_CUSTOM_CLASS = 0x3,
  KEYBOARD_TYPE_LEAGUES = 0x4,
  KEYBOARD_TYPE_TWITCH_USER = 0x5,
  KEYBOARD_TYPE_TWITCH_PASS = 0x6,
  KEYBOARD_TYPE_TEXT_MESSAGE = 0x7,
  KEYBOARD_TYPE_ADD_FRIEND = 0x8,
  KEYBOARD_TYPE_REGISTRATION_INPUT_PASSWORD = 0x9,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCENTS = 0xA,
  KEYBOARD_TYPE_REGISTRATION_INPUT_NUMERIC = 0xB,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCOUNTNAME = 0xC,
  KEYBOARD_TYPE_NUMERIC_FIELD = 0xD,
  KEYBOARD_TYPE_CLAN_TAG = 0xE,
  KEYBOARD_TYPE_TWITTER_USER = 0xF,
  KEYBOARD_TYPE_TWITTER_PASS = 0x10,
  KEYBOARD_TYPE_CLASS_SET = 0x11,
  KEYBOARD_TYPE_COUNT = 0x12,
};

enum FxBeamType
{
  BEAMTYPE_TRACER = 0x0,
  BEAMTYPE_SMOKE_TRACER = 0x1,
  BEAMTYPE_LASER = 0x2,
  BEAMTYPE_FLAME = 0x3,
  BEAMTYPE_DEMOLINE = 0x4,
  BEAMTYPE_ARC = 0x5,
  BEAMTYPE_COUNT = 0x6,
};

enum demoDollyCamInformationType
{
  DEMO_DOLLYCAM_INFORMATION_FX = 0x0,
  DEMO_DOLLYCAM_INFORMATION_TEXT = 0x1,
};

enum demoDollyCamFX
{
  DEMO_DOLLYCAM_FX_HEAD_NOCOLOR = 0x0,
  DEMO_DOLLYCAM_FX_HEAD_SELECT = 0x1,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_GREEN = 0x2,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_RED = 0x3,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_WHITE = 0x4,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_YELLOW = 0x5,
  DEMO_DOLLYCAM_FX_COUNT = 0x6,
};

enum $1584E46D8BC351B03CA9CCEC69F42347
{
  TS_TURRET_SENTRY = 0x1,
  TS_TURRET_TOW = 0x2,
  TS_TURRET_FIRING = 0x4,
  TS_TURRET_IS_CARRIED = 0x8,
  TS_TURRET_OVERHEATING = 0x10,
  TS_TURRET_INITIALIZING = 0x20,
  TS_TURRET_ROTATING = 0x40,
  TS_TURRET_MICROWAVE = 0x80,
  TS_TURRET_WALLMOUNT = 0x80,
};

enum turret_handler
{
  TURRET_HANDLER_CLIENT = 0x0,
  TURRET_HANDLER_SERVER = 0x1,
  TURRET_HANDLER_COUNT = 0x2,
};

enum $29E729380C68889423D51D90973126B0
{
  DPVS_BATCH_NONE = 0x0,
  DPVS_BATCH_STATIC = 0x1,
  DPVS_BATCH_DYNAMIC = 0x2,
  DPVS_BATCH_ALL = 0x3,
};

enum $98C25235F754F5FE0FF9DAD6B55E8B2A
{
  DPVS_DYNAMIC_BATCH_SIZE = 0x6,
};

enum $6B5913277FB02B4635833F62604EE97D
{
  PHYS_OBJ_ID_NULL = 0x0,
  PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
};

enum XModelLodRampType
{
  XMODEL_LOD_RAMP_RIGID = 0x0,
  XMODEL_LOD_RAMP_SKINNED = 0x1,
  XMODEL_LOD_RAMP_COUNT = 0x2,
};

enum LumpType
{
  LUMP_MATERIALS = 0x0,
  LUMP_LIGHTBYTES_COMPRESSED = 0x1,
  LUMP_LIGHTGRIDENTRIES = 0x2,
  LUMP_LIGHTGRIDCOLORS = 0x3,
  LUMP_PLANES = 0x4,
  LUMP_BRUSHSIDES = 0x5,
  LUMP_BRUSHSIDEEDGECOUNTS = 0x6,
  LUMP_BRUSHEDGES = 0x7,
  LUMP_BRUSHES = 0x8,
  LUMP_TRIANGLES = 0x9,
  LUMP_DRAWVERTS = 0xA,
  LUMP_DRAWINDICES = 0xB,
  LUMP_CULLGROUPS = 0xC,
  LUMP_CULLGROUPINDICES = 0xD,
  LUMP_LIGHTBYTES_UNCOMPRESSED = 0xE,
  LUMP_OBSOLETE_2 = 0xF,
  LUMP_OBSOLETE_3 = 0x10,
  LUMP_OBSOLETE_4 = 0x11,
  LUMP_OBSOLETE_5 = 0x12,
  LUMP_PORTALVERTS = 0x13,
  LUMP_OBSOLETE_6 = 0x14,
  LUMP_UINDS = 0x15,
  LUMP_BRUSHVERTSCOUNTS = 0x16,
  LUMP_BRUSHVERTS = 0x17,
  LUMP_AABBTREES = 0x18,
  LUMP_CELLS = 0x19,
  LUMP_PORTALS = 0x1A,
  LUMP_NODES = 0x1B,
  LUMP_LEAFS = 0x1C,
  LUMP_LEAFBRUSHES = 0x1D,
  LUMP_LEAFSURFACES = 0x1E,
  LUMP_COLLISIONVERTS = 0x1F,
  LUMP_COLLISIONTRIS = 0x20,
  LUMP_COLLISIONEDGEWALKABLE = 0x21,
  LUMP_COLLISIONBORDERS = 0x22,
  LUMP_COLLISIONPARTITIONS = 0x23,
  LUMP_COLLISIONAABBS = 0x24,
  LUMP_MODELS = 0x25,
  LUMP_VISIBILITY = 0x26,
  LUMP_ENTITIES = 0x27,
  LUMP_PATHCONNECTIONS = 0x28,
  LUMP_REFLECTION_PROBES = 0x29,
  LUMP_VERTEX_LAYER_DATA = 0x2A,
  LUMP_PRIMARY_LIGHTS = 0x2B,
  LUMP_LIGHTGRIDHEADER = 0x2C,
  LUMP_LIGHTGRIDROWS = 0x2D,
  LUMP_OBSOLETE_10 = 0x2E,
  LUMP_OBSOLETE_11 = 0x2F,
  LUMP_OBSOLETE_12 = 0x30,
  LUMP_OBSOLETE_13 = 0x31,
  LUMP_OBSOLETE_14 = 0x32,
  LUMP_OBSOLETE_15 = 0x33,
  LUMP_UNUSED1 = 0x34,
  LUMP_UNUSED2 = 0x35,
  LUMP_UNUSED3 = 0x36,
  LUMP_UNUSED4 = 0x37,
  LUMP_UNUSED5 = 0x38,
  LUMP_UNUSED6 = 0x39,
  LUMP_SIMPLELIGHTMAPBYTES = 0x3A,
  LUMP_UNUSED7 = 0x3B,
  LUMP_UNUSED8 = 0x3C,
  LUMP_UNUSED9 = 0x3D,
  LUMP_LIGHTREGIONS = 0x3E,
  LUMP_LIGHTREGION_HULLS = 0x3F,
  LUMP_LIGHTREGION_AXES = 0x40,
  LUMP_UNUSED10 = 0x41,
  LUMP_LIGHTGRID2D_LIGHTS = 0x42,
  LUMP_LIGHTGRID2D_INDICES = 0x43,
  LUMP_LIGHTGRID2D_POINTS = 0x44,
  LUMP_LIGHTGRID2D_CELLS = 0x45,
  LUMP_LIGHT_CORONAS = 0x46,
  LUMP_SHADOWMAP_VOLUMES = 0x47,
  LUMP_SHADOWMAP_VOLUME_PLANES = 0x48,
  LUMP_EXPOSURE_VOLUMES = 0x49,
  LUMP_EXPOSURE_VOLUME_PLANES = 0x4A,
  LUMP_WORLDFOG_VOLUMES = 0x4B,
  LUMP_WORLDFOG_VOLUME_PLANES = 0x4C,
  LUMP_VISION_VOLUMES = 0x4D,
  LUMP_VISION_VOLUME_PLANES = 0x4E,
  LUMP_OCCLUDERS = 0x4F,
  LUMP_OUTDOORBOUNDS = 0x50,
  LUMP_HERO_ONLY_LIGHTS = 0x51,
  LUMP_STATIC_MODEL_DATA = 0x52,
  LUMP_SKY_GRID_VOLUMES = 0x53,
  LUMP_LIGHTING_INFO = 0x54,
  LUMP_SMODEL_LIGHTMAP_VCOLORS = 0x55,
  LUMP_SMODEL_LIGHTMAP_VC_INSTS = 0x56,
  LUMP_SIEGE_SKIN_MODEL_INSTS = 0x57,
  LUMP_LIGHTGRIDCOEFFS = 0x58,
  LUMP_LUT_VOLUMES = 0x59,
  LUMP_LUT_VOLUME_PLANES = 0x5A,
  LUMP_WORLDFOG_MODIFIER_VOLUMES = 0x5B,
  LUMP_WORLDFOG_MODIFIER_VOLUME_PLANES = 0x5C,
  LUMP_COUNT = 0x5D,
};

enum GFX_SURFACE_FLAGS
{
  GFX_SURFACE_CASTS_SUN_SHADOW = 0x1,
  GFX_SURFACE_HAS_PRIMARY_LIGHT_CONFLICT = 0x2,
  GFX_SURFACE_IS_SKY = 0x4,
  GFX_SURFACE_NO_DRAW = 0x8,
  GFX_SURFACE_CASTS_SHADOW = 0x10,
  GFX_SURFACE_QUANTIZED = 0x20,
  GFX_SURFACE_NO_COLOR = 0x40,
};

enum $9D454B4FF036F3302969255676F4A675
{
  LOCAL_VAR_STACK_SIZE = 0x40,
};

enum $2F76E4A0B33E3CADEECF86B1BA14D159
{
  MAX_VM_STACK_DEPTH = 0x20,
  MAX_VM_OPERAND_STACK = 0x800,
};

enum XONLINE_NAT_TYPE
{
  XONLINE_NAT_OPEN = 0x1,
  XONLINE_NAT_MODERATE = 0x2,
  XONLINE_NAT_STRICT = 0x3,
};

enum winConnectionState_e
{
  WIN_STATUS_ERROR = 0x0,
  WIN_STATUS_NOT_CONNECTED = 0x1,
  WIN_STATUS_DNS_RESOLVING = 0x2,
  WIN_STATUS_DNS_RESOLVED = 0x3,
  WIN_STATUS_STEAM_OFFLINE = 0x4,
  WIN_STATUS_GETTING_TICKET = 0x5,
  WIN_STATUS_GOT_TICKET = 0x6,
  WIN_STATUS_TICKET_ERROR = 0x7,
  WIN_STATUS_AUTHORIZING = 0x8,
  WIN_STATUS_CONNECTING = 0x9,
  WIN_STATUS_CONNECTED = 0xA,
  WIN_STATUS_IN_BACKOFF = 0xB,
  WIN_STATUS_DISABLE_CONNECT = 0xC,
};

enum DWNetStatus
{
  DW_NET_ERROR_START_FAILED = 0x0,
  DW_NET_ERROR_NO_LOCAL_IP = 0x1,
  DW_NET_NOT_STARTED = 0x2,
  DW_NET_STARTING_LAN = 0x3,
  DW_NET_STARTED_LAN = 0x4,
  DW_NET_STARTING_ONLINE = 0x5,
  DW_NET_STARTED_ONLINE = 0x6,
  DW_NET_LINK_RESET = 0x7,
};

enum e_JoinRejectionReason
{
  REASON_NONE = 0x0,
  REASON_PARTY_PRIVACY_CLOSED = 0x1,
  REASON_PARTY_PRIVACY_INVITE_ONLY = 0x2,
  REASON_PARTY_PRIVACY_FRIEND_ONLY = 0x3,
  REASON_SYSTEMLINK_LOBBY = 0x4,
};

enum IMType
{
  JOIN_REQUEST = 0x0,
  JOIN_REPLY = 0x1,
  INVITE = 0x2,
  UPDATE_INVITE_INFO = 0x3,
  NUM_INSTANT_MESSAGE_TYPES = 0x4,
};

enum uiSessionsLines_e
{
  UI_SESSIONS_LINE_FIRST = 0x0,
  UI_SESSIONS_LINE_1 = 0x0,
  UI_SESSIONS_LINE_2 = 0x1,
  UI_SESSIONS_LINE_3 = 0x2,
  UI_SESSIONS_NUM_LINES = 0x3,
};

enum $6D7ED14D50B8EE039FAADB946FF23177
{
  PARTYPRIVACY_OPEN = 0x0,
  PARTYPRIVACY_FRIENDS_ONLY = 0x1,
  PARTYPRIVACY_INVITE_ONLY = 0x2,
  PARTYPRIVACY_CLOSED = 0x3,
};

enum EUserTier
{
  USER_TIER_NONE = 0x0,
  USER_TIER_SUPER = 0x1,
  USER_TIER_DEVELOPER = 0x2,
  USER_TIER_FRIEND = 0x3,
  USER_TIER_DEDICATED = 0x4,
  USER_TIER_ENEMY = 0x29A,
};

enum $2BECBB0AE47126D29A82C2194BE2A701
{
  HOST_SERVER_OK = 0x0,
  HOST_SERVER_BANDWIDTH_TEST_IN_PROGRESS = 0x1,
  HOST_SERVER_NOT_HOST_OF_PARTY = 0x2,
  HOST_SERVER_DEDICATED_ONLY = 0x3,
  HOST_SERVER_NAT_TYPE_NOT_ALLOWED = 0x4,
  HOST_SERVER_WE_SHOULD_NOT_HOST = 0x5,
  HOST_SERVER_IS_NOT_GOOD_CITIZEN = 0x6,
  HOST_SERVER_HAS_NOT_NECESSARY_BANDWIDTH = 0x7,
  HOST_SERVER_NET_ENGINE_NOT_STARTED = 0x8,
  HOST_SERVER_LIVE_STREAMING = 0x9,
  HOST_SERVER_BANNED_FROM_HOSTING = 0xA,
};

enum _XUSER_SIGNIN_STATE
{
  eXUserSigninState_NotSignedIn = 0x0,
  eXUserSigninState_SignedInLocally = 0x1,
  eXUserSigninState_SignedInToLive = 0x2,
};

enum eVoiceMuteReason
{
  MUTE_REASON_NOT_MUTED = 0x0,
  MUTE_REASON_MUTED_BY_LIVE = 0x1,
  MUTE_REASON_TALK_TO_NOBODY = 0x2,
  MUTE_REASON_TALK_TO_FRIENDS_0NLY = 0x3,
  MUTE_REASON_MUTED_IN_GAME = 0x4,
};

enum twitterStatus_e
{
  TW_ACCOUNT_NOT_CHECKED = 0x0,
  TW_ACCOUNT_CHECKING = 0x1,
  TW_ACCOUNT_CHECKED = 0x2,
  TW_ACCOUNT_CHECK_FAILED = 0x3,
};

enum trackerFileCol_e
{
  TRACKER_CSV_COLNUM = 0x0,
  TRACKER_CSV_COLNAME = 0x1,
  TRACKER_CSV_COLTYPE = 0x2,
};

enum trackerColType_e
{
  TRACKER_COLTYPE_AUTOTIMESTAMP = 0x0,
  TRACKER_COLTYPE_REPLACE = 0x1,
  TRACKER_COLTYPE_ADD = 0x2,
  TRACKER_COLTYPE_MAX = 0x3,
  TRACKER_COLTYPE_END = 0x3,
  TRACKER_COLTYPE_INVALID = 0xFFFFFFFF,
};

enum taskCompleteResults
{
  TASK_NOTCOMPLETE = 0x0,
  TASK_COMPLETE = 0x1,
  TASK_ERROR = 0x2,
};

enum $063204499DADD2B5EA6C19D3833E6336
{
  PK_PUBLIC = 0x0,
  PK_PRIVATE = 0x1,
};

enum $74B07F6FB9AA649F2F16A374A3E559FB
{
  DB_ZONE_PRE_GFX = 0x1,
  DB_ZONE_PATCH = 0x2,
  DB_ZONE_PATCH_LOC = 0x4,
  DB_ZONE_CODE = 0x8,
  DB_ZONE_CODE_LOC = 0x10,
  DB_ZONE_CODE_RES = 0x20,
  DB_ZONE_DEV = 0x40,
  DB_ZONE_COMMON = 0x80,
  DB_ZONE_COMMON_PATCH = 0x100,
  DB_ZONE_COMMON_LOC = 0x200,
  DB_ZONE_LOAD = 0x400,
  DB_ZONE_SHARED_PATCH = 0x800,
  DB_ZONE_SHARED = 0x1000,
  DB_ZONE_SHARED_LOC = 0x2000,
  DB_ZONE_LEVEL_PATCH = 0x4000,
  DB_ZONE_LEVEL = 0x8000,
  DB_ZONE_LEVEL_LOC = 0x10000,
  DB_ZONE_LEVELOVERLAY_PATCH = 0x20000,
  DB_ZONE_LEVELOVERLAY = 0x40000,
  DB_ZONE_LEVELOVERLAY_LOC = 0x80000,
  DB_ZONE_WEAPONS = 0x100000,
  DB_ZONE_GUMP = 0x200000,
  DB_ZONE_LOW_MARKER = 0x400000,
  DB_ZONE_MYCHANGES = 0x1000000,
  DB_ZONE_FRONTEND = 0x2000000,
  DB_ZONE_FRONTEND_LOC = 0x4000000,
  DB_ZONE_PATCH_UI = 0x8000000,
  DB_ZONE_PATCH_UI_LOC = 0x10000000,
  DB_ZONE_FFOTD = 0x20000000,
  DB_ZONE_HIGH_MARKER = 0x40000000,
  DB_FLAG_STRICTFREE = 0x80000000,
};

enum $146B78AB656CB287B135A6A09E6A990C
{
  XFILE_BLOCK_TEMP = 0x0,
  XFILE_BLOCK_RUNTIME_VIRTUAL = 0x1,
  XFILE_BLOCK_RUNTIME_PHYSICAL = 0x2,
  XFILE_BLOCK_DELAY_VIRTUAL = 0x3,
  XFILE_BLOCK_DELAY_PHYSICAL = 0x4,
  XFILE_BLOCK_VIRTUAL = 0x5,
  XFILE_BLOCK_PHYSICAL = 0x6,
  XFILE_BLOCK_STREAMER_RESERVE = 0x7,
  MAX_XFILE_COUNT = 0x8,
};

enum statsResetReason_t
{
  STATSRESET_FILE_NOT_FOUND = 0x0,
  STATSRESET_CFG_VERSION_MISMATCH = 0x1,
  STATSRESET_DDL_CONVERSION_FAILED = 0x2,
  STATSRESET_EXEC_RESET_COMMAND = 0x3,
  STATSRESET_CHEATER_DETECTED = 0x4,
  STATSRESET_NEW_OFFLINE_USER = 0x5,
  STATSRESET_PRESTIGE_RESETALL = 0x6,
};

enum $960D9BF0CDDE68BF98935A45D25DFBC6
{
  GEOGRAPHICAL_REGION_NONE = 0x0,
  GEOGRAPHICAL_REGION_AUNZ = 0x1,
  GEOGRAPHICAL_REGION_ASIAN = 0x2,
  GEOGRAPHICAL_REGION_EUROPEAN = 0x3,
  GEOGRAPHICAL_REGION_NORTH_AMERICAN = 0x4,
  GEOGRAPHICAL_REGION_SOUTH_AMERICAN = 0x5,
};

enum $D2985462A6C40A331540A4BC5277FBD8
{
  STATSBACKUP_NOREADWRITE = 0xFFFFFFFF,
  STATSBACKUP_READ_NOWRITE = 0x0,
};

enum gamertagsTableColumns_t
{
  MP_GAMERTAGS_NAME = 0x0,
  MP_GAMERTAGS_TIER = 0x1,
  MP_GAMERTAGS_PLATFORM = 0x2,
  MP_GAMERTAGS_ID = 0x2,
  MP_GAMERTAGS_COUNT = 0x3,
};

enum dwKeyArchiveCategories
{
  KEYARCHIVE_CATEGORY_NORMAL = 0x0,
  KEYARCHIVE_CATEGORY_TEAM = 0x1,
  KEYARCHIVE_CATEGORY_USER = 0x2,
  KEYARCHIVE_CATEGORY_LEAGUE = 0x3,
};

enum $C62D1519FB2A6CD61FC1F0129284EE42
{
  k_cchStatNameMax = 0x80,
};

enum $CDD6A5183505116B35FC206920E63627
{
  k_iSteamUserCallbacks = 0x64,
};

enum $C09254EEEFA8D6FF53FD016EA4835A8F
{
  k_iSteamGameServerCallbacks = 0xC8,
};

enum $2E5C13F35C066406414F12E84027D068
{
  k_iSteamFriendsCallbacks = 0x12C,
};

enum $A4173BE86B52B0F505DB1B60B4606BC0
{
  k_iSteamMatchmakingCallbacks = 0x1F4,
};

enum $0C8FDD38DED581DC5B3F30AEAED0B670
{
  k_iSteamUtilsCallbacks = 0x2BC,
};

enum $393856A4535633B39CE7726304413102
{
  k_iSteamAppsCallbacks = 0x3E8,
};

enum $3E871D75ADD7139950BE5FE80C2BA256
{
  k_iSteamUserStatsCallbacks = 0x44C,
};

enum $C72C972B8B1A290F8A44CD486DAC64EE
{
  k_iSteamNetworkingCallbacks = 0x4B0,
};

enum $4FF333E4AD6EA823F3FEBB8E93F7EBA4
{
  k_iClientRemoteStorageCallbacks = 0x514,
};

enum $049F1E54759ED4A87BCBC269683A0A84
{
  k_iSteamGameServerStatsCallbacks = 0x708,
};

enum $33D1E093FC9446ED8F7CC1D0DBBD11EE
{
  k_iClientHTTPCallbacks = 0x834,
};

enum $228AD88ED89E5905F3C3DF91FD8708F7
{
  k_iSteamScreenshotsCallbacks = 0x8FC,
};

enum EServerMode
{
  eServerModeInvalid = 0x0,
  eServerModeNoAuthentication = 0x1,
  eServerModeAuthentication = 0x2,
  eServerModeAuthenticationAndSecure = 0x3,
};

enum LiveAuthFlags_t
{
  AUTH_BLOB_REQUESTED = 0x1,
  AUTH_BLOB_RECEIVED = 0x2,
  AUTH_BLOB_SENT_TO_STEAM = 0x4,
  AUTH_APPROVE = 0x8,
  AUTH_DENY = 0x10,
};

enum SteamServerState
{
  STEAM_SERVER_INIT_FAILED = 0x0,
  STEAM_SERVER_DISCONNECTED = 0x1,
  STEAM_SERVER_CONNECTING = 0x2,
  STEAM_SERVER_CONNECTED = 0x3,
  STEAM_SERVER_SECURED = 0x4,
};

enum $32BE1AE90580E01653AD219845DECF36
{
  k_cchMaxRichPresenceValueLength = 0x100,
};

enum EDenyReason
{
  k_EDenyInvalid = 0x0,
  k_EDenyInvalidVersion = 0x1,
  k_EDenyGeneric = 0x2,
  k_EDenyNotLoggedOn = 0x3,
  k_EDenyNoLicense = 0x4,
  k_EDenyCheater = 0x5,
  k_EDenyLoggedInElseWhere = 0x6,
  k_EDenyUnknownText = 0x7,
  k_EDenyIncompatibleAnticheat = 0x8,
  k_EDenyMemoryCorruption = 0x9,
  k_EDenyIncompatibleSoftware = 0xA,
  k_EDenySteamConnectionLost = 0xB,
  k_EDenySteamConnectionError = 0xC,
  k_EDenySteamResponseTimedOut = 0xD,
  k_EDenySteamValidationStalled = 0xE,
  k_EDenySteamOwnerLeftGuestUser = 0xF,
};

enum EUserHasLicenseForAppResult
{
  k_EUserHasLicenseResultHasLicense = 0x0,
  k_EUserHasLicenseResultDoesNotHaveLicense = 0x1,
  k_EUserHasLicenseResultNoAuth = 0x2,
};

enum EUniverse
{
  k_EUniverseInvalid = 0x0,
  k_EUniversePublic = 0x1,
  k_EUniverseBeta = 0x2,
  k_EUniverseInternal = 0x3,
  k_EUniverseDev = 0x4,
  k_EUniverseMax = 0x5,
};

enum EAccountType
{
  k_EAccountTypeInvalid = 0x0,
  k_EAccountTypeIndividual = 0x1,
  k_EAccountTypeMultiseat = 0x2,
  k_EAccountTypeGameServer = 0x3,
  k_EAccountTypeAnonGameServer = 0x4,
  k_EAccountTypePending = 0x5,
  k_EAccountTypeContentServer = 0x6,
  k_EAccountTypeClan = 0x7,
  k_EAccountTypeChat = 0x8,
  k_EAccountTypeConsoleUser = 0x9,
  k_EAccountTypeAnonUser = 0xA,
  k_EAccountTypeMax = 0xB,
};

enum EChatSteamIDInstanceFlags
{
  k_EChatAccountInstanceMask = 0xFFF,
  k_EChatInstanceFlagClan = 0x80000,
  k_EChatInstanceFlagLobby = 0x40000,
  k_EChatInstanceFlagMMSLobby = 0x20000,
};

enum EBeginAuthSessionResult
{
  k_EBeginAuthSessionResultOK = 0x0,
  k_EBeginAuthSessionResultInvalidTicket = 0x1,
  k_EBeginAuthSessionResultDuplicateRequest = 0x2,
  k_EBeginAuthSessionResultInvalidVersion = 0x3,
  k_EBeginAuthSessionResultGameMismatch = 0x4,
  k_EBeginAuthSessionResultExpiredTicket = 0x5,
};

enum EResult
{
  k_EResultOK = 0x1,
  k_EResultFail = 0x2,
  k_EResultNoConnection = 0x3,
  k_EResultInvalidPassword = 0x5,
  k_EResultLoggedInElsewhere = 0x6,
  k_EResultInvalidProtocolVer = 0x7,
  k_EResultInvalidParam = 0x8,
  k_EResultFileNotFound = 0x9,
  k_EResultBusy = 0xA,
  k_EResultInvalidState = 0xB,
  k_EResultInvalidName = 0xC,
  k_EResultInvalidEmail = 0xD,
  k_EResultDuplicateName = 0xE,
  k_EResultAccessDenied = 0xF,
  k_EResultTimeout = 0x10,
  k_EResultBanned = 0x11,
  k_EResultAccountNotFound = 0x12,
  k_EResultInvalidSteamID = 0x13,
  k_EResultServiceUnavailable = 0x14,
  k_EResultNotLoggedOn = 0x15,
  k_EResultPending = 0x16,
  k_EResultEncryptionFailure = 0x17,
  k_EResultInsufficientPrivilege = 0x18,
  k_EResultLimitExceeded = 0x19,
  k_EResultRevoked = 0x1A,
  k_EResultExpired = 0x1B,
  k_EResultAlreadyRedeemed = 0x1C,
  k_EResultDuplicateRequest = 0x1D,
  k_EResultAlreadyOwned = 0x1E,
  k_EResultIPNotFound = 0x1F,
  k_EResultPersistFailed = 0x20,
  k_EResultLockingFailed = 0x21,
  k_EResultLogonSessionReplaced = 0x22,
  k_EResultConnectFailed = 0x23,
  k_EResultHandshakeFailed = 0x24,
  k_EResultIOFailure = 0x25,
  k_EResultRemoteDisconnect = 0x26,
  k_EResultShoppingCartNotFound = 0x27,
  k_EResultBlocked = 0x28,
  k_EResultIgnored = 0x29,
  k_EResultNoMatch = 0x2A,
  k_EResultAccountDisabled = 0x2B,
  k_EResultServiceReadOnly = 0x2C,
  k_EResultAccountNotFeatured = 0x2D,
  k_EResultAdministratorOK = 0x2E,
  k_EResultContentVersion = 0x2F,
  k_EResultTryAnotherCM = 0x30,
  k_EResultPasswordRequiredToKickSession = 0x31,
  k_EResultAlreadyLoggedInElsewhere = 0x32,
  k_EResultSuspended = 0x33,
  k_EResultCancelled = 0x34,
  k_EResultDataCorruption = 0x35,
  k_EResultDiskFull = 0x36,
  k_EResultRemoteCallFailed = 0x37,
  k_EResultPasswordUnset = 0x38,
  k_EResultExternalAccountUnlinked = 0x39,
  k_EResultPSNTicketInvalid = 0x3A,
  k_EResultExternalAccountAlreadyLinked = 0x3B,
  k_EResultRemoteFileConflict = 0x3C,
  k_EResultIllegalPassword = 0x3D,
  k_EResultSameAsPreviousValue = 0x3E,
  k_EResultAccountLogonDenied = 0x3F,
  k_EResultCannotUseOldPassword = 0x40,
  k_EResultInvalidLoginAuthCode = 0x41,
  k_EResultAccountLogonDeniedNoMail = 0x42,
  k_EResultHardwareNotCapableOfIPT = 0x43,
  k_EResultIPTInitError = 0x44,
  k_EResultParentalControlRestricted = 0x45,
  k_EResultFacebookQueryError = 0x46,
  k_EResultExpiredLoginAuthCode = 0x47,
  k_EResultIPLoginRestrictionFailed = 0x48,
  k_EResultAccountLockedDown = 0x49,
  k_EResultAccountLogonDeniedVerifiedEmailRequired = 0x4A,
  k_EResultNoMatchingURL = 0x4B,
};

enum EMarketingMessageFlags
{
  k_EMarketingMessageFlagsNone = 0x0,
  k_EMarketingMessageFlagsHighPriority = 0x1,
  k_EMarketingMessageFlagsPlatformWindows = 0x2,
  k_EMarketingMessageFlagsPlatformMac = 0x4,
  k_EMarketingMessageFlagsPlatformRestrictions = 0x6,
};

enum EPersonaState
{
  k_EPersonaStateOffline = 0x0,
  k_EPersonaStateOnline = 0x1,
  k_EPersonaStateBusy = 0x2,
  k_EPersonaStateAway = 0x3,
  k_EPersonaStateSnooze = 0x4,
  k_EPersonaStateLookingToTrade = 0x5,
  k_EPersonaStateLookingToPlay = 0x6,
  k_EPersonaStateMax = 0x7,
};

enum EFriendRelationship
{
  k_EFriendRelationshipNone = 0x0,
  k_EFriendRelationshipBlocked = 0x1,
  k_EFriendRelationshipRequestRecipient = 0x2,
  k_EFriendRelationshipFriend = 0x3,
  k_EFriendRelationshipRequestInitiator = 0x4,
  k_EFriendRelationshipIgnored = 0x5,
  k_EFriendRelationshipIgnoredFriend = 0x6,
  k_EFriendRelationshipSuggested = 0x7,
  k_EFriendRelationshipMax = 0x8,
};

enum EOverlayToStoreFlag
{
  k_EOverlayToStoreFlag_None = 0x0,
  k_EOverlayToStoreFlag_AddToCart = 0x1,
  k_EOverlayToStoreFlag_AddToCartAndShow = 0x2,
};

enum EChatEntryType
{
  k_EChatEntryTypeInvalid = 0x0,
  k_EChatEntryTypeChatMsg = 0x1,
  k_EChatEntryTypeTyping = 0x2,
  k_EChatEntryTypeInviteGame = 0x3,
  k_EChatEntryTypeEmote = 0x4,
  k_EChatEntryTypeLeftConversation = 0x6,
};

enum LiveSteam_PersonaState
{
  LIVE_STEAM_PERSONA_STATE_OFFLINE = 0x0,
  LIVE_STEAM_PERSONA_STATE_ONLINE = 0x1,
  LIVE_STEAM_PERSONA_STATE_BUSY = 0x2,
  LIVE_STEAM_PERSONA_STATE_SNOOZE = 0x3,
};

enum EFriendFlags
{
  k_EFriendFlagNone = 0x0,
  k_EFriendFlagBlocked = 0x1,
  k_EFriendFlagFriendshipRequested = 0x2,
  k_EFriendFlagImmediate = 0x4,
  k_EFriendFlagClanMember = 0x8,
  k_EFriendFlagOnGameServer = 0x10,
  k_EFriendFlagRequestingFriendship = 0x80,
  k_EFriendFlagRequestingInfo = 0x100,
  k_EFriendFlagIgnored = 0x200,
  k_EFriendFlagIgnoredFriend = 0x400,
  k_EFriendFlagSuggested = 0x800,
  k_EFriendFlagAll = 0xFFFF,
};

enum EVoiceResult
{
  k_EVoiceResultOK = 0x0,
  k_EVoiceResultNotInitialized = 0x1,
  k_EVoiceResultNotRecording = 0x2,
  k_EVoiceResultNoData = 0x3,
  k_EVoiceResultBufferTooSmall = 0x4,
  k_EVoiceResultDataCorrupted = 0x5,
  k_EVoiceResultRestricted = 0x6,
  k_EVoiceResultUnsupportedCodec = 0x7,
};

enum EAchievements
{
  ACH_MP_MISC_1 = 0x0,
  ACH_MP_MISC_2 = 0x1,
  ACH_MP_MISC_3 = 0x2,
  ACH_MP_MISC_4 = 0x3,
  ACH_MP_MISC_5 = 0x4,
  ACH_ZM_TRANSIT_SIDEQUEST = 0x5,
  ACH_ZM_DONT_FIRE_UNTIL_YOU_SEE = 0x6,
  ACH_ZM_THE_LIGHTS_OF_THEIR_EYES = 0x7,
  ACH_ZM_UNDEAD_MANS_PARTY_BUS = 0x8,
  ACH_ZM_DANCE_ON_MY_GRAVE = 0x9,
  ACH_ZM_STANDARD_EQUIPMENT_MAY_VARY = 0xA,
  ACH_ZM_YOU_HAVE_NO_POWER_OVER_ME = 0xB,
  ACH_ZM_I_DONT_THINK_THEY_EXIST = 0xC,
  ACH_ZM_FUEL_EFFICIENT = 0xD,
  ACH_ZM_HAPPY_HOUR = 0xE,
  ACH_ZM_DLC1_HIGHRISE_SIDEQUEST = 0xF,
  ACH_ZM_DLC1_VERTIGONER = 0x10,
  ACH_ZM_DLC1_MAD_WITHOUT_POWER = 0x11,
  ACH_ZM_DLC1_SHAFTED = 0x12,
  ACH_ZM_DLC1_SLIPPERY_WHEN_UNDEAD = 0x13,
  ACH_ZM_DLC1_FACING_THE_DRAGON = 0x14,
  ACH_ZM_DLC1_IM_MY_OWN_BEST_FRIEND = 0x15,
  ACH_ZM_DLC1_POLYARMORY = 0x16,
  ACH_ZM_DLC1_MONKEY_SEE_MONKEY_DOOM = 0x17,
  ACH_ZM_DLC1_I_SEE_LIVE_PEOPLE = 0x18,
  ACH_ZM_DLC2_PRISON_SIDEQUEST = 0x19,
  ACH_ZM_DLC2_FEED_THE_BEAST = 0x1A,
  ACH_ZM_DLC2_MAKING_THE_ROUNDS = 0x1B,
  ACH_ZM_DLC2_ACID_DRIP = 0x1C,
  ACH_ZM_DLC2_FULL_LOCKDOWN = 0x1D,
  ACH_ZM_DLC2_A_BURST_OF_FLAVOR = 0x1E,
  ACH_ZM_DLC2_PARANORMAL_PROGRESS = 0x1F,
  ACH_ZM_DLC2_GG_BRIDGE = 0x20,
  ACH_ZM_DLC2_TRAPPED_IN_TIME = 0x21,
  ACH_ZM_DLC2_POP_GOES_THE_WEASEL = 0x22,
  ACH_ZM_DLC3_BURIED_SIDEQUEST = 0x23,
  ACH_ZM_DLC3_ECTOPLASMIC_RESIDUE = 0x24,
  ACH_ZM_DLC3_IM_YOUR_HUCKLEBERRY = 0x25,
  ACH_ZM_DLC3_DEATH_FROM_BELOW = 0x26,
  ACH_ZM_DLC3_CANDYGRAM = 0x27,
  ACH_ZM_DLC3_AWAKEN_THE_GAZEBO = 0x28,
  ACH_ZM_DLC3_REVISIONIST_HISTORIAN = 0x29,
  ACH_ZM_DLC3_MAZED_AND_CONFUSED = 0x2A,
  ACH_ZM_DLC3_FSIRT_AGAINST_THE_WALL = 0x2B,
  ACH_ZM_DLC3_WHEN_THE_REVOLUTION_COMES = 0x2C,
  ACH_ZM_DLC4_TOMB_SIDEQUEST = 0x2D,
  ACH_ZM_DLC4_NOT_A_GOLD_DIGGER = 0x2E,
  ACH_ZM_DLC4_ALL_YOUR_BASE = 0x2F,
  ACH_ZM_DLC4_KUNG_FU_GRIP = 0x30,
  ACH_ZM_DLC4_PLAYING_WITH_POWER = 0x31,
  ACH_ZM_DLC4_IM_ON_A_TANK = 0x32,
  ACH_ZM_DLC4_SAVING_THE_DAY_ALL_DAY = 0x33,
  ACH_ZM_DLC4_MASTER_OF_DISGUISE = 0x34,
  ACH_ZM_DLC4_OVERACHIEVER = 0x35,
  ACH_ZM_DLC4_MASTER_WIZARD = 0x36,
  ACH_COUNT = 0x37,
};

enum ENotificationPosition
{
  k_EPositionTopLeft = 0x0,
  k_EPositionTopRight = 0x1,
  k_EPositionBottomLeft = 0x2,
  k_EPositionBottomRight = 0x3,
};

enum ESteamAPICallFailure
{
  k_ESteamAPICallFailureNone = 0xFFFFFFFF,
  k_ESteamAPICallFailureSteamGone = 0x0,
  k_ESteamAPICallFailureNetworkFailure = 0x1,
  k_ESteamAPICallFailureInvalidHandle = 0x2,
  k_ESteamAPICallFailureMismatchedCallback = 0x3,
};

enum ELeaderboardSortMethod
{
  k_ELeaderboardSortMethodNone = 0x0,
  k_ELeaderboardSortMethodAscending = 0x1,
  k_ELeaderboardSortMethodDescending = 0x2,
};

enum ELeaderboardDisplayType
{
  k_ELeaderboardDisplayTypeNone = 0x0,
  k_ELeaderboardDisplayTypeNumeric = 0x1,
  k_ELeaderboardDisplayTypeTimeSeconds = 0x2,
  k_ELeaderboardDisplayTypeTimeMilliSeconds = 0x3,
};

enum ELeaderboardDataRequest
{
  k_ELeaderboardDataRequestGlobal = 0x0,
  k_ELeaderboardDataRequestGlobalAroundUser = 0x1,
  k_ELeaderboardDataRequestFriends = 0x2,
  k_ELeaderboardDataRequestUsers = 0x3,
};

enum ELeaderboardUploadScoreMethod
{
  k_ELeaderboardUploadScoreMethodNone = 0x0,
  k_ELeaderboardUploadScoreMethodKeepBest = 0x1,
  k_ELeaderboardUploadScoreMethodForceUpdate = 0x2,
};

enum $B30E563D66201DC24B9CB7DCEB59AE18
{
  k_cchPersonaNameMax = 0x80,
  k_cwchPersonaNameMax = 0x20,
};

enum Livesteam_TicketState_t
{
  LIVE_STEAM_TICKET_ERROR = 0xFFFFFFFF,
  LIVE_STEAM_TICKET_SUCCESS = 0x0,
  LIVE_STEAM_TICKET_START = 0x1,
  LIVE_STEAM_TICKET_MAKE_REQUEST = 0x2,
  LIVE_STEAM_TICKET_REQUEST_IN_PROGRESS = 0x3,
  LIVE_STEAM_TICKET_RESPONSE = 0x4,
  LIVE_STEAM_TICKET_LIMIT_EXCEEDED = 0x5,
};

enum EP2PSend
{
  k_EP2PSendUnreliable = 0x0,
  k_EP2PSendUnreliableNoDelay = 0x1,
  k_EP2PSendReliable = 0x2,
  k_EP2PSendReliableWithBuffering = 0x3,
};

enum ESNetSocketConnectionType
{
  k_ESNetSocketConnectionTypeNotConnected = 0x0,
  k_ESNetSocketConnectionTypeUDP = 0x1,
  k_ESNetSocketConnectionTypeUDPRelay = 0x2,
};

enum ERemoteStoragePlatform
{
  k_ERemoteStoragePlatformNone = 0x0,
  k_ERemoteStoragePlatformWindows = 0x1,
  k_ERemoteStoragePlatformOSX = 0x2,
  k_ERemoteStoragePlatformPS3 = 0x4,
  k_ERemoteStoragePlatformReserved1 = 0x8,
  k_ERemoteStoragePlatformReserved2 = 0x10,
  k_ERemoteStoragePlatformAll = 0xFFFFFFFF,
};

enum ERemoteStoragePublishedFileVisibility
{
  k_ERemoteStoragePublishedFileVisibilityPublic = 0x0,
  k_ERemoteStoragePublishedFileVisibilityFriendsOnly = 0x1,
  k_ERemoteStoragePublishedFileVisibilityPrivate = 0x2,
};

enum EWorkshopFileType
{
  k_EWorkshopFileTypeCommunity = 0x0,
  k_EWorkshopFileTypeMicrotransaction = 0x1,
  k_EWorkshopFileTypeCollection = 0x2,
  k_EWorkshopFileTypeArt = 0x3,
  k_EWorkshopFileTypeVideo = 0x4,
  k_EWorkshopFileTypeScreenshot = 0x5,
};

enum EWorkshopVideoProvider
{
  k_EWorkshopVideoProviderNone = 0x0,
  k_EWorkshopVideoProviderYoutube = 0x1,
};

enum EWorkshopFileAction
{
  k_EWorkshopFileActionPlayed = 0x0,
  k_EWorkshopFileActionCompleted = 0x1,
};

enum EWorkshopEnumerationType
{
  k_EWorkshopEnumerationTypeRankedByVote = 0x0,
  k_EWorkshopEnumerationTypeRecent = 0x1,
  k_EWorkshopEnumerationTypeTrending = 0x2,
  k_EWorkshopEnumerationTypeFavoritesOfFriends = 0x3,
  k_EWorkshopEnumerationTypeVotedByFriends = 0x4,
  k_EWorkshopEnumerationTypeContentByFriends = 0x5,
  k_EWorkshopEnumerationTypeRecentFromFollowedUsers = 0x6,
};

enum EHTTPMethod
{
  k_EHTTPMethodInvalid = 0x0,
  k_EHTTPMethodGET = 0x1,
  k_EHTTPMethodHEAD = 0x2,
  k_EHTTPMethodPOST = 0x3,
};

enum EMatchMakingServerResponse
{
  eServerResponded = 0x0,
  eServerFailedToRespond = 0x1,
  eNoServersListedOnMasterServer = 0x2,
};

enum ELobbyComparison
{
  k_ELobbyComparisonEqualToOrLessThan = 0xFFFFFFFE,
  k_ELobbyComparisonLessThan = 0xFFFFFFFF,
  k_ELobbyComparisonEqual = 0x0,
  k_ELobbyComparisonGreaterThan = 0x1,
  k_ELobbyComparisonEqualToOrGreaterThan = 0x2,
  k_ELobbyComparisonNotEqual = 0x3,
};

enum ELobbyDistanceFilter
{
  k_ELobbyDistanceFilterClose = 0x0,
  k_ELobbyDistanceFilterDefault = 0x1,
  k_ELobbyDistanceFilterFar = 0x2,
  k_ELobbyDistanceFilterWorldwide = 0x3,
};

enum ELobbyType
{
  k_ELobbyTypePrivate = 0x0,
  k_ELobbyTypeFriendsOnly = 0x1,
  k_ELobbyTypePublic = 0x2,
  k_ELobbyTypeInvisible = 0x3,
};

enum SndBus
{
  SND_BUS_REVERB = 0x0,
  SND_BUS_FX = 0x1,
  SND_BUS_VOICE = 0x2,
  SND_BUS_PFUTZ = 0x3,
  SND_BUS_HDRFX = 0x4,
  SND_BUS_UI = 0x5,
  SND_BUS_MUSIC = 0x6,
  SND_BUS_MOVIE = 0x7,
  SND_BUS_REFERENCE = 0x8,
  SND_BUS_COUNT = 0x9,
};

enum ddlPrimitiveTypes_e
{
  DDL_INVALID_TYPE = 0xFFFFFFFF,
  DDL_BYTE_TYPE = 0x0,
  DDL_SHORT_TYPE = 0x1,
  DDL_UINT_TYPE = 0x2,
  DDL_INT_TYPE = 0x3,
  DDL_INT64_TYPE = 0x4,
  DDL_FLOAT_TYPE = 0x5,
  DDL_FIXEDPOINT_TYPE = 0x6,
  DDL_STRING_TYPE = 0x7,
  DDL_STRUCT_TYPE = 0x8,
  DDL_ENUM_TYPE = 0x9,
};

enum SndDuckCategoryType
{
  SND_DUCK_CATEGORY_ALIAS = 0x0,
  SND_DUCK_CATEGORY_AMBIENT = 0x1,
  SND_DUCK_CATEGORY_SCRIPT = 0x2,
  SND_DUCK_CATEGORY_SHELLSHOCK = 0x3,
  SND_DUCK_CATEGORY_BREATH = 0x4,
  SND_DUCK_CATEGORY_ADS = 0x5,
  SND_DUCK_CATEGORY_MENU = 0x6,
  SND_DUCK_CATEGORY_ENEMIES = 0x7,
  SND_DUCK_CATEGORY_HEALTH = 0x8,
  SND_DUCK_CATEGORY_DEBUG = 0x9,
  SND_DUCK_CATEGORY_LEVELFADE = 0xA,
  SND_DUCK_CATEGORY_MOVIE = 0xB,
  SND_DUCK_CATEGORY_COUNT = 0xC,
};

enum SndCallLocation
{
  SND_CALL_LOCATION_SCRIPT = 0x0,
  SND_CALL_LOCATION_GDT = 0x1,
  SND_CALL_LOCATION_COUNT = 0x2,
};

enum SndAliasType
{
  SAT_UNKNOWN = 0x0,
  SAT_LOADED = 0x1,
  SAT_STREAMED = 0x2,
  SAT_PRIMED = 0x3,
  SAT_COUNT = 0x4,
};

enum SndFluxType
{
  SND_FLUX_TYPE_NONE = 0x0,
  SND_FLUX_TYPE_LEFT_OF_PLAYER = 0x1,
  SND_FLUX_TYPE_CENTER_OF_PLAYER = 0x2,
  SND_FLUX_TYPE_RIGHT_OF_PLAYER = 0x3,
  SND_FLUX_TYPE_RANDOM_PLAYER = 0x4,
  SND_FLUX_TYPE_LEFT_OF_SHOT = 0x5,
  SND_FLUX_TYPE_CENTER_OF_SHOT = 0x6,
  SND_FLUX_TYPE_RIGHT_OF_SHOT = 0x7,
  SND_FLUX_TYPE_COUNT = 0x8,
};

enum SndLimitType
{
  SND_LIMIT_NONE = 0x0,
  SND_LIMIT_OLDEST = 0x1,
  SND_LIMIT_REJECT = 0x2,
  SND_LIMIT_PRIORITY = 0x3,
  SND_LIMIT_COUNT = 0x4,
};

enum rankTableColumns_t
{
  MP_RANKTABLE_RANKID = 0x0,
  MP_RANKTABLE_RANK = 0x1,
  MP_RANKTABLE_MINXP = 0x2,
  MP_RANKTABLE_XPTONEXT = 0x3,
  MP_RANKTABLE_SHORTRANK = 0x4,
  MP_RANKTABLE_FULLRANK = 0x5,
  MP_RANKTABLE_ICON = 0x6,
  MP_RANKTABLE_MAXXP = 0x7,
  MP_RANKTABLE_WEAPUNLOCK = 0x8,
  MP_RANKTABLE_PERKUNLOCK = 0x9,
  MP_RANKTABLE_CHALLENGE = 0xA,
  MP_RANKTABLE_CAMO = 0xB,
  MP_RANKTABLE_ATTACHMENT = 0xC,
  MP_RANKTABLE_LEVEL = 0xD,
  MP_RANKTABLE_DISPLAYLEVEL = 0xE,
  MP_RANKTABLE_FEATURE = 0xF,
  MP_RANKTABLE_INGAMERANK = 0x10,
  MP_RANKTABLE_UNLOCKS = 0x11,
  MP_RANKTABLE_COUNT = 0x12,
};

enum demonwareFlags_e
{
  DEMONWARE_FLAGS_INVALID = 0xFFFFFFFF,
  DEMONWARE_FLAGS_SEASONPASS_SENT = 0x0,
  DEMONWARE_FLAGS_MISSING_PRESTIGE_FILE = 0x1,
  DEMONWARE_FLAGS_PRESTIGE_TOO_FAST = 0x2,
  DEMONWARE_FLAGS_UNLOCK_TOKEN_MISMATCH = 0x3,
  DEMONWARE_FLAGS_BAD_GAMERTAG = 0x4,
  DEMONWARE_FLAGS_IW6_PROMO_PURCHASED = 0x5,
  DEMONWARE_FLAGS_IW6_PROMO_ACCESSED = 0x6,
  DEMONWARE_FLAGS_VOTING_VERSION = 0x7,
  DEMONWARE_FLAGS_VOTING_DATA = 0x8,
  DEMONWARE_FLAGS_VOTING_TIME_0 = 0x9,
  DEMONWARE_FLAGS_VOTING_TIME_1 = 0xA,
  DEMONWARE_FLAGS_VOTING_TIME_2 = 0xB,
  DEMONWARE_FLAGS_VOTING_TIME_3 = 0xC,
  DEMONWARE_FLAGS_CONNECTION_TYPE = 0xD,
  DEMONWARE_FLAGS_SPREMINDER_TIME_0 = 0xE,
  DEMONWARE_FLAGS_SPREMINDER_TIME_1 = 0xF,
  DEMONWARE_FLAGS_SPREMINDER_TIME_2 = 0x10,
  DEMONWARE_FLAGS_SPREMINDER_TIME_3 = 0x11,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_0 = 0x12,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_1 = 0x13,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_2 = 0x14,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_3 = 0x15,
  DEMONWARE_FLAGS_DSPPROMOTION_OPT_OUT = 0x16,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_0 = 0x17,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_1 = 0x18,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_2 = 0x19,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_3 = 0x1A,
  DEMONWARE_FLAGS_GHOSTUPSELL_OPT_OUT = 0x1B,
  DEMONWARE_FLAGS_COUNT = 0x1C,
};

enum zmGameModeGroup_t
{
  ZM_GAMEMODEGROUP_ZCLASSIC = 0x0,
  ZM_GAMEMODEGROUP_ZSURVIVAL = 0x1,
  ZM_GAMEMODEGROUP_ZENCOUNTER = 0x2,
  ZM_GAMEMODEGROUP_COUNT = 0x3,
};

enum matchHistoryKeyIndex_t
{
  MP_MATCHHISTORYKEY_STARTINGTIME = 0x0,
  MP_MATCHHISTORYKEY_ENDINGTIME = 0x1,
  MP_MATCHHISTORYKEY_GAMETYPE = 0x2,
  MP_MATCHHISTORYKEY_SCORE = 0x3,
  MP_MATCHHISTORYKEY_KILLS = 0x4,
  MP_MATCHHISTORYKEY_DEATHS = 0x5,
  MP_MATCHHISTORYKEY_SCOREBOARDPOSITION = 0x6,
  MP_MATCHHISTORYKEY_TEAMSCORERATIO = 0x7,
  MP_MATCHHISTORYKEY_QUITTYPE = 0x8,
  MP_MATCHHISTORYKEY_FORGIVEN = 0x9,
  MP_MATCHHISTORYKEY_COUNT = 0xA,
};

enum matchHistoryQuitType_t
{
  MP_QUITTYPE_DASHBOARD = 0x0,
  MP_QUITTYPE_TIMEOUT = 0x1,
  MP_QUITTYPE_KICKED = 0x2,
  MP_QUITTYPE_QUIT = 0x3,
  MP_QUITTYPE_FINISHED = 0x4,
  MP_QUITTYPE_COUNT = 0x5,
};

enum zombieStatsKeyIndex_t
{
  ZM_ZOMBIESTATSKEY_TIME_PLAYED_TOTAL = 0x0,
  ZM_ZOMBIESTATSKEY_WEIGHTED_DOWNS = 0x1,
  ZM_ZOMBIESTATSKEY_WEIGHTED_ROUNDS_PLAYED = 0x2,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY1 = 0x3,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY2 = 0x4,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY3 = 0x5,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY4 = 0x6,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY5 = 0x7,
  ZM_ZOMBIESTATSKEY_KILLS = 0x8,
  ZM_ZOMBIESTATSKEY_ROUNDS = 0x9,
  ZM_ZOMBIESTATSKEY_COMBINED_RANK = 0xA,
  ZM_ZOMBIESTATSKEY_WINS = 0xB,
  ZM_ZOMBIESTATSKEY_LOSSES = 0xC,
  ZM_ZOMBIESTATSKEY_COUNT = 0xD,
};

enum eScoreInfoTableColumns
{
  SCOREINFOTABLE_SCRIPTREF = 0x0,
  SCOREINFOTABLE_SCORESTRING = 0x1,
  SCOREINFOTABLE_MEDALREF = 0x2,
  SCOREINFOTABLE_MEDALBACKING = 0x3,
  SCOREINFOTABLE_INCLUDE_KILLSTREAKS = 0x4,
  SCOREINFOTABLE_SAVEMEDAL = 0x5,
  SCOREINFOTABLE_ADDBOOKMARK = 0x6,
  SCOREINFOTABLE_DOUBLEXP = 0x7,
  SCOREINFOTABLE_GIVEGUNXP = 0x8,
  SCOREINFOTABLE_MEDALCATEGORY = 0x9,
  SCOREINFOTABLE_MEDALSORTKEY = 0xA,
  MAX_SCOREINFOTABLE_COUNT = 0xB,
};

enum $58393598B37D691B0D64F3FCFD7C3E09
{
  CRYPT_OK = 0x0,
  CRYPT_ERROR = 0x1,
  CRYPT_NOP = 0x2,
  CRYPT_INVALID_KEYSIZE = 0x3,
  CRYPT_INVALID_ROUNDS = 0x4,
  CRYPT_FAIL_TESTVECTOR = 0x5,
  CRYPT_BUFFER_OVERFLOW = 0x6,
  CRYPT_INVALID_PACKET = 0x7,
  CRYPT_INVALID_PRNGSIZE = 0x8,
  CRYPT_ERROR_READPRNG = 0x9,
  CRYPT_INVALID_CIPHER = 0xA,
  CRYPT_INVALID_HASH = 0xB,
  CRYPT_INVALID_PRNG = 0xC,
  CRYPT_MEM = 0xD,
  CRYPT_PK_TYPE_MISMATCH = 0xE,
  CRYPT_PK_NOT_PRIVATE = 0xF,
  CRYPT_INVALID_ARG = 0x10,
  CRYPT_FILE_NOTFOUND = 0x11,
  CRYPT_PK_INVALID_TYPE = 0x12,
  CRYPT_PK_INVALID_SYSTEM = 0x13,
  CRYPT_PK_DUP = 0x14,
  CRYPT_PK_NOT_FOUND = 0x15,
  CRYPT_PK_INVALID_SIZE = 0x16,
  CRYPT_INVALID_PRIME_SIZE = 0x17,
  CRYPT_PK_INVALID_PADDING = 0x18,
};

enum statsDeltaColumns_t
{
  STATSDELTA_INDEX = 0x0,
  STATSDELTA_PATH = 0x1,
  STATSDELTA_MINREPORT = 0x2,
  STATSDELTA_MAXREPORT = 0x3,
  STATSDELTA_MINCLAMP = 0x4,
  STATSDELTA_MAXCLAMP = 0x5,
  STATSDELTA_MINDROP = 0x6,
  STATSDELTA_MAXDROP = 0x7,
  STATSDELTA_CLIENTLB = 0x8,
  STATSDELTA_SERVERLB = 0x9,
  STATSDELTA_COUNT = 0xA,
};

enum gameTypeTableColumns_t
{
  GAMETYPETABLE_SECTION = 0x0,
  GAMETYPETABLE_REFERENCE = 0x1,
  GAMETYPETABLE_NAME = 0x2,
  GAMETYPETABLE_DESC = 0x3,
  GAMETYPETABLE_IMAGE = 0x4,
  GAMETYPETABLE_INDEX = 0x5,
  GAMETYPETABLE_SPLITSCREEN = 0x6,
  GAMETYPETABLE_NAMELCASE = 0x7,
  GAMETYPETABLE_TEAMBASED = 0x8,
  GAMETYPETABLE_GROUPNAME = 0x9,
  GAMETYPETABLE_HASHARDCORE = 0xA,
  GAMETYPETABLE_COUNT = 0xB,
};

enum challengeSortOrder_e
{
  SORTORDER_FIRST = 0x0,
  SORTORDER_NEAREST = 0x0,
  SORTORDER_REWARD = 0x1,
  SORTORDER_PERCENTAGECOMPLETED = 0x2,
  SORTORDER_DEFAULT = 0x3,
  SORTORDER_COUNT = 0x4,
  SORTORDER_INVALID = 0xFFFFFFFF,
};

enum statsValidation_t
{
  STATS_VALIDATION_PASSED = 0x0,
  STATS_VALIDATION_FAILED_REPORT = 0x1,
  STATS_VALIDATION_FAILED_TAKEACTION = 0x2,
};

enum SndBankState
{
  SND_BANK_STATE_NEW = 0x0,
  SND_BANK_STATE_STREAM_HEADER = 0x1,
  SND_BANK_STATE_STREAM_TOC = 0x2,
  SND_BANK_STATE_LOADED_HEADER = 0x3,
  SND_BANK_STATE_LOADED_TOC = 0x4,
  SND_BANK_STATE_LOADED_ASSET_WAIT = 0x5,
  SND_BANK_STATE_LOADED_ASSETS = 0x6,
  SND_BANK_STATE_READY_TO_USE = 0x7,
  SND_BANK_STATE_ERROR = 0x8,
};

enum SndLengthType
{
  SND_LENGTH_NOTIFY_NONE = 0x0,
  SND_LENGTH_NOTIFY_SCRIPT = 0x1,
  SND_LENGTH_NOTIFY_SUBTITLE = 0x2,
  SND_LENGTH_NOTIFY_COUNT = 0x3,
};

enum SndCommandType
{
  SND_COMMAND_NOP = 0x0,
  SND_COMMAND_ALIAS_NAME = 0x1,
  SND_COMMAND_PLAY = 0x2,
  SND_COMMAND_STOP_ALIAS = 0x3,
  SND_COMMAND_STOP_ENT = 0x4,
  SND_COMMAND_CINEMATIC_START = 0x5,
  SND_COMMAND_CINEMATIC_END = 0x6,
  SND_COMMAND_DISCONNECT_LISTENER = 0x7,
  SND_COMMAND_SET_LISTENER = 0x8,
  SND_COMMAND_STOP_SOUNDS = 0x9,
  SND_COMMAND_FADE_IN = 0xA,
  SND_COMMAND_FADE_OUT = 0xB,
  SND_COMMAND_SET_ENVIRONMENT_EFFECTS = 0xC,
  SND_COMMAND_DEACTIVATE_ENVIRONMENT_EFFECTS = 0xD,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION = 0xE,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION_RATE = 0xF,
  SND_COMMAND_SET_PLAYBACK_PITCH = 0x10,
  SND_COMMAND_SET_PLAYBACK_PITCH_RATE = 0x11,
  SND_COMMAND_STOP_PLAYBACK = 0x12,
  SND_COMMAND_SET_START_PAUSED = 0x13,
  SND_COMMAND_DUCK = 0x14,
  SND_COMMAND_SET_ENT_STATE = 0x15,
  SND_COMMAND_SET_GAME_STATE = 0x16,
  SND_COMMAND_PLAY_LOOP_AT = 0x17,
  SND_COMMAND_STOP_LOOP_AT = 0x18,
  SND_COMMAND_PLAY_LINE_AT = 0x19,
  SND_COMMAND_STOP_LINE_AT = 0x1A,
  SND_COMMAND_GAME_RESET = 0x1B,
  SND_COMMAND_SET_CONTEXT = 0x1C,
  SND_COMMAND_SET_ENT_CONTEXT = 0x1D,
  SND_COMMAND_SCRIPT_TIMESCALE = 0x1E,
  SND_COMMAND_UPDATE_CG = 0x1F,
  SND_COMMAND_LOAD_BANK = 0x20,
  SND_COMMAND_UNLOAD_BANK = 0x21,
  SND_COMMAND_LOAD_PATCH = 0x22,
  SND_COMMAND_UNLOAD_PATCH = 0x23,
  SND_COMMAND_LOAD_GLOBALS = 0x24,
  SND_COMMAND_UNLOAD_GLOBALS = 0x25,
  SND_COMMAND_PRIME_ALIAS = 0x26,
  SND_COMMAND_RESTART_DRIVER = 0x27,
  SND_COMMAND_SET_SIDE_CHAIN_DUCK = 0x28,
  SND_COMMAND_SET_MUSIC_STATE = 0x29,
  SND_COMMAND_PREFETCH_LOADED_ALIAS = 0x2A,
  SND_COMMAND_SET_GLOBAL_FUTZ = 0x2B,
  SND_COMMAND_SET_AMBIENT_DEFAULT_CONTEXT = 0x2C,
  SND_COMMAND_SET_FRONTEND_MUSIC = 0x2D,
  SND_COMMAND_SET_LOOP_STATE = 0x2E,
  SND_COMMAND_PLAY_LOOPS = 0x2F,
  SND_COMMAND_SHUTDOWN = 0x30,
  SND_COMMAND_COUNT = 0x31,
};

enum SndNotifyType
{
  SND_NOTIFY_NOP = 0x0,
  SND_NOTIFY_ENT_UPDATE = 0x1,
  SND_NOTIFY_SUBTITLE = 0x2,
  SND_NOTIFY_LENGTH = 0x3,
  SND_NOTIFY_PLAYBACK_UPDATE = 0x4,
  SND_NOTIFY_PLAYBACK_FREE = 0x5,
  SND_NOTIFY_BANK_FREE = 0x6,
};

enum SndMusicActiveSegmentState
{
  SND_MUSIC_STATE_INACTIVE = 0x0,
  SND_MUSIC_STATE_PLAY_ON_EXIT = 0x1,
  SND_MUSIC_STATE_START_DELAY = 0x2,
  SND_MUSIC_STATE_PLAYING = 0x3,
  SND_MUSIC_STATE_STOP_DELAY = 0x4,
  SND_MUSIC_STATE_FADE_OUT = 0x5,
};

enum SndFileLoadingState
{
  SFLS_UNLOADED = 0x0,
  SFLS_LOADING = 0x1,
  SFLS_LOADED = 0x2,
};

enum SndEntityUpdate
{
  SND_ENTITY_UPDATE_ALWAYS = 0x0,
  SND_ENTITY_UPDATE_NEVER = 0x1,
};

enum SndSpeaker
{
  SND_SPEAKER_LEFT = 0x0,
  SND_SPEAKER_RIGHT = 0x1,
  SND_SPEAKER_CENTER = 0x2,
  SND_SPEAKER_LFE = 0x3,
  SND_SPEAKER_LEFT_SURROUND = 0x4,
  SND_SPEAKER_RIGHT_SURROUND = 0x5,
  SND_SPEAKER_LEFT_REAR_SURROUND = 0x6,
  SND_SPEAKER_RIGHT_REAR_SURROUND = 0x7,
  SND_SPEAKER_COUNT = 0x8,
};

enum SndEnvEffectPriority
{
  SND_ENVEFFECTPRIO_NONE = 0x0,
  SND_ENVEFFECTPRIO_LEVEL = 0x1,
  SND_ENVEFFECTPRIO_SHELLSHOCK = 0x2,
  SND_ENVEFFECTPRIO_COUNT = 0x3,
};

enum searchSessionMode_t
{
  SEARCH_SESSION_MODE_INVALID = 0x0,
  SEARCH_SESSION_MODE_PUBLIC = 0x1,
  SEARCH_SESSION_MODE_LEAGUE = 0x2,
  SEARCH_SESSION_MODE_LOBBY_MERGE = 0x3,
  SEARCH_SESSION_MODE_DEDICATED_SERVER = 0x4,
  SEARCH_SESSION_MODE_COUNT = 0x5,
};

enum $586BDCB3FD66D74FB5A462B5A5497FA6
{
  GEOGRAPHICAL_MATCHMAKING_NONE = 0x0,
  GEOGRAPHICAL_MATCHMAKING_PREFERRED = 0x1,
  GEOGRAPHICAL_MATCHMAKING_ONLY = 0x2,
};

enum $7FF8790DFFEE1E9F5C37790C535CCEF8
{
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_NONE = 0x0,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_ALL_PREFERRED = 0x1,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_FOREIGN_PREFERRED = 0x2,
};

enum friendsMode_e
{
  FRIENDS_SHOW_PLATFORM = 0x0,
  FRIENDS_SHOW_OFFLINE = 0x1,
  FRIENDS_NUM_MODES = 0x2,
};

enum filesharePlayerFilter_e
{
  FSH_PLAYERFILTER_INVALID = 0xFFFFFFFF,
  FSH_PLAYERFILTER_ALL = 0x0,
  FSH_PLAYERFILTER_SELF = 0x1,
  FSH_PLAYERFILTER_OTHER = 0x2,
  FSH_PLAYERFILTER_FRIENDS = 0x3,
  FSH_PLAYERFILTER_STAFF = 0x4,
  FSH_PLAYERFILTER_CLAN = 0x5,
  FSH_PLAYERFILTER_LEAGUE = 0x6,
};

enum $DD9DFE6E178BAB358DEA0FF475AFD664
{
  GAMETYPES_SECTION_GAME = 0x0,
  GAMETYPES_SECTION_BT = 0x1,
  GAMETYPES_SECTION_LB = 0x2,
  GAMETYPES_SECTION_LBRESET = 0x3,
  GAMETYPES_SECTION_LBFILTER = 0x4,
  GAMETYPES_SECTION_ZM_STARTLOC = 0x5,
  GAMETYPES_SECTION_ZM_STARTLOCGAME = 0x6,
};

enum $4B60AFDBD1C91403080D555C101F71D4
{
  GAMETYPES_COL_GAME_REF = 0x1,
  GAMETYPES_COL_GAME_NAMECAPS = 0x2,
  GAMETYPES_COL_GAME_DESCRIPTION = 0x3,
  GAMETYPES_COL_GAME_IMAGE = 0x4,
  GAMETYPES_COL_GAME_INDEX = 0x5,
  GAMETYPES_COL_GAME_SPLITSCREEN = 0x6,
  GAMETYPES_COL_GAME_NAMELOWER = 0x7,
  GAMETYPES_COL_GAME_ISTEAMBASED = 0x8,
  GAMETYPES_COL_GAME_GROUP = 0x9,
};

enum $F2C18BEC7E977CFB4AFFD1F4C6027C44
{
  GAMETYPES_COL_ZM_STARTLOC_INDEX = 0x1,
  GAMETYPES_COL_ZM_STARTLOC_MAPREF = 0x2,
  GAMETYPES_COL_ZM_STARTLOC_REF = 0x3,
  GAMETYPES_COL_ZM_STARTLOC_NAMECAPS = 0x4,
  GAMETYPES_COL_ZM_STARTLOC_DESCRIPTION = 0x5,
  GAMETYPES_COL_ZM_STARTLOC_IMAGE = 0x6,
  GAMETYPES_COL_ZM_STARTLOC_GAMEMODENUM = 0x7,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_X = 0x8,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_Y = 0x9,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_X = 0xA,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_Y = 0xB,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_LEFT = 0xC,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_RIGHT = 0xD,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_UP = 0xE,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_DOWN = 0xF,
  GAMETYPES_COL_ZM_STARTLOC_NAMELOWER = 0x10,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_X = 0x11,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_Y = 0x12,
};

enum $0809BA0317DE909CB6BAC2076D310BC4
{
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_INDEX = 0x1,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_MAP_REF = 0x2,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_STARTLOC_REF = 0x3,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_GAMEMODE_REF = 0x4,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_DLC_GAMEMODE = 0x5,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_NEW_ICON_PLACEMENT = 0x6,
};

enum fileshareStatType_e
{
  FSH_STATS_VIEWS = 0x0,
  FSH_STATS_VOTES = 0x1,
  FSH_NUM_STATS = 0x2,
};

enum fileshareState_e
{
  FILESHARE_STATE_INVALID = 0x0,
  FILESHARE_STATE_WORKING = 0x1,
  FILESHARE_STATE_SLOTS_FETCHED = 0x2,
  FILESHARE_STATE_VIEWS_FETCHED = 0x3,
  FILESHARE_STATE_VOTES_FETCHED = 0x4,
  FILESHARE_STATE_FAILURE = 0x5,
  FILESHARE_STATE_VALID = 0x6,
};

enum
{
  PHYS_ALLOC_LOW = 0x0,
  PHYS_ALLOC_HIGH = 0x1,
  PHYS_ALLOC_COUNT = 0x2,
};

enum $614B4D8D9C116B835CF515A3E60245E8
{
  FSHTABLE_CATEGORIES_COL_CATEGORYNAME = 0x0,
  FSHTABLE_CATEGORIES_COL_GROUPNAME = 0x1,
  FSHTABLE_CATEGORIES_COL_DWID = 0x2,
  FSHTABLE_CATEGORIES_COL_LOCNAME = 0x3,
};

enum $DB76EC003149E091C4832C7A8CCEAC02
{
  FSHTABLE_GROUPS_COL_GROUPNAME = 0x0,
  FSHTABLE_GROUPS_COL_FIRSTSLOT = 0x1,
  FSHTABLE_GROUPS_COL_REGULARQUOTA = 0x2,
  FSHTABLE_GROUPS_COL_PREMIUMQUOTA = 0x3,
  FSHTABLE_GROUPS_COL_ISMANAGED = 0x4,
  FSHTABLE_GROUPS_COL_LOCNAME = 0x5,
  FSHTABLE_GROUPS_COL_ICON = 0x6,
  FSHTABLE_GROUPS_COL_R = 0x7,
  FSHTABLE_GROUPS_COL_G = 0x8,
  FSHTABLE_GROUPS_COL_B = 0x9,
};

enum language_t
{
  LANGUAGE_ENGLISH = 0x0,
  LANGUAGE_FRENCH = 0x1,
  LANGUAGE_FRENCHCANADIAN = 0x2,
  LANGUAGE_GERMAN = 0x3,
  LANGUAGE_AUSTRIAN = 0x4,
  LANGUAGE_ITALIAN = 0x5,
  LANGUAGE_SPANISH = 0x6,
  LANGUAGE_BRITISH = 0x7,
  LANGUAGE_RUSSIAN = 0x8,
  LANGUAGE_POLISH = 0x9,
  LANGUAGE_KOREAN = 0xA,
  LANGUAGE_JAPANESE = 0xB,
  LANGUAGE_CZECH = 0xC,
  LANGUAGE_FULLJAPANESE = 0xD,
  LANGUAGE_PORTUGUESE = 0xE,
  LANGUAGE_MEXICANSPANISH = 0xF,
  MAX_LANGUAGES = 0x10,
};

enum eliteStatus_e
{
  ELITE_NOT_CHECKED = 0x0,
  ELITESUBSCRIBER_START = 0x1,
  ELITESUBSCRIBER_GET_INFO_FROM_FP = 0x2,
  ELITESUBSCRIBER_GET_INFO_FROM_FP_SUCCEEDED = 0x3,
  ELITESUBSCRIBER_GET_INFO_FROM_DW = 0x4,
  ELITESUBSCRIBER_GETTING_INFO_FROM_DW = 0x5,
  ELITESUBSCRIBER_COMPARE_RETRIEVED_DW_INFO = 0x6,
  ELITESUBSCRIBER_REFRESH_DW_INFO = 0x7,
  ELITESUBSCRIBER_REFRESHING_DW_INFO = 0x8,
  ELITESUBSCRIBER_FAILED = 0x9,
  ELITESUBSCRIBER_SUCCEEDED = 0xA,
  ELITECLAN_START = 0xB,
  ELITECLAN_GET_CLAN = 0xC,
  ELITECLAN_GETTING_CLAN = 0xD,
  ELITECLAN_GET_PUBLIC_PROFILE = 0xE,
  ELITECLAN_GETTING_PUBLIC_PROFILE = 0xF,
  ELITECLAN_GET_PRIVATE_PROFILE = 0x10,
  ELITECLAN_GETTING_PRIVATE_PROFILE = 0x11,
  ELITECLAN_GET_CLAN_MEMBERS = 0x12,
  ELITECLAN_GETTING_CLAN_MEMBERS = 0x13,
  ELITECLAN_GET_CLAN_LEVELANDXP = 0x14,
  ELITECLAN_GETTING_CLAN_LEVELANDXP = 0x15,
  ELITECLAN_FAILED = 0x16,
  ELITECLAN_SUCCEEDED = 0x17,
  ELITE_CHECKED = 0x18,
  ELITE_MAX_STATES = 0x19,
};

enum eSubLevel_e
{
  ELITE_SUBSCRIPTION_LEVEL_UNKNOWN = 0xFFFFFFFF,
  ELITE_SUBSCRIPTION_LEVEL_NONE = 0x0,
  ELITE_SUBSCRIPTION_LEVEL_REGISTERED = 0x1,
  ELITE_SUBSCRIPTION_LEVEL_PAYING = 0x2,
  ELITE_SUBSCRIPTION_LEVEL_FOUNDER = 0x3,
};

enum EliteStats_e
{
  ELITE_STATS_MEMBER = 0x0,
  ELITE_STATS_FIRST = 0x0,
  ELITE_STATS_FOUNDER = 0x1,
  ELITE_STATS_PAIDMEMBER = 0x2,
  ELITE_STATS_COUNT = 0x3,
};

enum jsmnPrimitiveType_e
{
  JSMN_PRIMITIVE_TYPE_INVALID = 0x0,
  JSMN_PRIMITIVE_TYPE_INT = 0x1,
  JSMN_PRIMITIVE_TYPE_BOOL = 0x2,
};

enum jsmntype_t
{
  JSMN_PRIMITIVE = 0x0,
  JSMN_OBJECT = 0x1,
  JSMN_ARRAY = 0x2,
  JSMN_KEY = 0x3,
  JSMN_STRING = 0x4,
};

enum jsmnerr_t
{
  JSMN_ERROR_NOMEM = 0xFFFFFFFF,
  JSMN_ERROR_INVAL = 0xFFFFFFFE,
  JSMN_ERROR_PART = 0xFFFFFFFD,
  JSMN_SUCCESS = 0x0,
};

enum combatRecordInfoTypes_t
{
  INFO_TYPE_INVALID = 0xFFFFFFFF,
  GAMEMODES = 0x0,
  WEAPONS = 0x1,
  EQUIPMENT = 0x2,
  SCORESTREAKS = 0x3,
  MEDALS = 0x4,
  INFO_TYPE_COUNT = 0x5,
};

enum combatRecordMedalCategories_t
{
  CATEGORY_NONE = 0x0,
  CATEGORY_COMBAT = 0x1,
  CATEGORY_SCORESTREAKS = 0x2,
  CATEGORY_ANTISCORESTREAKS = 0x3,
  CATEGORY_GAMEMODES = 0x4,
  CATEGORY_COUNT = 0x5,
};

enum thresholdExceeded_e
{
  THRESHOLD_EXCEEDED_SCORE = 0x0,
  THRESHOLD_EXCEEDED_SCORE_PER_MIN = 0x1,
  THRESHOLD_EXCEEDED_KILLS = 0x2,
  THRESHOLD_EXCEEDED_DEATHS = 0x3,
  THRESHOLD_EXCEEDED_KD_RATIO = 0x4,
  THRESHOLD_EXCEEDED_KILLS_PER_MIN = 0x5,
  THRESHOLD_EXCEEDED_PLANTS = 0x6,
  THRESHOLD_EXCEEDED_DEFUSES = 0x7,
  THRESHOLD_EXCEEDED_CAPTURES = 0x8,
  THRESHOLD_EXCEEDED_DEFENDS = 0x9,
  THRESHOLD_EXCEEDED_TOTAL_TIME_PLAYED = 0xA,
  THRESHOLD_EXCEEDED_TACTICAL_INSERTION_USE = 0xB,
  THRESHOLD_EXCEEDED_JOIN_ATTEMPTS = 0xC,
  THRESHOLD_EXCEEDED_XP = 0xD,
  THRESHOLD_EXCEEDED_SPLITSCREEN = 0xE,
  THRESHOLD_EXCEEDED_COUNT = 0xF,
};

enum challengeTest_t
{
  CT_TYPE_INVALID = 0x0,
  CT_TYPE_CRC32 = 0x1,
  CT_TYPE_SHA = 0x2,
  CT_TYPE_CRC32_SPLIT = 0x3,
};

enum challengeResponseFunctionIDs_t
{
  FUNC_ID_CHECKSUM_CRC32 = 0x1,
  FUNC_ID_CHECKSUM_SHA = 0x2,
  FUNC_ID_CHECKSUM_CRC32_SPLIT = 0x3,
  FUNC_ID_DVAR = 0x4,
  FUNC_ID_DVAR_FLOAT = 0x5,
  FUNC_ID_EXPRESSION = 0x6,
  FUNC_ID_MIPSTER = 0x8,
};

enum SndSpeakerFlag
{
  SND_SPEAKER_FLAG_LEFT = 0x1,
  SND_SPEAKER_FLAG_RIGHT = 0x2,
  SND_SPEAKER_FLAG_CENTER = 0x4,
  SND_SPEAKER_FLAG_LFE = 0x8,
  SND_SPEAKER_FLAG_LEFT_SURROUND = 0x10,
  SND_SPEAKER_FLAG_RIGHT_SURROUND = 0x20,
  SND_SPEAKER_FLAG_LEFT_REAR_SURROUND = 0x40,
  SND_SPEAKER_FLAG_RIGHT_REAR_SURROUND = 0x80,
};

enum snd_occlusion_query_type
{
  SND_OCCLUSION_QUERY_TYPE_SINGLE = 0x0,
  SND_OCCLUSION_QUERY_TYPE_MULTIPLE = 0x1,
};

enum snd_occlusion_single_state
{
  SND_OCCLUSION_SINGLE_STATE_FREE = 0x0,
  SND_OCCLUSION_SINGLE_STATE_PENDING = 0x1,
  SND_OCCLUSION_SINGLE_STATE_DONE = 0x2,
};

enum sd_decoder_state
{
  SD_DECODER_FREE = 0x0,
  SD_DECODER_ALLOCATED = 0x1,
  SD_DECODER_RUNNING = 0x2,
  SD_DECODER_FREED = 0x3,
};

enum sd_voice_param_state
{
  SD_VOICE_PARAM_FREE = 0x0,
  SD_VOICE_PARAM_ALLOCATED = 0x1,
};

enum sd_mix_param_state
{
  SD_MIX_PARAM_FREE = 0x0,
  SD_MIX_PARAM_ALLOCATED = 0x1,
};

enum snd_asset_format
{
  SND_ASSET_FORMAT_PCMS16 = 0x0,
  SND_ASSET_FORMAT_PCMS24 = 0x1,
  SND_ASSET_FORMAT_PCMS32 = 0x2,
  SND_ASSET_FORMAT_IEEE = 0x3,
  SND_ASSET_FORMAT_XMA4 = 0x4,
  SND_ASSET_FORMAT_MP3 = 0x5,
  SND_ASSET_FORMAT_MSADPCM = 0x6,
  SND_ASSET_FORMAT_WMA = 0x7,
  SND_ASSET_FORMAT_FLAC = 0x8,
  SND_ASSET_FORMAT_WIIUADPCM = 0x9,
  SND_ASSET_FORMAT_MPC = 0xA,
  SND_ASSET_FORMAT_COUNT = 0xB,
};

enum sd_voice_state
{
  SD_VOICE_FREE = 0x0,
  SD_VOICE_ALLOCATED = 0x1,
  SD_VOICE_ACTIVE = 0x2,
  SD_VOICE_FREED = 0x3,
};

enum sd_mix_channel
{
  SD_MIX_CHANNEL_LF = 0x0,
  SD_MIX_CHANNEL_RF = 0x1,
  SD_MIX_CHANNEL_CF = 0x2,
  SD_MIX_CHANNEL_LFE = 0x3,
  SD_MIX_CHANNEL_LS = 0x4,
  SD_MIX_CHANNEL_RS = 0x5,
  SD_MIX_CHANNEL_LR = 0x6,
  SD_MIX_CHANNEL_RR = 0x7,
};

enum SndOverlayType
{
  SND_OVERLAY_NONE = 0x0,
  SND_OVERLAY_3D = 0x1,
  SND_OVERLAY_STREAM = 0x2,
  SND_OVERLAY_2D = 0x3,
};

enum SndCsvParseEntryType
{
  SND_CSV_STRING = 0x0,
  SND_CSV_FLOAT = 0x1,
  SND_CSV_INT = 0x2,
  SND_CSV_ENUM = 0x3,
  SND_CSV_FLAG = 0x4,
  SND_CSV_USHORT_DBSPL = 0x5,
  SND_CSV_FLOAT_DBSPL = 0x6,
  SND_CSV_CENTS = 0x7,
  SND_CSV_HASH = 0x8,
  SND_CSV_ENUM_BITS = 0x9,
  SND_CSV_FLAG_BITS = 0xA,
  SND_CSV_BYTE = 0xB,
  SND_CSV_ENUM_BYTE = 0xC,
  SND_CSV_SHORT = 0xD,
  SND_CSV_USHORT = 0xE,
  SND_CSV_NORM_BYTE = 0xF,
  SND_CSV_DISTANCE = 0x10,
};

enum SndDataTableType
{
  SND_TABLE_ALIAS = 0x0,
  SND_TABLE_GROUP = 0x1,
  SND_TABLE_CURVE = 0x2,
  SND_TABLE_PAN = 0x3,
  SND_TABLE_DUCK_GROUP = 0x4,
  SND_TABLE_DUCK = 0x5,
  SND_TABLE_CONTEXT = 0x6,
  SND_TABLE_RADVERB = 0x7,
  SND_TABLE_MASTER = 0x8,
  SND_TABLE_VOICE_DUCK = 0x9,
  SND_TABLE_DUCK_PATCH_ATTEN = 0xA,
  SND_TABLE_DUCK_PATCH_LPF = 0xB,
  SND_TABLE_COUNT = 0xC,
};

enum SndLoadState
{
  SND_LOAD_UNUSED = 0x0,
  SND_LOAD_FINISHED = 0x1,
  SND_LOAD_PENDING = 0x2,
  SND_LOAD_READY = 0x3,
};

enum SndRandomizeType
{
  SND_RANDOMIZE_INSTANCE = 0x0,
  SND_RANDOMIZE_ENTITY_VOLUME = 0x1,
  SND_RANDOMIZE_ENTITY_PITCH = 0x2,
  SND_RANDOMIZE_ENTITY_VARIANT = 0x4,
};

enum $2D1E6DA4D04A7656C011CC5C5FFC43A5
{
  SCR_GAMECONST_ILLEGAL = 0x0,
  SCR_GAMECONST___name = 0x1,
  SCR_GAMECONST_abs = 0x2,
  SCR_GAMECONST_absangleclamp180 = 0x3,
  SCR_GAMECONST_absangleclamp360 = 0x4,
  SCR_GAMECONST_accuracy = 0x5,
  SCR_GAMECONST_acos = 0x6,
  SCR_GAMECONST_actionslotfourbuttonpressed = 0x7,
  SCR_GAMECONST_actionslotonebuttonpressed = 0x8,
  SCR_GAMECONST_actionslotthreebuttonpressed = 0x9,
  SCR_GAMECONST_actionslottwobuttonpressed = 0xA,
  SCR_GAMECONST_activateclientexploder = 0xB,
  SCR_GAMECONST_activatecrosshair = 0xC,
  SCR_GAMECONST_activatemixer = 0xD,
  SCR_GAMECONST_activator = 0xE,
  SCR_GAMECONST_addaieventlistener = 0xF,
  SCR_GAMECONST_addargus = 0x10,
  SCR_GAMECONST_addcylinderinfluencer = 0x11,
  SCR_GAMECONST_adddebugcommand = 0x12,
  SCR_GAMECONST_adddemobookmark = 0x13,
  SCR_GAMECONST_adddstat = 0x14,
  SCR_GAMECONST_addfriendlyscrambler = 0x15,
  SCR_GAMECONST_addgoal = 0x16,
  SCR_GAMECONST_addnodetocurve = 0x17,
  SCR_GAMECONST_addgametypestat = 0x18,
  SCR_GAMECONST_addplayerstat = 0x19,
  SCR_GAMECONST_addplayerstatwithgametype = 0x1A,
  SCR_GAMECONST_addrankxp = 0x1B,
  SCR_GAMECONST_addrankxpvalue = 0x1C,
  SCR_GAMECONST_addreactionevent = 0x1D,
  SCR_GAMECONST_addspawnpoints = 0x1E,
  SCR_GAMECONST_addsphereinfluencer = 0x1F,
  SCR_GAMECONST_addtestclient = 0x20,
  SCR_GAMECONST_addtocompass = 0x21,
  SCR_GAMECONST_addtomenuroot = 0x22,
  SCR_GAMECONST_addvehicletocompass = 0x23,
  SCR_GAMECONST_addweaponstat = 0x24,
  SCR_GAMECONST_addbonuscardstat = 0x25,
  SCR_GAMECONST_adsbuttonpressed = 0x26,
  SCR_GAMECONST_aimatpos = 0x27,
  SCR_GAMECONST_aimingatfriendly = 0x28,
  SCR_GAMECONST_aiteam = 0x29,
  SCR_GAMECONST_aiweapon = 0x2A,
  SCR_GAMECONST_alertlevel = 0x2B,
  SCR_GAMECONST_alertlevelint = 0x2C,
  SCR_GAMECONST_alignx = 0x2D,
  SCR_GAMECONST_aligny = 0x2E,
  SCR_GAMECONST_allclientsprint = 0x2F,
  SCR_GAMECONST_allocatemixerlights = 0x30,
  SCR_GAMECONST_allocatesoundrandoms = 0x31,
  SCR_GAMECONST_allowads = 0x32,
  SCR_GAMECONST_allowcrouch = 0x33,
  SCR_GAMECONST_allowdeath = 0x34,
  SCR_GAMECONST_allowedstances = 0x35,
  SCR_GAMECONST_allowjump = 0x36,
  SCR_GAMECONST_allowlean = 0x37,
  SCR_GAMECONST_allowmelee = 0x38,
  SCR_GAMECONST_allowpain = 0x39,
  SCR_GAMECONST_blockingpain = 0x3A,
  SCR_GAMECONST_allowpickupweapons = 0x3B,
  SCR_GAMECONST_allowpitchangle = 0x3C,
  SCR_GAMECONST_allowprone = 0x3D,
  SCR_GAMECONST_allowreact = 0x3E,
  SCR_GAMECONST_allowspectateteam = 0x3F,
  SCR_GAMECONST_allowsprint = 0x40,
  SCR_GAMECONST_allowstand = 0x41,
  SCR_GAMECONST_alpha = 0x42,
  SCR_GAMECONST_angleclamp180 = 0x43,
  SCR_GAMECONST_anglelerp = 0x44,
  SCR_GAMECONST_anglelerprate = 0x45,
  SCR_GAMECONST_angles = 0x46,
  SCR_GAMECONST_anglestoforward = 0x47,
  SCR_GAMECONST_anglestoright = 0x48,
  SCR_GAMECONST_anglestoup = 0x49,
  SCR_GAMECONST_anim_pose = 0x4A,
  SCR_GAMECONST_animateui = 0x4B,
  SCR_GAMECONST_animcustom = 0x4C,
  SCR_GAMECONST_animgetchildat = 0x4D,
  SCR_GAMECONST_animgetnumchildren = 0x4E,
  SCR_GAMECONST_animhasnotetrack = 0x4F,
  SCR_GAMECONST_animmode = 0x50,
  SCR_GAMECONST_animrelative = 0x51,
  SCR_GAMECONST_animscript = 0x52,
  SCR_GAMECONST_animscripted = 0x53,
  SCR_GAMECONST_animscriptedskiprestart = 0x54,
  SCR_GAMECONST_animtranslationscale = 0x55,
  SCR_GAMECONST_announcement = 0x56,
  SCR_GAMECONST_anyammoforweaponmodes = 0x57,
  SCR_GAMECONST_archived = 0x58,
  SCR_GAMECONST_archivetime = 0x59,
  SCR_GAMECONST_areallmissionsatscore = 0x5A,
  SCR_GAMECONST_arecontrolsfrozen = 0x5B,
  SCR_GAMECONST_aretexturesloaded = 0x5C,
  SCR_GAMECONST_array = 0x5D,
  SCR_GAMECONST_artilleryiconlocation = 0x5E,
  SCR_GAMECONST_asin = 0x5F,
  SCR_GAMECONST_assert = 0x60,
  SCR_GAMECONST_assertmsg = 0x61,
  SCR_GAMECONST_assists = 0x62,
  SCR_GAMECONST_atan = 0x63,
  SCR_GAMECONST_atdangerousnode = 0x64,
  SCR_GAMECONST_attach = 0x65,
  SCR_GAMECONST_attachpath = 0x66,
  SCR_GAMECONST_attachtodec20terminal = 0x67,
  SCR_GAMECONST_attackbuttonpressed = 0x68,
  SCR_GAMECONST_attacker = 0x69,
  SCR_GAMECONST_attackeraccuracy = 0x6A,
  SCR_GAMECONST_badplace_arc = 0x6B,
  SCR_GAMECONST_badplace_brush = 0x6C,
  SCR_GAMECONST_badplace_cylinder = 0x6D,
  SCR_GAMECONST_badplace_delete = 0x6E,
  SCR_GAMECONST_badplaceawareness = 0x6F,
  SCR_GAMECONST_ban = 0x70,
  SCR_GAMECONST_bbprint = 0x71,
  SCR_GAMECONST_beginlocationairstrikeselection = 0x72,
  SCR_GAMECONST_beginlocationartilleryselection = 0x73,
  SCR_GAMECONST_beginlocationcomlinkselection = 0x74,
  SCR_GAMECONST_beginlocationmortarselection = 0x75,
  SCR_GAMECONST_beginlocationnapalmselection = 0x76,
  SCR_GAMECONST_beginlocationselection = 0x77,
  SCR_GAMECONST_beginprediction = 0x78,
  SCR_GAMECONST_birthtime = 0x79,
  SCR_GAMECONST_bloodimpact = 0x7A,
  SCR_GAMECONST_boundswouldtelefrag = 0x7B,
  SCR_GAMECONST_box = 0x7C,
  SCR_GAMECONST_breakrope = 0x7D,
  SCR_GAMECONST_buildcurve = 0x7E,
  SCR_GAMECONST_bulletspread = 0x7F,
  SCR_GAMECONST_bullettrace = 0x80,
  SCR_GAMECONST_bullettracepassed = 0x81,
  SCR_GAMECONST_bullettracer = 0x82,
  SCR_GAMECONST_buttonpressed = 0x83,
  SCR_GAMECONST_bypasssledgehammer = 0x84,
  SCR_GAMECONST_calclookaheadpos = 0x85,
  SCR_GAMECONST_calcpathlength = 0x86,
  SCR_GAMECONST_calcplayeroptions = 0x87,
  SCR_GAMECONST_calcweaponoptions = 0x88,
  SCR_GAMECONST_cameraactivate = 0x89,
  SCR_GAMECONST_camerasetlookat = 0x8A,
  SCR_GAMECONST_camerasetposition = 0x8B,
  SCR_GAMECONST_canattackenemynode = 0x8C,
  SCR_GAMECONST_cancelaimove = 0x8D,
  SCR_GAMECONST_cancelgoal = 0x8E,
  SCR_GAMECONST_canflank = 0x8F,
  SCR_GAMECONST_canplaceriotshield = 0x90,
  SCR_GAMECONST_canplayerplaceturret = 0x91,
  SCR_GAMECONST_canplayerplacevehicle = 0x92,
  SCR_GAMECONST_cansee = 0x93,
  SCR_GAMECONST_canseepathgoal = 0x94,
  SCR_GAMECONST_canshoot = 0x95,
  SCR_GAMECONST_canshootenemy = 0x96,
  SCR_GAMECONST_canspawnturret = 0x97,
  SCR_GAMECONST_canuseturret = 0x98,
  SCR_GAMECONST_captures = 0x99,
  SCR_GAMECONST_carryturret = 0x9A,
  SCR_GAMECONST_ceil = 0x9B,
  SCR_GAMECONST_changeadvertisedstatus = 0x9C,
  SCR_GAMECONST_changefontscaleovertime = 0x9D,
  SCR_GAMECONST_changelevel = 0x9E,
  SCR_GAMECONST_changeseatbuttonpressed = 0x9F,
  SCR_GAMECONST_checkcoverexitposwithpath = 0xA0,
  SCR_GAMECONST_checkgrenadelaunch = 0xA1,
  SCR_GAMECONST_checkgrenadelaunchpos = 0xA2,
  SCR_GAMECONST_checkgrenadethrow = 0xA3,
  SCR_GAMECONST_checkgrenadethrowpos = 0xA4,
  SCR_GAMECONST_checkprone = 0xA5,
  SCR_GAMECONST_circle = 0xA6,
  SCR_GAMECONST_classname = 0xA7,
  SCR_GAMECONST_cleanupspawneddynents = 0xA8,
  SCR_GAMECONST_clearallcorpses = 0xA9,
  SCR_GAMECONST_clearalltextafterhudelem = 0xAA,
  SCR_GAMECONST_clearalternateaimparams = 0xAB,
  SCR_GAMECONST_clearanim = 0xAC,
  SCR_GAMECONST_clearanimlimited = 0xAD,
  SCR_GAMECONST_clearcenterpopups = 0xAE,
  SCR_GAMECONST_clearclientflag = 0xAF,
  SCR_GAMECONST_cleardamageindicator = 0xB0,
  SCR_GAMECONST_cleardefaultpitch = 0xB1,
  SCR_GAMECONST_clearendgame = 0xB2,
  SCR_GAMECONST_clearenemy = 0xB3,
  SCR_GAMECONST_clearentityowner = 0xB4,
  SCR_GAMECONST_clearentitytarget = 0xB5,
  SCR_GAMECONST_clearfixednodesafevolume = 0xB6,
  SCR_GAMECONST_cleargoalvolume = 0xB7,
  SCR_GAMECONST_cleargoalyaw = 0xB8,
  SCR_GAMECONST_cleargunnertarget = 0xB9,
  SCR_GAMECONST_clearlocalizedstrings = 0xBA,
  SCR_GAMECONST_clearlookatent = 0xBB,
  SCR_GAMECONST_clearmovehistory = 0xBC,
  SCR_GAMECONST_clearnearestenemyscrambler = 0xBD,
  SCR_GAMECONST_clearperks = 0xBE,
  SCR_GAMECONST_clearphysicsgravity = 0xBF,
  SCR_GAMECONST_clearpitchorient = 0xC0,
  SCR_GAMECONST_clearpopups = 0xC1,
  SCR_GAMECONST_clearpotentialthreat = 0xC2,
  SCR_GAMECONST_clearruntopos = 0xC3,
  SCR_GAMECONST_clearscriptenemy = 0xC4,
  SCR_GAMECONST_clearscriptgoal = 0xC5,
  SCR_GAMECONST_clearspawnpoints = 0xC6,
  SCR_GAMECONST_clearstowedweapon = 0xC7,
  SCR_GAMECONST_clearspawnpointsbaseweight = 0xC8,
  SCR_GAMECONST_cleartargetent = 0xC9,
  SCR_GAMECONST_cleartargetentity = 0xCA,
  SCR_GAMECONST_cleartargetyaw = 0xCB,
  SCR_GAMECONST_clearturrettarget = 0xCC,
  SCR_GAMECONST_clearvehgoalpos = 0xCD,
  SCR_GAMECONST_clearviewlockent = 0xCE,
  SCR_GAMECONST_clientannouncement = 0xCF,
  SCR_GAMECONST_clientclaimtrigger = 0xD0,
  SCR_GAMECONST_clientflag = 0xD1,
  SCR_GAMECONST_clienthassnapshot = 0xD2,
  SCR_GAMECONST_clientprint = 0xD3,
  SCR_GAMECONST_clientreleasetrigger = 0xD4,
  SCR_GAMECONST_clientsysregister = 0xD5,
  SCR_GAMECONST_clientsyssetstate = 0xD6,
  SCR_GAMECONST_cloneplayer = 0xD7,
  SCR_GAMECONST_closefile = 0xD8,
  SCR_GAMECONST_closeingamemenu = 0xD9,
  SCR_GAMECONST_closemainmenu = 0xDA,
  SCR_GAMECONST_closemenu = 0xDB,
  SCR_GAMECONST_closer = 0xDC,
  SCR_GAMECONST_codeplayloopedfx = 0xDD,
  SCR_GAMECONST_codespawn = 0xDE,
  SCR_GAMECONST_codespawnerforcespawn = 0xDF,
  SCR_GAMECONST_codespawnerspawn = 0xE0,
  SCR_GAMECONST_codespawnfx = 0xE1,
  SCR_GAMECONST_codespawnturret = 0xE2,
  SCR_GAMECONST_codespawnvehicle = 0xE3,
  SCR_GAMECONST_collisiontestpointsinbox = 0xE4,
  SCR_GAMECONST_collisiontestpointsincone = 0xE5,
  SCR_GAMECONST_collisiontestpointsincylinder = 0xE6,
  SCR_GAMECONST_collisiontestpointsinpill = 0xE7,
  SCR_GAMECONST_collisiontestpointsinsphere = 0xE8,
  SCR_GAMECONST_color = 0xE9,
  SCR_GAMECONST_combatmode = 0xEA,
  SCR_GAMECONST_combineangles = 0xEB,
  SCR_GAMECONST_commitsave = 0xEC,
  SCR_GAMECONST_compassscale = 0xED,
  SCR_GAMECONST_connectpaths = 0xEE,
  SCR_GAMECONST_coopinfo = 0xEF,
  SCR_GAMECONST_cos = 0xF0,
  SCR_GAMECONST_count = 0xF1,
  SCR_GAMECONST_createdynentandlaunch = 0xF2,
  SCR_GAMECONST_createprintchannel = 0xF3,
  SCR_GAMECONST_createrope = 0xF4,
  SCR_GAMECONST_createsoundrandom = 0xF5,
  SCR_GAMECONST_createstreamerhint = 0xF6,
  SCR_GAMECONST_createthreatbiasgroup = 0xF7,
  SCR_GAMECONST_createtrack = 0xF8,
  SCR_GAMECONST_cruncharray = 0xF9,
  SCR_GAMECONST_damageconetrace = 0xFA,
  SCR_GAMECONST_damagedir = 0xFB,
  SCR_GAMECONST_damagelocation = 0xFC,
  SCR_GAMECONST_damagemod = 0xFD,
  SCR_GAMECONST_damagetaken = 0xFE,
  SCR_GAMECONST_damageweapon = 0xFF,
  SCR_GAMECONST_damageyaw = 0x100,
  SCR_GAMECONST_deactivatechannelvolumes = 0x101,
  SCR_GAMECONST_deactivateclientexploder = 0x102,
  SCR_GAMECONST_deactivatereverb = 0x103,
  SCR_GAMECONST_deathfxname = 0x104,
  SCR_GAMECONST_deathfxsound = 0x105,
  SCR_GAMECONST_deathfxtag = 0x106,
  SCR_GAMECONST_deathmodel = 0x107,
  SCR_GAMECONST_deathquakeduration = 0x108,
  SCR_GAMECONST_deathquakeradius = 0x109,
  SCR_GAMECONST_deathquakescale = 0x10A,
  SCR_GAMECONST_deaths = 0x10B,
  SCR_GAMECONST_deathstreakactive = 0x10C,
  SCR_GAMECONST_debugstar = 0x10D,
  SCR_GAMECONST_defends = 0x10E,
  SCR_GAMECONST_defuses = 0x10F,
  SCR_GAMECONST_delayeddeath = 0x110,
  SCR_GAMECONST_delete = 0x111,
  SCR_GAMECONST_deletefakeent = 0x112,
  SCR_GAMECONST_deletefx = 0x113,
  SCR_GAMECONST_deletepathnode = 0x114,
  SCR_GAMECONST_deleterope = 0x115,
  SCR_GAMECONST_deployriotshield = 0x116,
  SCR_GAMECONST_depthinwater = 0x117,
  SCR_GAMECONST_desiredangle = 0x118,
  SCR_GAMECONST_destroy = 0x119,
  SCR_GAMECONST_destructiblehasnotify = 0x11A,
  SCR_GAMECONST_destructions = 0x11B,
  SCR_GAMECONST_detach = 0x11C,
  SCR_GAMECONST_detachall = 0x11D,
  SCR_GAMECONST_detachdec20terminal = 0x11E,
  SCR_GAMECONST_detonate = 0x11F,
  SCR_GAMECONST_devaddpitch = 0x120,
  SCR_GAMECONST_devaddroll = 0x121,
  SCR_GAMECONST_devaddyaw = 0x122,
  SCR_GAMECONST_diequietly = 0x123,
  SCR_GAMECONST_difftrack = 0x124,
  SCR_GAMECONST_difftrackangle = 0x125,
  SCR_GAMECONST_disableaimassist = 0x126,
  SCR_GAMECONST_disableclientlinkto = 0x127,
  SCR_GAMECONST_disabledeathstreak = 0x128,
  SCR_GAMECONST_disabledepthbuoyancyadjustments = 0x129,
  SCR_GAMECONST_disabledestructiblepieces = 0x12A,
  SCR_GAMECONST_disablegrenadesuicide = 0x12B,
  SCR_GAMECONST_disablegrenadetouchdamage = 0x12C,
  SCR_GAMECONST_disablegunnerfiring = 0x12D,
  SCR_GAMECONST_disableimpactmarks = 0x12E,
  SCR_GAMECONST_disableinvulnerability = 0x12F,
  SCR_GAMECONST_disableoffhandweapons = 0x130,
  SCR_GAMECONST_disableturretdismount = 0x131,
  SCR_GAMECONST_disableusability = 0x132,
  SCR_GAMECONST_disableweaponcycling = 0x133,
  SCR_GAMECONST_disableweaponfire = 0x134,
  SCR_GAMECONST_disableweaponreload = 0x135,
  SCR_GAMECONST_disableweapons = 0x136,
  SCR_GAMECONST_disallowvehicleusage = 0x137,
  SCR_GAMECONST_disconnectpaths = 0x138,
  SCR_GAMECONST_displaykillstreak = 0x139,
  SCR_GAMECONST_distance = 0x13A,
  SCR_GAMECONST_distance2d = 0x13B,
  SCR_GAMECONST_distance2dsquared = 0x13C,
  SCR_GAMECONST_distancesquared = 0x13D,
  SCR_GAMECONST_divetoprone = 0x13E,
  SCR_GAMECONST_dmg = 0x13F,
  SCR_GAMECONST_dochallengecompleteui = 0x140,
  SCR_GAMECONST_dointelacquiredui = 0x141,
  SCR_GAMECONST_dodamage = 0x142,
  SCR_GAMECONST_doingambush = 0x143,
  SCR_GAMECONST_dontavoidplayer = 0x144,
  SCR_GAMECONST_dontinterpolate = 0x145,
  SCR_GAMECONST_dosplevelwrapup = 0x146,
  SCR_GAMECONST_downs = 0x147,
  SCR_GAMECONST_drawcompassfriendlies = 0x148,
  SCR_GAMECONST_drawcurve = 0x149,
  SCR_GAMECONST_drawnode = 0x14A,
  SCR_GAMECONST_drawoncompass = 0x14B,
  SCR_GAMECONST_drawtrajectory = 0x14C,
  SCR_GAMECONST_drivebysoundtime0 = 0x14D,
  SCR_GAMECONST_drivebysoundtime1 = 0x14E,
  SCR_GAMECONST_drivepath = 0x14F,
  SCR_GAMECONST_dropitem = 0x150,
  SCR_GAMECONST_dropnodetofloor = 0x151,
  SCR_GAMECONST_dropscavengeritem = 0x152,
  SCR_GAMECONST_dropweapon = 0x153,
  SCR_GAMECONST_dumpanims = 0x154,
  SCR_GAMECONST_dumphistory = 0x155,
  SCR_GAMECONST_earthquake = 0x156,
  SCR_GAMECONST_eflags = 0x157,
  SCR_GAMECONST_eflags2 = 0x158,
  SCR_GAMECONST_enableaimassist = 0x159,
  SCR_GAMECONST_enablealldestructiblepieces = 0x15A,
  SCR_GAMECONST_enableclientlinkto = 0x15B,
  SCR_GAMECONST_enabledeathshield = 0x15C,
  SCR_GAMECONST_enabledeathstreak = 0x15D,
  SCR_GAMECONST_enablegrenadesuicide = 0x15E,
  SCR_GAMECONST_enablegrenadetouchdamage = 0x15F,
  SCR_GAMECONST_enablehealthshield = 0x160,
  SCR_GAMECONST_enableimpactmarks = 0x161,
  SCR_GAMECONST_enableinfluencer = 0x162,
  SCR_GAMECONST_enableinvulnerability = 0x163,
  SCR_GAMECONST_enablelinkto = 0x164,
  SCR_GAMECONST_enableoccluder = 0x165,
  SCR_GAMECONST_enableoffhandweapons = 0x166,
  SCR_GAMECONST_enablereactionsystem = 0x167,
  SCR_GAMECONST_enablesledgehammer = 0x168,
  SCR_GAMECONST_enableturretdismount = 0x169,
  SCR_GAMECONST_enableusability = 0x16A,
  SCR_GAMECONST_enablewatersheetfx = 0x16B,
  SCR_GAMECONST_enableweaponcycling = 0x16C,
  SCR_GAMECONST_enableweaponfire = 0x16D,
  SCR_GAMECONST_enableweaponreload = 0x16E,
  SCR_GAMECONST_enableweapons = 0x16F,
  SCR_GAMECONST_endlobby = 0x170,
  SCR_GAMECONST_endlocationselection = 0x171,
  SCR_GAMECONST_endparty = 0x172,
  SCR_GAMECONST_endprediction = 0x173,
  SCR_GAMECONST_enemy = 0x174,
  SCR_GAMECONST_engagemaxdist = 0x175,
  SCR_GAMECONST_engagemaxfalloffdist = 0x176,
  SCR_GAMECONST_engagemindist = 0x177,
  SCR_GAMECONST_engageminfalloffdist = 0x178,
  SCR_GAMECONST_enterprone = 0x179,
  SCR_GAMECONST_entgetsweaponfirenotification = 0x17A,
  SCR_GAMECONST_entsearch = 0x17B,
  SCR_GAMECONST_entyawoverrideslinkyaw = 0x17C,
  SCR_GAMECONST_execdevgui = 0x17D,
  SCR_GAMECONST_exhaustfxname = 0x17E,
  SCR_GAMECONST_exitlevel = 0x17F,
  SCR_GAMECONST_exitprone = 0x180,
  SCR_GAMECONST_exposedduration = 0x181,
  SCR_GAMECONST_extracamconfig = 0x182,
  SCR_GAMECONST_facemotion = 0x183,
  SCR_GAMECONST_fadeovertime = 0x184,
  SCR_GAMECONST_fadewhentargeted = 0x185,
  SCR_GAMECONST_fastrestart = 0x186,
  SCR_GAMECONST_favoriteenemy = 0x187,
  SCR_GAMECONST_ffateam = 0x188,
  SCR_GAMECONST_fgetarg = 0x189,
  SCR_GAMECONST_finalaccuracy = 0x18A,
  SCR_GAMECONST_findanimbyname = 0x18B,
  SCR_GAMECONST_findbestcovernode = 0x18C,
  SCR_GAMECONST_findbestcovernodes = 0x18D,
  SCR_GAMECONST_findcovernode = 0x18E,
  SCR_GAMECONST_findcovernodeatlocation = 0x18F,
  SCR_GAMECONST_findnearbycovernode = 0x190,
  SCR_GAMECONST_findpath = 0x191,
  SCR_GAMECONST_findreacquiredirectpath = 0x192,
  SCR_GAMECONST_findreacquirenode = 0x193,
  SCR_GAMECONST_findreacquireproximatepath = 0x194,
  SCR_GAMECONST_findshufflecovernode = 0x195,
  SCR_GAMECONST_finishactordamage = 0x196,
  SCR_GAMECONST_finishplayerdamage = 0x197,
  SCR_GAMECONST_finishvehicledamage = 0x198,
  SCR_GAMECONST_finishvehicleradiusdamage = 0x199,
  SCR_GAMECONST_fire = 0x19A,
  SCR_GAMECONST_firegrenadelauncher = 0x19B,
  SCR_GAMECONST_firegunnerweapon = 0x19C,
  SCR_GAMECONST_fireweapon = 0x19D,
  SCR_GAMECONST_fixednode = 0x19E,
  SCR_GAMECONST_fixednodesaferadius = 0x19F,
  SCR_GAMECONST_flagenemyunattackable = 0x1A0,
  SCR_GAMECONST_flashbangimmunity = 0x1A1,
  SCR_GAMECONST_float = 0x1A2,
  SCR_GAMECONST_floatlonger = 0x1A3,
  SCR_GAMECONST_floor = 0x1A4,
  SCR_GAMECONST_flushgump = 0x1A5,
  SCR_GAMECONST_followmax = 0x1A6,
  SCR_GAMECONST_followmin = 0x1A7,
  SCR_GAMECONST_font = 0x1A8,
  SCR_GAMECONST_font3duseglowcolor = 0x1A9,
  SCR_GAMECONST_fontscale = 0x1AA,
  SCR_GAMECONST_fontstyle = 0x1AB,
  SCR_GAMECONST_fontstyle3d = 0x1AC,
  SCR_GAMECONST_forcebuoyancy = 0x1AD,
  SCR_GAMECONST_forcedelete = 0x1AE,
  SCR_GAMECONST_forcegamemodemappings = 0x1AF,
  SCR_GAMECONST_setrimintensity = 0x1B0,
  SCR_GAMECONST_setgenericscenevalue = 0x1B1,
  SCR_GAMECONST_forcelevelend = 0x1B2,
  SCR_GAMECONST_forceragdollimmediate = 0x1B3,
  SCR_GAMECONST_forceteleport = 0x1B4,
  SCR_GAMECONST_forceviewmodelanimation = 0x1B5,
  SCR_GAMECONST_foreground = 0x1B6,
  SCR_GAMECONST_fovcosine = 0x1B7,
  SCR_GAMECONST_fovcosinebusy = 0x1B8,
  SCR_GAMECONST_fprintfields = 0x1B9,
  SCR_GAMECONST_fprintln = 0x1BA,
  SCR_GAMECONST_fragbuttonpressed = 0x1BB,
  SCR_GAMECONST_freadln = 0x1BC,
  SCR_GAMECONST_freecurve = 0x1BD,
  SCR_GAMECONST_freehelicopter = 0x1BE,
  SCR_GAMECONST_freevehicle = 0x1BF,
  SCR_GAMECONST_freezecontrols = 0x1C0,
  SCR_GAMECONST_freezecontrolsallowlook = 0x1C1,
  SCR_GAMECONST_gamehistorystartmatch = 0x1C2,
  SCR_GAMECONST_gamemodeismode = 0x1C3,
  SCR_GAMECONST_gamemodeisusingstats = 0x1C4,
  SCR_GAMECONST_gamemodeisusingxp = 0x1C5,
  SCR_GAMECONST_gasbuttonpressed = 0x1C6,
  SCR_GAMECONST_getaiarray = 0x1C7,
  SCR_GAMECONST_getaicount = 0x1C8,
  SCR_GAMECONST_getailimit = 0x1C9,
  SCR_GAMECONST_getaispeciesarray = 0x1CA,
  SCR_GAMECONST_getaitriggerflags = 0x1CB,
  SCR_GAMECONST_getaivelocity = 0x1CC,
  SCR_GAMECONST_getallnodes = 0x1CD,
  SCR_GAMECONST_getallvehiclenodes = 0x1CE,
  SCR_GAMECONST_getammocount = 0x1CF,
  SCR_GAMECONST_getangledelta = 0x1D0,
  SCR_GAMECONST_getanglestolikelyenemypath = 0x1D1,
  SCR_GAMECONST_getangularvelocity = 0x1D2,
  SCR_GAMECONST_getanimassettype = 0x1D3,
  SCR_GAMECONST_getanimcurrframecount = 0x1D4,
  SCR_GAMECONST_getanimdumpmodel = 0x1D5,
  SCR_GAMECONST_getanimdumptotaltime = 0x1D6,
  SCR_GAMECONST_getanimdumptree = 0x1D7,
  SCR_GAMECONST_getanimframecount = 0x1D8,
  SCR_GAMECONST_getanimlength = 0x1D9,
  SCR_GAMECONST_getanimstate = 0x1DA,
  SCR_GAMECONST_getanimstatecategory = 0x1DB,
  SCR_GAMECONST_getanimtime = 0x1DC,
  SCR_GAMECONST_getanimvalue = 0x1DD,
  SCR_GAMECONST_getanynodearray = 0x1DE,
  SCR_GAMECONST_getarraykeys = 0x1DF,
  SCR_GAMECONST_getassignedteam = 0x1E0,
  SCR_GAMECONST_getatrloaded = 0x1E1,
  SCR_GAMECONST_getattachignorecollision = 0x1E2,
  SCR_GAMECONST_getattachmentindex = 0x1E3,
  SCR_GAMECONST_getattachmodelname = 0x1E4,
  SCR_GAMECONST_getattachpos = 0x1E5,
  SCR_GAMECONST_getattachsize = 0x1E6,
  SCR_GAMECONST_getattachtagname = 0x1E7,
  SCR_GAMECONST_getbaseweaponitemindex = 0x1E8,
  SCR_GAMECONST_getbinklength = 0x1E9,
  SCR_GAMECONST_getbottomarc = 0x1EA,
  SCR_GAMECONST_getbrake = 0x1EB,
  SCR_GAMECONST_getbrushmodelcenter = 0x1EC,
  SCR_GAMECONST_getcamangles = 0x1ED,
  SCR_GAMECONST_getcampos = 0x1EE,
  SCR_GAMECONST_getcentroid = 0x1EF,
  SCR_GAMECONST_getcinematictimeremaining = 0x1F0,
  SCR_GAMECONST_getclientuivisibilityflag = 0x1F1,
  SCR_GAMECONST_getclosestanimdumpframefortime = 0x1F2,
  SCR_GAMECONST_getclosestenemysqdist = 0x1F3,
  SCR_GAMECONST_getcommandfromkey = 0x1F4,
  SCR_GAMECONST_getcontractname = 0x1F5,
  SCR_GAMECONST_getcontractrequiredcount = 0x1F6,
  SCR_GAMECONST_getcontractrequirements = 0x1F7,
  SCR_GAMECONST_getcontractresetconditions = 0x1F8,
  SCR_GAMECONST_getcontractrewardcp = 0x1F9,
  SCR_GAMECONST_getcontractrewardxp = 0x1FA,
  SCR_GAMECONST_getcontractstatname = 0x1FB,
  SCR_GAMECONST_getcontractstattype = 0x1FC,
  SCR_GAMECONST_getcorpseanim = 0x1FD,
  SCR_GAMECONST_getcorpsearray = 0x1FE,
  SCR_GAMECONST_getcountertotal = 0x1FF,
  SCR_GAMECONST_getcovernode = 0x200,
  SCR_GAMECONST_getcovernodearray = 0x201,
  SCR_GAMECONST_getcurrentoffhand = 0x202,
  SCR_GAMECONST_getcurrentweapon = 0x203,
  SCR_GAMECONST_getcurrentweaponclipammo = 0x204,
  SCR_GAMECONST_getcurrentweaponincludingmelee = 0x205,
  SCR_GAMECONST_getcurve = 0x206,
  SCR_GAMECONST_getcurvecurpos = 0x207,
  SCR_GAMECONST_getcurveserverpos = 0x208,
  SCR_GAMECONST_getcustomclassloadoutitem = 0x209,
  SCR_GAMECONST_getcustomclassmodifier = 0x20A,
  SCR_GAMECONST_getcycleoriginoffset = 0x20B,
  SCR_GAMECONST_getdate = 0x20C,
  SCR_GAMECONST_getdebugdvar = 0x20D,
  SCR_GAMECONST_getdebugdvarfloat = 0x20E,
  SCR_GAMECONST_getdebugdvarint = 0x20F,
  SCR_GAMECONST_getdebugeye = 0x210,
  SCR_GAMECONST_getdefaultclassslot = 0x211,
  SCR_GAMECONST_getclassindexfromname = 0x212,
  SCR_GAMECONST_getdeltaturnyaw = 0x213,
  SCR_GAMECONST_getdemofileid = 0x214,
  SCR_GAMECONST_getdepthoffield_farblur = 0x215,
  SCR_GAMECONST_getdepthoffield_farend = 0x216,
  SCR_GAMECONST_getdepthoffield_farstart = 0x217,
  SCR_GAMECONST_getdepthoffield_nearblur = 0x218,
  SCR_GAMECONST_getdepthoffield_nearend = 0x219,
  SCR_GAMECONST_getdepthoffield_nearstart = 0x21A,
  SCR_GAMECONST_getdestructibledefs = 0x21B,
  SCR_GAMECONST_getdestructiblename = 0x21C,
  SCR_GAMECONST_getdifficulty = 0x21D,
  SCR_GAMECONST_getdronemodel = 0x21E,
  SCR_GAMECONST_getdroppedweapons = 0x21F,
  SCR_GAMECONST_getdroptofloorposition = 0x220,
  SCR_GAMECONST_getdstat = 0x221,
  SCR_GAMECONST_getdstatarraycount = 0x222,
  SCR_GAMECONST_getdumpcmdsfortimedelta = 0x223,
  SCR_GAMECONST_getdvar = 0x224,
  SCR_GAMECONST_getdvarcoloralpha = 0x225,
  SCR_GAMECONST_getdvarcolorblue = 0x226,
  SCR_GAMECONST_getdvarcolorgreen = 0x227,
  SCR_GAMECONST_getdvarcolorred = 0x228,
  SCR_GAMECONST_getdvarfloat = 0x229,
  SCR_GAMECONST_getdvarint = 0x22A,
  SCR_GAMECONST_getdvarvector = 0x22B,
  SCR_GAMECONST_getdynent = 0x22C,
  SCR_GAMECONST_getdynentarray = 0x22D,
  SCR_GAMECONST_getdynmodels = 0x22E,
  SCR_GAMECONST_getenemyinfo = 0x22F,
  SCR_GAMECONST_getenemyscrambleramount = 0x230,
  SCR_GAMECONST_getenemysqdist = 0x231,
  SCR_GAMECONST_getent = 0x232,
  SCR_GAMECONST_getentarray = 0x233,
  SCR_GAMECONST_getentbynum = 0x234,
  SCR_GAMECONST_getentitynumber = 0x235,
  SCR_GAMECONST_getentitytype = 0x236,
  SCR_GAMECONST_getentnum = 0x237,
  SCR_GAMECONST_getextracamstatic = 0x238,
  SCR_GAMECONST_geteye = 0x239,
  SCR_GAMECONST_geteyeapprox = 0x23A,
  SCR_GAMECONST_getfirstarraykey = 0x23B,
  SCR_GAMECONST_getfixednodesafevolume = 0x23C,
  SCR_GAMECONST_getflashbangedstrength = 0x23D,
  SCR_GAMECONST_getfogsettings = 0x23E,
  SCR_GAMECONST_getfootstepstrings = 0x23F,
  SCR_GAMECONST_getfractionmaxammo = 0x240,
  SCR_GAMECONST_getfractionstartammo = 0x241,
  SCR_GAMECONST_getfriendlyscrambleramount = 0x242,
  SCR_GAMECONST_getfxvisibility = 0x243,
  SCR_GAMECONST_getgametypeenumfromname = 0x244,
  SCR_GAMECONST_getgametypesetting = 0x245,
  SCR_GAMECONST_getgoalspeedmph = 0x246,
  SCR_GAMECONST_getgoalvolume = 0x247,
  SCR_GAMECONST_getgridfrompos = 0x248,
  SCR_GAMECONST_getgroundenttype = 0x249,
  SCR_GAMECONST_getguid = 0x24A,
  SCR_GAMECONST_getgunneranimpitch = 0x24B,
  SCR_GAMECONST_getgunneranimyaw = 0x24C,
  SCR_GAMECONST_getgunnertargetent = 0x24D,
  SCR_GAMECONST_getgunnertargetvec = 0x24E,
  SCR_GAMECONST_getgvrule = 0x24F,
  SCR_GAMECONST_gethandbrake = 0x250,
  SCR_GAMECONST_gethelidamagestate = 0x251,
  SCR_GAMECONST_getheliheightlock = 0x252,
  SCR_GAMECONST_getheliheightlockheight = 0x253,
  SCR_GAMECONST_gethitenttype = 0x254,
  SCR_GAMECONST_gethityaw = 0x255,
  SCR_GAMECONST_getinkillcam = 0x256,
  SCR_GAMECONST_getinventoryweapon = 0x257,
  SCR_GAMECONST_getitemarray = 0x258,
  SCR_GAMECONST_getitemattachment = 0x259,
  SCR_GAMECONST_getitemattachmentallocationcost = 0x25A,
  SCR_GAMECONST_getitemgroupfromitemindex = 0x25B,
  SCR_GAMECONST_getkeybinding = 0x25C,
  SCR_GAMECONST_getknownlength = 0x25D,
  SCR_GAMECONST_getleftarc = 0x25E,
  SCR_GAMECONST_getlevelalias = 0x25F,
  SCR_GAMECONST_getlightcolor = 0x260,
  SCR_GAMECONST_getlightexponent = 0x261,
  SCR_GAMECONST_getlightfovinner = 0x262,
  SCR_GAMECONST_getlightfovouter = 0x263,
  SCR_GAMECONST_getlightintensity = 0x264,
  SCR_GAMECONST_getlightradius = 0x265,
  SCR_GAMECONST_getlinkedent = 0x266,
  SCR_GAMECONST_getloadoutitem = 0x267,
  SCR_GAMECONST_getlocalclientangles = 0x268,
  SCR_GAMECONST_getlocalclientdriver = 0x269,
  SCR_GAMECONST_getlocalclienteyepos = 0x26A,
  SCR_GAMECONST_getlocalclienthealth = 0x26B,
  SCR_GAMECONST_getlocalclientmaxhealth = 0x26C,
  SCR_GAMECONST_getlocalclientnumber = 0x26D,
  SCR_GAMECONST_getlocalclientpos = 0x26E,
  SCR_GAMECONST_getlocalgunnerangles = 0x26F,
  SCR_GAMECONST_getlocalplayer = 0x270,
  SCR_GAMECONST_getlocalplayers = 0x271,
  SCR_GAMECONST_getlocalplayerteam = 0x272,
  SCR_GAMECONST_getlocalprofilearrayint = 0x273,
  SCR_GAMECONST_getlocalprofilefloat = 0x274,
  SCR_GAMECONST_getlocalprofileint = 0x275,
  SCR_GAMECONST_getlocalprofilestring = 0x276,
  SCR_GAMECONST_getlockonradius = 0x277,
  SCR_GAMECONST_getlockonspeed = 0x278,
  SCR_GAMECONST_getlookaheaddir = 0x279,
  SCR_GAMECONST_getlookaheaddist = 0x27A,
  SCR_GAMECONST_getmapcenter = 0x27B,
  SCR_GAMECONST_getmapsundirection = 0x27C,
  SCR_GAMECONST_getmapsunlight = 0x27D,
  SCR_GAMECONST_getmaxactivecontracts = 0x27E,
  SCR_GAMECONST_getmaxlocalclients = 0x27F,
  SCR_GAMECONST_getactivelocalclients = 0x280,
  SCR_GAMECONST_getmaxreversespeed = 0x281,
  SCR_GAMECONST_getmaxspeed = 0x282,
  SCR_GAMECONST_getmaxvehicles = 0x283,
  SCR_GAMECONST_getmiscmodels = 0x284,
  SCR_GAMECONST_getmotionangle = 0x285,
  SCR_GAMECONST_getmovedelta = 0x286,
  SCR_GAMECONST_getmovehistoryaverage = 0x287,
  SCR_GAMECONST_getnegotiationendnode = 0x288,
  SCR_GAMECONST_getnegotiationstartnode = 0x289,
  SCR_GAMECONST_getnextarraykey = 0x28A,
  SCR_GAMECONST_getnode = 0x28B,
  SCR_GAMECONST_getnodearray = 0x28C,
  SCR_GAMECONST_getnodearraysorted = 0x28D,
  SCR_GAMECONST_getnodeowner = 0x28E,
  SCR_GAMECONST_getnodesinradius = 0x28F,
  SCR_GAMECONST_getnodesinradiussorted = 0x290,
  SCR_GAMECONST_getnormalhealth = 0x291,
  SCR_GAMECONST_getnormalizedcameramovement = 0x292,
  SCR_GAMECONST_getnormalizedmovement = 0x293,
  SCR_GAMECONST_getnorthyaw = 0x294,
  SCR_GAMECONST_getnotetracksindelta = 0x295,
  SCR_GAMECONST_getnotetracktimes = 0x296,
  SCR_GAMECONST_getnumchallengescomplete = 0x297,
  SCR_GAMECONST_getnumconnectedplayers = 0x298,
  SCR_GAMECONST_getnumexpectedplayers = 0x299,
  SCR_GAMECONST_getnumgvrules = 0x29A,
  SCR_GAMECONST_getnumparts = 0x29B,
  SCR_GAMECONST_getnumrestarts = 0x29C,
  SCR_GAMECONST_getnumvehicles = 0x29D,
  SCR_GAMECONST_getoccupantseat = 0x29E,
  SCR_GAMECONST_getoffhandsecondaryclass = 0x29F,
  SCR_GAMECONST_getorientmode = 0x2A0,
  SCR_GAMECONST_getorigin = 0x2A1,
  SCR_GAMECONST_getowner = 0x2A2,
  SCR_GAMECONST_getparententity = 0x2A3,
  SCR_GAMECONST_getpartname = 0x2A4,
  SCR_GAMECONST_getpathlength = 0x2A5,
  SCR_GAMECONST_getperfectinfo = 0x2A6,
  SCR_GAMECONST_getperks = 0x2A7,
  SCR_GAMECONST_getpersistentprofilevar = 0x2A8,
  SCR_GAMECONST_getphysacceleration = 0x2A9,
  SCR_GAMECONST_getplaybacktime = 0x2AA,
  SCR_GAMECONST_getplayerangles = 0x2AB,
  SCR_GAMECONST_getplayercamerapos = 0x2AC,
  SCR_GAMECONST_getplayerconnectionstate = 0x2AD,
  SCR_GAMECONST_getplayers = 0x2AE,
  SCR_GAMECONST_getplayerspawnid = 0x2AF,
  SCR_GAMECONST_getplayerviewheight = 0x2B0,
  SCR_GAMECONST_getpointinbounds = 0x2B1,
  SCR_GAMECONST_getreacquirenode = 0x2B2,
  SCR_GAMECONST_getreactionevent = 0x2B3,
  SCR_GAMECONST_getrealtime = 0x2B4,
  SCR_GAMECONST_getreffromitemindex = 0x2B5,
  SCR_GAMECONST_getreflectionlocs = 0x2B6,
  SCR_GAMECONST_getreflectionorigin = 0x2B7,
  SCR_GAMECONST_getretrievableweapons = 0x2B8,
  SCR_GAMECONST_getrightarc = 0x2B9,
  SCR_GAMECONST_getrope = 0x2BA,
  SCR_GAMECONST_getscoremultiplier = 0x2BB,
  SCR_GAMECONST_getscriptbrake = 0x2BC,
  SCR_GAMECONST_getscriptmoverarray = 0x2BD,
  SCR_GAMECONST_getseatfiringangles = 0x2BE,
  SCR_GAMECONST_getseatfiringorigin = 0x2BF,
  SCR_GAMECONST_getseatoccupant = 0x2C0,
  SCR_GAMECONST_getservertime = 0x2C1,
  SCR_GAMECONST_getservervolumetricfogdensity = 0x2C2,
  SCR_GAMECONST_getsessstat = 0x2C3,
  SCR_GAMECONST_getsessstatarraycount = 0x2C4,
  SCR_GAMECONST_setsessstat = 0x2C5,
  SCR_GAMECONST_addsessstat = 0x2C6,
  SCR_GAMECONST_getshootatpos = 0x2C7,
  SCR_GAMECONST_getsnapshotindexarray = 0x2C8,
  SCR_GAMECONST_getsortedspawnpoints = 0x2C9,
  SCR_GAMECONST_getsoundcount = 0x2CA,
  SCR_GAMECONST_getsoundname = 0x2CB,
  SCR_GAMECONST_getspawnerarray = 0x2CC,
  SCR_GAMECONST_getspawnerteamarray = 0x2CD,
  SCR_GAMECONST_getspeed = 0x2CE,
  SCR_GAMECONST_getspeedmph = 0x2CF,
  SCR_GAMECONST_getstance = 0x2D0,
  SCR_GAMECONST_getstartangles = 0x2D1,
  SCR_GAMECONST_getstartorigin = 0x2D2,
  SCR_GAMECONST_getstarttime = 0x2D3,
  SCR_GAMECONST_getsteering = 0x2D4,
  SCR_GAMECONST_getsubstr = 0x2D5,
  SCR_GAMECONST_getsurfacestrings = 0x2D6,
  SCR_GAMECONST_findstaticmodelindex = 0x2D7,
  SCR_GAMECONST_hidestaticmodel = 0x2D8,
  SCR_GAMECONST_unhidestaticmodel = 0x2D9,
  SCR_GAMECONST_getsystemtime = 0x2DA,
  SCR_GAMECONST_gettagangles = 0x2DB,
  SCR_GAMECONST_gettagforwardvector = 0x2DC,
  SCR_GAMECONST_gettagorigin = 0x2DD,
  SCR_GAMECONST_gettargetentity = 0x2DE,
  SCR_GAMECONST_gettargetorigin = 0x2DF,
  SCR_GAMECONST_getteam = 0x2E0,
  SCR_GAMECONST_getteamplayersalive = 0x2E1,
  SCR_GAMECONST_getteamsatellite = 0x2E2,
  SCR_GAMECONST_getteamscore = 0x2E3,
  SCR_GAMECONST_getteamspyplane = 0x2E4,
  SCR_GAMECONST_gettextwidth = 0x2E5,
  SCR_GAMECONST_getthreat = 0x2E6,
  SCR_GAMECONST_getthreatbias = 0x2E7,
  SCR_GAMECONST_getthreatbiasgroup = 0x2E8,
  SCR_GAMECONST_getthrottle = 0x2E9,
  SCR_GAMECONST_gettime = 0x2EA,
  SCR_GAMECONST_gettimescale = 0x2EB,
  SCR_GAMECONST_gettoparc = 0x2EC,
  SCR_GAMECONST_gettotalammo = 0x2ED,
  SCR_GAMECONST_getturret = 0x2EE,
  SCR_GAMECONST_getturretheatvalue = 0x2EF,
  SCR_GAMECONST_getturretowner = 0x2F0,
  SCR_GAMECONST_getturretarclimits = 0x2F1,
  SCR_GAMECONST_getturrettarget = 0x2F2,
  SCR_GAMECONST_getvalidcoverpeekouts = 0x2F3,
  SCR_GAMECONST_getvehiclearray = 0x2F4,
  SCR_GAMECONST_getvehicleavoidance = 0x2F5,
  SCR_GAMECONST_getvehiclehealth = 0x2F6,
  SCR_GAMECONST_getvehiclenode = 0x2F7,
  SCR_GAMECONST_getvehiclenodearray = 0x2F8,
  SCR_GAMECONST_getvehicleoccupied = 0x2F9,
  SCR_GAMECONST_getvehicleowner = 0x2FA,
  SCR_GAMECONST_getvehiclespawnerarray = 0x2FB,
  SCR_GAMECONST_getvehicletreadfxarray = 0x2FC,
  SCR_GAMECONST_getvehicletriggerflags = 0x2FD,
  SCR_GAMECONST_getvehoccupants = 0x2FE,
  SCR_GAMECONST_getvelocity = 0x2FF,
  SCR_GAMECONST_getviewmodel = 0x300,
  SCR_GAMECONST_getvisionsetnaked = 0x301,
  SCR_GAMECONST_getwagergametypelist = 0x302,
  SCR_GAMECONST_getwatcherweapons = 0x303,
  SCR_GAMECONST_getwaterheight = 0x304,
  SCR_GAMECONST_getweaponaccuracy = 0x305,
  SCR_GAMECONST_getweaponammoclip = 0x306,
  SCR_GAMECONST_getweaponammostock = 0x307,
  SCR_GAMECONST_getweaponclipmodel = 0x308,
  SCR_GAMECONST_getweaponfiresound = 0x309,
  SCR_GAMECONST_getweaponfiresoundplayer = 0x30A,
  SCR_GAMECONST_getweaponforwarddir = 0x30B,
  SCR_GAMECONST_getweaponfusetime = 0x30C,
  SCR_GAMECONST_getweaponindexfromname = 0x30D,
  SCR_GAMECONST_getweaponmaxdamage = 0x30E,
  SCR_GAMECONST_getweaponmaxdamagerange = 0x30F,
  SCR_GAMECONST_getweaponmindamage = 0x310,
  SCR_GAMECONST_getweaponmindamagerange = 0x311,
  SCR_GAMECONST_getweaponmodel = 0x312,
  SCR_GAMECONST_getweaponmuzzlepoint = 0x313,
  SCR_GAMECONST_getweaponpickupsound = 0x314,
  SCR_GAMECONST_getweaponpickupsoundplayer = 0x315,
  SCR_GAMECONST_getweaponposfrac = 0x316,
  SCR_GAMECONST_getweaponprojexplosionsound = 0x317,
  SCR_GAMECONST_getweaponrenderoptions = 0x318,
  SCR_GAMECONST_getweaponslist = 0x319,
  SCR_GAMECONST_getweaponslistprimaries = 0x31A,
  SCR_GAMECONST_getweaponstowedmodel = 0x31B,
  SCR_GAMECONST_getwheelsurface = 0x31C,
  SCR_GAMECONST_getworldfogscriptid = 0x31D,
  SCR_GAMECONST_getxuid = 0x31E,
  SCR_GAMECONST_gib = 0x31F,
  SCR_GAMECONST_giveachievement = 0x320,
  SCR_GAMECONST_givegamerpicture = 0x321,
  SCR_GAMECONST_givemaxammo = 0x322,
  SCR_GAMECONST_givenextbaseweapon = 0x323,
  SCR_GAMECONST_givestartammo = 0x324,
  SCR_GAMECONST_giveweapon = 0x325,
  SCR_GAMECONST_giveweaponnextattachment = 0x326,
  SCR_GAMECONST_glassradiusdamage = 0x327,
  SCR_GAMECONST_glowalpha = 0x328,
  SCR_GAMECONST_glowcolor = 0x329,
  SCR_GAMECONST_goalangle = 0x32A,
  SCR_GAMECONST_goalheight = 0x32B,
  SCR_GAMECONST_goalpos = 0x32C,
  SCR_GAMECONST_goalradius = 0x32D,
  SCR_GAMECONST_goodshootpos = 0x32E,
  SCR_GAMECONST_goodshootposvalid = 0x32F,
  SCR_GAMECONST_gpr = 0x330,
  SCR_GAMECONST_grenade = 0x331,
  SCR_GAMECONST_grenadeammo = 0x332,
  SCR_GAMECONST_grenadeawareness = 0x333,
  SCR_GAMECONST_grenadeawarness = 0x334,
  SCR_GAMECONST_grenadeexplosioneffect = 0x335,
  SCR_GAMECONST_grenadethrowback = 0x336,
  SCR_GAMECONST_grenadeweapon = 0x337,
  SCR_GAMECONST_groundentity = 0x338,
  SCR_GAMECONST_groundsurfacetype = 0x339,
  SCR_GAMECONST_groundtrace = 0x33A,
  SCR_GAMECONST_groundtype = 0x33B,
  SCR_GAMECONST_gunblockedbywall = 0x33C,
  SCR_GAMECONST_hasagrenadepulledback = 0x33D,
  SCR_GAMECONST_hasallintel = 0x33E,
  SCR_GAMECONST_hasanimtree = 0x33F,
  SCR_GAMECONST_hascollectible = 0x340,
  SCR_GAMECONST_hascompletedallgamechallenges = 0x341,
  SCR_GAMECONST_hasdobj = 0x342,
  SCR_GAMECONST_hasdstats = 0x343,
  SCR_GAMECONST_haspath = 0x344,
  SCR_GAMECONST_hasperk = 0x345,
  SCR_GAMECONST_hassatellite = 0x346,
  SCR_GAMECONST_hasscriptgoal = 0x347,
  SCR_GAMECONST_hasspyplane = 0x348,
  SCR_GAMECONST_hastacticalmaskoverlay = 0x349,
  SCR_GAMECONST_hasusedweapon = 0x34A,
  SCR_GAMECONST_hasweapon = 0x34B,
  SCR_GAMECONST_headicon = 0x34C,
  SCR_GAMECONST_headiconteam = 0x34D,
  SCR_GAMECONST_headshots = 0x34E,
  SCR_GAMECONST_health = 0x34F,
  SCR_GAMECONST_healthdefault = 0x350,
  SCR_GAMECONST_healthmax = 0x351,
  SCR_GAMECONST_healthmin = 0x352,
  SCR_GAMECONST_height = 0x353,
  SCR_GAMECONST_heliheightlockoffset = 0x354,
  SCR_GAMECONST_hide = 0x355,
  SCR_GAMECONST_hidepart = 0x356,
  SCR_GAMECONST_hidescores = 0x357,
  SCR_GAMECONST_hideviewmodel = 0x358,
  SCR_GAMECONST_hidewhendead = 0x359,
  SCR_GAMECONST_hidewhenindemo = 0x35A,
  SCR_GAMECONST_hidewheninkillcam = 0x35B,
  SCR_GAMECONST_hidewheninmenu = 0x35C,
  SCR_GAMECONST_hidewheninscope = 0x35D,
  SCR_GAMECONST_hidewhileremotecontrolling = 0x35E,
  SCR_GAMECONST_highlyawareradius = 0x35F,
  SCR_GAMECONST_horzalign = 0x360,
  SCR_GAMECONST_humiliated = 0x361,
  SCR_GAMECONST_ignoreall = 0x362,
  SCR_GAMECONST_ignoreclosefoliage = 0x363,
  SCR_GAMECONST_ignoreexplosionevents = 0x364,
  SCR_GAMECONST_ignoreforfixednodesafecheck = 0x365,
  SCR_GAMECONST_ignoreforfriendlyfire = 0x366,
  SCR_GAMECONST_ignorelocationaldamage = 0x367,
  SCR_GAMECONST_ignoreme = 0x368,
  SCR_GAMECONST_ignorerandombulletdamage = 0x369,
  SCR_GAMECONST_ignoresuppression = 0x36A,
  SCR_GAMECONST_ignoretriggers = 0x36B,
  SCR_GAMECONST_ikpriority = 0x36C,
  SCR_GAMECONST_incrementcounter = 0x36D,
  SCR_GAMECONST_index = 0x36E,
  SCR_GAMECONST_initchallengestats = 0x36F,
  SCR_GAMECONST_initclientobjectives = 0x370,
  SCR_GAMECONST_initdec20terminal = 0x371,
  SCR_GAMECONST_inmeleecharge = 0x372,
  SCR_GAMECONST_int = 0x373,
  SCR_GAMECONST_interval = 0x374,
  SCR_GAMECONST_inventorybuttonpressed = 0x375,
  SCR_GAMECONST_iprintln = 0x376,
  SCR_GAMECONST_iprintlnbold = 0x377,
  SCR_GAMECONST_isads = 0x378,
  SCR_GAMECONST_isai = 0x379,
  SCR_GAMECONST_isalive = 0x37A,
  SCR_GAMECONST_isanimleaf = 0x37B,
  SCR_GAMECONST_isanimloaded = 0x37C,
  SCR_GAMECONST_isanimlooping = 0x37D,
  SCR_GAMECONST_isarray = 0x37E,
  SCR_GAMECONST_isassetloaded = 0x37F,
  SCR_GAMECONST_isbadguy = 0x380,
  SCR_GAMECONST_isbeingwatched = 0x381,
  SCR_GAMECONST_isbigdog = 0x382,
  SCR_GAMECONST_isbonuscardactive = 0x383,
  SCR_GAMECONST_isbinkfinished = 0x384,
  SCR_GAMECONST_isburning = 0x385,
  SCR_GAMECONST_iscameraspiketoggled = 0x386,
  SCR_GAMECONST_iscarryingturret = 0x387,
  SCR_GAMECONST_iscoopepd = 0x388,
  SCR_GAMECONST_isdeflected = 0x389,
  SCR_GAMECONST_isdemoplaying = 0x38A,
  SCR_GAMECONST_isdog = 0x38B,
  SCR_GAMECONST_isdriving = 0x38C,
  SCR_GAMECONST_isempjammed = 0x38D,
  SCR_GAMECONST_isextracam = 0x38E,
  SCR_GAMECONST_isfiring = 0x38F,
  SCR_GAMECONST_isfiringturret = 0x390,
  SCR_GAMECONST_isflared = 0x391,
  SCR_GAMECONST_isfloat = 0x392,
  SCR_GAMECONST_isfxplaying = 0x393,
  SCR_GAMECONST_isglobalstatsserver = 0x394,
  SCR_GAMECONST_isgodmode = 0x395,
  SCR_GAMECONST_isgrenadepossafe = 0x396,
  SCR_GAMECONST_isgunnerfiring = 0x397,
  SCR_GAMECONST_ishost = 0x398,
  SCR_GAMECONST_isingoal = 0x399,
  SCR_GAMECONST_isinhelicopter = 0x39A,
  SCR_GAMECONST_isinmovemode = 0x39B,
  SCR_GAMECONST_isinscriptedstate = 0x39C,
  SCR_GAMECONST_isinsideheliheightlock = 0x39D,
  SCR_GAMECONST_isint = 0x39E,
  SCR_GAMECONST_isinvehicle = 0x39F,
  SCR_GAMECONST_isknownenemyinradius = 0x3A0,
  SCR_GAMECONST_isknownenemyinvolume = 0x3A1,
  SCR_GAMECONST_islocalclientdriver = 0x3A2,
  SCR_GAMECONST_islocalplayer = 0x3A3,
  SCR_GAMECONST_islocalplayerviewlinked = 0x3A4,
  SCR_GAMECONST_islocalplayerweaponviewonlylinked = 0x3A5,
  SCR_GAMECONST_islocaltohost = 0x3A6,
  SCR_GAMECONST_islookingat = 0x3A7,
  SCR_GAMECONST_ismantling = 0x3A8,
  SCR_GAMECONST_ismaturecontentenabled = 0x3A9,
  SCR_GAMECONST_ismeleeing = 0x3AA,
  SCR_GAMECONST_ismixerbehaviorhardcoded = 0x3AB,
  SCR_GAMECONST_ismixerlightbehaviorhardcoded = 0x3AC,
  SCR_GAMECONST_ismovesuppressed = 0x3AD,
  SCR_GAMECONST_ismp = 0x3AE,
  SCR_GAMECONST_isnodeoccupied = 0x3AF,
  SCR_GAMECONST_isnoreclosefoliage = 0x3B0,
  SCR_GAMECONST_isnotarget = 0x3B1,
  SCR_GAMECONST_isonground = 0x3B2,
  SCR_GAMECONST_isonladder = 0x3B3,
  SCR_GAMECONST_isonturret = 0x3B4,
  SCR_GAMECONST_ispathdirect = 0x3B5,
  SCR_GAMECONST_ispc = 0x3B6,
  SCR_GAMECONST_ispeelingout = 0x3B7,
  SCR_GAMECONST_isphysicsvehicle = 0x3B8,
  SCR_GAMECONST_isplayer = 0x3B9,
  SCR_GAMECONST_isplayernumber = 0x3BA,
  SCR_GAMECONST_isplayeronsamemachine = 0x3BB,
  SCR_GAMECONST_isplayerreloading = 0x3BC,
  SCR_GAMECONST_isplayingloopsound = 0x3BD,
  SCR_GAMECONST_ispoisoned = 0x3BE,
  SCR_GAMECONST_ispregameenabled = 0x3BF,
  SCR_GAMECONST_ispregamegamestarted = 0x3C0,
  SCR_GAMECONST_isps3 = 0x3C1,
  SCR_GAMECONST_isragdoll = 0x3C2,
  SCR_GAMECONST_isremotecontrolling = 0x3C3,
  SCR_GAMECONST_issaverecentlyloaded = 0x3C4,
  SCR_GAMECONST_issavesuccessful = 0x3C5,
  SCR_GAMECONST_isscrambled = 0x3C6,
  SCR_GAMECONST_issentient = 0x3C7,
  SCR_GAMECONST_isshufflecovernode = 0x3C8,
  SCR_GAMECONST_issoundloop = 0x3C9,
  SCR_GAMECONST_isspawner = 0x3CA,
  SCR_GAMECONST_isspawnpointvisible = 0x3CB,
  SCR_GAMECONST_isspectating = 0x3CC,
  SCR_GAMECONST_issplitscreen = 0x3CD,
  SCR_GAMECONST_issplitscreenhost = 0x3CE,
  SCR_GAMECONST_issprinting = 0x3CF,
  SCR_GAMECONST_isstartingclassdefault = 0x3D0,
  SCR_GAMECONST_isstartingclasseraappropriate = 0x3D1,
  SCR_GAMECONST_isstanceallowed = 0x3D2,
  SCR_GAMECONST_isstereoon = 0x3D3,
  SCR_GAMECONST_isstring = 0x3D4,
  SCR_GAMECONST_issubstr = 0x3D5,
  SCR_GAMECONST_issuppressed = 0x3D6,
  SCR_GAMECONST_issuppressionwaiting = 0x3D7,
  SCR_GAMECONST_isswitchingweapons = 0x3D8,
  SCR_GAMECONST_istalking = 0x3D9,
  SCR_GAMECONST_isthrowinggrenade = 0x3DA,
  SCR_GAMECONST_istouching = 0x3DB,
  SCR_GAMECONST_istring = 0x3DC,
  SCR_GAMECONST_isturretactive = 0x3DD,
  SCR_GAMECONST_isturretfiring = 0x3DE,
  SCR_GAMECONST_isturretready = 0x3DF,
  SCR_GAMECONST_isvalidgametype = 0x3E0,
  SCR_GAMECONST_isvec = 0x3E1,
  SCR_GAMECONST_isvehicle = 0x3E2,
  SCR_GAMECONST_isvehicleimmunetodamage = 0x3E3,
  SCR_GAMECONST_isvehicleturretoverheating = 0x3E4,
  SCR_GAMECONST_isvehicleusable = 0x3E5,
  SCR_GAMECONST_isvehicleinwater = 0x3E6,
  SCR_GAMECONST_iswaitingonsound = 0x3E7,
  SCR_GAMECONST_isweaponcliponly = 0x3E8,
  SCR_GAMECONST_isweapondetonationtimed = 0x3E9,
  SCR_GAMECONST_isweaponequipment = 0x3EA,
  SCR_GAMECONST_isweaponoverheating = 0x3EB,
  SCR_GAMECONST_isweaponprimary = 0x3EC,
  SCR_GAMECONST_isweaponscopeoverlay = 0x3ED,
  SCR_GAMECONST_isweaponspecificuse = 0x3EE,
  SCR_GAMECONST_isweaponviewonlylinked = 0x3EF,
  SCR_GAMECONST_iswheelcolliding = 0x3F0,
  SCR_GAMECONST_iswheelsliding = 0x3F1,
  SCR_GAMECONST_iswounded = 0x3F2,
  SCR_GAMECONST_isxenon = 0x3F3,
  SCR_GAMECONST_itemweaponsetammo = 0x3F4,
  SCR_GAMECONST_itemweaponsetoptions = 0x3F5,
  SCR_GAMECONST_joltbody = 0x3F6,
  SCR_GAMECONST_jumpbuttonpressed = 0x3F7,
  SCR_GAMECONST_keepclaimednode = 0x3F8,
  SCR_GAMECONST_keepclaimednodeifvalid = 0x3F9,
  SCR_GAMECONST_keepnodeduringscriptedanim = 0x3FA,
  SCR_GAMECONST_kick = 0x3FB,
  SCR_GAMECONST_kill = 0x3FC,
  SCR_GAMECONST_killcamentity = 0x3FD,
  SCR_GAMECONST_killcamtargetentity = 0x3FE,
  SCR_GAMECONST_kills = 0x3FF,
  SCR_GAMECONST_killserver = 0x400,
  SCR_GAMECONST_knockback = 0x401,
  SCR_GAMECONST_label = 0x402,
  SCR_GAMECONST_laseroff = 0x403,
  SCR_GAMECONST_laseron = 0x404,
  SCR_GAMECONST_lastenemysightpos = 0x405,
  SCR_GAMECONST_lastknownpos = 0x406,
  SCR_GAMECONST_lastknowntime = 0x407,
  SCR_GAMECONST_lastscriptstate = 0x408,
  SCR_GAMECONST_launch = 0x409,
  SCR_GAMECONST_launchbomb = 0x40A,
  SCR_GAMECONST_launchdynent = 0x40B,
  SCR_GAMECONST_launchlevel = 0x40C,
  SCR_GAMECONST_launchragdoll = 0x40D,
  SCR_GAMECONST_launchvehicle = 0x40E,
  SCR_GAMECONST_leanamount = 0x40F,
  SCR_GAMECONST_length = 0x410,
  SCR_GAMECONST_lengthsquared = 0x411,
  SCR_GAMECONST_lerp_to_darker = 0x412,
  SCR_GAMECONST_lerp_to_lighter = 0x413,
  SCR_GAMECONST_lerpfloat = 0x414,
  SCR_GAMECONST_lerpposition = 0x415,
  SCR_GAMECONST_lerpsundirection = 0x416,
  SCR_GAMECONST_lerpvector = 0x417,
  SCR_GAMECONST_lerpviewangleclamp = 0x418,
  SCR_GAMECONST_line = 0x419,
  SCR_GAMECONST_linelist = 0x41A,
  SCR_GAMECONST_linkguidedmissilecamera = 0x41B,
  SCR_GAMECONST_linknodes = 0x41C,
  SCR_GAMECONST_linkto = 0x41D,
  SCR_GAMECONST_linktoblendtotag = 0x41E,
  SCR_GAMECONST_linktocamera = 0x41F,
  SCR_GAMECONST_linktomissile = 0x420,
  SCR_GAMECONST_loadfx = 0x421,
  SCR_GAMECONST_loadgump = 0x422,
  SCR_GAMECONST_localclientactive = 0x423,
  SCR_GAMECONST_localtoworldcoords = 0x424,
  SCR_GAMECONST_log = 0x425,
  SCR_GAMECONST_logprint = 0x426,
  SCR_GAMECONST_logstring = 0x427,
  SCR_GAMECONST_lookahead = 0x428,
  SCR_GAMECONST_lookaheaddir = 0x429,
  SCR_GAMECONST_lookaheaddist = 0x42A,
  SCR_GAMECONST_lookaheadnodepos = 0x42B,
  SCR_GAMECONST_lookatent = 0x42C,
  SCR_GAMECONST_lookatentity = 0x42D,
  SCR_GAMECONST_lookatpos = 0x42E,
  SCR_GAMECONST_lookforward = 0x42F,
  SCR_GAMECONST_lookright = 0x430,
  SCR_GAMECONST_lookup = 0x431,
  SCR_GAMECONST_luinotifyevent = 0x432,
  SCR_GAMECONST_magicbullet = 0x433,
  SCR_GAMECONST_magicgrenade = 0x434,
  SCR_GAMECONST_magicgrenademanual = 0x435,
  SCR_GAMECONST_magicgrenadetype = 0x436,
  SCR_GAMECONST_makedvarserverinfo = 0x437,
  SCR_GAMECONST_makefakeai = 0x438,
  SCR_GAMECONST_makelight = 0x439,
  SCR_GAMECONST_makelocalizedstring = 0x43A,
  SCR_GAMECONST_makemixerlight = 0x43B,
  SCR_GAMECONST_maketurretunusable = 0x43C,
  SCR_GAMECONST_maketurretusable = 0x43D,
  SCR_GAMECONST_makeunusable = 0x43E,
  SCR_GAMECONST_makeusable = 0x43F,
  SCR_GAMECONST_makevehicleunusable = 0x440,
  SCR_GAMECONST_makevehicleusable = 0x441,
  SCR_GAMECONST_map = 0x442,
  SCR_GAMECONST_map_material = 0x443,
  SCR_GAMECONST_map_restart = 0x444,
  SCR_GAMECONST_mapexists = 0x445,
  SCR_GAMECONST_mapshaderconstant = 0x446,
  SCR_GAMECONST_matchend = 0x447,
  SCR_GAMECONST_material = 0x448,
  SCR_GAMECONST_matrix4x4transformpoints = 0x449,
  SCR_GAMECONST_max = 0x44A,
  SCR_GAMECONST_maxfaceenemydist = 0x44B,
  SCR_GAMECONST_maxhealth = 0x44C,
  SCR_GAMECONST_maxs = 0x44D,
  SCR_GAMECONST_maxsightdistsqrd = 0x44E,
  SCR_GAMECONST_maxvisibledist = 0x44F,
  SCR_GAMECONST_maymovefrompointtopoint = 0x450,
  SCR_GAMECONST_maymovetopoint = 0x451,
  SCR_GAMECONST_melee = 0x452,
  SCR_GAMECONST_meleeattackdist = 0x453,
  SCR_GAMECONST_meleebuttonpressed = 0x454,
  SCR_GAMECONST_min = 0x455,
  SCR_GAMECONST_minpaindamage = 0x456,
  SCR_GAMECONST_mins = 0x457,
  SCR_GAMECONST_minusedistsq = 0x458,
  SCR_GAMECONST_missile_createattractorent = 0x459,
  SCR_GAMECONST_missile_createattractororigin = 0x45A,
  SCR_GAMECONST_missile_createrepulsorent = 0x45B,
  SCR_GAMECONST_missile_createrepulsororigin = 0x45C,
  SCR_GAMECONST_missile_deleteattractor = 0x45D,
  SCR_GAMECONST_missile_settarget = 0x45E,
  SCR_GAMECONST_missile_dronesetvisible = 0x45F,
  SCR_GAMECONST_missionfailed = 0x460,
  SCR_GAMECONST_missionsuccess = 0x461,
  SCR_GAMECONST_model = 0x462,
  SCR_GAMECONST_modelhasphyspreset = 0x463,
  SCR_GAMECONST_modelswapdelay = 0x464,
  SCR_GAMECONST_momentum = 0x465,
  SCR_GAMECONST_movegravity = 0x466,
  SCR_GAMECONST_movemode = 0x467,
  SCR_GAMECONST_moveovertime = 0x468,
  SCR_GAMECONST_moveslide = 0x469,
  SCR_GAMECONST_moveto = 0x46A,
  SCR_GAMECONST_movex = 0x46B,
  SCR_GAMECONST_movey = 0x46C,
  SCR_GAMECONST_movez = 0x46D,
  SCR_GAMECONST_name = 0x46E,
  SCR_GAMECONST_nearclaimnode = 0x46F,
  SCR_GAMECONST_nearclaimnodeandangle = 0x470,
  SCR_GAMECONST_nearnode = 0x471,
  SCR_GAMECONST_netupdate = 0x472,
  SCR_GAMECONST_newclienthudelem = 0x473,
  SCR_GAMECONST_newdebughudelem = 0x474,
  SCR_GAMECONST_newenemyreaction = 0x475,
  SCR_GAMECONST_newenemyreactiondistsq = 0x476,
  SCR_GAMECONST_newenemyreactionpos = 0x477,
  SCR_GAMECONST_newhudelem = 0x478,
  SCR_GAMECONST_newmaterialelem = 0x479,
  SCR_GAMECONST_newmenuelem = 0x47A,
  SCR_GAMECONST_newscorehudelem = 0x47B,
  SCR_GAMECONST_newteamhudelem = 0x47C,
  SCR_GAMECONST_newtextelem = 0x47D,
  SCR_GAMECONST_nextallowedreacttime = 0x47E,
  SCR_GAMECONST_nextplayerrenderoption = 0x47F,
  SCR_GAMECONST_nightvisionforceoff = 0x480,
  SCR_GAMECONST_noattackeraccuracymod = 0x481,
  SCR_GAMECONST_node = 0x482,
  SCR_GAMECONST_nodeoffsetpos = 0x483,
  SCR_GAMECONST_nododgemove = 0x484,
  SCR_GAMECONST_nogrenadereturnthrow = 0x485,
  SCR_GAMECONST_nolean = 0x486,
  SCR_GAMECONST_nopronerotation = 0x487,
  SCR_GAMECONST_notifyoncommand = 0x488,
  SCR_GAMECONST_notsolid = 0x489,
  SCR_GAMECONST_numfreehudelem = 0x48A,
  SCR_GAMECONST_numremoteclients = 0x48B,
  SCR_GAMECONST_obituary = 0x48C,
  SCR_GAMECONST_objective_clearall = 0x48D,
  SCR_GAMECONST_objective_add = 0x48E,
  SCR_GAMECONST_objective_add_team = 0x48F,
  SCR_GAMECONST_objective_additionalcurrent = 0x490,
  SCR_GAMECONST_objective_additionalposition = 0x491,
  SCR_GAMECONST_objective_current = 0x492,
  SCR_GAMECONST_objective_delete = 0x493,
  SCR_GAMECONST_objective_flipicon = 0x494,
  SCR_GAMECONST_objective_icon = 0x495,
  SCR_GAMECONST_objective_onentity = 0x496,
  SCR_GAMECONST_objective_position = 0x497,
  SCR_GAMECONST_objective_ring = 0x498,
  SCR_GAMECONST_objective_set3d = 0x499,
  SCR_GAMECONST_objective_setcolor = 0x49A,
  SCR_GAMECONST_objective_setflag = 0x49B,
  SCR_GAMECONST_objective_seticon = 0x49C,
  SCR_GAMECONST_objective_setinvisibletoall = 0x49D,
  SCR_GAMECONST_objective_setinvisibletoplayer = 0x49E,
  SCR_GAMECONST_objective_seticonsize = 0x49F,
  SCR_GAMECONST_objective_setstencil = 0x4A0,
  SCR_GAMECONST_objective_setsize = 0x4A1,
  SCR_GAMECONST_objective_setvisibletoall = 0x4A2,
  SCR_GAMECONST_objective_setvisibletoplayer = 0x4A3,
  SCR_GAMECONST_objective_size = 0x4A4,
  SCR_GAMECONST_objective_state = 0x4A5,
  SCR_GAMECONST_objective_string = 0x4A6,
  SCR_GAMECONST_objective_string_nomessage = 0x4A7,
  SCR_GAMECONST_objective_team = 0x4A8,
  SCR_GAMECONST_objective_printtext = 0x4A9,
  SCR_GAMECONST_oktospawn = 0x4AA,
  SCR_GAMECONST_oneexhaust = 0x4AB,
  SCR_GAMECONST_openfile = 0x4AC,
  SCR_GAMECONST_openmainmenu = 0x4AD,
  SCR_GAMECONST_openmenu = 0x4AE,
  SCR_GAMECONST_openmenunomouse = 0x4AF,
  SCR_GAMECONST_orientmode = 0x4B0,
  SCR_GAMECONST_origin = 0x4B1,
  SCR_GAMECONST_pacifist = 0x4B2,
  SCR_GAMECONST_pacifistwait = 0x4B3,
  SCR_GAMECONST_pathdistancetraveled = 0x4B4,
  SCR_GAMECONST_pathenemyfightdist = 0x4B5,
  SCR_GAMECONST_pathenemylookahead = 0x4B6,
  SCR_GAMECONST_pathfixedoffset = 0x4B7,
  SCR_GAMECONST_pathfixedoffsetclear = 0x4B8,
  SCR_GAMECONST_pathgoalpos = 0x4B9,
  SCR_GAMECONST_pathlookpos = 0x4BA,
  SCR_GAMECONST_pathmove = 0x4BB,
  SCR_GAMECONST_pathmoveclear = 0x4BC,
  SCR_GAMECONST_pathpos = 0x4BD,
  SCR_GAMECONST_pathrandompercent = 0x4BE,
  SCR_GAMECONST_pathstartpos = 0x4BF,
  SCR_GAMECONST_pathvariableoffset = 0x4C0,
  SCR_GAMECONST_pathvariableoffsetclear = 0x4C1,
  SCR_GAMECONST_pathwidth = 0x4C2,
  SCR_GAMECONST_pathwidthlookaheadfrac = 0x4C3,
  SCR_GAMECONST_pause3dcinematic = 0x4C4,
  SCR_GAMECONST_pcserverupdateplaylist = 0x4C5,
  SCR_GAMECONST_perfectaim = 0x4C6,
  SCR_GAMECONST_pers = 0x4C7,
  SCR_GAMECONST_physicsexplosioncylinder = 0x4C8,
  SCR_GAMECONST_physicsexplosionsphere = 0x4C9,
  SCR_GAMECONST_physicsjolt = 0x4CA,
  SCR_GAMECONST_physicslaunch = 0x4CB,
  SCR_GAMECONST_physicstrace = 0x4CC,
  SCR_GAMECONST_physicstraceex = 0x4CD,
  SCR_GAMECONST_pickupgrenade = 0x4CE,
  SCR_GAMECONST_pingplayer = 0x4CF,
  SCR_GAMECONST_pixbeginevent = 0x4D0,
  SCR_GAMECONST_pixendevent = 0x4D1,
  SCR_GAMECONST_pixmarker = 0x4D2,
  SCR_GAMECONST_placespawnpoint = 0x4D3,
  SCR_GAMECONST_plants = 0x4D4,
  SCR_GAMECONST_playbink = 0x4D5,
  SCR_GAMECONST_playclientairstrike = 0x4D6,
  SCR_GAMECONST_playclientnapalm = 0x4D7,
  SCR_GAMECONST_player_setoffscreendownmaterial = 0x4D8,
  SCR_GAMECONST_player_setoffscreenmaterial = 0x4D9,
  SCR_GAMECONST_playerads = 0x4DA,
  SCR_GAMECONST_playeranimscriptevent = 0x4DB,
  SCR_GAMECONST_playeranimscripteventend = 0x4DC,
  SCR_GAMECONST_playerbullettrace = 0x4DD,
  SCR_GAMECONST_playercamlinkto = 0x4DE,
  SCR_GAMECONST_playercamunlink = 0x4DF,
  SCR_GAMECONST_playerknockback = 0x4E0,
  SCR_GAMECONST_playerlinkedoffsetdisable = 0x4E1,
  SCR_GAMECONST_playerlinkedoffsetenable = 0x4E2,
  SCR_GAMECONST_playerlinkedsetusebaseangleforviewclamp = 0x4E3,
  SCR_GAMECONST_playerlinkto = 0x4E4,
  SCR_GAMECONST_playerlinktoabsolute = 0x4E5,
  SCR_GAMECONST_playerlinktoblend = 0x4E6,
  SCR_GAMECONST_playerlinktodelta = 0x4E7,
  SCR_GAMECONST_playerlinkweaponviewtodelta = 0x4E8,
  SCR_GAMECONST_playername = 0x4E9,
  SCR_GAMECONST_playerphysicstrace = 0x4EA,
  SCR_GAMECONST_playerpositionvalid = 0x4EB,
  SCR_GAMECONST_playersetgroundreferenceent = 0x4EC,
  SCR_GAMECONST_playersighttrace = 0x4ED,
  SCR_GAMECONST_playfx = 0x4EE,
  SCR_GAMECONST_playfxondynent = 0x4EF,
  SCR_GAMECONST_playfxontag = 0x4F0,
  SCR_GAMECONST_playlocalsound = 0x4F1,
  SCR_GAMECONST_playloopedfx = 0x4F2,
  SCR_GAMECONST_playloopsound = 0x4F3,
  SCR_GAMECONST_playrumblelooponentity = 0x4F4,
  SCR_GAMECONST_playrumblelooponposition = 0x4F5,
  SCR_GAMECONST_playrumbleonentity = 0x4F6,
  SCR_GAMECONST_playrumbleonposition = 0x4F7,
  SCR_GAMECONST_playsound = 0x4F8,
  SCR_GAMECONST_playsoundasmaster = 0x4F9,
  SCR_GAMECONST_playsoundatposition = 0x4FA,
  SCR_GAMECONST_playsoundontag = 0x4FB,
  SCR_GAMECONST_playsoundtoplayer = 0x4FC,
  SCR_GAMECONST_playviewmodelfx = 0x4FD,
  SCR_GAMECONST_playweapondamageeffects = 0x4FE,
  SCR_GAMECONST_playweapondeatheffects = 0x4FF,
  SCR_GAMECONST_pointonsegmentnearesttopoint = 0x500,
  SCR_GAMECONST_popaistate = 0x501,
  SCR_GAMECONST_positionwouldtelefrag = 0x502,
  SCR_GAMECONST_pow = 0x503,
  SCR_GAMECONST_precacheheadicon = 0x504,
  SCR_GAMECONST_precacheitem = 0x505,
  SCR_GAMECONST_precachelocationselector = 0x506,
  SCR_GAMECONST_precachemenu = 0x507,
  SCR_GAMECONST_precachemodel = 0x508,
  SCR_GAMECONST_precacherumble = 0x509,
  SCR_GAMECONST_precacheshader = 0x50A,
  SCR_GAMECONST_precacheshellshock = 0x50B,
  SCR_GAMECONST_precachespawner = 0x50C,
  SCR_GAMECONST_precachestatusicon = 0x50D,
  SCR_GAMECONST_precachestring = 0x50E,
  SCR_GAMECONST_precacheturret = 0x50F,
  SCR_GAMECONST_precachevehicle = 0x510,
  SCR_GAMECONST_predictanim = 0x511,
  SCR_GAMECONST_predictoriginandangles = 0x512,
  SCR_GAMECONST_prefetchlevel = 0x513,
  SCR_GAMECONST_pregamestartgame = 0x514,
  SCR_GAMECONST_presentation = 0x515,
  SCR_GAMECONST_pressattackbutton = 0x516,
  SCR_GAMECONST_pressusebutton = 0x517,
  SCR_GAMECONST_prevanimdelta = 0x518,
  SCR_GAMECONST_prevnode = 0x519,
  SCR_GAMECONST_primaryweapon = 0x51A,
  SCR_GAMECONST_print = 0x51B,
  SCR_GAMECONST_print3d = 0x51C,
  SCR_GAMECONST_println = 0x51D,
  SCR_GAMECONST_profilelog_begintiming = 0x51E,
  SCR_GAMECONST_profilelog_endtiming = 0x51F,
  SCR_GAMECONST_proneok = 0x520,
  SCR_GAMECONST_providecoveringfire = 0x521,
  SCR_GAMECONST_psoffsettime = 0x522,
  SCR_GAMECONST_pushable = 0x523,
  SCR_GAMECONST_pushplayer = 0x524,
  SCR_GAMECONST_qsortscoredspawnpointsascending = 0x525,
  SCR_GAMECONST_quitlobby = 0x526,
  SCR_GAMECONST_quitparty = 0x527,
  SCR_GAMECONST_radius = 0x528,
  SCR_GAMECONST_radiusdamage = 0x529,
  SCR_GAMECONST_radiusdamagemax = 0x52A,
  SCR_GAMECONST_radiusdamagemin = 0x52B,
  SCR_GAMECONST_radiusdamageradius = 0x52C,
  SCR_GAMECONST_randomfloat = 0x52D,
  SCR_GAMECONST_randomfloatrange = 0x52E,
  SCR_GAMECONST_randomint = 0x52F,
  SCR_GAMECONST_randomintrange = 0x530,
  SCR_GAMECONST_rate = 0x531,
  SCR_GAMECONST_reacquiremove = 0x532,
  SCR_GAMECONST_reacquirestep = 0x533,
  SCR_GAMECONST_reactorigin = 0x534,
  SCR_GAMECONST_reconnectvehiclenodes = 0x535,
  SCR_GAMECONST_record3dtext = 0x536,
  SCR_GAMECONST_recordcircle = 0x537,
  SCR_GAMECONST_recordent = 0x538,
  SCR_GAMECONST_recordenttext = 0x539,
  SCR_GAMECONST_recorderplayback = 0x53A,
  SCR_GAMECONST_recordline = 0x53B,
  SCR_GAMECONST_recordmatchbegin = 0x53C,
  SCR_GAMECONST_recordplayermatchend = 0x53D,
  SCR_GAMECONST_recordplayerstats = 0x53E,
  SCR_GAMECONST_recordsphere = 0x53F,
  SCR_GAMECONST_recordusedspawnpoint = 0x540,
  SCR_GAMECONST_refreshhudammocounter = 0x541,
  SCR_GAMECONST_refreshhudcompass = 0x542,
  SCR_GAMECONST_registerxp = 0x543,
  SCR_GAMECONST_relativedir = 0x544,
  SCR_GAMECONST_releaseclaimedtrigger = 0x545,
  SCR_GAMECONST_relinktoturret = 0x546,
  SCR_GAMECONST_reloadbuttonpressed = 0x547,
  SCR_GAMECONST_removeaieventlistener = 0x548,
  SCR_GAMECONST_removeallfriendlyscramblers = 0x549,
  SCR_GAMECONST_removeforcenocull = 0x54A,
  SCR_GAMECONST_removefriendlyscrambler = 0x54B,
  SCR_GAMECONST_removeinfluencer = 0x54C,
  SCR_GAMECONST_removevehiclefromcompass = 0x54D,
  SCR_GAMECONST_reportclientdisconnected = 0x54E,
  SCR_GAMECONST_gamerepthresholdexceeded = 0x54F,
  SCR_GAMECONST_reportmtu = 0x550,
  SCR_GAMECONST_reportuser = 0x551,
  SCR_GAMECONST_requestarrivalnotify = 0x552,
  SCR_GAMECONST_reset = 0x553,
  SCR_GAMECONST_resetadswidthandlerp = 0x554,
  SCR_GAMECONST_resetailimit = 0x555,
  SCR_GAMECONST_resetcompassscale = 0x556,
  SCR_GAMECONST_resetcurve = 0x557,
  SCR_GAMECONST_resetmissiledetonationtime = 0x558,
  SCR_GAMECONST_resetplayerviewratescale = 0x559,
  SCR_GAMECONST_resetqosgamedatapayload = 0x55A,
  SCR_GAMECONST_resetspreadoverride = 0x55B,
  SCR_GAMECONST_resetsundirection = 0x55C,
  SCR_GAMECONST_resetsunlight = 0x55D,
  SCR_GAMECONST_resettimeout = 0x55E,
  SCR_GAMECONST_resetviewclamp = 0x55F,
  SCR_GAMECONST_restoredefaultdroppitch = 0x560,
  SCR_GAMECONST_resumespeed = 0x561,
  SCR_GAMECONST_returnplayercontrol = 0x562,
  SCR_GAMECONST_returns = 0x563,
  SCR_GAMECONST_revive = 0x564,
  SCR_GAMECONST_reviveobituary = 0x565,
  SCR_GAMECONST_reviveplayer = 0x566,
  SCR_GAMECONST_revives = 0x567,
  SCR_GAMECONST_ropeaddentityanchor = 0x568,
  SCR_GAMECONST_ropeaddworldanchor = 0x569,
  SCR_GAMECONST_ropecollide = 0x56A,
  SCR_GAMECONST_ropegetposition = 0x56B,
  SCR_GAMECONST_ropemoveanchor = 0x56C,
  SCR_GAMECONST_roperemoveanchor = 0x56D,
  SCR_GAMECONST_ropesetflag = 0x56E,
  SCR_GAMECONST_ropesetparam = 0x56F,
  SCR_GAMECONST_rotatepitch = 0x570,
  SCR_GAMECONST_rotatepoint = 0x571,
  SCR_GAMECONST_rotateroll = 0x572,
  SCR_GAMECONST_rotateto = 0x573,
  SCR_GAMECONST_rotatevelocity = 0x574,
  SCR_GAMECONST_rotateyaw = 0x575,
  SCR_GAMECONST_rumbleadditionaltime = 0x576,
  SCR_GAMECONST_rumblebasetime = 0x577,
  SCR_GAMECONST_rumbleduration = 0x578,
  SCR_GAMECONST_rumbleradius = 0x579,
  SCR_GAMECONST_rumblescale = 0x57A,
  SCR_GAMECONST_rumbletype = 0x57B,
  SCR_GAMECONST_runscriptonent = 0x57C,
  SCR_GAMECONST_safetochangescript = 0x57D,
  SCR_GAMECONST_savegame = 0x57E,
  SCR_GAMECONST_savegamenocommit = 0x57F,
  SCR_GAMECONST_sayall = 0x580,
  SCR_GAMECONST_sayteam = 0x581,
  SCR_GAMECONST_scalebuoyancy = 0x582,
  SCR_GAMECONST_scaleovertime = 0x583,
  SCR_GAMECONST_scalespeed = 0x584,
  SCR_GAMECONST_score = 0x585,
  SCR_GAMECONST_script_linkname = 0x586,
  SCR_GAMECONST_script_noteworthy = 0x587,
  SCR_GAMECONST_script_owner = 0x588,
  SCR_GAMECONST_scriptenemy = 0x589,
  SCR_GAMECONST_scriptenemytag = 0x58A,
  SCR_GAMECONST_scriptstate = 0x58B,
  SCR_GAMECONST_searchforonlinegames = 0x58C,
  SCR_GAMECONST_seatgetweapon = 0x58D,
  SCR_GAMECONST_secondaryoffhandbuttonpressed = 0x58E,
  SCR_GAMECONST_secondaryweapon = 0x58F,
  SCR_GAMECONST_seerecently = 0x590,
  SCR_GAMECONST_sendaiscriptkeys = 0x591,
  SCR_GAMECONST_sendaiscriptvals = 0x592,
  SCR_GAMECONST_sendfaceevent = 0x593,
  SCR_GAMECONST_sendranks = 0x594,
  SCR_GAMECONST_sessionmodeisonlinegame = 0x595,
  SCR_GAMECONST_sessionmodeisprivate = 0x596,
  SCR_GAMECONST_sessionmodeisprivateonlinegame = 0x597,
  SCR_GAMECONST_sessionmodeissystemlink = 0x598,
  SCR_GAMECONST_sessionmodeiszombiesgame = 0x599,
  SCR_GAMECONST_sessionstate = 0x59A,
  SCR_GAMECONST_sessionteam = 0x59B,
  SCR_GAMECONST_set_filter_pass_constant = 0x59C,
  SCR_GAMECONST_set_filter_pass_enabled = 0x59D,
  SCR_GAMECONST_set_filter_pass_material = 0x59E,
  SCR_GAMECONST_set_filter_pass_quads = 0x59F,
  SCR_GAMECONST_set_filter_bit_flag = 0x5A0,
  SCR_GAMECONST_set_overlay_constant = 0x5A1,
  SCR_GAMECONST_set_overlay_enabled = 0x5A2,
  SCR_GAMECONST_set_overlay_material = 0x5A3,
  SCR_GAMECONST_setacceleration = 0x5A4,
  SCR_GAMECONST_setactionslot = 0x5A5,
  SCR_GAMECONST_setadswidthandlerp = 0x5A6,
  SCR_GAMECONST_setafteractionreportstate = 0x5A7,
  SCR_GAMECONST_setailimit = 0x5A8,
  SCR_GAMECONST_setaimanims = 0x5A9,
  SCR_GAMECONST_setaimanimweights = 0x5AA,
  SCR_GAMECONST_setairresistance = 0x5AB,
  SCR_GAMECONST_setaispread = 0x5AC,
  SCR_GAMECONST_setambientsnapshot = 0x5AD,
  SCR_GAMECONST_setambientsidechainduck = 0x5AE,
  SCR_GAMECONST_setangularvelocity = 0x5AF,
  SCR_GAMECONST_setanim = 0x5B0,
  SCR_GAMECONST_setanimdumpuseserveranims = 0x5B1,
  SCR_GAMECONST_setanimforcenew = 0x5B2,
  SCR_GAMECONST_setanimknob = 0x5B3,
  SCR_GAMECONST_setanimknoball = 0x5B4,
  SCR_GAMECONST_setanimknoballlimited = 0x5B5,
  SCR_GAMECONST_setanimknoballlimitedrestart = 0x5B6,
  SCR_GAMECONST_setanimknoballrestart = 0x5B7,
  SCR_GAMECONST_setanimknoblimited = 0x5B8,
  SCR_GAMECONST_setanimknoblimitedrestart = 0x5B9,
  SCR_GAMECONST_setanimknobrestart = 0x5BA,
  SCR_GAMECONST_setanimlimited = 0x5BB,
  SCR_GAMECONST_setanimlimitedrestart = 0x5BC,
  SCR_GAMECONST_setanimratecomplete = 0x5BD,
  SCR_GAMECONST_setanimrestart = 0x5BE,
  SCR_GAMECONST_setanimstate = 0x5BF,
  SCR_GAMECONST_setanimtime = 0x5C0,
  SCR_GAMECONST_setarchive = 0x5C1,
  SCR_GAMECONST_setattacker = 0x5C2,
  SCR_GAMECONST_setautopickup = 0x5C3,
  SCR_GAMECONST_setblockweaponpickup = 0x5C4,
  SCR_GAMECONST_setblur = 0x5C5,
  SCR_GAMECONST_setbombtimer = 0x5C6,
  SCR_GAMECONST_setbottomarc = 0x5C7,
  SCR_GAMECONST_setbrake = 0x5C8,
  SCR_GAMECONST_setburn = 0x5C9,
  SCR_GAMECONST_setcandamage = 0x5CA,
  SCR_GAMECONST_setcellinvisible = 0x5CB,
  SCR_GAMECONST_setcellinvisibleatpos = 0x5CC,
  SCR_GAMECONST_setcellvisible = 0x5CD,
  SCR_GAMECONST_setcellvisibleatpos = 0x5CE,
  SCR_GAMECONST_setchannelvolumes = 0x5CF,
  SCR_GAMECONST_setclientaimlockonpitchstrength = 0x5D0,
  SCR_GAMECONST_setclientammocounterhide = 0x5D1,
  SCR_GAMECONST_setclientcgobjectivetext = 0x5D2,
  SCR_GAMECONST_setclientcompass = 0x5D3,
  SCR_GAMECONST_setclientdrawtalk = 0x5D4,
  SCR_GAMECONST_setclientdvar = 0x5D5,
  SCR_GAMECONST_setclientdvars = 0x5D6,
  SCR_GAMECONST_setclientflag = 0x5D7,
  SCR_GAMECONST_setclientflagasval = 0x5D8,
  SCR_GAMECONST_setclientfov = 0x5D9,
  SCR_GAMECONST_setclienthudhardcore = 0x5DA,
  SCR_GAMECONST_setclientminiscoreboardhide = 0x5DB,
  SCR_GAMECONST_setclientnamemode = 0x5DC,
  SCR_GAMECONST_setclientnumlives = 0x5DD,
  SCR_GAMECONST_setclientplayerpushamount = 0x5DE,
  SCR_GAMECONST_setclientplayersteponactors = 0x5DF,
  SCR_GAMECONST_setclientplayersprinttime = 0x5E0,
  SCR_GAMECONST_setclientprofilevar = 0x5E1,
  SCR_GAMECONST_setclientscriptmainmenu = 0x5E2,
  SCR_GAMECONST_setclientthirdperson = 0x5E3,
  SCR_GAMECONST_setclientthirdpersonangle = 0x5E4,
  SCR_GAMECONST_setclientuivisibilityflag = 0x5E5,
  SCR_GAMECONST_setclientvolumetricfog = 0x5E6,
  SCR_GAMECONST_setclock = 0x5E7,
  SCR_GAMECONST_setclockup = 0x5E8,
  SCR_GAMECONST_setcod7decodefx = 0x5E9,
  SCR_GAMECONST_setcollectible = 0x5EA,
  SCR_GAMECONST_setcompassicon = 0x5EB,
  SCR_GAMECONST_setcontents = 0x5EC,
  SCR_GAMECONST_setconvergencetime = 0x5ED,
  SCR_GAMECONST_setculldist = 0x5EE,
  SCR_GAMECONST_setcurrentspectatorclient = 0x5EF,
  SCR_GAMECONST_setcursorhint = 0x5F0,
  SCR_GAMECONST_setcurvebspline = 0x5F1,
  SCR_GAMECONST_setcurvecameraent = 0x5F2,
  SCR_GAMECONST_setcurvenotifyent = 0x5F3,
  SCR_GAMECONST_setcurverounded = 0x5F4,
  SCR_GAMECONST_setcurvesmooth = 0x5F5,
  SCR_GAMECONST_setcurvespeed = 0x5F6,
  SCR_GAMECONST_setdamagestage = 0x5F7,
  SCR_GAMECONST_setdeathcontents = 0x5F8,
  SCR_GAMECONST_setdebugangles = 0x5F9,
  SCR_GAMECONST_setdebugorigin = 0x5FA,
  SCR_GAMECONST_setdebugsideswitch = 0x5FB,
  SCR_GAMECONST_setdeceleration = 0x5FC,
  SCR_GAMECONST_setdefaultdroppitch = 0x5FD,
  SCR_GAMECONST_setdefaultpitch = 0x5FE,
  SCR_GAMECONST_setdemointermissionpoint = 0x5FF,
  SCR_GAMECONST_setdepthoffield = 0x600,
  SCR_GAMECONST_setdoublevision = 0x601,
  SCR_GAMECONST_setdrivepathphysicsscale = 0x602,
  SCR_GAMECONST_setdstat = 0x603,
  SCR_GAMECONST_setdvar = 0x604,
  SCR_GAMECONST_setdvarbool = 0x605,
  SCR_GAMECONST_setdvarfloat = 0x606,
  SCR_GAMECONST_setdynentenabled = 0x607,
  SCR_GAMECONST_setelectrified = 0x608,
  SCR_GAMECONST_setempjammed = 0x609,
  SCR_GAMECONST_setenablenode = 0x60A,
  SCR_GAMECONST_setenemyglobalscrambler = 0x60B,
  SCR_GAMECONST_setenemyscrambleramount = 0x60C,
  SCR_GAMECONST_setengagementmaxdist = 0x60D,
  SCR_GAMECONST_setengagementmindist = 0x60E,
  SCR_GAMECONST_setentertime = 0x60F,
  SCR_GAMECONST_setentityowner = 0x610,
  SCR_GAMECONST_setentitytarget = 0x611,
  SCR_GAMECONST_setexcludeteamfortrigger = 0x612,
  SCR_GAMECONST_setexpfog = 0x613,
  SCR_GAMECONST_setexploderid = 0x614,
  SCR_GAMECONST_setextracamactive = 0x615,
  SCR_GAMECONST_setextracamangles = 0x616,
  SCR_GAMECONST_setextracamentity = 0x617,
  SCR_GAMECONST_setextracamfov = 0x618,
  SCR_GAMECONST_setextracamorigin = 0x619,
  SCR_GAMECONST_setextracamstatic = 0x61A,
  SCR_GAMECONST_setfakeentorg = 0x61B,
  SCR_GAMECONST_setfixednodesafevolume = 0x61C,
  SCR_GAMECONST_setflagasaway = 0x61D,
  SCR_GAMECONST_setflaggedanim = 0x61E,
  SCR_GAMECONST_setflaggedanimknob = 0x61F,
  SCR_GAMECONST_setflaggedanimknoball = 0x620,
  SCR_GAMECONST_setflaggedanimknoballrestart = 0x621,
  SCR_GAMECONST_setflaggedanimknoblimited = 0x622,
  SCR_GAMECONST_setflaggedanimknoblimitedrestart = 0x623,
  SCR_GAMECONST_setflaggedanimknobrestart = 0x624,
  SCR_GAMECONST_setflaggedanimlimited = 0x625,
  SCR_GAMECONST_setflaggedanimlimitedrestart = 0x626,
  SCR_GAMECONST_setflaggedanimrestart = 0x627,
  SCR_GAMECONST_setflashbanged = 0x628,
  SCR_GAMECONST_setflashbangimmunity = 0x629,
  SCR_GAMECONST_setforcenocull = 0x62A,
  SCR_GAMECONST_setfriendlyscrambleramount = 0x62B,
  SCR_GAMECONST_setgameendtime = 0x62C,
  SCR_GAMECONST_setgametypesetting = 0x62D,
  SCR_GAMECONST_setgametypestring = 0x62E,
  SCR_GAMECONST_setgoalentity = 0x62F,
  SCR_GAMECONST_setgoalnode = 0x630,
  SCR_GAMECONST_setgoalpos = 0x631,
  SCR_GAMECONST_setgoalvolume = 0x632,
  SCR_GAMECONST_setgoalvolumeauto = 0x633,
  SCR_GAMECONST_setgoalyaw = 0x634,
  SCR_GAMECONST_setgpr = 0x635,
  SCR_GAMECONST_setgravity = 0x636,
  SCR_GAMECONST_setgroupsnapshot = 0x637,
  SCR_GAMECONST_setglobalfutz = 0x638,
  SCR_GAMECONST_setgunnertargetent = 0x639,
  SCR_GAMECONST_setgunnertargetvec = 0x63A,
  SCR_GAMECONST_setgunnerturretontargetrange = 0x63B,
  SCR_GAMECONST_sethealthsnapshot = 0x63C,
  SCR_GAMECONST_setheightlockoffset = 0x63D,
  SCR_GAMECONST_setheldweaponmodel = 0x63E,
  SCR_GAMECONST_setheliheightlock = 0x63F,
  SCR_GAMECONST_setheliheightpatchenabled = 0x640,
  SCR_GAMECONST_sethighlighted = 0x641,
  SCR_GAMECONST_sethintstring = 0x642,
  SCR_GAMECONST_sethostmigrationstatus = 0x643,
  SCR_GAMECONST_sethoverparams = 0x644,
  SCR_GAMECONST_sethudoutlinecolor = 0x645,
  SCR_GAMECONST_sethudwarningtype = 0x646,
  SCR_GAMECONST_setignoremegroup = 0x647,
  SCR_GAMECONST_setinfluencerteammask = 0x648,
  SCR_GAMECONST_setinfraredvision = 0x649,
  SCR_GAMECONST_setinfraredvisionset = 0x64A,
  SCR_GAMECONST_setinventoryweapon = 0x64B,
  SCR_GAMECONST_setinvisibletoplayer = 0x64C,
  SCR_GAMECONST_setjitterparams = 0x64D,
  SCR_GAMECONST_setlaststandprevweap = 0x64E,
  SCR_GAMECONST_setleftarc = 0x64F,
  SCR_GAMECONST_setlevelfadesnapshot = 0x650,
  SCR_GAMECONST_setlightcolor = 0x651,
  SCR_GAMECONST_setlightexponent = 0x652,
  SCR_GAMECONST_setlightfovrange = 0x653,
  SCR_GAMECONST_setlightintensity = 0x654,
  SCR_GAMECONST_setlightradius = 0x655,
  SCR_GAMECONST_setlocalprofilearrayvar = 0x656,
  SCR_GAMECONST_setlocalprofilevar = 0x657,
  SCR_GAMECONST_setlocalradarenabled = 0x658,
  SCR_GAMECONST_setlocalradarposition = 0x659,
  SCR_GAMECONST_setlocalwindsource = 0x65A,
  SCR_GAMECONST_setlookat = 0x65B,
  SCR_GAMECONST_setlookatanimnodes = 0x65C,
  SCR_GAMECONST_setlookatent = 0x65D,
  SCR_GAMECONST_setlookattext = 0x65E,
  SCR_GAMECONST_setlookatyawlimits = 0x65F,
  SCR_GAMECONST_setloweredweapon = 0x660,
  SCR_GAMECONST_setlowready = 0x661,
  SCR_GAMECONST_setmantleenabled = 0x662,
  SCR_GAMECONST_setmapcenter = 0x663,
  SCR_GAMECONST_setmapnamestring = 0x664,
  SCR_GAMECONST_setmatchflag = 0x665,
  SCR_GAMECONST_setmatchtalkflag = 0x666,
  SCR_GAMECONST_setmaxhealth = 0x667,
  SCR_GAMECONST_setmaxpitchroll = 0x668,
  SCR_GAMECONST_setmenuroot = 0x669,
  SCR_GAMECONST_setminimap = 0x66A,
  SCR_GAMECONST_setmissilecoasting = 0x66B,
  SCR_GAMECONST_setmixerbehavior = 0x66C,
  SCR_GAMECONST_setmixerexploderid = 0x66D,
  SCR_GAMECONST_setmixerl2rrampspeed = 0x66E,
  SCR_GAMECONST_setmixerlightbehavior = 0x66F,
  SCR_GAMECONST_setmixerlightcolor = 0x670,
  SCR_GAMECONST_setmixerlightexponent = 0x671,
  SCR_GAMECONST_setmixerlightfovrange = 0x672,
  SCR_GAMECONST_setmixerlightintensity = 0x673,
  SCR_GAMECONST_setmixerlightmodels = 0x674,
  SCR_GAMECONST_setmixerlightparam = 0x675,
  SCR_GAMECONST_setmixerlightradius = 0x676,
  SCR_GAMECONST_setmixerlightrotatetime = 0x677,
  SCR_GAMECONST_setmixerparam = 0x678,
  SCR_GAMECONST_setmixerr2lrampspeed = 0x679,
  SCR_GAMECONST_setmixerspinmodels = 0x67A,
  SCR_GAMECONST_setmode = 0x67B,
  SCR_GAMECONST_setmodel = 0x67C,
  SCR_GAMECONST_setmovespeedscale = 0x67D,
  SCR_GAMECONST_setmovingplatformenabled = 0x67E,
  SCR_GAMECONST_setmultiextracamactive = 0x67F,
  SCR_GAMECONST_setnearestenemyscrambler = 0x680,
  SCR_GAMECONST_setneargoalnotifydist = 0x681,
  SCR_GAMECONST_setnodepriority = 0x682,
  SCR_GAMECONST_setnormalhealth = 0x683,
  SCR_GAMECONST_setnorthyaw = 0x684,
  SCR_GAMECONST_setoffhandprimaryclass = 0x685,
  SCR_GAMECONST_setoffhandsecondaryclass = 0x686,
  SCR_GAMECONST_setontargetangle = 0x687,
  SCR_GAMECONST_setorigin = 0x688,
  SCR_GAMECONST_setowner = 0x689,
  SCR_GAMECONST_setperk = 0x68A,
  SCR_GAMECONST_setperks = 0x68B,
  SCR_GAMECONST_setpersistentprofilevar = 0x68C,
  SCR_GAMECONST_setphysacceleration = 0x68D,
  SCR_GAMECONST_setphysangles = 0x68E,
  SCR_GAMECONST_setphysicsgravity = 0x68F,
  SCR_GAMECONST_setphysicsgravitydir = 0x690,
  SCR_GAMECONST_setphysparams = 0x691,
  SCR_GAMECONST_setplacementhint = 0x692,
  SCR_GAMECONST_setplanebarrelroll = 0x693,
  SCR_GAMECONST_setplanegoalpos = 0x694,
  SCR_GAMECONST_setplayerangles = 0x695,
  SCR_GAMECONST_setplayercollision = 0x696,
  SCR_GAMECONST_setplayerignoreradiusdamage = 0x697,
  SCR_GAMECONST_setplayernamestring = 0x698,
  SCR_GAMECONST_setplayerrenderoptions = 0x699,
  SCR_GAMECONST_setplayerspread = 0x69A,
  SCR_GAMECONST_setplayerteamrank = 0x69B,
  SCR_GAMECONST_setplayerviewratescale = 0x69C,
  SCR_GAMECONST_setpotentialthreat = 0x69D,
  SCR_GAMECONST_setpredatoreffect = 0x69E,
  SCR_GAMECONST_setprintchannel = 0x69F,
  SCR_GAMECONST_setproneanimnodes = 0x6A0,
  SCR_GAMECONST_setpulsefx = 0x6A1,
  SCR_GAMECONST_setqosgamedatapayload = 0x6A2,
  SCR_GAMECONST_setrank = 0x6A3,
  SCR_GAMECONST_setredactfx = 0x6A4,
  SCR_GAMECONST_setreverb = 0x6A5,
  SCR_GAMECONST_setrightarc = 0x6A6,
  SCR_GAMECONST_setriotshieldfailhint = 0x6A7,
  SCR_GAMECONST_setrotorspeed = 0x6A8,
  SCR_GAMECONST_setroundsplayed = 0x6A9,
  SCR_GAMECONST_setruntopos = 0x6AA,
  SCR_GAMECONST_setsaveddvar = 0x6AB,
  SCR_GAMECONST_setscale = 0x6AC,
  SCR_GAMECONST_settargethighlight = 0x6AD,
  SCR_GAMECONST_setscanningpitch = 0x6AE,
  SCR_GAMECONST_setscoreboardcolumns = 0x6AF,
  SCR_GAMECONST_setscoremultiplier = 0x6B0,
  SCR_GAMECONST_setscriptenemy = 0x6B1,
  SCR_GAMECONST_setscriptgoal = 0x6B2,
  SCR_GAMECONST_setscripthintstring = 0x6B3,
  SCR_GAMECONST_setseatoccupied = 0x6B4,
  SCR_GAMECONST_setservervolumetricfogdensity = 0x6B5,
  SCR_GAMECONST_setshader = 0x6B6,
  SCR_GAMECONST_setshaderconstant = 0x6B7,
  SCR_GAMECONST_setslowmotion = 0x6B8,
  SCR_GAMECONST_setsonarenabled = 0x6B9,
  SCR_GAMECONST_setsoundblend = 0x6BA,
  SCR_GAMECONST_setsoundcontext = 0x6BB,
  SCR_GAMECONST_setsoundentcontext = 0x6BC,
  SCR_GAMECONST_setloopstate = 0x6BD,
  SCR_GAMECONST_setsoundpitch = 0x6BE,
  SCR_GAMECONST_setsoundpitchrate = 0x6BF,
  SCR_GAMECONST_setsoundvolume = 0x6C0,
  SCR_GAMECONST_setsoundvolumerate = 0x6C1,
  SCR_GAMECONST_setspawnerteam = 0x6C2,
  SCR_GAMECONST_setspawnpointrandomvariation = 0x6C3,
  SCR_GAMECONST_setspawnpointsbaseweight = 0x6C4,
  SCR_GAMECONST_setspawnweapon = 0x6C5,
  SCR_GAMECONST_setspeed = 0x6C6,
  SCR_GAMECONST_setspeedimmediate = 0x6C7,
  SCR_GAMECONST_setspreadoverride = 0x6C8,
  SCR_GAMECONST_setsprintcooldown = 0x6C9,
  SCR_GAMECONST_setsprintduration = 0x6CA,
  SCR_GAMECONST_setstablemissile = 0x6CB,
  SCR_GAMECONST_setstance = 0x6CC,
  SCR_GAMECONST_setstowedweapon = 0x6CD,
  SCR_GAMECONST_setstunned = 0x6CE,
  SCR_GAMECONST_setsundirection = 0x6CF,
  SCR_GAMECONST_setsunlight = 0x6D0,
  SCR_GAMECONST_setsuppressiontime = 0x6D1,
  SCR_GAMECONST_setswitchnode = 0x6D2,
  SCR_GAMECONST_settalktospecies = 0x6D3,
  SCR_GAMECONST_settargetent = 0x6D4,
  SCR_GAMECONST_settargetentity = 0x6D5,
  SCR_GAMECONST_settargetorigin = 0x6D6,
  SCR_GAMECONST_settargetyaw = 0x6D7,
  SCR_GAMECONST_setteam = 0x6D8,
  SCR_GAMECONST_setteamfortrigger = 0x6D9,
  SCR_GAMECONST_setteamsatellite = 0x6DA,
  SCR_GAMECONST_setteamscore = 0x6DB,
  SCR_GAMECONST_setteamspyplane = 0x6DC,
  SCR_GAMECONST_settenthstimer = 0x6DD,
  SCR_GAMECONST_settenthstimerup = 0x6DE,
  SCR_GAMECONST_settext = 0x6DF,
  SCR_GAMECONST_setthreatbias = 0x6E0,
  SCR_GAMECONST_setthreatbiasagainstall = 0x6E1,
  SCR_GAMECONST_setthreatbiasgroup = 0x6E2,
  SCR_GAMECONST_settimer = 0x6E3,
  SCR_GAMECONST_settimerup = 0x6E4,
  SCR_GAMECONST_settimescale = 0x6E5,
  SCR_GAMECONST_settoparc = 0x6E6,
  SCR_GAMECONST_settransported = 0x6E7,
  SCR_GAMECONST_setturningability = 0x6E8,
  SCR_GAMECONST_setturretaccuracy = 0x6E9,
  SCR_GAMECONST_setturretanim = 0x6EA,
  SCR_GAMECONST_setturretcarried = 0x6EB,
  SCR_GAMECONST_setturretignoregoals = 0x6EC,
  SCR_GAMECONST_setturretnode = 0x6ED,
  SCR_GAMECONST_setturretowner = 0x6EE,
  SCR_GAMECONST_setturretspinning = 0x6EF,
  SCR_GAMECONST_setturrettargetent = 0x6F0,
  SCR_GAMECONST_setturrettargetvec = 0x6F1,
  SCR_GAMECONST_setturretteam = 0x6F2,
  SCR_GAMECONST_setturrettype = 0x6F3,
  SCR_GAMECONST_setuinextlevel = 0x6F4,
  SCR_GAMECONST_setvalue = 0x6F5,
  SCR_GAMECONST_setvehgoalpos = 0x6F6,
  SCR_GAMECONST_setvehicleattachments = 0x6F7,
  SCR_GAMECONST_setvehicleavoidance = 0x6F8,
  SCR_GAMECONST_setvehiclelockedon = 0x6F9,
  SCR_GAMECONST_setvehiclelookattext = 0x6FA,
  SCR_GAMECONST_setvehiclenodeenabled = 0x6FB,
  SCR_GAMECONST_setvehicletype = 0x6FC,
  SCR_GAMECONST_setvehmaxspeed = 0x6FD,
  SCR_GAMECONST_setvehvelocity = 0x6FE,
  SCR_GAMECONST_setvehweapon = 0x6FF,
  SCR_GAMECONST_setvelocity = 0x700,
  SCR_GAMECONST_setviewangleresistance = 0x701,
  SCR_GAMECONST_setviewclamp = 0x702,
  SCR_GAMECONST_setviewlockent = 0x703,
  SCR_GAMECONST_setviewmodel = 0x704,
  SCR_GAMECONST_setviewmodeldepthoffield = 0x705,
  SCR_GAMECONST_setviewmodelrenderflag = 0x706,
  SCR_GAMECONST_setvisibletoall = 0x707,
  SCR_GAMECONST_setvisibletoplayer = 0x708,
  SCR_GAMECONST_setvisionsetforplayer = 0x709,
  SCR_GAMECONST_setvolfog = 0x70A,
  SCR_GAMECONST_setvolfogforclient = 0x70B,
  SCR_GAMECONST_setvotenocount = 0x70C,
  SCR_GAMECONST_setvotestring = 0x70D,
  SCR_GAMECONST_setvotetime = 0x70E,
  SCR_GAMECONST_setvoteyescount = 0x70F,
  SCR_GAMECONST_setwargamedata = 0x710,
  SCR_GAMECONST_setwatchstyle = 0x711,
  SCR_GAMECONST_setwaterbrush = 0x712,
  SCR_GAMECONST_setwaterdrops = 0x713,
  SCR_GAMECONST_setwaterfog = 0x714,
  SCR_GAMECONST_setwatersheeting = 0x715,
  SCR_GAMECONST_setwaypoint = 0x716,
  SCR_GAMECONST_setweapon = 0x717,
  SCR_GAMECONST_setweaponammoclip = 0x718,
  SCR_GAMECONST_setweaponammostock = 0x719,
  SCR_GAMECONST_setwetness = 0x71A,
  SCR_GAMECONST_setwinningplayer = 0x71B,
  SCR_GAMECONST_setwinningteam = 0x71C,
  SCR_GAMECONST_setworldfogactivebank = 0x71D,
  SCR_GAMECONST_setyawspeed = 0x71E,
  SCR_GAMECONST_shellshock = 0x71F,
  SCR_GAMECONST_shoot = 0x720,
  SCR_GAMECONST_shootblank = 0x721,
  SCR_GAMECONST_shootrumble = 0x722,
  SCR_GAMECONST_shootshock = 0x723,
  SCR_GAMECONST_shootturret = 0x724,
  SCR_GAMECONST_shootup = 0x725,
  SCR_GAMECONST_shouldfacemotion = 0x726,
  SCR_GAMECONST_shouldmonitorai = 0x727,
  SCR_GAMECONST_show = 0x728,
  SCR_GAMECONST_showallparts = 0x729,
  SCR_GAMECONST_showpart = 0x72A,
  SCR_GAMECONST_showscores = 0x72B,
  SCR_GAMECONST_showui = 0x72C,
  SCR_GAMECONST_showviewmodel = 0x72D,
  SCR_GAMECONST_sidearm = 0x72E,
  SCR_GAMECONST_sightconetrace = 0x72F,
  SCR_GAMECONST_sightlatency = 0x730,
  SCR_GAMECONST_sighttracepassed = 0x731,
  SCR_GAMECONST_sin = 0x732,
  SCR_GAMECONST_snapshotacknowledged = 0x733,
  SCR_GAMECONST_solid = 0x734,
  SCR_GAMECONST_sort = 0x735,
  SCR_GAMECONST_soundexists = 0x736,
  SCR_GAMECONST_soundgetplaybacktime = 0x737,
  SCR_GAMECONST_soundfade = 0x738,
  SCR_GAMECONST_soundsetmusicstate = 0x739,
  SCR_GAMECONST_soundlineemitter = 0x73A,
  SCR_GAMECONST_soundloopemitter = 0x73B,
  SCR_GAMECONST_soundplaying = 0x73C,
  SCR_GAMECONST_soundstoplineemitter = 0x73D,
  SCR_GAMECONST_soundstoploopemitter = 0x73E,
  SCR_GAMECONST_soundtimescale = 0x73F,
  SCR_GAMECONST_spawn = 0x740,
  SCR_GAMECONST_spawnapalmgroundflame = 0x741,
  SCR_GAMECONST_spawncollision = 0x742,
  SCR_GAMECONST_spawndynent = 0x743,
  SCR_GAMECONST_spawnfakeent = 0x744,
  SCR_GAMECONST_spawnflags = 0x745,
  SCR_GAMECONST_spawnfx = 0x746,
  SCR_GAMECONST_spawnhelicopter = 0x747,
  SCR_GAMECONST_spawnpathnode = 0x748,
  SCR_GAMECONST_spawnplane = 0x749,
  SCR_GAMECONST_spawnstruct = 0x74A,
  SCR_GAMECONST_spawntimedfx = 0x74B,
  SCR_GAMECONST_spawnturret = 0x74C,
  SCR_GAMECONST_spawnvehicle = 0x74D,
  SCR_GAMECONST_species = 0x74E,
  SCR_GAMECONST_spectatorclient = 0x74F,
  SCR_GAMECONST_speed = 0x750,
  SCR_GAMECONST_sphere = 0x751,
  SCR_GAMECONST_splitargs = 0x752,
  SCR_GAMECONST_splitviewallowed = 0x753,
  SCR_GAMECONST_sprintbuttonpressed = 0x754,
  SCR_GAMECONST_sprinting = 0x755,
  SCR_GAMECONST_sqrt = 0x756,
  SCR_GAMECONST_stabs = 0x757,
  SCR_GAMECONST_stairsstate = 0x758,
  SCR_GAMECONST_start3dcinematic = 0x759,
  SCR_GAMECONST_startactorreact = 0x75A,
  SCR_GAMECONST_startbinocs = 0x75B,
  SCR_GAMECONST_startcameratween = 0x75C,
  SCR_GAMECONST_startcoverarrival = 0x75D,
  SCR_GAMECONST_startcurve = 0x75E,
  SCR_GAMECONST_startdoorbreach = 0x75F,
  SCR_GAMECONST_startfadingblur = 0x760,
  SCR_GAMECONST_startfiring = 0x761,
  SCR_GAMECONST_starthostmigration = 0x762,
  SCR_GAMECONST_startignoringspotlight = 0x763,
  SCR_GAMECONST_startmultiplayergame = 0x764,
  SCR_GAMECONST_startparty = 0x765,
  SCR_GAMECONST_startpath = 0x766,
  SCR_GAMECONST_startpoisoning = 0x767,
  SCR_GAMECONST_startprivatematch = 0x768,
  SCR_GAMECONST_startragdoll = 0x769,
  SCR_GAMECONST_startrevive = 0x76A,
  SCR_GAMECONST_startscriptedanim = 0x76B,
  SCR_GAMECONST_startshoot = 0x76C,
  SCR_GAMECONST_starttanning = 0x76D,
  SCR_GAMECONST_starttime = 0x76E,
  SCR_GAMECONST_starttraversearrival = 0x76F,
  SCR_GAMECONST_startwatersheetfx = 0x770,
  SCR_GAMECONST_statechangereason = 0x771,
  SCR_GAMECONST_statusicon = 0x772,
  SCR_GAMECONST_stop3dcinematic = 0x773,
  SCR_GAMECONST_stopallrumbles = 0x774,
  SCR_GAMECONST_stopanimdistsq = 0x775,
  SCR_GAMECONST_stopanimscripted = 0x776,
  SCR_GAMECONST_stopbink = 0x777,
  SCR_GAMECONST_stopbinocs = 0x778,
  SCR_GAMECONST_stopcarryturret = 0x779,
  SCR_GAMECONST_stopcurve = 0x77A,
  SCR_GAMECONST_stopdoorbreach = 0x77B,
  SCR_GAMECONST_stopextracam = 0x77C,
  SCR_GAMECONST_stopfireweapon = 0x77D,
  SCR_GAMECONST_stopfiring = 0x77E,
  SCR_GAMECONST_stopfx = 0x77F,
  SCR_GAMECONST_stopignoringspotlight = 0x780,
  SCR_GAMECONST_stoplocalsound = 0x781,
  SCR_GAMECONST_stoplookat = 0x782,
  SCR_GAMECONST_stoploopsound = 0x783,
  SCR_GAMECONST_stopmoveslide = 0x784,
  SCR_GAMECONST_stoppoisoning = 0x785,
  SCR_GAMECONST_stoprevive = 0x786,
  SCR_GAMECONST_stoprumble = 0x787,
  SCR_GAMECONST_stopshellshock = 0x788,
  SCR_GAMECONST_stopshoot = 0x789,
  SCR_GAMECONST_stopshootturret = 0x78A,
  SCR_GAMECONST_stopsound = 0x78B,
  SCR_GAMECONST_stopsounds = 0x78C,
  SCR_GAMECONST_stopuseanimtree = 0x78D,
  SCR_GAMECONST_stopuseturret = 0x78E,
  SCR_GAMECONST_stopusingturret = 0x78F,
  SCR_GAMECONST_stopwatersheetfx = 0x790,
  SCR_GAMECONST_strtok = 0x791,
  SCR_GAMECONST_structinfo = 0x792,
  SCR_GAMECONST_suicide = 0x793,
  SCR_GAMECONST_suppressionduration = 0x794,
  SCR_GAMECONST_suppressionmeter = 0x795,
  SCR_GAMECONST_suppressionstarttime = 0x796,
  SCR_GAMECONST_suppressionwait = 0x797,
  SCR_GAMECONST_supressionwait = 0x798,
  SCR_GAMECONST_surprisedbymedistsq = 0x799,
  SCR_GAMECONST_survived = 0x79A,
  SCR_GAMECONST_suspended = 0x79B,
  SCR_GAMECONST_swimming = 0x79C,
  SCR_GAMECONST_switchtoclientvolumetricfog = 0x79D,
  SCR_GAMECONST_switchtooffhand = 0x79E,
  SCR_GAMECONST_switchtoservervolumetricfog = 0x79F,
  SCR_GAMECONST_switchtoweapon = 0x7A0,
  SCR_GAMECONST_switchtoweaponimmediate = 0x7A1,
  SCR_GAMECONST_syncedmeleetarget = 0x7A2,
  SCR_GAMECONST_tablelookup = 0x7A3,
  SCR_GAMECONST_tablelookupcolumnforrow = 0x7A4,
  SCR_GAMECONST_tablelookupistring = 0x7A5,
  SCR_GAMECONST_tablelookuprownum = 0x7A6,
  SCR_GAMECONST_tablelookupfindcoreasset = 0x7A7,
  SCR_GAMECONST_takeallweapons = 0x7A8,
  SCR_GAMECONST_purchaseitem = 0x7A9,
  SCR_GAMECONST_getitemstatus = 0x7AA,
  SCR_GAMECONST_takedamage = 0x7AB,
  SCR_GAMECONST_takeplayercontrol = 0x7AC,
  SCR_GAMECONST_takeweapon = 0x7AD,
  SCR_GAMECONST_tan = 0x7AE,
  SCR_GAMECONST_target = 0x7AF,
  SCR_GAMECONST_target_clearreticlelockon = 0x7B0,
  SCR_GAMECONST_target_getarray = 0x7B1,
  SCR_GAMECONST_target_isincircle = 0x7B2,
  SCR_GAMECONST_target_isinrect = 0x7B3,
  SCR_GAMECONST_target_istarget = 0x7B4,
  SCR_GAMECONST_target_remove = 0x7B5,
  SCR_GAMECONST_target_set = 0x7B6,
  SCR_GAMECONST_target_setattackmode = 0x7B7,
  SCR_GAMECONST_target_setjavelinonly = 0x7B8,
  SCR_GAMECONST_target_setoffscreenshader = 0x7B9,
  SCR_GAMECONST_target_setshader = 0x7BA,
  SCR_GAMECONST_target_setturretaquire = 0x7BB,
  SCR_GAMECONST_target_startreticlelockon = 0x7BC,
  SCR_GAMECONST_target2 = 0x7BD,
  SCR_GAMECONST_targetname = 0x7BE,
  SCR_GAMECONST_team = 0x7BF,
  SCR_GAMECONST_teammovewaittime = 0x7C0,
  SCR_GAMECONST_teleport = 0x7C1,
  SCR_GAMECONST_testspawnpoint = 0x7C2,
  SCR_GAMECONST_threadbias = 0x7C3,
  SCR_GAMECONST_threatbias = 0x7C4,
  SCR_GAMECONST_threatbiasgroup = 0x7C5,
  SCR_GAMECONST_threatbiasgroupexists = 0x7C6,
  SCR_GAMECONST_throwbackgrenadekilledoriginalowner = 0x7C7,
  SCR_GAMECONST_throwbuttonpressed = 0x7C8,
  SCR_GAMECONST_throwdownweapon = 0x7C9,
  SCR_GAMECONST_throwgrenade = 0x7CA,
  SCR_GAMECONST_timedradiusdamage = 0x7CB,
  SCR_GAMECONST_toggleik = 0x7CC,
  SCR_GAMECONST_tolower = 0x7CD,
  SCR_GAMECONST_tomahawks = 0x7CE,
  SCR_GAMECONST_tracepoint = 0x7CF,
  SCR_GAMECONST_trackscriptstate = 0x7D0,
  SCR_GAMECONST_transmittargetname = 0x7D1,
  SCR_GAMECONST_traversemode = 0x7D2,
  SCR_GAMECONST_treadfxnamearray = 0x7D3,
  SCR_GAMECONST_triggerfx = 0x7D4,
  SCR_GAMECONST_trimpathtoattack = 0x7D5,
  SCR_GAMECONST_turnrate = 0x7D6,
  SCR_GAMECONST_turretcantarget = 0x7D7,
  SCR_GAMECONST_turretfiredisable = 0x7D8,
  SCR_GAMECONST_turretfireenable = 0x7D9,
  SCR_GAMECONST_turretinvulnerability = 0x7DA,
  SCR_GAMECONST_turretrotscale = 0x7DB,
  SCR_GAMECONST_turretweapon = 0x7DC,
  SCR_GAMECONST_type = 0x7DD,
  SCR_GAMECONST_ufomode = 0x7DE,
  SCR_GAMECONST_ui3dsetwindow = 0x7DF,
  SCR_GAMECONST_ui3dwindow = 0x7E0,
  SCR_GAMECONST_uncruncharray = 0x7E1,
  SCR_GAMECONST_underwater = 0x7E2,
  SCR_GAMECONST_undolaststand = 0x7E3,
  SCR_GAMECONST_unlink = 0x7E4,
  SCR_GAMECONST_unlinkallfromcamera = 0x7E5,
  SCR_GAMECONST_unlinkfromcamera = 0x7E6,
  SCR_GAMECONST_unlinkfrommissile = 0x7E7,
  SCR_GAMECONST_unlinkguidedmissilecamera = 0x7E8,
  SCR_GAMECONST_unlinknodes = 0x7E9,
  SCR_GAMECONST_unsetperk = 0x7EA,
  SCR_GAMECONST_unsetturretnode = 0x7EB,
  SCR_GAMECONST_updateclientnames = 0x7EC,
  SCR_GAMECONST_updategamerprofile = 0x7ED,
  SCR_GAMECONST_updateplayersightaccuracy = 0x7EE,
  SCR_GAMECONST_updateprone = 0x7EF,
  SCR_GAMECONST_updatestatratio = 0x7F0,
  SCR_GAMECONST_updateweaponoptions = 0x7F1,
  SCR_GAMECONST_uploadscore = 0x7F2,
  SCR_GAMECONST_uploadstats = 0x7F3,
  SCR_GAMECONST_uploadtime = 0x7F4,
  SCR_GAMECONST_useable = 0x7F5,
  SCR_GAMECONST_usealternateaimparams = 0x7F6,
  SCR_GAMECONST_useanimtree = 0x7F7,
  SCR_GAMECONST_usebuttonheld = 0x7F8,
  SCR_GAMECONST_usebuttonpressed = 0x7F9,
  SCR_GAMECONST_useby = 0x7FA,
  SCR_GAMECONST_usechokepoints = 0x7FB,
  SCR_GAMECONST_usecombatscriptatcover = 0x7FC,
  SCR_GAMECONST_usecovernode = 0x7FD,
  SCR_GAMECONST_usereacquirenode = 0x7FE,
  SCR_GAMECONST_useservervisionset = 0x7FF,
  SCR_GAMECONST_usetriggerrequirelookat = 0x800,
  SCR_GAMECONST_useturret = 0x801,
  SCR_GAMECONST_usevehicle = 0x802,
  SCR_GAMECONST_useweaponhidetags = 0x803,
  SCR_GAMECONST_usingturret = 0x804,
  SCR_GAMECONST_usingvehicle = 0x805,
  SCR_GAMECONST_vectorcross = 0x806,
  SCR_GAMECONST_vectordot = 0x807,
  SCR_GAMECONST_vectorfromlinetopoint = 0x808,
  SCR_GAMECONST_vectorlerp = 0x809,
  SCR_GAMECONST_vectornormalize = 0x80A,
  SCR_GAMECONST_vectorscale = 0x80B,
  SCR_GAMECONST_vectortoangles = 0x80C,
  SCR_GAMECONST_vehcansee = 0x80D,
  SCR_GAMECONST_vehclearenemy = 0x80E,
  SCR_GAMECONST_vehclearentitytarget = 0x80F,
  SCR_GAMECONST_vehgetmodel = 0x810,
  SCR_GAMECONST_vehicleclass = 0x811,
  SCR_GAMECONST_vehicleposition = 0x812,
  SCR_GAMECONST_vehicletype = 0x813,
  SCR_GAMECONST_vehseenrecently = 0x814,
  SCR_GAMECONST_vehsetentitytarget = 0x815,
  SCR_GAMECONST_vehspeed = 0x816,
  SCR_GAMECONST_velocity = 0x817,
  SCR_GAMECONST_vertalign = 0x818,
  SCR_GAMECONST_vibrate = 0x819,
  SCR_GAMECONST_viewkick = 0x81A,
  SCR_GAMECONST_viewlockedentity = 0x81B,
  SCR_GAMECONST_visionsetdamage = 0x81C,
  SCR_GAMECONST_visionsetlaststand = 0x81D,
  SCR_GAMECONST_visionsetlerpratio = 0x81E,
  SCR_GAMECONST_visionsetnaked = 0x81F,
  SCR_GAMECONST_visionsetnight = 0x820,
  SCR_GAMECONST_visionsetunderwater = 0x821,
  SCR_GAMECONST_vteam = 0x822,
  SCR_GAMECONST_wagerwinnings = 0x823,
  SCR_GAMECONST_walkdist = 0x824,
  SCR_GAMECONST_waterplop = 0x825,
  SCR_GAMECONST_weapon = 0x826,
  SCR_GAMECONST_weaponaccuracy = 0x827,
  SCR_GAMECONST_weaponaltweaponname = 0x828,
  SCR_GAMECONST_weaponbayonetinfo = 0x829,
  SCR_GAMECONST_weaponbottomarc = 0x82A,
  SCR_GAMECONST_weaponclass = 0x82B,
  SCR_GAMECONST_weaponclipsize = 0x82C,
  SCR_GAMECONST_weaponcliptype = 0x82D,
  SCR_GAMECONST_weapondogibbing = 0x82E,
  SCR_GAMECONST_weapondualwieldweaponname = 0x82F,
  SCR_GAMECONST_weaponfightdist = 0x830,
  SCR_GAMECONST_weaponfiretime = 0x831,
  SCR_GAMECONST_weaponguidedmissiletype = 0x832,
  SCR_GAMECONST_weaponhasattachment = 0x833,
  SCR_GAMECONST_weaponattachmentcount = 0x834,
  SCR_GAMECONST_weaponhasbayonet = 0x835,
  SCR_GAMECONST_weaponinventorytype = 0x836,
  SCR_GAMECONST_weaponisboltaction = 0x837,
  SCR_GAMECONST_weaponisdualwield = 0x838,
  SCR_GAMECONST_weaponisgasweapon = 0x839,
  SCR_GAMECONST_weaponissemiauto = 0x83A,
  SCR_GAMECONST_weaponischargeshot = 0x83B,
  SCR_GAMECONST_weaponissniperweapon = 0x83C,
  SCR_GAMECONST_weaponleftarc = 0x83D,
  SCR_GAMECONST_weaponlockfinalize = 0x83E,
  SCR_GAMECONST_weaponlockfree = 0x83F,
  SCR_GAMECONST_weaponlocknoclearance = 0x840,
  SCR_GAMECONST_weaponlockonradius = 0x841,
  SCR_GAMECONST_weaponlockonspeed = 0x842,
  SCR_GAMECONST_weaponlockstart = 0x843,
  SCR_GAMECONST_weaponlocktargettooclose = 0x844,
  SCR_GAMECONST_weaponmaxammo = 0x845,
  SCR_GAMECONST_weaponmaxdist = 0x846,
  SCR_GAMECONST_weaponmaxgibdistance = 0x847,
  SCR_GAMECONST_weaponmountable = 0x848,
  SCR_GAMECONST_weaponreloadtime = 0x849,
  SCR_GAMECONST_weaponrightarc = 0x84A,
  SCR_GAMECONST_weaponspinsettings = 0x84B,
  SCR_GAMECONST_weaponstartammo = 0x84C,
  SCR_GAMECONST_weapontoparc = 0x84D,
  SCR_GAMECONST_weapontype = 0x84E,
  SCR_GAMECONST_width = 0x84F,
  SCR_GAMECONST_withinapproxpathdist = 0x850,
  SCR_GAMECONST_worldentnumber = 0x851,
  SCR_GAMECONST_worldtolocalcoords = 0x852,
  SCR_GAMECONST_x = 0x853,
  SCR_GAMECONST_x2score = 0x854,
  SCR_GAMECONST_y = 0x855,
  SCR_GAMECONST_z = 0x856,
  SCR_GAMECONST_zerogravityvolumeoff = 0x857,
  SCR_GAMECONST_zerogravityvolumeon = 0x858,
  SCR_GAMECONST_setinvisibletoall = 0x859,
  SCR_GAMECONST_setvisibletoallexceptteam = 0x85A,
  SCR_GAMECONST_setvisibletoteam = 0x85B,
  SCR_GAMECONST_islinkedto = 0x85C,
  SCR_GAMECONST_getangles = 0x85D,
  SCR_GAMECONST_getmins = 0x85E,
  SCR_GAMECONST_getmaxs = 0x85F,
  SCR_GAMECONST_getabsmins = 0x860,
  SCR_GAMECONST_getabsmaxs = 0x861,
  SCR_GAMECONST_istouchingswept = 0x862,
  SCR_GAMECONST_istouchingvolume = 0x863,
  SCR_GAMECONST_playsoundwithnotify = 0x864,
  SCR_GAMECONST_playsoundtoteam = 0x865,
  SCR_GAMECONST_playbattlechattertoteam = 0x866,
  SCR_GAMECONST_setzombieshrink = 0x867,
  SCR_GAMECONST_setenemymodel = 0x868,
  SCR_GAMECONST_ghost = 0x869,
  SCR_GAMECONST_showtoplayer = 0x86A,
  SCR_GAMECONST_setrevivehintstring = 0x86B,
  SCR_GAMECONST_setfovforkillcam = 0x86C,
  SCR_GAMECONST_sethintstringforperk = 0x86D,
  SCR_GAMECONST_sethintlowpriority = 0x86E,
  SCR_GAMECONST_triggerignoreteam = 0x86F,
  SCR_GAMECONST_spawnnapalmgroundflame = 0x870,
  SCR_GAMECONST_needsrevive = 0x871,
  SCR_GAMECONST_isinsecondchance = 0x872,
  SCR_GAMECONST_depthofplayerinwater = 0x873,
  SCR_GAMECONST_stopburning = 0x874,
  SCR_GAMECONST_displaymedal = 0x875,
  SCR_GAMECONST_displaygamemodemessage = 0x876,
  SCR_GAMECONST_displayteammessage = 0x877,
  SCR_GAMECONST_displaycontract = 0x878,
  SCR_GAMECONST_displaychallengecomplete = 0x879,
  SCR_GAMECONST_displaygunlevelup = 0x87A,
  SCR_GAMECONST_displayendgame = 0x87B,
  SCR_GAMECONST_displayendgamemilestone = 0x87C,
  SCR_GAMECONST_displayrankup = 0x87D,
  SCR_GAMECONST_displaywagerpopup = 0x87E,
  SCR_GAMECONST_displayhudanim = 0x87F,
  SCR_GAMECONST_isturretlockedon = 0x880,
  SCR_GAMECONST_heliturretsighttrace = 0x881,
  SCR_GAMECONST_heliturretdogtrace = 0x882,
  SCR_GAMECONST_docowardswayanims = 0x883,
  SCR_GAMECONST_setcameraspikeactive = 0x884,
  SCR_GAMECONST_isinsideheightlock = 0x885,
  SCR_GAMECONST_ismissileinsideheightlock = 0x886,
  SCR_GAMECONST_getgroundent = 0x887,
  SCR_GAMECONST_attachshieldmodel = 0x888,
  SCR_GAMECONST_detachshieldmodel = 0x889,
  SCR_GAMECONST_ismartyrdomgrenade = 0x88A,
  SCR_GAMECONST_setspawnclientflag = 0x88B,
  SCR_GAMECONST_directionalhitindicator = 0x88C,
  SCR_GAMECONST_setplayergravity = 0x88D,
  SCR_GAMECONST_clearplayergravity = 0x88E,
  SCR_GAMECONST_setperkfortrigger = 0x88F,
  SCR_GAMECONST_setignoreentfortrigger = 0x890,
  SCR_GAMECONST_isitemlocked = 0x891,
  SCR_GAMECONST_isitempurchased = 0x892,
  SCR_GAMECONST_uploadleaderboards = 0x893,
  SCR_GAMECONST_setnemesisxuid = 0x894,
  SCR_GAMECONST_getmovespeedscale = 0x895,
  SCR_GAMECONST_setzombiename = 0x896,
  SCR_GAMECONST_setentgravitytrajectory = 0x897,
  SCR_GAMECONST_setvehicleteam = 0x898,
  SCR_GAMECONST_setturretminimapvisible = 0x899,
  SCR_GAMECONST_spawnactor = 0x89A,
  SCR_GAMECONST_predictspawnpoint = 0x89B,
  SCR_GAMECONST_makegrenadedud = 0x89C,
  SCR_GAMECONST_getclientflag = 0x89D,
  SCR_GAMECONST_setscriptmoverflag = 0x89E,
  SCR_GAMECONST_fakefire = 0x89F,
  SCR_GAMECONST_predictgrenade = 0x8A0,
  SCR_GAMECONST_getindexforactivecontract = 0x8A1,
  SCR_GAMECONST_getactivecontractprogress = 0x8A2,
  SCR_GAMECONST_incrementactivecontractprogress = 0x8A3,
  SCR_GAMECONST_incrementactivecontracttime = 0x8A4,
  SCR_GAMECONST_isactivecontractcomplete = 0x8A5,
  SCR_GAMECONST_hasactivecontractexpired = 0x8A6,
  SCR_GAMECONST_getactivecontracttimepassed = 0x8A7,
  SCR_GAMECONST_resetactivecontractprogress = 0x8A8,
  SCR_GAMECONST_getpregameclass = 0x8A9,
  SCR_GAMECONST_getpregameteam = 0x8AA,
  SCR_GAMECONST_setpregameclass = 0x8AB,
  SCR_GAMECONST_setpregameteam = 0x8AC,
  SCR_GAMECONST_istestclient = 0x8AD,
  SCR_GAMECONST_actorikenabled = 0x8AE,
  SCR_GAMECONST_aimatentityik = 0x8AF,
  SCR_GAMECONST_aimatposik = 0x8B0,
  SCR_GAMECONST_setthirdperson = 0x8B1,
  SCR_GAMECONST_project2dto3d = 0x8B2,
  SCR_GAMECONST_throw = 0x8B3,
  SCR_GAMECONST_forwardrotatearoundupbyangle = 0x8B4,
  SCR_GAMECONST_linktoupdateoffset = 0x8B5,
  SCR_GAMECONST_setcharacterindex = 0x8B6,
  SCR_GAMECONST_getcharacterindex = 0x8B7,
  SCR_GAMECONST_scriptcallbackonfootstepevent = 0x8B8,
  SCR_GAMECONST_usefootsteptable = 0x8B9,
  SCR_GAMECONST_useplayerfootsteptable = 0x8BA,
  SCR_GAMECONST_footstepdonothing = 0x8BB,
  SCR_GAMECONST_footstepdoeverything = 0x8BC,
  SCR_GAMECONST_footstepdosound = 0x8BD,
  SCR_GAMECONST_footstepdofootstepfx = 0x8BE,
  SCR_GAMECONST_usefootstepfxtable = 0x8BF,
  SCR_GAMECONST_setmaterialoverride = 0x8C0,
  SCR_GAMECONST_clearmaterialoverride = 0x8C1,
  SCR_GAMECONST_setsteptriggersound = 0x8C2,
  SCR_GAMECONST_clearsteptriggersound = 0x8C3,
  SCR_GAMECONST_getmovementtype = 0x8C4,
  SCR_GAMECONST_luiload = 0x8C5,
  SCR_GAMECONST_luishow = 0x8C6,
  SCR_GAMECONST_luihide = 0x8C7,
  SCR_GAMECONST_luievent = 0x8C8,
  SCR_GAMECONST_startmultiplayer = 0x8C9,
  SCR_GAMECONST_startzombies = 0x8CA,
  SCR_GAMECONST_launchsavegame = 0x8CB,
  SCR_GAMECONST_suienable = 0x8CC,
  SCR_GAMECONST_suidisable = 0x8CD,
  SCR_GAMECONST_bbclasschoice = 0x8CE,
  SCR_GAMECONST_luienable = 0x8CF,
  SCR_GAMECONST_luidisable = 0x8D0,
  SCR_GAMECONST_isluienabled = 0x8D1,
  SCR_GAMECONST_argusgetorigin = 0x8D2,
  SCR_GAMECONST_deleteelem = 0x8D3,
  SCR_GAMECONST_setloadoutitem = 0x8D4,
  SCR_GAMECONST_argussetdistance = 0x8D5,
  SCR_GAMECONST_argussetattach = 0x8D6,
  SCR_GAMECONST_argussetvisible = 0x8D7,
  SCR_GAMECONST_argussetstacked = 0x8D8,
  SCR_GAMECONST_argussetbracket = 0x8D9,
  SCR_GAMECONST_removeargus = 0x8DA,
  SCR_GAMECONST_getanimforstate = 0x8DB,
  SCR_GAMECONST_iscinematicinprogress = 0x8DC,
  SCR_GAMECONST_iscinematicpreloading = 0x8DD,
  SCR_GAMECONST_argussetoffset = 0x8DE,
  SCR_GAMECONST_argussetfaderate = 0x8DF,
  SCR_GAMECONST_setsonarattachmentenabled = 0x8E0,
  SCR_GAMECONST_precacheleaderboards = 0x8E1,
  SCR_GAMECONST_setcolorelem = 0x8E2,
  SCR_GAMECONST_moveelem = 0x8E3,
  SCR_GAMECONST_presentation_rate = 0x8E4,
  SCR_GAMECONST_rpc = 0x8E5,
  SCR_GAMECONST_is_visible = 0x8E6,
  SCR_GAMECONST_rotateelem = 0x8E7,
  SCR_GAMECONST_vehfovcosine = 0x8E8,
  SCR_GAMECONST_vehfovcosinebusy = 0x8E9,
  SCR_GAMECONST_vehmaxsightdistsqrd = 0x8EA,
  SCR_GAMECONST_vehsightlatency = 0x8EB,
  SCR_GAMECONST_vehignoreclosefoliage = 0x8EC,
  SCR_GAMECONST_setripplewave = 0x8ED,
  SCR_GAMECONST_x_alignment = 0x8EE,
  SCR_GAMECONST_y_alignment = 0x8EF,
  SCR_GAMECONST_x_anchor = 0x8F0,
  SCR_GAMECONST_y_anchor = 0x8F1,
  SCR_GAMECONST_elemvirtualtophysical = 0x8F2,
  SCR_GAMECONST_elemphysicaltovirtual = 0x8F3,
  SCR_GAMECONST_gettimefromvehiclenodetonode = 0x8F4,
  SCR_GAMECONST_ishostforbots = 0x8F5,
  SCR_GAMECONST_is_radial = 0x8F6,
  SCR_GAMECONST_start_angle = 0x8F7,
  SCR_GAMECONST_end_angle = 0x8F8,
  SCR_GAMECONST_newradialmaterialelem = 0x8F9,
  SCR_GAMECONST_scale_children = 0x8FA,
  SCR_GAMECONST_argusgetui = 0x8FB,
  SCR_GAMECONST_columns = 0x8FC,
  SCR_GAMECONST_rows = 0x8FD,
  SCR_GAMECONST_precacheanimstatedef = 0x8FE,
  SCR_GAMECONST_setanimstatefromasd = 0x8FF,
  SCR_GAMECONST_hasanimstatefromasd = 0x900,
  SCR_GAMECONST_getanimstatefromasd = 0x901,
  SCR_GAMECONST_getanimsubstatefromasd = 0x902,
  SCR_GAMECONST_getanimsubstatecountfromasd = 0x903,
  SCR_GAMECONST_getanimfromasd = 0x904,
  SCR_GAMECONST_getanimlengthfromasd = 0x905,
  SCR_GAMECONST_getanimhasnotetrackfromasd = 0x906,
  SCR_GAMECONST_argusforcedrawbracket = 0x907,
  SCR_GAMECONST_chargeshotlevel = 0x908,
  SCR_GAMECONST_skillcleardata = 0x909,
  SCR_GAMECONST_skillplayersetresult = 0x90A,
  SCR_GAMECONST_skillupdate = 0x90B,
  SCR_GAMECONST_recordleaguewinner = 0x90C,
  SCR_GAMECONST_recordleaguepreloser = 0x90D,
  SCR_GAMECONST_fixedlinkyawonly = 0x90E,
  SCR_GAMECONST_getzbarrierarray = 0x90F,
  SCR_GAMECONST_iszbarrier = 0x910,
  SCR_GAMECONST_getnumzbarrierpieces = 0x911,
  SCR_GAMECONST_getzbarrierpiecestate = 0x912,
  SCR_GAMECONST_setzbarrierpiecestate = 0x913,
  SCR_GAMECONST_iszbarrieropen = 0x914,
  SCR_GAMECONST_iszbarrierclosed = 0x915,
  SCR_GAMECONST_hidezbarrierpiece = 0x916,
  SCR_GAMECONST_showzbarrierpiece = 0x917,
  SCR_GAMECONST_zbarrierpieceusedefaultmodel = 0x918,
  SCR_GAMECONST_zbarrierpieceusealternatemodel = 0x919,
  SCR_GAMECONST_zbarrierpieceuseupgradedmodel = 0x91A,
  SCR_GAMECONST_getupgradedpiecenumlives = 0x91B,
  SCR_GAMECONST_getzbarrierpieceindicesinstate = 0x91C,
  SCR_GAMECONST_getzbarrierpieceanimlengthforstate = 0x91D,
  SCR_GAMECONST_getzbarrierpieceanimstate = 0x91E,
  SCR_GAMECONST_getzbarrierpieceanimsubstate = 0x91F,
  SCR_GAMECONST_zbarriersupportszombietaunts = 0x920,
  SCR_GAMECONST_zbarriersupportszombiereachthroughattacks = 0x921,
  SCR_GAMECONST_getzbarriertauntanimstate = 0x922,
  SCR_GAMECONST_getzbarrierreachthroughattackanimstate = 0x923,
  SCR_GAMECONST_getzbarriernumattackslots = 0x924,
  SCR_GAMECONST_getzbarrierattackslothorzoffset = 0x925,
  SCR_GAMECONST_setpathtransitiontime = 0x926,
  SCR_GAMECONST_setteamhasmeat = 0x927,
  SCR_GAMECONST_vehdontejectoccupantsondeath = 0x928,
  SCR_GAMECONST_nodesarelinked = 0x929,
  SCR_GAMECONST_forceyellowdot = 0x92A,
  SCR_GAMECONST_disableyellowdot = 0x92B,
  SCR_GAMECONST_allowcamerarotation = 0x92C,
  SCR_GAMECONST_reloadonnunchuk = 0x92D,
  SCR_GAMECONST_reloadonwiiumote = 0x92E,
  SCR_GAMECONST_debugbreak = 0x92F,
  SCR_GAMECONST_setcheapflag = 0x930,
  SCR_GAMECONST_physicsjetthrust = 0x931,
  SCR_GAMECONST_getpathfixedoffset = 0x932,
  SCR_GAMECONST_getpathvariableoffset = 0x933,
  SCR_GAMECONST_getvehicleavoidancenodes = 0x934,
  SCR_GAMECONST_ismeleecharged = 0x935,
  SCR_GAMECONST_initialweaponraise = 0x936,
  SCR_GAMECONST_seteverhadweaponall = 0x937,
  SCR_GAMECONST_getcurrentweaponspinlerp = 0x938,
  SCR_GAMECONST_setcurrentweaponspinlerp = 0x939,
  SCR_GAMECONST_lightfxnamearray = 0x93A,
  SCR_GAMECONST_lightfxtagarray = 0x93B,
  SCR_GAMECONST_friendlylightfxname = 0x93C,
  SCR_GAMECONST_friendlylightfxtag = 0x93D,
  SCR_GAMECONST_enemylightfxname = 0x93E,
  SCR_GAMECONST_enemylightfxtag = 0x93F,
  SCR_GAMECONST_lookat = 0x940,
  SCR_GAMECONST_settypewriterfx = 0x941,
  SCR_GAMECONST_playerbeingspectated = 0x942,
  SCR_GAMECONST_weaponplayejectbrass = 0x943,
  SCR_GAMECONST_setdrawinfrared = 0x944,
  SCR_GAMECONST_newdamageindicatorhudelem = 0x945,
  SCR_GAMECONST_sprintuprequired = 0x946,
  SCR_GAMECONST_atgoal = 0x947,
  SCR_GAMECONST_hasgoal = 0x948,
  SCR_GAMECONST_isusingoffhand = 0x949,
  SCR_GAMECONST_arrayremovevalue = 0x94A,
  SCR_GAMECONST_arrayremoveindex = 0x94B,
  SCR_GAMECONST_arrayinsert = 0x94C,
  SCR_GAMECONST_trackweaponfirenative = 0x94D,
  SCR_GAMECONST_arraycombine = 0x94E,
  SCR_GAMECONST_arraycopy = 0x94F,
  SCR_GAMECONST_bbpostdemostreamstatsforround = 0x950,
  SCR_GAMECONST_isinarray = 0x951,
  SCR_GAMECONST_remotecontrolturret = 0x952,
  SCR_GAMECONST_remotecontrolturretoff = 0x953,
  SCR_GAMECONST_recordkillstreakevent = 0x954,
  SCR_GAMECONST_recordgameevent = 0x955,
  SCR_GAMECONST_recordkillmodifier = 0x956,
  SCR_GAMECONST_recordmedal = 0x957,
  SCR_GAMECONST_recordloadoutandperks = 0x958,
  SCR_GAMECONST_recordnumzombierounds = 0x959,
  SCR_GAMECONST_recordgameresult = 0x95A,
  SCR_GAMECONST_recordmultikill = 0x95B,
  SCR_GAMECONST_registerclientfield = 0x95C,
  SCR_GAMECONST_codesetclientfield = 0x95D,
  SCR_GAMECONST_codegetclientfield = 0x95E,
  SCR_GAMECONST_codesetworldclientfield = 0x95F,
  SCR_GAMECONST_codegetworldclientfield = 0x960,
  SCR_GAMECONST_setlightingentity = 0x961,
  SCR_GAMECONST_vehmodel = 0x962,
  SCR_GAMECONST_vehmodelenemy = 0x963,
  SCR_GAMECONST_setplayercurrentobjective = 0x964,
  SCR_GAMECONST_setobjectivepointstatus = 0x965,
  SCR_GAMECONST_setdemolockonvalues = 0x966,
  SCR_GAMECONST_ignorecheapentityflag = 0x967,
  SCR_GAMECONST_setforceads = 0x968,
  SCR_GAMECONST_setlutvolumeactivebank = 0x969,
  SCR_GAMECONST_getlastarraykey = 0x96A,
  SCR_GAMECONST_getprevarraykey = 0x96B,
  SCR_GAMECONST_makesentient = 0x96C,
  SCR_GAMECONST_coversearchinterval = 0x96D,
  SCR_GAMECONST_agrkills = 0x96E,
  SCR_GAMECONST_hacks = 0x96F,
  SCR_GAMECONST_setplayercurrentstreak = 0x970,
  SCR_GAMECONST_currentspectatingclient = 0x971,
  SCR_GAMECONST_goodenemyonly = 0x972,
  SCR_GAMECONST_scriptmodelsuseanimtree = 0x973,
  SCR_GAMECONST_toupper = 0x974,
  SCR_GAMECONST_getcontrollertype = 0x975,
  SCR_GAMECONST_setambienttrigger = 0x976,
  SCR_GAMECONST_setambientpackage = 0x977,
  SCR_GAMECONST_forceambientroom = 0x978,
  SCR_GAMECONST_forceambientpackage = 0x979,
  SCR_GAMECONST_setambientroomcontextengine = 0x97A,
  SCR_GAMECONST_ambient_package = 0x97B,
  SCR_GAMECONST_createqrcode = 0x97C,
  SCR_GAMECONST_deleteqrcode = 0x97D,
  SCR_GAMECONST_getnearestnode = 0x97E,
  SCR_GAMECONST_getvisiblenode = 0x97F,
  SCR_GAMECONST_gamepadusedlast = 0x980,
  SCR_GAMECONST_vehcheckforpredictedcrash = 0x981,
  SCR_GAMECONST_vehonpath = 0x982,
  SCR_GAMECONST_turnedhuman = 0x983,
  SCR_GAMECONST_usealternatereviveicon = 0x984,
  SCR_GAMECONST_setdvarint = 0x985,
  SCR_GAMECONST_clearlookat = 0x986,
  SCR_GAMECONST_getgoal = 0x987,
  SCR_GAMECONST_vehaircraftcollisionenabled = 0x988,
  SCR_GAMECONST_tension = 0x989,
  SCR_GAMECONST_nodesvisible = 0x98A,
  SCR_GAMECONST_nodescanpath = 0x98B,
  SCR_GAMECONST_setlutscriptindex = 0x98C,
  SCR_GAMECONST_getloadoutitemref = 0x98D,
  SCR_GAMECONST_getloadoutweapon = 0x98E,
  SCR_GAMECONST_getloadoutperks = 0x98F,
  SCR_GAMECONST_codesetplayerstateclientfield = 0x990,
  SCR_GAMECONST_codegetplayerstateclientfield = 0x991,
  SCR_GAMECONST_applyknockback = 0x992,
  SCR_GAMECONST_getmissileowner = 0x993,
  SCR_GAMECONST_canclaimnode = 0x994,
  SCR_GAMECONST_getminbitcountfornum = 0x995,
  SCR_GAMECONST_setweaponoverheating = 0x996,
  SCR_GAMECONST_getloadoutallocation = 0x997,
  SCR_GAMECONST_getvisiblenodes = 0x998,
  SCR_GAMECONST_visionsetnakedlerp = 0x999,
  SCR_GAMECONST_cincaptureenablealpha = 0x99A,
  SCR_GAMECONST_cincapturedisablealpha = 0x99B,
  SCR_GAMECONST_sethidegumpalpha = 0x99C,
  SCR_GAMECONST_gettouchingvolume = 0x99D,
  SCR_GAMECONST_objective_visibleteams = 0x99E,
  SCR_GAMECONST_objective_setprogress = 0x99F,
  SCR_GAMECONST_objective_setplayerusing = 0x9A0,
  SCR_GAMECONST_objective_clearplayerusing = 0x9A1,
  SCR_GAMECONST_objective_clearallusing = 0x9A2,
  SCR_GAMECONST_forceoffhandend = 0x9A3,
  SCR_GAMECONST_objective_setgamemodeflags = 0x9A4,
  SCR_GAMECONST_objective_getgamemodeflags = 0x9A5,
  SCR_GAMECONST_setupclientfieldcodecallbacks = 0x9A6,
  SCR_GAMECONST_zbarrierpieceuseboxriselogic = 0x9A7,
  SCR_GAMECONST_resetzombieboxweapons = 0x9A8,
  SCR_GAMECONST_addzombieboxweapon = 0x9A9,
  SCR_GAMECONST_getmoverent = 0x9AA,
  SCR_GAMECONST_objective_clearentity = 0x9AB,
  SCR_GAMECONST_ismovingplatform = 0x9AC,
  SCR_GAMECONST_entitytrace = 0x9AD,
  SCR_GAMECONST_allowattack = 0x9AE,
  SCR_GAMECONST_pressads = 0x9AF,
  SCR_GAMECONST_getthreats = 0x9B0,
  SCR_GAMECONST_predictposition = 0x9B1,
  SCR_GAMECONST_botsighttracepassed = 0x9B2,
  SCR_GAMECONST_isreloading = 0x9B3,
  SCR_GAMECONST_setmissileowner = 0x9B4,
  SCR_GAMECONST_getgunangles = 0x9B5,
  SCR_GAMECONST_setinitialplayersconnected = 0x9B6,
  SCR_GAMECONST_setzbarriercolmodel = 0x9B7,
  SCR_GAMECONST_stancebuttonpressed = 0x9B8,
  SCR_GAMECONST_arraysort = 0x9B9,
  SCR_GAMECONST_worldtrace = 0x9BA,
  SCR_GAMECONST_getdamageableentarray = 0x9BB,
  SCR_GAMECONST_vehhighlyawareradius = 0x9BC,
  SCR_GAMECONST_pressmelee = 0x9BD,
  SCR_GAMECONST_setmaplatlong = 0x9BE,
  SCR_GAMECONST_setteamreviveicon = 0x9BF,
  SCR_GAMECONST_allowtacticalinsertion = 0x9C0,
  SCR_GAMECONST_recordkillstreakendevent = 0x9C1,
  SCR_GAMECONST_incrementlifestat = 0x9C2,
  SCR_GAMECONST_incrementplayerstat = 0x9C3,
  SCR_GAMECONST_recordmatchsummaryzombieendgamedata = 0x9C4,
  SCR_GAMECONST_matchrecorderincrementheaderstat = 0x9C5,
  SCR_GAMECONST_recordplayerdeathzombies = 0x9C6,
  SCR_GAMECONST_recordmatchinit = 0x9C7,
  SCR_GAMECONST_recordloadoutperksandkillstreaks = 0x9C8,
  SCR_GAMECONST_setpitchorient = 0x9C9,
  SCR_GAMECONST_getfriendlies = 0x9CA,
  SCR_GAMECONST_getenemies = 0x9CB,
  SCR_GAMECONST_getutc = 0x9CC,
  SCR_GAMECONST_luinotifyeventtospectators = 0x9CD,
  SCR_GAMECONST_setweaponheatpercent = 0x9CE,
  SCR_GAMECONST_forceinfraredmaterialsstreaming = 0x9CF,
  SCR_GAMECONST_setalphafadeforname = 0x9D0,
  SCR_GAMECONST_botsetfailsafenode = 0x9D1,
  SCR_GAMECONST_pressdtpbutton = 0x9D2,
  SCR_GAMECONST_ropepulse = 0x9D3,
  SCR_GAMECONST_getweaponsupportedattachments = 0x9D4,
  SCR_GAMECONST_setactorweapon = 0x9D5,
  SCR_GAMECONST_immunetodemogamehudsettings = 0x9D6,
  SCR_GAMECONST_resetfov = 0x9D7,
  SCR_GAMECONST_getcurrentweaponaltweapon = 0x9D8,
  SCR_GAMECONST_murderline = 0x9D9,
  SCR_GAMECONST_setentityweapon = 0x9DA,
  SCR_GAMECONST_gamehistoryfinishmatch = 0x9DB,
  SCR_GAMECONST_animflaggedscripted = 0x9DC,
  SCR_GAMECONST_getloadoutitemindex = 0x9DD,
  SCR_GAMECONST_ishidden = 0x9DE,
  SCR_GAMECONST_getclientfieldversion = 0x9DF,
  SCR_GAMECONST_getfreeactorcount = 0x9E0,
  SCR_GAMECONST_pointstowin = 0x9E1,
  SCR_GAMECONST_vehviewmodel = 0x9E2,
  SCR_GAMECONST_fxblocksight = 0x9E3,
  SCR_GAMECONST_allowbottargetting = 0x9E4,
  SCR_GAMECONST_getserverhighestclientfieldversion = 0x9E5,
  SCR_GAMECONST_setblurbylocalclientnum = 0x9E6,
  SCR_GAMECONST_killsconfirmed = 0x9E7,
  SCR_GAMECONST_killsdenied = 0x9E8,
  SCR_GAMECONST_isweapondisallowedatmatchstart = 0x9E9,
  SCR_GAMECONST_is_ps3 = 0x9EA,
  SCR_GAMECONST_is_xenon = 0x9EB,
  SCR_GAMECONST_is_pc = 0x9EC,
  SCR_GAMECONST_is_wiiu = 0x9ED,
  SCR_GAMECONST_botsetdefaultclass = 0x9EE,
  SCR_GAMECONST_botclassadditem = 0x9EF,
  SCR_GAMECONST_botclassaddattachment = 0x9F0,
  SCR_GAMECONST_getweaponexplosionradius = 0x9F1,
  SCR_GAMECONST_getweaponattachments = 0x9F2,
  SCR_GAMECONST_getwiiuremotepointerposition = 0x9F3,
  SCR_GAMECONST_getcamposbylocalclientnum = 0x9F4,
  SCR_GAMECONST_getcamanglesbylocalclientnum = 0x9F5,
  SCR_GAMECONST_demoisanyfreemovecamera = 0x9F6,
  SCR_GAMECONST_demoismoviecamera = 0x9F7,
  SCR_GAMECONST_demoiseditcamera = 0x9F8,
  SCR_GAMECONST_demoisdollycamera = 0x9F9,
  SCR_GAMECONST_movepoint = 0x9FA,
  SCR_GAMECONST_setfreecameralockonallowed = 0x9FB,
  SCR_GAMECONST_botleavegame = 0x9FC,
  SCR_GAMECONST_immunetodemofreecamera = 0x9FD,
  SCR_GAMECONST_setrenderinthirdpersonspectate = 0x9FE,
  SCR_GAMECONST_iscinematicwebm = 0x9FF,
  SCR_GAMECONST_ghostindemo = 0xA00,
  SCR_GAMECONST_showindemo = 0xA01,
  SCR_GAMECONST_useweaponmodel = 0xA02,
  SCR_GAMECONST_islocalgame = 0xA03,
  SCR_GAMECONST_refreshshieldattachment = 0xA04,
  SCR_GAMECONST_overridelightingorigin = 0xA05,
  SCR_GAMECONST_gpsjammeractive = 0xA06,
  SCR_GAMECONST_gpsjammerinactive = 0xA07,
  SCR_GAMECONST_finishmeleehit = 0xA08,
  SCR_GAMECONST_makelightslave = 0xA09,
  SCR_GAMECONST_getenterbutton = 0xA0A,
  SCR_GAMECONST_setforcenotsimple = 0xA0B,
  SCR_GAMECONST_forcegrenadethrow = 0xA0C,
  SCR_GAMECONST_setoffhandvisible = 0xA0D,
  SCR_GAMECONST_sendkillstreakdamageevent = 0xA0E,
  SCR_GAMECONST_getstowedweapon = 0xA0F,
  SCR_GAMECONST_createstreamermodelhint = 0xA10,
  SCR_GAMECONST_fakedamagefrom = 0xA11,
  SCR_GAMECONST_doesweaponreplacespawnweapon = 0xA12,
  SCR_GAMECONST_getscreenwidth = 0xA13,
  SCR_GAMECONST_getscreenheight = 0xA14,
  SCR_GAMECONST_MAX = 0xA15,
};

enum fieldtype_t
{
  F_INT = 0x0,
  F_SHORT = 0x1,
  F_BYTE = 0x2,
  F_FLOAT = 0x3,
  F_LSTRING = 0x4,
  F_STRING = 0x5,
  F_VECTOR = 0x6,
  F_ENTITY = 0x7,
  F_ENTHANDLE = 0x8,
  F_ACTOR = 0x9,
  F_SENTIENT = 0xA,
  F_SENTIENTHANDLE = 0xB,
  F_CLIENT = 0xC,
  F_PATHNODE = 0xD,
  F_ACTORGROUP = 0xE,
  F_VECTORHACK = 0xF,
  F_OBJECT = 0x10,
  F_XMODEL_INDEX = 0x11,
  F_XMODEL = 0x12,
  F_BITFLAG = 0x13,
  F_FX = 0x14,
};

enum $1C4253065710F064DA9E4D59ED6EC544
{
  ENTFIELD_ENTITY = 0x0,
  ENTFIELD_SENTIENT = 0x2000,
  ENTFIELD_ACTOR = 0x4000,
  ENTFIELD_CLIENT = 0x6000,
  ENTFIELD_VEHICLE = 0x8000,
  ENTFIELD_MASK = 0xE000,
};

enum ai_event_t
{
  AI_EV_BAD = 0x0,
  AI_EV_FIRST_POINT_EVENT = 0x1,
  AI_EV_FOOTSTEP = 0x2,
  AI_EV_FOOTSTEP_LITE = 0x3,
  AI_EV_NEW_ENEMY = 0x4,
  AI_EV_PAIN = 0x5,
  AI_EV_REACT = 0x6,
  AI_EV_DEATH = 0x7,
  AI_EV_EXPLOSION = 0x8,
  AI_EV_GRENADE_PING = 0x9,
  AI_EV_PROJECTILE_PING = 0xA,
  AI_EV_GUNSHOT = 0xB,
  AI_EV_SILENCED_SHOT = 0xC,
  AI_EV_LAST_POINT_EVENT = 0xD,
  AI_EV_FIRST_LINE_EVENT = 0xE,
  AI_EV_BULLET = 0xF,
  AI_EV_BLOCK_FRIENDLIES = 0x10,
  AI_EV_BULLET_REACT = 0x11,
  AI_EV_PROJECTILE_IMPACT = 0x12,
  AI_EV_LAST_LINE_EVENT = 0x13,
  AI_EV_FIRST_ARC_EVENT = 0x14,
  AI_EV_BADPLACE_ARC = 0x15,
  AI_EV_BADPLACE_LIMITED_ARC = 0x16,
  AI_EV_REALLY_BADPLACE_ARC = 0x17,
  AI_EV_LAST_ARC_EVENT = 0x18,
  AI_EV_FIRST_VOLUME_EVENT = 0x19,
  AI_EV_BADPLACE_VOLUME = 0x1A,
  AI_EV_LAST_VOLUME_EVENT = 0x1B,
  AI_EV_NUM_EVENTS = 0x1C,
};

enum $3FAD84344DD9017EDEA6C2E0F6A382A4
{
  SCR_SYS_GAME = 0x1,
};

enum $FFC7919048C5C74A732B0B66B6996C01
{
  PLF_SAFE_SHUFFLE_LINK = 0x1,
  PLF_DOOR_SHUFFLE_LINK = 0x2,
  PLF_SCRIPT_LINK = 0x4,
  PLF_DOUBLE_WIDE = 0x8,
  PLF_REDUNDANT = 0x10,
  PLF_QUADROTOR = 0x20,
};

enum RadiantCommandType
{
  RADIANT_COMMAND_SELECT = 0x0,
  RADIANT_COMMAND_DESELECT = 0x1,
  RADIANT_COMMAND_UPDATE_SELECTED = 0x2,
  RADIANT_COMMAND_UPDATE = 0x3,
  RADIANT_COMMAND_CREATE = 0x4,
  RADIANT_COMMAND_DELETE = 0x5,
  RADIANT_COMMAND_CAMERA = 0x6,
  RADIANT_COMMAND_CAMERA_POLL = 0x7,
};

enum GUIDType
{
  GT_UNKNOWN = 0x0,
  GT_ENTITY = 0x1,
  GT_PATHNODE = 0x2,
  GT_VEHICLENODE = 0x3,
  GT_NUM = 0x4,
};

enum $98DCEC13E88D3C5661274037FB2E3092
{
  FL_GODMODE = 0x1,
  FL_DEMI_GODMODE = 0x2,
  FL_NOTARGET = 0x4,
  FL_NO_KNOCKBACK = 0x8,
  FL_DROPPED_ITEM = 0x10,
  FL_NO_BOTS = 0x20,
  FL_NO_HUMANS = 0x40,
  FL_TOGGLE = 0x80,
  FL_SOFTACTIVATE = 0x100,
  FL_LOW_PRIORITY_USEABLE = 0x200,
  FL_NO_TACTICAL_INSERTION = 0x400,
  FL_DYNAMICPATH = 0x800,
  FL_SUPPORTS_LINKTO = 0x1000,
  FL_NO_AUTO_ANIM_UPDATE = 0x2000,
  FL_GRENADE_TOUCH_DAMAGE = 0x4000,
  FL_GRENADE_MARTYRDOM = 0x8000,
  FL_MISSILE_DESTABILIZED = 0x10000,
  FL_STABLE_MISSILES = 0x20000,
  FL_REPEAT_ANIM_UPDATE = 0x40000,
  FL_VEHICLE_TARGET = 0x80000,
  FL_GROUND_ENT = 0x100000,
  FL_CURSOR_HINT = 0x200000,
  FL_USE_TURRET = 0x400000,
  FL_MISSILE_ATTRACTOR = 0x800000,
  FL_TARGET = 0x1000000,
  FL_WEAPON_BEING_GRABBED = 0x2000000,
  FL_OBSTACLE = 0x4000000,
  FL_DODGE_LEFT = 0x8000000,
  FL_DODGE_RIGHT = 0x10000000,
  FL_BADPLACE_VOLUME = 0x20000000,
  FL_AUTO_BLOCKPATHS = 0x40000000,
  FL_MOVER_SLIDE = 0x80000000,
};

enum actor_think_result_t
{
  ACTOR_THINK_DONE = 0x0,
  ACTOR_THINK_REPEAT = 0x1,
  ACTOR_THINK_MOVE_TO_BODY_QUEUE = 0x2,
};

enum ThreatDebugStringCategory
{
  TDS_TOTAL_THREAT = 0x0,
  TDS_FLASHED = 0x1,
  TDS_SUPPRESSED = 0x2,
  TDS_THREATBIAS = 0x3,
  TDS_THREATBIAS_GROUP = 0x4,
  TDS_ATTACKER_COUNT = 0x5,
  TDS_CUR_ENEMY_BONUS = 0x6,
  TDS_AWARENESS = 0x7,
  TDS_DIST_THREAT = 0x8,
  TDS_SCARINESS_THREAT = 0x9,
  TDS_NO_COVER = 0xA,
  NUM_TDS = 0xB,
};

enum AI_MOVE_MODE
{
  AI_MOVE_DEFAULT = 0xFFFFFFFF,
  AI_MOVE_STOP = 0x0,
  AI_MOVE_STOP_SOON = 0x1,
  AI_MOVE_WALK = 0x2,
  AI_MOVE_RUN = 0x3,
  NUM_AI_MOVE_MODES = 0x4,
};

enum ai_teammove_t
{
  AI_TEAMMOVE_TRAVEL = 0x0,
  AI_TEAMMOVE_WAIT = 0x1,
  AI_TEAMMOVE_SLOW_DOWN = 0x2,
};

enum $8F68E6739E145E882CC64D7AF6593269
{
  AISF_SPAWNER = 0x1,
  AISF_FORCESPAWN = 0x2,
  AISF_UNDELETABLE = 0x4,
  AISF_ENEMYINFO = 0x8,
  AIS_SCRIPT_FORCESPAWN = 0x10,
};

enum enumForceSpawn
{
  CHECK_SPAWN = 0x0,
  FORCE_SPAWN = 0x1,
};

enum DEBUGMAYMOVE_LIFT_ENUM
{
  DEBUGMAYMOVE_NOT_LIFTED = 0x0,
  DEBUGMAYMOVE_LIFTED = 0x1,
};

enum $98B680CFC31DF8903350C237BBA57AFA
{
  IMPACTEFFECT_HEADSHOT = 0x1,
  IMPACTEFFECT_FATAL = 0x2,
  IMPACTEFFECT_EXIT = 0x4,
  IMPACTEFFECT_UNDERWATER = 0x8,
  IMPACTEFFECT_VEH_ARMOR = 0x10,
  IMPACTEFFECT_VEH_LOCOMOTION = 0x20,
};

enum SlideMoveResult
{
  SLIDEMOVE_COMPLETE = 0x0,
  SLIDEMOVE_CLIPPED = 0x1,
  SLIDEMOVE_FAIL = 0x2,
};

enum $46FF3867997C3370A6BB8DA11CDDA9E1
{
  RELATIVE_DIR_NONE = 0x0,
  RELATIVE_DIR_FRONT = 0x1,
  RELATIVE_DIR_LEFT = 0x2,
  RELATIVE_DIR_RIGHT = 0x3,
  RELATIVE_DIR_BACK = 0x4,
  NUM_RELATIVE_DIR = 0x5,
};

enum NodeClaimSpecies
{
  NODE_CLAIM_SPECIES_BOT = 0x0,
  NODE_CLAIM_SPECIES_MAX = 0x1,
};

enum PredictionTraceResult
{
  PTR_SUCCESS = 0x0,
  PTR_HIT_WORLD = 0x1,
  PTR_HIT_ENTITY = 0x2,
};

enum BotGoalPriority
{
  GOAL_PRIORITY_UNUSED = 0x0,
  GOAL_PRIORITY_LOW = 0x1,
  GOAL_PRIORITY_NORMAL = 0x2,
  GOAL_PRIORITY_HIGH = 0x3,
  GOAL_PRIORITY_URGENT = 0x4,
  GOAL_PRIORITY_MAX = 0x5,
};

enum BotStance
{
  BOT_STANCE_STAND = 0x0,
  BOT_STANCE_CROUCH = 0x1,
  BOT_STANCE_PRONE = 0x2,
};

enum scriptAnimAIFunctionTypes_t
{
  AI_ANIM_FUNCTION_STOP = 0x0,
  AI_ANIM_FUNCTION_MOVE = 0x1,
  AI_ANIM_FUNCTION_COMBAT = 0x2,
  AI_ANIM_FUNCTION_PAIN = 0x3,
  AI_ANIM_FUNCTION_REACT = 0x4,
  AI_ANIM_FUNCTION_DEATH = 0x5,
};

enum PARM_SUPPRESSION
{
  DO_SUPPRESSION = 0x0,
  DONT_SUPPRESS = 0x1,
};

enum $D9D0BC66B2B90B341DF3F578F1A6FE23
{
  ENT_HANDLER_NULL = 0x0,
  ENT_HANDLER_ACTOR_INIT = 0x1,
  ENT_HANDLER_ACTOR = 0x2,
  ENT_HANDLER_ACTOR_CORPSE = 0x3,
  ENT_HANDLER_TRIGGER_MULTIPLE = 0x4,
  ENT_HANDLER_TRIGGER_HURT = 0x5,
  ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x6,
  ENT_HANDLER_TRIGGER_DAMAGE = 0x7,
  ENT_HANDLER_SCRIPT_MOVER = 0x8,
  ENT_HANDLER_SCRIPT_MODEL = 0x9,
  ENT_HANDLER_GRENADE = 0xA,
  ENT_HANDLER_TIMED_OBJECT = 0xB,
  ENT_HANDLER_ROCKET = 0xC,
  ENT_HANDLER_CLIENT = 0xD,
  ENT_HANDLER_CLIENT_SPECTATOR = 0xE,
  ENT_HANDLER_CLIENT_DEAD = 0xF,
  ENT_HANDLER_PLAYER_CLONE = 0x10,
  ENT_HANDLER_TURRET_INIT = 0x11,
  ENT_HANDLER_TURRET = 0x12,
  ENT_HANDLER_DROPPED_ITEM = 0x13,
  ENT_HANDLER_ITEM_INIT = 0x14,
  ENT_HANDLER_ITEM = 0x15,
  ENT_HANDLER_TRIGGER_USE = 0x16,
  ENT_HANDLER_PRIMARY_LIGHT = 0x17,
  ENT_HANDLER_PLAYER_BLOCK = 0x18,
  ENT_HANDLER_VEHICLE_INIT = 0x19,
  ENT_HANDLER_VEHICLE = 0x1A,
  ENT_HANDLER_VEHICLE_FREE = 0x1B,
  ENT_HANDLER_HELICOPTER = 0x1C,
  ENT_HANDLER_IK_PLAYERCLIP_TERRAIN = 0x1D,
  ENT_HANDLER_IK_DISABLE_TERRAIN_MAPPING = 0x1E,
  ENT_HANDLER_SPAWNER = 0x1F,
  ENT_HANDLER_ZBARRIER = 0x20,
  ENT_HANDLER_COUNT = 0x21,
};

enum $36A49B7E828D83F00D67C3A6CA643A76
{
  BADPLACE_INVALID = 0x0,
  BADPLACE_ARC = 0x1,
  BADPLACE_BRUSH = 0x2,
  BADPLACE_REALLY_BAD = 0x3,
  BADPLACE_LIMITED_DEPTH = 0x4,
};

enum rieType
{
  RIE_NONE = 0x0,
  RIE_NEARBYDEATH = 0x1,
  RIE_NEARBYEXPOSION = 0x2,
  RIE_NEARBYFRIENDLY = 0x3,
  RIE_NUMTYPES = 0x4,
};

enum $98A714CE55D38E537D879567E2170A15
{
  FIXED_LINK_ANGLES = 0x0,
  FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
  FIXED_LINK_ANGLES_NONE = 0x2,
};

enum EntInfo_AITextMode
{
  AI_TEXT_ALL = 0x0,
  AI_TEXT_BRIEF = 0x1,
  AI_TEXT_COMBAT = 0x2,
  AI_TEXT_MOVEMENT = 0x3,
  AI_TEXT_STATE = 0x4,
  NUM_AI_TEXT_TYPE = 0x5,
};

enum ddlIntValueChanged_e
{
  DDL_INTVALUE_SAME = 0x0,
  DDL_INTVALUE_CHANGED = 0x1,
  DDL_INTVALUE_ERROR = 0xFFFFFFFF,
};

enum $81E406F839D3FC53C8CC35127907D93C
{
  OP_End = 0x0,
  OP_Return = 0x1,
  OP_GetUndefined = 0x2,
  OP_GetZero = 0x3,
  OP_GetByte = 0x4,
  OP_GetNegByte = 0x5,
  OP_GetUnsignedShort = 0x6,
  OP_GetNegUnsignedShort = 0x7,
  OP_GetInteger = 0x8,
  OP_GetFloat = 0x9,
  OP_GetString = 0xA,
  OP_GetIString = 0xB,
  OP_GetVector = 0xC,
  OP_GetLevelObject = 0xD,
  OP_GetAnimObject = 0xE,
  OP_GetSelf = 0xF,
  OP_GetLevel = 0x10,
  OP_GetGame = 0x11,
  OP_GetAnim = 0x12,
  OP_GetAnimation = 0x13,
  OP_GetGameRef = 0x14,
  OP_GetFunction = 0x15,
  OP_CreateLocalVariable = 0x16,
  OP_SafeCreateLocalVariables = 0x17,
  OP_RemoveLocalVariables = 0x18,
  OP_EvalLocalVariableCached = 0x19,
  OP_EvalArray = 0x1A,
  OP_EvalLocalArrayRefCached = 0x1B,
  OP_EvalArrayRef = 0x1C,
  OP_ClearArray = 0x1D,
  OP_EmptyArray = 0x1E,
  OP_GetSelfObject = 0x1F,
  OP_EvalFieldVariable = 0x20,
  OP_EvalFieldVariableRef = 0x21,
  OP_ClearFieldVariable = 0x22,
  OP_SafeSetVariableFieldCached = 0x23,
  OP_SafeSetWaittillVariableFieldCached = 0x24,
  OP_ClearParams = 0x25,
  OP_CheckClearParams = 0x26,
  OP_EvalLocalVariableRefCached = 0x27,
  OP_SetVariableField = 0x28,
  OP_CallBuiltin = 0x29,
  OP_CallBuiltinMethod = 0x2A,
  OP_Wait = 0x2B,
  OP_WaitTillFrameEnd = 0x2C,
  OP_PreScriptCall = 0x2D,
  OP_ScriptFunctionCall = 0x2E,
  OP_ScriptFunctionCallPointer = 0x2F,
  OP_ScriptMethodCall = 0x30,
  OP_ScriptMethodCallPointer = 0x31,
  OP_ScriptThreadCall = 0x32,
  OP_ScriptThreadCallPointer = 0x33,
  OP_ScriptMethodThreadCall = 0x34,
  OP_ScriptMethodThreadCallPointer = 0x35,
  OP_DecTop = 0x36,
  OP_CastFieldObject = 0x37,
  OP_CastBool = 0x38,
  OP_BoolNot = 0x39,
  OP_BoolComplement = 0x3A,
  OP_JumpOnFalse = 0x3B,
  OP_JumpOnTrue = 0x3C,
  OP_JumpOnFalseExpr = 0x3D,
  OP_JumpOnTrueExpr = 0x3E,
  OP_Jump = 0x3F,
  OP_JumpBack = 0x40,
  OP_Inc = 0x41,
  OP_Dec = 0x42,
  OP_Bit_Or = 0x43,
  OP_Bit_Xor = 0x44,
  OP_Bit_And = 0x45,
  OP_Equal = 0x46,
  OP_NotEqual = 0x47,
  OP_LessThan = 0x48,
  OP_GreaterThan = 0x49,
  OP_LessThanOrEqualTo = 0x4A,
  OP_GreaterThanOrEqualTo = 0x4B,
  OP_ShiftLeft = 0x4C,
  OP_ShiftRight = 0x4D,
  OP_Plus = 0x4E,
  OP_Minus = 0x4F,
  OP_Multiply = 0x50,
  OP_Divide = 0x51,
  OP_Modulus = 0x52,
  OP_SizeOf = 0x53,
  OP_WaitTillMatch = 0x54,
  OP_WaitTill = 0x55,
  OP_Notify = 0x56,
  OP_EndOn = 0x57,
  OP_VoidCodePos = 0x58,
  OP_Switch = 0x59,
  OP_EndSwitch = 0x5A,
  OP_Vector = 0x5B,
  OP_GetHash = 0x5C,
  OP_RealWait = 0x5D,
  OP_VectorConstant = 0x5E,
  OP_IsDefined = 0x5F,
  OP_VectorScale = 0x60,
  OP_AnglesToUp = 0x61,
  OP_AnglesToRight = 0x62,
  OP_AnglesToForward = 0x63,
  OP_AngleClamp180 = 0x64,
  OP_VectorToAngles = 0x65,
  OP_Abs = 0x66,
  OP_GetTime = 0x67,
  OP_GetDvar = 0x68,
  OP_GetDvarInt = 0x69,
  OP_GetDvarFloat = 0x6A,
  OP_GetDvarVector = 0x6B,
  OP_GetDvarColorRed = 0x6C,
  OP_GetDvarColorGreen = 0x6D,
  OP_GetDvarColorBlue = 0x6E,
  OP_GetDvarColorAlpha = 0x6F,
  OP_FirstArrayKey = 0x70,
  OP_NextArrayKey = 0x71,
  OP_ProfileStart = 0x72,
  OP_ProfileStop = 0x73,
  OP_SafeDecTop = 0x74,
  OP_Nop = 0x75,
  OP_Abort = 0x76,
  OP_Object = 0x77,
  OP_ThreadObject = 0x78,
  OP_EvalLocalVariable = 0x79,
  OP_EvalLocalVariableRef = 0x7A,
  OP_DevblockBegin = 0x7B,
  OP_DevblockEnd = 0x7C,
  OP_Breakpoint = 0x7D,
  OP_AutoBreakpoint = 0x7E,
  OP_ErrorBreakpoint = 0x7F,
  OP_WatchBreakpoint = 0x80,
  OP_NotifyBreakpoint = 0x81,
  OP_Count = 0x82,
};

enum $34B8D7E27D865512244999EB6CAA4345
{
  ENUM_NOP = 0x0,
  ENUM_program = 0x1,
  ENUM_assignment = 0x2,
  ENUM_unknown_variable = 0x3,
  ENUM_duplicate_variable = 0x4,
  ENUM_local_variable = 0x5,
  ENUM_local_variable_frozen = 0x6,
  ENUM_duplicate_expression = 0x7,
  ENUM_primitive_expression = 0x8,
  ENUM_integer = 0x9,
  ENUM_float = 0xA,
  ENUM_minus_integer = 0xB,
  ENUM_minus_float = 0xC,
  ENUM_string = 0xD,
  ENUM_istring = 0xE,
  ENUM_array_variable = 0xF,
  ENUM_unknown_field = 0x10,
  ENUM_field_variable = 0x11,
  ENUM_field_variable_frozen = 0x12,
  ENUM_variable = 0x13,
  ENUM_function = 0x14,
  ENUM_call_expression = 0x15,
  ENUM_local_function = 0x16,
  ENUM_far_function = 0x17,
  ENUM_function_pointer = 0x18,
  ENUM_call = 0x19,
  ENUM_method = 0x1A,
  ENUM_call_expression_statement = 0x1B,
  ENUM_script_call = 0x1C,
  ENUM_return = 0x1D,
  ENUM_return2 = 0x1E,
  ENUM_wait = 0x1F,
  ENUM_script_thread_call = 0x20,
  ENUM_script_child_thread_call = 0x21,
  ENUM_script_builtin_call_pointer = 0x22,
  ENUM_undefined = 0x23,
  ENUM_self = 0x24,
  ENUM_self_frozen = 0x25,
  ENUM_level = 0x26,
  ENUM_game = 0x27,
  ENUM_anim = 0x28,
  ENUM_if = 0x29,
  ENUM_if_else = 0x2A,
  ENUM_while = 0x2B,
  ENUM_for = 0x2C,
  ENUM_inc = 0x2D,
  ENUM_dec = 0x2E,
  ENUM_binary_equals = 0x2F,
  ENUM_statement_list = 0x30,
  ENUM_developer_statement_list = 0x31,
  ENUM_expression_list = 0x32,
  ENUM_bool_or = 0x33,
  ENUM_bool_and = 0x34,
  ENUM_binary = 0x35,
  ENUM_bool_not = 0x36,
  ENUM_bool_complement = 0x37,
  ENUM_size_field = 0x38,
  ENUM_self_field = 0x39,
  ENUM_precachetree = 0x3A,
  ENUM_waittill = 0x3B,
  ENUM_waittillmatch = 0x3C,
  ENUM_waittillFrameEnd = 0x3D,
  ENUM_notify = 0x3E,
  ENUM_endon = 0x3F,
  ENUM_switch = 0x40,
  ENUM_case = 0x41,
  ENUM_default = 0x42,
  ENUM_break = 0x43,
  ENUM_continue = 0x44,
  ENUM_expression = 0x45,
  ENUM_empty_array = 0x46,
  ENUM_animation = 0x47,
  ENUM_animation_animtree = 0x48,
  ENUM_thread = 0x49,
  ENUM_begin_developer_thread = 0x4A,
  ENUM_end_developer_thread = 0x4B,
  ENUM_usingtree = 0x4C,
  ENUM_false = 0x4D,
  ENUM_true = 0x4E,
  ENUM_animtree = 0x4F,
  ENUM_breakon = 0x50,
  ENUM_breakpoint = 0x51,
  ENUM_prof_begin = 0x52,
  ENUM_prof_end = 0x53,
  ENUM_vector = 0x54,
  ENUM_object = 0x55,
  ENUM_thread_object = 0x56,
  ENUM_local = 0x57,
  ENUM_statement = 0x58,
  ENUM_bad_expression = 0x59,
  ENUM_bad_statement = 0x5A,
  ENUM_include = 0x5B,
  ENUM_argument = 0x5C,
  ENUM_thisthread = 0x5D,
  ENUM_construct_array = 0x5E,
  ENUM_define_statement = 0x5F,
};

enum dvarType_t
{
  DVAR_TYPE_INVALID = 0x0,
  DVAR_TYPE_BOOL = 0x1,
  DVAR_TYPE_FLOAT = 0x2,
  DVAR_TYPE_FLOAT_2 = 0x3,
  DVAR_TYPE_FLOAT_3 = 0x4,
  DVAR_TYPE_FLOAT_4 = 0x5,
  DVAR_TYPE_INT = 0x6,
  DVAR_TYPE_ENUM = 0x7,
  DVAR_TYPE_STRING = 0x8,
  DVAR_TYPE_COLOR = 0x9,
  DVAR_TYPE_INT64 = 0xA,
  DVAR_TYPE_LINEAR_COLOR_RGB = 0xB,
  DVAR_TYPE_COLOR_XYZ = 0xC,
  DVAR_TYPE_COUNT = 0xD,
};

enum $58F52E26B27655EC9A5E0AD682A1F43F
{
  STEP_CONTINUE = 0x0,
  STEP_OVER = 0x1,
  STEP_INTO = 0x2,
  STEP_OUT = 0x3,
  STEP_AUTO = 0x4,
};

enum FsListBehavior_e
{
  FS_LIST_PURE_ONLY = 0x0,
  FS_LIST_ALL = 0x1,
};

enum $4ED498BBBB7609BF2C0277D690FCD989
{
  HASH_STAT_FREE = 0x0,
  HASH_STAT_MOVABLE = 0x10000,
  HASH_STAT_HEAD = 0x20000,
  HASH_STAT_MASK = 0x30000,
};

enum $CEAB46625C953059CD23D6CC88D02635
{
  HASH_NEXT_MASK = 0xFFFF,
};

enum $502B0C7BD8EA39A2665349C92DF15C50
{
  SAVE_OBJECT_DEFAULT = 0x0,
  SAVE_OBJECT_THREAD = 0x1,
  SAVE_OBJECT_NOTIFY_THREAD = 0x2,
  SAVE_OBJECT_TIME_THREAD = 0x3,
  SAVE_OBJECT_CHILD_THREAD = 0x4,
  SAVE_OBJECT_DEAD_ENTITY = 0x5,
};

enum $D1294A89E6A9ED9241E170FD33144FB1
{
  BUILTIN_ANY = 0x0,
  BUILTIN_DEVELOPER_ONLY = 0x1,
};

enum $AE7D11CD6EDCC271571EFEEC46D864A8
{
  DEBUG_MSG_VOID = 0x0,
  DEBUG_MSGIN_VERSION = 0x1,
  DEBUG_MSGIN_FILE_INFO_LIST = 0x2,
  DEBUG_MSGIN_FILE_INFO_DONE = 0x3,
  DEBUG_MSGIN_DEBUGGER_DISCONNECT = 0x4,
  DEBUG_MSGIN_STEP = 0x5,
  DEBUG_MSGIN_FORCE_BREAK = 0x6,
  DEBUG_MSGIN_SET_BREAKPOINT = 0x7,
  DEBUG_MSGIN_SET_WATCH_BREAKPOINT = 0x8,
  DEBUG_MSGIN_SET_NOTIFY_BREAKPOINT = 0x9,
  DEBUG_MSGIN_CLEAR_BREAKPOINT = 0xA,
  DEBUG_MSGIN_CLEAR_WATCH_BREAKPOINT = 0xB,
  DEBUG_MSGIN_CLEAR_NOTIFY_BREAKPOINT = 0xC,
  DEBUG_MSGIN_CLEAR_ALL_BREAKPOINT = 0xD,
  DEBUG_MSGIN_SET_BREAKPOINT_CONDITION = 0xE,
  DEBUG_MSGIN_RUN_TO_LINE = 0xF,
  DEBUG_MSGIN_ASM_STEP_INTO = 0x10,
  DEBUG_MSGIN_ASM_STEP_OVER = 0x11,
  DEBUG_MSGIN_SET_LINE = 0x12,
  DEBUG_MSGIN_WATCH_UPDATE = 0x13,
  DEBUG_MSGIN_WATCH_EXPAND = 0x14,
  DEBUG_MSGIN_WATCH_SETDATA = 0x15,
  DEBUG_MSGIN_PROFILE_START = 0x16,
  DEBUG_MSGIN_PROFILE_STOP = 0x17,
  DEBUG_MSGIN_DEADCODE = 0x18,
  DEBUG_MSGIN_THREADUSAGE = 0x19,
  DEBUG_MSGIN_SHELL_COMMAND = 0x1A,
  DEBUG_MSGIN_EXEC = 0x1B,
  DEBUG_MSGIN_UPDATECODE = 0x1C,
  DEBUG_MSGIN_CHANGESCOPE = 0x1D,
  DEBUG_MSGOUT_VERSION = 0x1E,
  DEBUG_MSGOUT_FILE_INFO_LIST = 0x1F,
  DEBUG_MSGOUT_FILE_INFO = 0x20,
  DEBUG_MSGOUT_CALLSTACK = 0x21,
  DEBUG_MSGOUT_UNABLETOSET_BREAKPOINT = 0x22,
  DEBUG_MSGOUT_HIT_BREAKPOINT = 0x23,
  DEBUG_MSGOUT_HIT_WATCH_BREAKPOINT = 0x24,
  DEBUG_MSGOUT_HIT_NOTIFY_BREAKPOINT = 0x25,
  DEBUG_MSGOUT_WATCH_REQUEST_UPDATES = 0x26,
  DEBUG_MSGOUT_WATCH_DATA = 0x27,
  DEBUG_MSGOUT_WATCH_CHILD_DATA = 0x28,
  DEBUG_MSGOUT_PROFILE_DATA = 0x29,
  DEBUG_MSGOUT_DEADCODE_DATA = 0x2A,
  DEBUG_MSGOUT_PRINT_MESSAGE = 0x2B,
  DEBUG_MSGOUT_ERROR_MESSAGE = 0x2C,
  DEBUG_MSGOUT_SHELL_MESSAGE = 0x2D,
  DEBUG_MSGOUT_PAUSEGAME = 0x2E,
  DEBUG_MSGOUT_UNPAUSEGAME = 0x2F,
  DEBUG_MSGOUT_SELF = 0x30,
  DEBUG_MSGOUT_LOCALS = 0x31,
  DEBUG_MSGOUT_HEARTBEAT = 0x32,
  DEBUG_MSGOUT_ABORT = 0x33,
  DEBUG_MSGOUT_THREADUSAGE = 0x34,
  DEBUG_MSGOUT_ENT_DATA = 0x35,
  DEBUG_MSG_COUNT = 0x36,
};

enum $689E3F8954B9CD60DF21AA6907596934
{
  SCR_DEV_NO = 0x0,
  SCR_DEV_YES = 0x1,
  SCR_DEV_IGNORE = 0x2,
  SCR_DEV_EVALUATE = 0x3,
};

enum $175411765D8714F5DE5794EAE01BEA3D
{
  SCR_BREAKPOINT_NONE = 0x0,
  SCR_BREAKPOINT_DISABLED = 0x1,
  SCR_BREAKPOINT_WATCH = 0x2,
  SCR_BREAKPOINT_NOTIFY = 0x3,
  SCR_BREAKPOINT_NORMAL = 0x4,
  SCR_BREAKPOINT_AUTO = 0x5,
  SCR_BREAKPOINT_AUTO_IN = 0x6,
  SCR_BREAKPOINT_AUTO_OVER = 0x7,
};

enum $EDD06E5CBBD869D4216A6D95FFB551B3
{
  THREAD_COUNT = 0x0,
  THREAD_INDICES = 0x1,
};

enum $BB7F4801BC8A3FB836B39ECFF8B5BEFB
{
  FUNC_SCOPE_LOCAL = 0x0,
  FUNC_SCOPE_FAR = 0x1,
};

enum $F70A79649926715426B3C355C6FD927A
{
  SCR_ABORT_NONE = 0x0,
  SCR_ABORT_CONTINUE = 0x1,
  SCR_ABORT_BREAK = 0x2,
  SCR_ABORT_RETURN = 0x3,
  SCR_ABORT_MAX = 0x3,
};

enum $11C64C00F3ABDB80799A2860E5481167
{
  CALL_NONE = 0x0,
  CALL_BUILTIN = 0x1,
  CALL_THREAD = 0x2,
  CALL_FUNCTION = 0x3,
};

enum $001F8121AA8E2EDF3972862560FB3F73
{
  ANIMPROP_LOOPSYNC = 0x0,
  ANIMPROP_NONLOOPSYNC = 0x1,
  ANIMPROP_COMPLETE = 0x2,
  ANIMPROP_ADDITIVE = 0x3,
  ANIMPROP_CLIENT = 0x4,
  ANIMPROP_SEPARATE = 0x5,
  ANIMPROP_FORCELOAD = 0x6,
  ANIMPROP_COUNT = 0x7,
};

enum ValueType
{
  VALT_NUMBER = 0x0,
  VALT_IDENTIFIER = 0x1,
  VALT_BAD = 0x2,
};

enum $4261C902CEEB0B31C1E1EA50445DAD10
{
  ANIMTREE_NAMES = 0x0,
  ANIMTREE_XANIM = 0x1,
};

enum $831D26F65ACA5D893288ED65A80C00F7
{
  ANIMTREE_PROPERTIES = 0x0,
  ANIMTREE_HAS_CHILDREN = 0x1,
  NUM_NON_COMPONENT_ANIMTREE_VALUES = 0x2,
  ANIMTREE_COMPONENT_TIME = 0x2,
  ANIMTREE_COMPONENT_BLEND = 0x3,
  NUM_ANIMTREE_VALUES = 0x4,
};

enum snd_flame_source_flags
{
  SND_FLAME_SOURCE_NONE = 0x0,
  SND_FLAME_SOURCE_TURN_ON = 0x1,
  SND_FLAME_SOURCE_TURN_OFF = 0x2,
  SND_FLAME_SOURCE_IS_FIRING = 0x4,
};

enum FLAME_TYPE
{
  FLAME_TYPE_STREAM = 0x0,
  FLAME_TYPE_CHUNK = 0x1,
  FLAME_TYPE_FIRE = 0x2,
  FLAME_TYPE_SMOKE = 0x3,
  FLAME_TYPE_DRIP = 0x4,
};

enum IKBoneNames
{
  IKBONE_NONE = 0xFFFFFFFF,
  IKBONE_FIRST = 0x0,
  IKBONE_ORIGIN = 0x0,
  IKBONE_PELVIS = 0x1,
  IKBONE_SPINE = 0x2,
  IKBONE_SPINE1 = 0x3,
  IKBONE_SPINE2 = 0x4,
  IKBONE_NECK = 0x5,
  IKBONE_HEAD = 0x6,
  IKBONE_LCLAVICLE = 0x7,
  IKBONE_LUPPERARM = 0x8,
  IKBONE_LFOREARM = 0x9,
  IKBONE_LHAND = 0xA,
  IKBONE_LWRIST_TWIST = 0xB,
  IKBONE_RCLAVICLE = 0xC,
  IKBONE_RUPPERARM = 0xD,
  IKBONE_RFOREARM = 0xE,
  IKBONE_RHAND = 0xF,
  IKBONE_RWRIST_TWIST = 0x10,
  IKBONE_LTHIGH = 0x11,
  IKBONE_LCALF = 0x12,
  IKBONE_LFOOT = 0x13,
  IKBONE_RTHIGH = 0x14,
  IKBONE_RCALF = 0x15,
  IKBONE_RFOOT = 0x16,
  IKBONE_RWEAPON = 0x17,
  IKBONE_COUNT = 0x18,
};

enum IKEntityStatusFunctions
{
  IKSTATUS_SPECTATING = 0x0,
  IKSTATUS_PRONE = 0x1,
  IKSTATUS_CROUCHING = 0x2,
  IKSTATUS_FIRING = 0x3,
  IKSTATUS_MOUNTED_TURRET = 0x4,
  IKSTATUS_APPLY_TERRAIN_MAPPING = 0x5,
  IKSTATUS_BYPASS_TERRAIN_MAPPING = 0x6,
  IKSTATUS_APPLY_LEFT_HAND_IK = 0x7,
  IKSTATUS_APPLY_RIGHT_HAND_IK = 0x8,
  IKSTATUS_MOVING = 0x9,
  IKSTATUS_ONGROUND = 0xA,
  IKSTATUS_COUNT = 0xB,
};

enum IKLayerNames
{
  IKLAYER_CROUCH_ACTIVE = 0x0,
  IKLAYER_PRONE_ACTIVE = 0x1,
  IKLAYER_PRONE_SLOW_FADE_ACTIVE = 0x2,
  IKLAYER_NOT_MOVING = 0x3,
  IKLAYER_NOT_MOVING_MED = 0x4,
  IKLAYER_NOT_MOVING_FAST = 0x5,
  IKLAYER_MINIGUN_ACTIVE = 0x6,
  IKLAYER_SHOTGUN_ACTIVE = 0x7,
  IKLAYER_AI_AIMING_ACTIVE = 0x8,
  IKLAYER_FIRST_REAL_LAYER = 0x9,
  IKLAYER_PELVIS_TEST = 0x9,
  IKLAYER_TERRAIN_MAPPING = 0xA,
  IKLAYER_HAND_TEST = 0xB,
  IKLAYER_LEFT_HAND_ON_GUN = 0xC,
  IKLAYER_RIGHT_HAND_ON_GUN = 0xD,
  IKLAYER_PLAYER_PITCH = 0xE,
  IKLAYER_VEHICLE_GUNNER_OFFSET = 0xF,
  IKLAYER_TURRET_FIRING = 0x10,
  IKLAYER_TURRET_OFFSET = 0x11,
  IKLAYER_PLAYER_CONTROLLERS = 0x12,
  IKLAYER_LOOK_AT_ENTITY = 0x13,
  IKLAYER_LOOK_AT_ENTITY_BODY_FADE = 0x14,
  IKLAYER_PREVENT_HEAD_CLIP = 0x15,
  IKLAYER_PONYTAIL = 0x16,
  IKLAYER_AI_LEAN = 0x17,
  IKLAYER_AI_LEFT_HAND_ON_GUN = 0x18,
  IKLAYER_COUNT = 0x19,
};

enum IKDvarNames
{
  IK_DVAR_ENABLE = 0x0,
  IK_DVAR_DEBUG = 0x1,
  IK_DVAR_PELVIS_TEST = 0x2,
  IK_DVAR_FOOT_TEST = 0x3,
  IK_DVAR_HAND_TEST = 0x4,
  IK_DVAR_LEFT_HAND_LERP_TEST = 0x5,
  IK_DVAR_RIGHT_HAND_LERP_TEST = 0x6,
  IK_DVAR_ENABLE_PLAYER_HAND = 0x7,
  IK_DVAR_ENABLE_PLAYER_TERRAIN = 0x8,
  IK_DVAR_ENABLE_AI_HAND = 0x9,
  IK_DVAR_ENABLE_AI_TERRAIN = 0xA,
  IK_DVAR_HAND_TUNING = 0xB,
  IK_DVAR_HAND_OFFSET_VEC = 0xC,
  IK_DVAR_HAND_ROTATION_VEC = 0xD,
  IK_DVAR_HAND_GET_DATA = 0xE,
  IK_DVAR_PARANOID_MATRIX_CHECKS = 0xF,
  IK_DVAR_PITCH_LIMIT_THRESH = 0x10,
  IK_DVAR_PITCH_LIMIT_MAX = 0x11,
  IK_DVAR_ROLL_LIMIT_THRESH = 0x12,
  IK_DVAR_ROLL_LIMIT_MAX = 0x13,
  IK_DVAR_YAW_LIMIT_THRESH = 0x14,
  IK_DVAR_YAW_LIMIT_MAX = 0x15,
  IK_DVAR_LOOKATENTITY_HEAD_SCALE = 0x16,
  IK_DVAR_LOOKATENTITY_NOTORSO = 0x17,
  IK_DVAR_LOOKATENTITY_TRACKING_RATE = 0x18,
  IK_DVAR_LOOKATENTITY_EYES_SCALE = 0x19,
  IK_DVAR_LOOKATPOS_HEAD_SCALE = 0x1A,
  IK_DVAR_LOOKATPOS_NOTORSO = 0x1B,
  IK_DVAR_LOOKATPOS_TRACKING_RATE = 0x1C,
  IK_DVAR_LOOKATPOS_EYES_SCALE = 0x1D,
  IK_DVAR_AI_AIM_TRACKING_RATE = 0x1E,
  IK_DVAR_AI_POOL_SIZE = 0x1F,
  IK_DVAR_AI_RANGE_MAX = 0x20,
  IK_DVAR_COUNT = 0x21,
};

enum IKDebug
{
  IK_DEBUG_OFF = 0x0,
  IK_DEBUG_FOOT_TRACE = 0x1,
  IK_DEBUG_SHOW_SKELETON = 0x2,
  IK_DEBUG_COUNT = 0x3,
};

enum IKFootNames
{
  IKFOOT_LEFT = 0x0,
  IKFOOT_RIGHT = 0x1,
  IKFOOT_COUNT = 0x2,
};

enum IKJoints
{
  IKJOINT_LEFT_ARM = 0x0,
  IKJOINT_RIGHT_ARM = 0x1,
  IKJOINT_LEFT_LEG = 0x2,
  IKJOINT_RIGHT_LEG = 0x3,
  IKJOINT_COUNT = 0x4,
};

enum IKHandNames
{
  IKHAND_LEFT = 0x0,
  IKHAND_RIGHT = 0x1,
  IKHAND_COUNT = 0x2,
};

enum IKWeaponOffsetType
{
  IKWEAPOFS_DEFAULT = 0x0,
  IKWEAPOFS_PISTOL = 0x1,
  IKWEAPOFS_SHOULDER = 0x2,
  IKWEAPOFS_MINIGUN = 0x3,
  IKWEAPOFS_GRENADE = 0x4,
  IKWEAPOFS_COUNT = 0x5,
};

enum IKWeaponSpecialNames
{
  IKWEAPSPECIAL_RIOTSHIELD = 0x0,
  IKWEAPSPECIAL_NONE = 0x1,
};

enum IKWeaponClass
{
  IKWEAPCLASS_DEFAULT = 0x0,
  IKWEAPCLASS_SHOTGUN = 0x1,
  IKWEAPCLASS_COUNT = 0x2,
};

enum IKDebugColor
{
  IK_DEBUG_COLOR_RED = 0x0,
  IK_DEBUG_COLOR_GREEN = 0x1,
  IK_DEBUG_COLOR_BLUE = 0x2,
  IK_DEBUG_COLOR_LIGHT_CYAN = 0x3,
};

enum $798B71444DA1711D1AE7A033317CA2C6
{
  DOBJ_IS_SERVER = 0x1,
  DOBJ_IS_LOCAL_PLAYER = 0x2,
  DOBJ_IS_RECORDED = 0x4,
  DOBJ_IS_IK_ACTIVE = 0x8,
  DOBJ_IS_IK_LEFT_HAND_GRIP_ACTIVE = 0x10,
  DOBJ_IS_PLAYER_SHADOW = 0x20,
  DOBJ_IS_IK_BYPASS = 0x40,
  DOBJ_MAX_FLAGS = 0x80,
};

enum IKMiscBoneNames
{
  IKMISC_WEAPON_LEFT_HAND_IK = 0x0,
  IKMISC_WEAPON_RIGHT_HAND_IK = 0x1,
  IKMISC_TAG_HEAD = 0x2,
  IKMISC_COUNT = 0x3,
};

enum tracerFieldType_t
{
  TFT_TRACERTYPE = 0x12,
  TFT_NUM_FIELD_TYPES = 0x13,
};

enum TracerDrawFlags
{
  TRACER_DRAW_FLAG_NONE = 0x0,
  TRACER_DRAW_FLAG_THERMAL = 0x1,
};

enum leType_t
{
  LE_MOVING_TRACER_RED = 0x0,
  LE_MOVING_TRACER_GREEN = 0x1,
  LE_MOVING_TRACER = 0x2,
};

enum JointType
{
  RAGDOLL_JOINT_NONE = 0x0,
  RAGDOLL_JOINT_HINGE = 0x1,
  RAGDOLL_JOINT_SWIVEL = 0x2,
};

enum RagdollBodyState
{
  BS_DEAD = 0x0,
  BS_DOBJ_WAIT = 0x1,
  BS_VELOCITY_CAPTURE = 0x2,
  BS_TUNNEL_TEST = 0x3,
  BS_RUNNING = 0x4,
  BS_IDLE = 0x5,
  RAGDOLL_NUM_STATES = 0x6,
};

enum Phys_ObjFlags
{
  PHYS_OBJ_FLAG_ENABLE_EFFECTS = 0x1,
  PHYS_OBJ_FLAG_BUOYANT_IN_MITTON_WATER = 0x2,
  PHYS_OBJ_FLAG_FLOAT_LONGER = 0x4,
  PHYS_OBJ_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0x8,
  PHYS_OBJ_FLAG_FORCE_BUOYANCY = 0x10,
  PHYS_OBJ_FLAG_RAGDOLL_BONE = 0x20,
};

enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0x0,
  PHYS_GEOM_BOX = 0x1,
  PHYS_GEOM_BRUSH = 0x2,
  PHYS_GEOM_CYLINDER = 0x3,
  PHYS_GEOM_CYLINDER_LARGE = 0x4,
  PHYS_GEOM_CAPSULE = 0x5,
  PHYS_GEOM_POINT = 0x6,
  PHYS_GEOM_COUNT = 0x7,
};

enum $B9DB7F5D5FCA28B9A79E21048F8655CE
{
  CFT_TYPE = 0x12,
  CFT_NUM = 0x13,
};

enum $AC94F104E8CECE50ACD37C0E861732B9
{
  GFX_PRIM_TRIANGLES = 0x4,
  GFX_PRIM_QUADS = 0xFFFFFFFF,
};

enum TessPrimType
{
  TESS_TRIANGLES = 0x4,
  TESS_QUADS = 0xFFFFFFFF,
  TESS_INLINE_TRIANGLES = 0x4,
  TESS_INLINE_QUADS = 0xFFFFFFFF,
};

enum $EC061976D9A0A62431DE476F5859F53E
{
  DRT_ALL = 0x0,
  DRT_PLAYER = 0x1,
  DRT_PLAYERCLIP = 0x2,
  DRT_VEHICLE = 0x3,
  DRT_HELICOPTER = 0x4,
  DRT_AI_COLLISION = 0x5,
  DRT_AI_SIGHT = 0x6,
  DRT_WEAPON = 0x7,
  DRT_MANTLE = 0x8,
  DRT_PHYSICS = 0x9,
  DRT_AIM_ASSIST = 0xA,
  DRT_SPAWN_VISIBILITY = 0xB,
  DRT_TRIGGER = 0xC,
  DRT_CLIENTSIDE_TRIGGER = 0xD,
  MAX_DRT = 0xE,
};

enum surface_types_e
{
  SURFACE_TYPE_PROP = 0x20,
  SURFACE_TYPE_RAGDOLL = 0x21,
  SURFACE_TYPE_TERRAIN = 0x22,
};

enum $5B2FCDCAD029325A4078FE8CC1D2FD25
{
  FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
  FX_TYPE_BULLET_HIT_SMALL_EXIT = 0x1,
  FX_TYPE_BULLET_HIT_SMALL_UNDERWATER = 0x2,
  FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x3,
  FX_TYPE_BULLET_HIT_LARGE_EXIT = 0x4,
  FX_TYPE_SHOTGUN_HIT_NORMAL = 0x5,
  FX_TYPE_SHOTGUN_HIT_EXIT = 0x6,
  FX_TYPE_BULLET_HIT_AP_NORMAL = 0x7,
  FX_TYPE_BULLET_HIT_AP_EXIT = 0x8,
  FX_TYPE_BULLET_HIT_XTREME_NORMAL = 0x9,
  FX_TYPE_BULLET_HIT_XTREME_EXIT = 0xA,
  FX_TYPE_GRENADE_BOUNCE = 0xB,
  FX_TYPE_GRENADE_EXPLODE = 0xC,
  FX_TYPE_ROCKET_EXPLODE = 0xD,
  FX_TYPE_ROCKET_EXPLODE_XTREME = 0xE,
  FX_TYPE_PROJECTILE_DUD = 0xF,
  FX_TYPE_MORTAR_SHELL = 0x10,
  FX_TYPE_TANK_SHELL = 0x11,
  FX_TYPE_PHYSICS_IMPACT = 0x12,
  FX_TYPE_BOLT = 0x13,
  FX_TYPE_BLADE = 0x14,
  FX_TYPE_COUNT = 0x15,
};

enum Phys_SurfaceType
{
  EFFECT_SURF_TYPE_HARD = 0x0,
  EFFECT_SURF_TYPE_SOFT = 0x1,
  EFFECT_SURF_TYPE_METAL = 0x2,
  EFFECT_SURF_TYPE_GLASS = 0x3,
  EFFECT_SURF_TYPE_WATER = 0x4,
  EFFECT_SURF_TYPE_WOOD = 0x5,
  EFFECT_SURF_TYPE_FOLIAGE = 0x6,
  EFFECT_SURF_TYPE_FLESH = 0x7,
  EFFECT_SURF_TYPE_COUNT = 0x8,
};

enum Wheel
{
  WHEEL_FL = 0x0,
  WHEEL_FR = 0x1,
  WHEEL_BL = 0x2,
  WHEEL_BR = 0x3,
  WHEEL_ML = 0x4,
  WHEEL_MR = 0x5,
};

enum destructiblePieceFieldType_t
{
  DPFT_EXPLOSIVEDAMAGEONLY = 0x12,
  DPFT_EXPLOSIVEDAMAGEONLYD1 = 0x13,
  DPFT_EXPLOSIVEDAMAGEONLYD2 = 0x14,
  DPFT_EXPLOSIVEDAMAGEONLYD3 = 0x15,
  DPFT_EXPLOSIVEDAMAGEONLYD4 = 0x16,
  DPFT_MELEEDAMAGE = 0x17,
  DPFT_MELEEDAMAGED1 = 0x18,
  DPFT_MELEEDAMAGED2 = 0x19,
  DPFT_MELEEDAMAGED3 = 0x1A,
  DPFT_MELEEDAMAGED4 = 0x1B,
  DPFT_PARENTDAMAGE = 0x1C,
  DPFT_PARENTDAMAGED1 = 0x1D,
  DPFT_PARENTDAMAGED2 = 0x1E,
  DPFT_PARENTDAMAGED3 = 0x1F,
  DPFT_PARENTDAMAGED4 = 0x20,
  DPFT_PHYSICSONPARENTDEATH = 0x21,
  DPFT_PHYSICSONPARENTDEATHD1 = 0x22,
  DPFT_PHYSICSONPARENTDEATHD2 = 0x23,
  DPFT_PHYSICSONPARENTDEATHD3 = 0x24,
  DPFT_PHYSICSONPARENTDEATHD4 = 0x25,
  DPFT_MAX_FIELD_TYPES = 0x26,
};

enum destructibleFieldType_t
{
  DFT_PIECE0 = 0x12,
  DFT_PIECE1 = 0x13,
  DFT_PIECE2 = 0x14,
  DFT_PIECE3 = 0x15,
  DFT_PIECE4 = 0x16,
  DFT_PIECE5 = 0x17,
  DFT_PIECE6 = 0x18,
  DFT_PIECE7 = 0x19,
  DFT_PIECE8 = 0x1A,
  DFT_PIECE9 = 0x1B,
  DFT_PIECE10 = 0x1C,
  DFT_PIECE11 = 0x1D,
  DFT_PIECE12 = 0x1E,
  DFT_PIECE13 = 0x1F,
  DFT_PIECE14 = 0x20,
  DFT_PIECE15 = 0x21,
  DFT_PIECE16 = 0x22,
  DFT_PIECE17 = 0x23,
  DFT_PIECE18 = 0x24,
  DFT_PIECE19 = 0x25,
  DFT_PIECE20 = 0x26,
  DFT_PIECE21 = 0x27,
  DFT_PIECE22 = 0x28,
  DFT_PIECE23 = 0x29,
  DFT_PIECE24 = 0x2A,
  DFT_PIECE25 = 0x2B,
  DFT_PIECE26 = 0x2C,
  DFT_PIECE27 = 0x2D,
  DFT_PIECE28 = 0x2E,
  DFT_PIECE29 = 0x2F,
  DFT_PIECE30 = 0x30,
  DFT_PIECE31 = 0x31,
  DFT_PIECE_HEALTH0 = 0x32,
  DFT_PIECE_HEALTH1 = 0x33,
  DFT_PIECE_HEALTH2 = 0x34,
  DFT_PIECE_HEALTH3 = 0x35,
  DFT_PIECE_HEALTH4 = 0x36,
  DFT_PIECE_HEALTH5 = 0x37,
  DFT_PIECE_HEALTH6 = 0x38,
  DFT_PIECE_HEALTH7 = 0x39,
  DFT_PIECE_HEALTH8 = 0x3A,
  DFT_PIECE_HEALTH9 = 0x3B,
  DFT_PIECE_HEALTH10 = 0x3C,
  DFT_PIECE_HEALTH11 = 0x3D,
  DFT_PIECE_HEALTH12 = 0x3E,
  DFT_PIECE_HEALTH13 = 0x3F,
  DFT_PIECE_HEALTH14 = 0x40,
  DFT_PIECE_HEALTH15 = 0x41,
  DFT_PIECE_HEALTH16 = 0x42,
  DFT_PIECE_HEALTH17 = 0x43,
  DFT_PIECE_HEALTH18 = 0x44,
  DFT_PIECE_HEALTH19 = 0x45,
  DFT_PIECE_HEALTH20 = 0x46,
  DFT_PIECE_HEALTH21 = 0x47,
  DFT_PIECE_HEALTH22 = 0x48,
  DFT_PIECE_HEALTH23 = 0x49,
  DFT_PIECE_HEALTH24 = 0x4A,
  DFT_PIECE_HEALTH25 = 0x4B,
  DFT_PIECE_HEALTH26 = 0x4C,
  DFT_PIECE_HEALTH27 = 0x4D,
  DFT_PIECE_HEALTH28 = 0x4E,
  DFT_PIECE_HEALTH29 = 0x4F,
  DFT_PIECE_HEALTH30 = 0x50,
  DFT_PIECE_HEALTH31 = 0x51,
  DFT_PARENT_PIECE0 = 0x52,
  DFT_PARENT_PIECE1 = 0x53,
  DFT_PARENT_PIECE2 = 0x54,
  DFT_PARENT_PIECE3 = 0x55,
  DFT_PARENT_PIECE4 = 0x56,
  DFT_PARENT_PIECE5 = 0x57,
  DFT_PARENT_PIECE6 = 0x58,
  DFT_PARENT_PIECE7 = 0x59,
  DFT_PARENT_PIECE8 = 0x5A,
  DFT_PARENT_PIECE9 = 0x5B,
  DFT_PARENT_PIECE10 = 0x5C,
  DFT_PARENT_PIECE11 = 0x5D,
  DFT_PARENT_PIECE12 = 0x5E,
  DFT_PARENT_PIECE13 = 0x5F,
  DFT_PARENT_PIECE14 = 0x60,
  DFT_PARENT_PIECE15 = 0x61,
  DFT_PARENT_PIECE16 = 0x62,
  DFT_PARENT_PIECE17 = 0x63,
  DFT_PARENT_PIECE18 = 0x64,
  DFT_PARENT_PIECE19 = 0x65,
  DFT_PARENT_PIECE20 = 0x66,
  DFT_PARENT_PIECE21 = 0x67,
  DFT_PARENT_PIECE22 = 0x68,
  DFT_PARENT_PIECE23 = 0x69,
  DFT_PARENT_PIECE24 = 0x6A,
  DFT_PARENT_PIECE25 = 0x6B,
  DFT_PARENT_PIECE26 = 0x6C,
  DFT_PARENT_PIECE27 = 0x6D,
  DFT_PARENT_PIECE28 = 0x6E,
  DFT_PARENT_PIECE29 = 0x6F,
  DFT_PARENT_PIECE30 = 0x70,
  DFT_PARENT_PIECE31 = 0x71,
  DFT_PARENT_DAMAGE_PERCENT0 = 0x72,
  DFT_PARENT_DAMAGE_PERCENT1 = 0x73,
  DFT_PARENT_DAMAGE_PERCENT2 = 0x74,
  DFT_PARENT_DAMAGE_PERCENT3 = 0x75,
  DFT_PARENT_DAMAGE_PERCENT4 = 0x76,
  DFT_PARENT_DAMAGE_PERCENT5 = 0x77,
  DFT_PARENT_DAMAGE_PERCENT6 = 0x78,
  DFT_PARENT_DAMAGE_PERCENT7 = 0x79,
  DFT_PARENT_DAMAGE_PERCENT8 = 0x7A,
  DFT_PARENT_DAMAGE_PERCENT9 = 0x7B,
  DFT_PARENT_DAMAGE_PERCENT10 = 0x7C,
  DFT_PARENT_DAMAGE_PERCENT11 = 0x7D,
  DFT_PARENT_DAMAGE_PERCENT12 = 0x7E,
  DFT_PARENT_DAMAGE_PERCENT13 = 0x7F,
  DFT_PARENT_DAMAGE_PERCENT14 = 0x80,
  DFT_PARENT_DAMAGE_PERCENT15 = 0x81,
  DFT_PARENT_DAMAGE_PERCENT16 = 0x82,
  DFT_PARENT_DAMAGE_PERCENT17 = 0x83,
  DFT_PARENT_DAMAGE_PERCENT18 = 0x84,
  DFT_PARENT_DAMAGE_PERCENT19 = 0x85,
  DFT_PARENT_DAMAGE_PERCENT20 = 0x86,
  DFT_PARENT_DAMAGE_PERCENT21 = 0x87,
  DFT_PARENT_DAMAGE_PERCENT22 = 0x88,
  DFT_PARENT_DAMAGE_PERCENT23 = 0x89,
  DFT_PARENT_DAMAGE_PERCENT24 = 0x8A,
  DFT_PARENT_DAMAGE_PERCENT25 = 0x8B,
  DFT_PARENT_DAMAGE_PERCENT26 = 0x8C,
  DFT_PARENT_DAMAGE_PERCENT27 = 0x8D,
  DFT_PARENT_DAMAGE_PERCENT28 = 0x8E,
  DFT_PARENT_DAMAGE_PERCENT29 = 0x8F,
  DFT_PARENT_DAMAGE_PERCENT30 = 0x90,
  DFT_PARENT_DAMAGE_PERCENT31 = 0x91,
  DFT_BULLET_DAMAGE_SCALE0 = 0x92,
  DFT_BULLET_DAMAGE_SCALE1 = 0x93,
  DFT_BULLET_DAMAGE_SCALE2 = 0x94,
  DFT_BULLET_DAMAGE_SCALE3 = 0x95,
  DFT_BULLET_DAMAGE_SCALE4 = 0x96,
  DFT_BULLET_DAMAGE_SCALE5 = 0x97,
  DFT_BULLET_DAMAGE_SCALE6 = 0x98,
  DFT_BULLET_DAMAGE_SCALE7 = 0x99,
  DFT_BULLET_DAMAGE_SCALE8 = 0x9A,
  DFT_BULLET_DAMAGE_SCALE9 = 0x9B,
  DFT_BULLET_DAMAGE_SCALE10 = 0x9C,
  DFT_BULLET_DAMAGE_SCALE11 = 0x9D,
  DFT_BULLET_DAMAGE_SCALE12 = 0x9E,
  DFT_BULLET_DAMAGE_SCALE13 = 0x9F,
  DFT_BULLET_DAMAGE_SCALE14 = 0xA0,
  DFT_BULLET_DAMAGE_SCALE15 = 0xA1,
  DFT_BULLET_DAMAGE_SCALE16 = 0xA2,
  DFT_BULLET_DAMAGE_SCALE17 = 0xA3,
  DFT_BULLET_DAMAGE_SCALE18 = 0xA4,
  DFT_BULLET_DAMAGE_SCALE19 = 0xA5,
  DFT_BULLET_DAMAGE_SCALE20 = 0xA6,
  DFT_BULLET_DAMAGE_SCALE21 = 0xA7,
  DFT_BULLET_DAMAGE_SCALE22 = 0xA8,
  DFT_BULLET_DAMAGE_SCALE23 = 0xA9,
  DFT_BULLET_DAMAGE_SCALE24 = 0xAA,
  DFT_BULLET_DAMAGE_SCALE25 = 0xAB,
  DFT_BULLET_DAMAGE_SCALE26 = 0xAC,
  DFT_BULLET_DAMAGE_SCALE27 = 0xAD,
  DFT_BULLET_DAMAGE_SCALE28 = 0xAE,
  DFT_BULLET_DAMAGE_SCALE29 = 0xAF,
  DFT_BULLET_DAMAGE_SCALE30 = 0xB0,
  DFT_BULLET_DAMAGE_SCALE31 = 0xB1,
  DFT_EXPLOSIVE_DAMAGE_SCALE0 = 0xB2,
  DFT_EXPLOSIVE_DAMAGE_SCALE1 = 0xB3,
  DFT_EXPLOSIVE_DAMAGE_SCALE2 = 0xB4,
  DFT_EXPLOSIVE_DAMAGE_SCALE3 = 0xB5,
  DFT_EXPLOSIVE_DAMAGE_SCALE4 = 0xB6,
  DFT_EXPLOSIVE_DAMAGE_SCALE5 = 0xB7,
  DFT_EXPLOSIVE_DAMAGE_SCALE6 = 0xB8,
  DFT_EXPLOSIVE_DAMAGE_SCALE7 = 0xB9,
  DFT_EXPLOSIVE_DAMAGE_SCALE8 = 0xBA,
  DFT_EXPLOSIVE_DAMAGE_SCALE9 = 0xBB,
  DFT_EXPLOSIVE_DAMAGE_SCALE10 = 0xBC,
  DFT_EXPLOSIVE_DAMAGE_SCALE11 = 0xBD,
  DFT_EXPLOSIVE_DAMAGE_SCALE12 = 0xBE,
  DFT_EXPLOSIVE_DAMAGE_SCALE13 = 0xBF,
  DFT_EXPLOSIVE_DAMAGE_SCALE14 = 0xC0,
  DFT_EXPLOSIVE_DAMAGE_SCALE15 = 0xC1,
  DFT_EXPLOSIVE_DAMAGE_SCALE16 = 0xC2,
  DFT_EXPLOSIVE_DAMAGE_SCALE17 = 0xC3,
  DFT_EXPLOSIVE_DAMAGE_SCALE18 = 0xC4,
  DFT_EXPLOSIVE_DAMAGE_SCALE19 = 0xC5,
  DFT_EXPLOSIVE_DAMAGE_SCALE20 = 0xC6,
  DFT_EXPLOSIVE_DAMAGE_SCALE21 = 0xC7,
  DFT_EXPLOSIVE_DAMAGE_SCALE22 = 0xC8,
  DFT_EXPLOSIVE_DAMAGE_SCALE23 = 0xC9,
  DFT_EXPLOSIVE_DAMAGE_SCALE24 = 0xCA,
  DFT_EXPLOSIVE_DAMAGE_SCALE25 = 0xCB,
  DFT_EXPLOSIVE_DAMAGE_SCALE26 = 0xCC,
  DFT_EXPLOSIVE_DAMAGE_SCALE27 = 0xCD,
  DFT_EXPLOSIVE_DAMAGE_SCALE28 = 0xCE,
  DFT_EXPLOSIVE_DAMAGE_SCALE29 = 0xCF,
  DFT_EXPLOSIVE_DAMAGE_SCALE30 = 0xD0,
  DFT_EXPLOSIVE_DAMAGE_SCALE31 = 0xD1,
  DFT_MELEE_DAMAGE_SCALE0 = 0xD2,
  DFT_MELEE_DAMAGE_SCALE1 = 0xD3,
  DFT_MELEE_DAMAGE_SCALE2 = 0xD4,
  DFT_MELEE_DAMAGE_SCALE3 = 0xD5,
  DFT_MELEE_DAMAGE_SCALE4 = 0xD6,
  DFT_MELEE_DAMAGE_SCALE5 = 0xD7,
  DFT_MELEE_DAMAGE_SCALE6 = 0xD8,
  DFT_MELEE_DAMAGE_SCALE7 = 0xD9,
  DFT_MELEE_DAMAGE_SCALE8 = 0xDA,
  DFT_MELEE_DAMAGE_SCALE9 = 0xDB,
  DFT_MELEE_DAMAGE_SCALE10 = 0xDC,
  DFT_MELEE_DAMAGE_SCALE11 = 0xDD,
  DFT_MELEE_DAMAGE_SCALE12 = 0xDE,
  DFT_MELEE_DAMAGE_SCALE13 = 0xDF,
  DFT_MELEE_DAMAGE_SCALE14 = 0xE0,
  DFT_MELEE_DAMAGE_SCALE15 = 0xE1,
  DFT_MELEE_DAMAGE_SCALE16 = 0xE2,
  DFT_MELEE_DAMAGE_SCALE17 = 0xE3,
  DFT_MELEE_DAMAGE_SCALE18 = 0xE4,
  DFT_MELEE_DAMAGE_SCALE19 = 0xE5,
  DFT_MELEE_DAMAGE_SCALE20 = 0xE6,
  DFT_MELEE_DAMAGE_SCALE21 = 0xE7,
  DFT_MELEE_DAMAGE_SCALE22 = 0xE8,
  DFT_MELEE_DAMAGE_SCALE23 = 0xE9,
  DFT_MELEE_DAMAGE_SCALE24 = 0xEA,
  DFT_MELEE_DAMAGE_SCALE25 = 0xEB,
  DFT_MELEE_DAMAGE_SCALE26 = 0xEC,
  DFT_MELEE_DAMAGE_SCALE27 = 0xED,
  DFT_MELEE_DAMAGE_SCALE28 = 0xEE,
  DFT_MELEE_DAMAGE_SCALE29 = 0xEF,
  DFT_MELEE_DAMAGE_SCALE30 = 0xF0,
  DFT_MELEE_DAMAGE_SCALE31 = 0xF1,
  DFT_IMPACT_DAMAGE_SCALE0 = 0xF2,
  DFT_IMPACT_DAMAGE_SCALE1 = 0xF3,
  DFT_IMPACT_DAMAGE_SCALE2 = 0xF4,
  DFT_IMPACT_DAMAGE_SCALE3 = 0xF5,
  DFT_IMPACT_DAMAGE_SCALE4 = 0xF6,
  DFT_IMPACT_DAMAGE_SCALE5 = 0xF7,
  DFT_IMPACT_DAMAGE_SCALE6 = 0xF8,
  DFT_IMPACT_DAMAGE_SCALE7 = 0xF9,
  DFT_IMPACT_DAMAGE_SCALE8 = 0xFA,
  DFT_IMPACT_DAMAGE_SCALE9 = 0xFB,
  DFT_IMPACT_DAMAGE_SCALE10 = 0xFC,
  DFT_IMPACT_DAMAGE_SCALE11 = 0xFD,
  DFT_IMPACT_DAMAGE_SCALE12 = 0xFE,
  DFT_IMPACT_DAMAGE_SCALE13 = 0xFF,
  DFT_IMPACT_DAMAGE_SCALE14 = 0x100,
  DFT_IMPACT_DAMAGE_SCALE15 = 0x101,
  DFT_IMPACT_DAMAGE_SCALE16 = 0x102,
  DFT_IMPACT_DAMAGE_SCALE17 = 0x103,
  DFT_IMPACT_DAMAGE_SCALE18 = 0x104,
  DFT_IMPACT_DAMAGE_SCALE19 = 0x105,
  DFT_IMPACT_DAMAGE_SCALE20 = 0x106,
  DFT_IMPACT_DAMAGE_SCALE21 = 0x107,
  DFT_IMPACT_DAMAGE_SCALE22 = 0x108,
  DFT_IMPACT_DAMAGE_SCALE23 = 0x109,
  DFT_IMPACT_DAMAGE_SCALE24 = 0x10A,
  DFT_IMPACT_DAMAGE_SCALE25 = 0x10B,
  DFT_IMPACT_DAMAGE_SCALE26 = 0x10C,
  DFT_IMPACT_DAMAGE_SCALE27 = 0x10D,
  DFT_IMPACT_DAMAGE_SCALE28 = 0x10E,
  DFT_IMPACT_DAMAGE_SCALE29 = 0x10F,
  DFT_IMPACT_DAMAGE_SCALE30 = 0x110,
  DFT_IMPACT_DAMAGE_SCALE31 = 0x111,
  DFT_PHYS_CONSTRAINT0 = 0x112,
  DFT_PHYS_CONSTRAINT1 = 0x113,
  DFT_PHYS_CONSTRAINT2 = 0x114,
  DFT_PHYS_CONSTRAINT3 = 0x115,
  DFT_PHYS_CONSTRAINT4 = 0x116,
  DFT_PHYS_CONSTRAINT5 = 0x117,
  DFT_PHYS_CONSTRAINT6 = 0x118,
  DFT_PHYS_CONSTRAINT7 = 0x119,
  DFT_PHYS_CONSTRAINT8 = 0x11A,
  DFT_PHYS_CONSTRAINT9 = 0x11B,
  DFT_PHYS_CONSTRAINT10 = 0x11C,
  DFT_PHYS_CONSTRAINT11 = 0x11D,
  DFT_PHYS_CONSTRAINT12 = 0x11E,
  DFT_PHYS_CONSTRAINT13 = 0x11F,
  DFT_PHYS_CONSTRAINT14 = 0x120,
  DFT_PHYS_CONSTRAINT15 = 0x121,
  DFT_PHYS_CONSTRAINT16 = 0x122,
  DFT_PHYS_CONSTRAINT17 = 0x123,
  DFT_PHYS_CONSTRAINT18 = 0x124,
  DFT_PHYS_CONSTRAINT19 = 0x125,
  DFT_PHYS_CONSTRAINT20 = 0x126,
  DFT_PHYS_CONSTRAINT21 = 0x127,
  DFT_PHYS_CONSTRAINT22 = 0x128,
  DFT_PHYS_CONSTRAINT23 = 0x129,
  DFT_PHYS_CONSTRAINT24 = 0x12A,
  DFT_PHYS_CONSTRAINT25 = 0x12B,
  DFT_PHYS_CONSTRAINT26 = 0x12C,
  DFT_PHYS_CONSTRAINT27 = 0x12D,
  DFT_PHYS_CONSTRAINT28 = 0x12E,
  DFT_PHYS_CONSTRAINT29 = 0x12F,
  DFT_PHYS_CONSTRAINT30 = 0x130,
  DFT_PHYS_CONSTRAINT31 = 0x131,
  DFT_DAMAGE_SOUND0 = 0x132,
  DFT_DAMAGE_SOUND1 = 0x133,
  DFT_DAMAGE_SOUND2 = 0x134,
  DFT_DAMAGE_SOUND3 = 0x135,
  DFT_DAMAGE_SOUND4 = 0x136,
  DFT_DAMAGE_SOUND5 = 0x137,
  DFT_DAMAGE_SOUND6 = 0x138,
  DFT_DAMAGE_SOUND7 = 0x139,
  DFT_DAMAGE_SOUND8 = 0x13A,
  DFT_DAMAGE_SOUND9 = 0x13B,
  DFT_DAMAGE_SOUND10 = 0x13C,
  DFT_DAMAGE_SOUND11 = 0x13D,
  DFT_DAMAGE_SOUND12 = 0x13E,
  DFT_DAMAGE_SOUND13 = 0x13F,
  DFT_DAMAGE_SOUND14 = 0x140,
  DFT_DAMAGE_SOUND15 = 0x141,
  DFT_DAMAGE_SOUND16 = 0x142,
  DFT_DAMAGE_SOUND17 = 0x143,
  DFT_DAMAGE_SOUND18 = 0x144,
  DFT_DAMAGE_SOUND19 = 0x145,
  DFT_DAMAGE_SOUND20 = 0x146,
  DFT_DAMAGE_SOUND21 = 0x147,
  DFT_DAMAGE_SOUND22 = 0x148,
  DFT_DAMAGE_SOUND23 = 0x149,
  DFT_DAMAGE_SOUND24 = 0x14A,
  DFT_DAMAGE_SOUND25 = 0x14B,
  DFT_DAMAGE_SOUND26 = 0x14C,
  DFT_DAMAGE_SOUND27 = 0x14D,
  DFT_DAMAGE_SOUND28 = 0x14E,
  DFT_DAMAGE_SOUND29 = 0x14F,
  DFT_DAMAGE_SOUND30 = 0x150,
  DFT_DAMAGE_SOUND31 = 0x151,
  DFT_BURN_EFFECT0 = 0x152,
  DFT_BURN_EFFECT1 = 0x153,
  DFT_BURN_EFFECT2 = 0x154,
  DFT_BURN_EFFECT3 = 0x155,
  DFT_BURN_EFFECT4 = 0x156,
  DFT_BURN_EFFECT5 = 0x157,
  DFT_BURN_EFFECT6 = 0x158,
  DFT_BURN_EFFECT7 = 0x159,
  DFT_BURN_EFFECT8 = 0x15A,
  DFT_BURN_EFFECT9 = 0x15B,
  DFT_BURN_EFFECT10 = 0x15C,
  DFT_BURN_EFFECT11 = 0x15D,
  DFT_BURN_EFFECT12 = 0x15E,
  DFT_BURN_EFFECT13 = 0x15F,
  DFT_BURN_EFFECT14 = 0x160,
  DFT_BURN_EFFECT15 = 0x161,
  DFT_BURN_EFFECT16 = 0x162,
  DFT_BURN_EFFECT17 = 0x163,
  DFT_BURN_EFFECT18 = 0x164,
  DFT_BURN_EFFECT19 = 0x165,
  DFT_BURN_EFFECT20 = 0x166,
  DFT_BURN_EFFECT21 = 0x167,
  DFT_BURN_EFFECT22 = 0x168,
  DFT_BURN_EFFECT23 = 0x169,
  DFT_BURN_EFFECT24 = 0x16A,
  DFT_BURN_EFFECT25 = 0x16B,
  DFT_BURN_EFFECT26 = 0x16C,
  DFT_BURN_EFFECT27 = 0x16D,
  DFT_BURN_EFFECT28 = 0x16E,
  DFT_BURN_EFFECT29 = 0x16F,
  DFT_BURN_EFFECT30 = 0x170,
  DFT_BURN_EFFECT31 = 0x171,
  DFT_BURN_SOUND0 = 0x172,
  DFT_BURN_SOUND1 = 0x173,
  DFT_BURN_SOUND2 = 0x174,
  DFT_BURN_SOUND3 = 0x175,
  DFT_BURN_SOUND4 = 0x176,
  DFT_BURN_SOUND5 = 0x177,
  DFT_BURN_SOUND6 = 0x178,
  DFT_BURN_SOUND7 = 0x179,
  DFT_BURN_SOUND8 = 0x17A,
  DFT_BURN_SOUND9 = 0x17B,
  DFT_BURN_SOUND10 = 0x17C,
  DFT_BURN_SOUND11 = 0x17D,
  DFT_BURN_SOUND12 = 0x17E,
  DFT_BURN_SOUND13 = 0x17F,
  DFT_BURN_SOUND14 = 0x180,
  DFT_BURN_SOUND15 = 0x181,
  DFT_BURN_SOUND16 = 0x182,
  DFT_BURN_SOUND17 = 0x183,
  DFT_BURN_SOUND18 = 0x184,
  DFT_BURN_SOUND19 = 0x185,
  DFT_BURN_SOUND20 = 0x186,
  DFT_BURN_SOUND21 = 0x187,
  DFT_BURN_SOUND22 = 0x188,
  DFT_BURN_SOUND23 = 0x189,
  DFT_BURN_SOUND24 = 0x18A,
  DFT_BURN_SOUND25 = 0x18B,
  DFT_BURN_SOUND26 = 0x18C,
  DFT_BURN_SOUND27 = 0x18D,
  DFT_BURN_SOUND28 = 0x18E,
  DFT_BURN_SOUND29 = 0x18F,
  DFT_BURN_SOUND30 = 0x190,
  DFT_BURN_SOUND31 = 0x191,
  DFT_DAMAGE_ENTITY0 = 0x192,
  DFT_DAMAGE_ENTITY1 = 0x193,
  DFT_DAMAGE_ENTITY2 = 0x194,
  DFT_DAMAGE_ENTITY3 = 0x195,
  DFT_DAMAGE_ENTITY4 = 0x196,
  DFT_DAMAGE_ENTITY5 = 0x197,
  DFT_DAMAGE_ENTITY6 = 0x198,
  DFT_DAMAGE_ENTITY7 = 0x199,
  DFT_DAMAGE_ENTITY8 = 0x19A,
  DFT_DAMAGE_ENTITY9 = 0x19B,
  DFT_DAMAGE_ENTITY10 = 0x19C,
  DFT_DAMAGE_ENTITY11 = 0x19D,
  DFT_DAMAGE_ENTITY12 = 0x19E,
  DFT_DAMAGE_ENTITY13 = 0x19F,
  DFT_DAMAGE_ENTITY14 = 0x1A0,
  DFT_DAMAGE_ENTITY15 = 0x1A1,
  DFT_DAMAGE_ENTITY16 = 0x1A2,
  DFT_DAMAGE_ENTITY17 = 0x1A3,
  DFT_DAMAGE_ENTITY18 = 0x1A4,
  DFT_DAMAGE_ENTITY19 = 0x1A5,
  DFT_DAMAGE_ENTITY20 = 0x1A6,
  DFT_DAMAGE_ENTITY21 = 0x1A7,
  DFT_DAMAGE_ENTITY22 = 0x1A8,
  DFT_DAMAGE_ENTITY23 = 0x1A9,
  DFT_DAMAGE_ENTITY24 = 0x1AA,
  DFT_DAMAGE_ENTITY25 = 0x1AB,
  DFT_DAMAGE_ENTITY26 = 0x1AC,
  DFT_DAMAGE_ENTITY27 = 0x1AD,
  DFT_DAMAGE_ENTITY28 = 0x1AE,
  DFT_DAMAGE_ENTITY29 = 0x1AF,
  DFT_DAMAGE_ENTITY30 = 0x1B0,
  DFT_DAMAGE_ENTITY31 = 0x1B1,
  DFT_PIECE_LABEL0 = 0x1B2,
  DFT_PIECE_LABEL1 = 0x1B3,
  DFT_PIECE_LABEL2 = 0x1B4,
  DFT_PIECE_LABEL3 = 0x1B5,
  DFT_PIECE_LABEL4 = 0x1B6,
  DFT_PIECE_LABEL5 = 0x1B7,
  DFT_PIECE_LABEL6 = 0x1B8,
  DFT_PIECE_LABEL7 = 0x1B9,
  DFT_PIECE_LABEL8 = 0x1BA,
  DFT_PIECE_LABEL9 = 0x1BB,
  DFT_PIECE_LABEL10 = 0x1BC,
  DFT_PIECE_LABEL11 = 0x1BD,
  DFT_PIECE_LABEL12 = 0x1BE,
  DFT_PIECE_LABEL13 = 0x1BF,
  DFT_PIECE_LABEL14 = 0x1C0,
  DFT_PIECE_LABEL15 = 0x1C1,
  DFT_PIECE_LABEL16 = 0x1C2,
  DFT_PIECE_LABEL17 = 0x1C3,
  DFT_PIECE_LABEL18 = 0x1C4,
  DFT_PIECE_LABEL19 = 0x1C5,
  DFT_PIECE_LABEL20 = 0x1C6,
  DFT_PIECE_LABEL21 = 0x1C7,
  DFT_PIECE_LABEL22 = 0x1C8,
  DFT_PIECE_LABEL23 = 0x1C9,
  DFT_PIECE_LABEL24 = 0x1CA,
  DFT_PIECE_LABEL25 = 0x1CB,
  DFT_PIECE_LABEL26 = 0x1CC,
  DFT_PIECE_LABEL27 = 0x1CD,
  DFT_PIECE_LABEL28 = 0x1CE,
  DFT_PIECE_LABEL29 = 0x1CF,
  DFT_PIECE_LABEL30 = 0x1D0,
  DFT_PIECE_LABEL31 = 0x1D1,
  DFT_MAX_FIELDS = 0x1D2,
};

enum $FEB8B26A2B53B7323B0299783BDC925B
{
  DOBJ_CREATE_SIZE = 0x7C,
  XSURFACE_SIZE = 0x50,
};

enum SideClassification
{
  SIDE_FRONT = 0x0,
  SIDE_BACK = 0x1,
  SIDE_ON = 0x2,
  SIDE_CROSS = 0x3,
  SIDE_COUNT = 0x4,
};

enum $58479153ED1DCBEE2C52E6FD8399EF20
{
  XANIM_VERSION = 0x13,
  XMODEL_VERSION = 0x40,
  XMODEL_PIECES_VERSION = 0x1,
};

enum $5B8C2A2A8586A67463A96E51E461C484
{
  MTL_TYPE_DEFAULT = 0x0,
  MTL_TYPE_MODEL = 0x1,
  MTL_TYPE_MODEL_VERTCOL = 0x2,
  MTL_TYPE_MODEL_LIGHTMAP_VC = 0x3,
  MTL_TYPE_WORLD_VERTCOL = 0x4,
  MTL_TYPE_PACKED_WORLD_VERTCOL = 0x5,
  MTL_TYPE_QUANT_WORLD = 0x6,
  MTL_TYPE_QUANT_WORLD_VERTCOL = 0x7,
  MTL_TYPE_COUNT = 0x8,
};

enum $B52DDC55702BD18CB2BACD82F00C630C
{
  ANIM_LOOP = 0x1,
  ANIM_DELTA = 0x2,
  ANIM_DELTA_3D = 0x4,
  ANIM_LEFT_HAND_GRIP_IK = 0x8,
};

enum $1BF0D9E267EBE4F705F118FBCA9CC701
{
  XANIM_ERROR_NONE = 0x0,
  XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
  XANIM_ERROR_BAD_NOTIFY = 0x2,
};

enum ComDevhostCommandXAnim
{
  COM_DEVHOST_XANIM_TIMESTAMP = 0x0,
  COM_DEVHOST_XANIM_ENTNUM = 0x1,
  COM_DEVHOST_XANIM_NODE = 0x2,
  COM_DEVHOST_XANIM_ANIMCMD = 0x3,
  COM_DEVHOST_XANIM_PAUSED = 0x4,
};

enum sysEventType_t
{
  SE_NONE = 0x0,
  SE_KEY = 0x1,
  SE_CHAR = 0x2,
  SE_CONSOLE = 0x3,
};

enum $423F38804B32C1E5B4A98832127ED5DE
{
  R_WINDOW = 0x0,
  R_FULLSCREEN = 0x1,
  R_FULLSCREEN_WINDOW = 0x2,
};

enum $EF177DB91A63B46ABE1136DCBC4E9D96
{
  HW_CURSOR_ARROW = 0x0,
  HW_CURSOR_GRABOPEN = 0x1,
  HW_CURSOR_GRABCLOSE = 0x2,
  HW_CURSOR_GRABOPENZM = 0x3,
  HW_CURSOR_GRABCLOSEZM = 0x4,
  HW_CURSOR_COUNT = 0x5,
};

enum DataNodeType
{
  DataNodeType_String = 0x0,
  DataNodeType_Binary = 0x1,
};

enum InternetCookieState
{
  COOKIE_STATE_UNKNOWN = 0x0,
  COOKIE_STATE_ACCEPT = 0x1,
  COOKIE_STATE_PROMPT = 0x2,
  COOKIE_STATE_LEASH = 0x3,
  COOKIE_STATE_DOWNGRADE = 0x4,
  COOKIE_STATE_REJECT = 0x5,
  COOKIE_STATE_MAX = 0x5,
};

enum _MINIDUMP_TYPE
{
  MiniDumpNormal = 0x0,
  MiniDumpWithDataSegs = 0x1,
  MiniDumpWithFullMemory = 0x2,
  MiniDumpWithHandleData = 0x4,
  MiniDumpFilterMemory = 0x8,
  MiniDumpScanMemory = 0x10,
  MiniDumpWithUnloadedModules = 0x20,
  MiniDumpWithIndirectlyReferencedMemory = 0x40,
  MiniDumpFilterModulePaths = 0x80,
  MiniDumpWithProcessThreadData = 0x100,
  MiniDumpWithPrivateReadWriteMemory = 0x200,
  MiniDumpWithoutOptionalData = 0x400,
  MiniDumpWithFullMemoryInfo = 0x800,
  MiniDumpWithThreadInfo = 0x1000,
  MiniDumpWithCodeSegs = 0x2000,
  MiniDumpWithoutAuxiliaryState = 0x4000,
  MiniDumpWithFullAuxiliaryState = 0x8000,
  MiniDumpWithPrivateWriteCopyMemory = 0x10000,
  MiniDumpIgnoreInaccessibleMemory = 0x20000,
  MiniDumpWithTokenInformation = 0x40000,
  MiniDumpValidTypeFlags = 0x7FFFF,
};

enum INTERNET_SCHEME
{
  INTERNET_SCHEME_PARTIAL = 0xFFFFFFFE,
  INTERNET_SCHEME_UNKNOWN = 0xFFFFFFFF,
  INTERNET_SCHEME_DEFAULT = 0x0,
  INTERNET_SCHEME_FTP = 0x1,
  INTERNET_SCHEME_GOPHER = 0x2,
  INTERNET_SCHEME_HTTP = 0x3,
  INTERNET_SCHEME_HTTPS = 0x4,
  INTERNET_SCHEME_FILE = 0x5,
  INTERNET_SCHEME_NEWS = 0x6,
  INTERNET_SCHEME_MAILTO = 0x7,
  INTERNET_SCHEME_SOCKS = 0x8,
  INTERNET_SCHEME_JAVASCRIPT = 0x9,
  INTERNET_SCHEME_VBSCRIPT = 0xA,
  INTERNET_SCHEME_RES = 0xB,
  INTERNET_SCHEME_FIRST = 0x1,
  INTERNET_SCHEME_LAST = 0xB,
};

enum ADDRESS_MODE
{
  AddrMode1616 = 0x0,
  AddrMode1632 = 0x1,
  AddrModeReal = 0x2,
  AddrModeFlat = 0x3,
};

enum clientlsg_t
{
  CLIENT_LSG_DEV = 0x0,
  CLIENT_LSG_CERT = 0x1,
  CLIENT_LSG_LIVE = 0x2,
  MAX_CLIENT_LSGS = 0x3,
};

enum MARKUPSIZE
{
  MARKUPSIZE_CALCWIDTH = 0x0,
  MARKUPSIZE_CALCHEIGHT = 0x1,
};

enum WinQuitBehavior
{
  WIN_IGNORE_QUIT = 0x0,
  WIN_HANDLE_QUIT = 0x1,
};

enum $E0F033F08EE5F4988292F1D8F4F80363
{
  TRACK_EXE_PROJ = 0x0,
  TRACK_CG_PROJ = 0x1,
  TRACK_G_PROJ = 0x2,
  TRACK_R_PROJ = 0x3,
  TRACK_COUNT_PROJ = 0x4,
};

enum IdentityParam
{
  IDENTITY_ID = 0x0,
  IDENTITY_TITLE_ID = 0x1,
  IDENTITY_AUTH_ADDR = 0x2,
  IDENTITY_LSG_ADDR = 0x3,
  IDENTITY_DW_KEY = 0x4,
  IDENTITY_ENVIRONMENT = 0x5,
  IDENTITY_PLATFORM = 0x6,
  IDENTITY_PARAM_COUNT = 0x7,
};

enum GamePadStickDir
{
  GPAD_STICK_POS = 0x0,
  GPAD_STICK_NEG = 0x1,
  GPAD_STICK_DIRCOUNT = 0x2,
};

enum GamepadPhysicalAxis
{
  GPAD_PHYSAXIS_RSTICK_X = 0x0,
  GPAD_PHYSAXIS_RSTICK_Y = 0x1,
  GPAD_PHYSAXIS_LSTICK_X = 0x2,
  GPAD_PHYSAXIS_LSTICK_Y = 0x3,
  GPAD_PHYSAXIS_RTRIGGER = 0x4,
  GPAD_PHYSAXIS_LTRIGGER = 0x5,
  GPAD_PHYSAXIS_COUNT = 0x6,
  GPAD_PHYSAXIS_NONE = 0xFFFFFFFF,
};

enum GamePadButtonEvent
{
  GPAD_BUTTON_RELEASED = 0x0,
  GPAD_BUTTON_PRESSED = 0x1,
  GPAD_BUTTON_UPDATE = 0x2,
};

enum MB_PREDICTION_MODE
{
  DC_PRED = 0x0,
  V_PRED = 0x1,
  H_PRED = 0x2,
  TM_PRED = 0x3,
  B_PRED = 0x4,
  NEARESTMV = 0x5,
  NEARMV = 0x6,
  ZEROMV = 0x7,
  NEWMV = 0x8,
  SPLITMV = 0x9,
  MB_MODE_COUNT = 0xA,
};

enum MB_LVL_FEATURES
{
  MB_LVL_ALT_Q = 0x0,
  MB_LVL_ALT_LF = 0x1,
  MB_LVL_MAX = 0x2,
};

enum MV_REFERENCE_FRAME
{
  INTRA_FRAME = 0x0,
  LAST_FRAME = 0x1,
  GOLDEN_FRAME = 0x2,
  ALTREF_FRAME = 0x3,
  MAX_REF_FRAMES = 0x4,
};

enum YUV_TYPE
{
  REG_YUV = 0x0,
  INT_YUV = 0x1,
};

enum B_PREDICTION_MODE
{
  B_DC_PRED = 0x0,
  B_TM_PRED = 0x1,
  B_VE_PRED = 0x2,
  B_HE_PRED = 0x3,
  B_LD_PRED = 0x4,
  B_RD_PRED = 0x5,
  B_VR_PRED = 0x6,
  B_VL_PRED = 0x7,
  B_HD_PRED = 0x8,
  B_HU_PRED = 0x9,
  LEFT4X4 = 0xA,
  ABOVE4X4 = 0xB,
  ZERO4X4 = 0xC,
  NEW4X4 = 0xD,
  B_MODE_COUNT = 0xE,
};

enum FRAME_TYPE
{
  KEY_FRAME = 0x0,
  INTER_FRAME = 0x1,
};

enum $78AAEE69923CDFB5D85FAB6874EFA454
{
  VORBIS_packet_id = 0x1,
  VORBIS_packet_comment = 0x3,
  VORBIS_packet_setup = 0x5,
};

enum STBVorbisError
{
  VORBIS__no_error = 0x0,
  VORBIS_need_more_data = 0x1,
  VORBIS_invalid_api_mixing = 0x2,
  VORBIS_outofmem = 0x3,
  VORBIS_feature_not_supported = 0x4,
  VORBIS_too_many_channels = 0x5,
  VORBIS_file_open_failure = 0x6,
  VORBIS_seek_without_length = 0x7,
  VORBIS_unexpected_eof = 0xA,
  VORBIS_seek_invalid = 0xB,
  VORBIS_invalid_setup = 0x14,
  VORBIS_invalid_stream = 0x15,
  VORBIS_missing_capture_pattern = 0x1E,
  VORBIS_invalid_stream_structure_version = 0x1F,
  VORBIS_continued_packet_flag_invalid = 0x20,
  VORBIS_incorrect_stream_serial_number = 0x21,
  VORBIS_invalid_first_page = 0x22,
  VORBIS_bad_packet_type = 0x23,
  VORBIS_cant_find_last_page = 0x24,
  VORBIS_seek_failed = 0x25,
};

enum GamepadVirtualAxis
{
  GPAD_VIRTAXIS_SIDE = 0x0,
  GPAD_VIRTAXIS_FORWARD = 0x1,
  GPAD_VIRTAXIS_UP = 0x2,
  GPAD_VIRTAXIS_YAW = 0x3,
  GPAD_VIRTAXIS_PITCH = 0x4,
  GPAD_VIRTAXIS_ATTACK = 0x5,
  GPAD_VIRTAXIS_COUNT = 0x6,
  GPAD_VIRTAXIS_NONE = 0xFFFFFFFF,
};

enum ROMType
{
  ROM_2K_MIRROR = 0x0,
  ROM_4K = 0x1,
  ROM_2_4K = 0x2,
  ROM_2_4K_DPC = 0x3,
};

enum Location
{
  LOC_TIA = 0x0,
  LOC_PIA_RAM = 0x1,
  LOC_PIA = 0x2,
  LOC_ROM = 0x3,
};

enum TIAPort
{
  VSYNC = 0x0,
  VBLANK = 0x1,
  WSYNC = 0x2,
  RSYNC = 0x3,
  NUSIZ0 = 0x4,
  NUSIZ1 = 0x5,
  COLUP0 = 0x6,
  COLUP1 = 0x7,
  COLUPF = 0x8,
  COLUBK = 0x9,
  CTRLPF = 0xA,
  REFP0 = 0xB,
  REFP1 = 0xC,
  PF0 = 0xD,
  PF1 = 0xE,
  PF2 = 0xF,
  RESP0 = 0x10,
  RESP1 = 0x11,
  RESM0 = 0x12,
  RESM1 = 0x13,
  RESBL = 0x14,
  AUDC0 = 0x15,
  AUDC1 = 0x16,
  AUDF0 = 0x17,
  AUDF1 = 0x18,
  AUDV0 = 0x19,
  AUDV1 = 0x1A,
  GRP0 = 0x1B,
  GRP1 = 0x1C,
  ENAM0 = 0x1D,
  ENAM1 = 0x1E,
  ENABL = 0x1F,
  HMP0 = 0x20,
  HMP1 = 0x21,
  HMM0 = 0x22,
  HMM1 = 0x23,
  HMBL = 0x24,
  VDELP0 = 0x25,
  VDELP1 = 0x26,
  VDELBL = 0x27,
  RESMP0 = 0x28,
  RESMP1 = 0x29,
  HMOVE = 0x2A,
  HMCLR = 0x2B,
  CXCLR = 0x2C,
  CXM0P = 0x30,
  CXM1P = 0x31,
  CXP0FB = 0x32,
  CXP1FB = 0x33,
  CXM0FB = 0x34,
  CXM1FB = 0x35,
  CXBLPF = 0x36,
  CXPPMM = 0x37,
  INPT0 = 0x38,
  INPT1 = 0x39,
  INPT2 = 0x3A,
  INPT3 = 0x3B,
  INPT4 = 0x3C,
  INPT5 = 0x3D,
};

enum AddressingMode
{
  AM_INVALID = 0x0,
  AM_IMPLICIT = 0x1,
  AM_ACCUMULATOR = 0x2,
  AM_IMMEDIATE = 0x3,
  AM_RELATIVE = 0x4,
  AM_ZEROPAGE = 0x5,
  AM_ZEROPAGE_X = 0x6,
  AM_ZEROPAGE_Y = 0x7,
  AM_ABSOLUTE = 0x8,
  AM_ABSOLUTE_X = 0x9,
  AM_ABSOLUTE_Y = 0xA,
  AM_INDEXED_INDIRECT = 0xB,
  AM_INDIRECT_INDEXED = 0xC,
};

enum PIAPort
{
  SWCHA = 0x0,
  SWACNT = 0x1,
  SWCHB = 0x2,
  SWBCNT = 0x3,
  INTIM = 0x4,
  INSTAT = 0x5,
  TIM1T = 0x14,
  TIM8T = 0x15,
  TIM64T = 0x16,
  T1024T = 0x17,
};

enum PIMP_TECHSET
{
  PIMP_TECHSET_DEFAULT = 0x0,
  PIMP_TECHSET_MODEL = 0x1,
  PIMP_TECHSET_WORLD = 0x2,
  PIMP_TECHSET_PACKED_WORLD = 0x3,
  PIMP_TECHSET_QUANT_WORLD_NO_COLOR = 0x4,
  PIMP_TECHSET_QUANT_WORLD = 0x5,
  PIMP_TECHSET_LMAP_VERTEX_MODEL = 0x6,
  PIMP_TECHSET_COUNT = 0x7,
};

enum $7E9E60F2A1191F0ADD49A6918BB55F76
{
  LEFT = 0x0,
  RIGHT = 0x1,
};

enum $723D4C507CBAE13E1C090A0F4B925142
{
  RED = 0x0,
  BLACK = 0x1,
};

enum ParseTokenType
{
  PARSE_TOKEN_UNKNOWN = 0x0,
  PARSE_TOKEN_NUMBER = 0x1,
  PARSE_TOKEN_STRING = 0x2,
  PARSE_TOKEN_NAME = 0x3,
  PARSE_TOKEN_HASH = 0x4,
  PARSE_TOKEN_PUNCTUATION = 0x5,
};

enum ParseThreadContext
{
  PARSE_THREAD_MAIN = 0x0,
  PARSE_THREAD_BACKEND = 0x1,
  PARSE_THREAD_SERVER = 0x2,
  PARSE_THREAD_FASTFILE = 0x3,
  PARSE_THREAD_COUNT = 0x4,
};

enum Q_DATA_TYPE
{
  Q_DATA_TYPE_INT = 0x0,
  Q_DATA_TYPE_FLOAT = 0x1,
  Q_DATA_TYPE_BLOB = 0x2,
  Q_DATA_TYPE_STRING = 0x3,
  Q_DATA_TYPE_ISTRING = 0x4,
};

enum Q_OPERATOR
{
  Q_OPERATOR_EQUAL = 0x0,
  Q_OPERATOR_LESSTHAN = 0x1,
  Q_OPERATOR_GREATERTHAN = 0x2,
  Q_OPERATOR_LESSTHANOREQUALTO = 0x3,
  Q_OPERATOR_GREATERTHANOREQUALTO = 0x4,
};

enum $1C0487867B3F7A93E91D54F507F2DC13
{
  SAVE_SEGMENT_START = 0x0,
  SAVE_SEGMENT_MAIN = 0x1,
  SAVE_SEGMENT_NORMAL = 0x2,
  SAVE_SEGMENT_LEVEL = 0x3,
  SAVE_SEGMENT_SCRIPT = 0x4,
  SAVE_SEGMENT_ANIMTREE = 0x5,
  SAVE_SEGMENT_END = 0x6,
  SAVE_SEGMENT_COUNT = 0x7,
  SAVE_SEGMENT_NONE = 0xFFFFFFFF,
};

enum EvalValueType
{
  EVAL_VALUE_DOUBLE = 0x0,
  EVAL_VALUE_INT = 0x1,
  EVAL_VALUE_STRING = 0x2,
};

enum EvalOperatorType
{
  EVAL_OP_LPAREN = 0x0,
  EVAL_OP_RPAREN = 0x1,
  EVAL_OP_COLON = 0x2,
  EVAL_OP_QUESTION = 0x3,
  EVAL_OP_PLUS = 0x4,
  EVAL_OP_MINUS = 0x5,
  EVAL_OP_UNARY_PLUS = 0x6,
  EVAL_OP_UNARY_MINUS = 0x7,
  EVAL_OP_MULTIPLY = 0x8,
  EVAL_OP_DIVIDE = 0x9,
  EVAL_OP_MODULUS = 0xA,
  EVAL_OP_LSHIFT = 0xB,
  EVAL_OP_RSHIFT = 0xC,
  EVAL_OP_BITWISE_NOT = 0xD,
  EVAL_OP_BITWISE_AND = 0xE,
  EVAL_OP_BITWISE_OR = 0xF,
  EVAL_OP_BITWISE_XOR = 0x10,
  EVAL_OP_LOGICAL_NOT = 0x11,
  EVAL_OP_LOGICAL_AND = 0x12,
  EVAL_OP_LOGICAL_OR = 0x13,
  EVAL_OP_EQUALS = 0x14,
  EVAL_OP_NOT_EQUAL = 0x15,
  EVAL_OP_LESS = 0x16,
  EVAL_OP_LESS_EQUAL = 0x17,
  EVAL_OP_GREATER = 0x18,
  EVAL_OP_GREATER_EQUAL = 0x19,
  EVAL_OP_COUNT = 0x1A,
};

enum DvarSetSource
{
  DVAR_SOURCE_INTERNAL = 0x0,
  DVAR_SOURCE_EXTERNAL = 0x1,
  DVAR_SOURCE_SCRIPT = 0x2,
  DVAR_SOURCE_DEVGUI = 0x3,
};

enum showpacketsType_t
{
  SHOWPACKETS_DISABLED = 0x0,
  SHOWPACKETS_LEVEL_1 = 0x1,
  SHOWPACKETS_LEVEL_2 = 0x2,
  SHOWPACKETS_LEVEL_COUNT = 0x3,
};

enum shownetType_t
{
  SHOWNET_LEVEL_MINUS_2 = 0xFFFFFFFE,
  SHOWNET_LEVEL_MINUS_1 = 0xFFFFFFFF,
  SHOWNET_LEVEL_0 = 0x0,
  SHOWNET_LEVEL_1 = 0x1,
  SHOWNET_LEVEL_2 = 0x2,
  SHOWNET_LEVEL_3 = 0x3,
  SHOWNET_LEVEL_4 = 0x4,
  SHOWNET_LEVEL_COUNT = 0x7,
};

enum clearType_t
{
  R_CLEAR_NEVER = 0x0,
  R_CLEAR_DEV_ONLY_BLINK = 0x1,
  R_CLEAR_BLINK = 0x2,
  R_CLEAR_STEADY = 0x3,
  R_CLEAR_FOG_COLOR = 0x4,
  R_CLEAR_COUNT = 0x5,
};

enum compassPartialType_t
{
  COMPASS_PARTIAL_TYPE_2D = 0x0,
  COMPASS_PARTIAL_TYPE_3D = 0x1,
};

enum systemTest_t
{
  LUA_SYSTEM_TEST_OFF = 0x0,
  LUA_SYSTEM_TEST_ON = 0x1,
  LUA_SYSTEM_TEST_ON_EXTRA_LOGGING = 0x2,
};

enum perfValType_t
{
  PERF_CLIENTPING = 0x0,
  PERF_CLIENTTIMEOUTS = 0x1,
  PERF_DWTASKSCOMPLETE = 0x2,
  PERF_DWTASKSFAIL = 0x3,
  PERF_DWTASKSTIMEOUT = 0x4,
  PERF_TASKTIME = 0x5,
  PERF_DWDISCONNECTS = 0x6,
  PERF_SERVERFRAMEMS = 0x7,
  PERF_SNAPSHOT_CLIENT_NODELTA = 0x8,
  PERF_SNAPSHOT_STALE_DELTA = 0x9,
  PERF_SNAPSHOT_STALE_ENTS = 0xA,
  PERF_SNAPSHOT_OK_DELTA = 0xB,
  PERF_GAMESTATES = 0xC,
  PERF_PARTYSTATES = 0xD,
  PERF_MAX_COUNTERS = 0xE,
};

enum FsThread
{
  FS_THREAD_MAIN = 0x0,
  FS_THREAD_STREAM = 0x1,
  FS_THREAD_DATABASE = 0x2,
  FS_THREAD_BACKEND = 0x3,
  FS_THREAD_SERVER = 0x4,
  FS_THREAD_COUNT = 0x5,
  FS_THREAD_INVALID = 0x6,
};

enum FS_ErrorCodes
{
  FS_OPEN_FAILURE = 0xFFFFFFFF,
  FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
};

enum expOperationEnum
{
  OP_NOOP = 0x0,
  OP_RIGHTPAREN = 0x1,
  OP_MULTIPLY = 0x2,
  OP_DIVIDE = 0x3,
  OP_MODULUS = 0x4,
  OP_ADD = 0x5,
  OP_SUBTRACT = 0x6,
  OP_NEGATE = 0x7,
  OP_NOT = 0x8,
  OP_LESSTHAN = 0x9,
  OP_LESSTHANEQUALTO = 0xA,
  OP_GREATERTHAN = 0xB,
  OP_GREATERTHANEQUALTO = 0xC,
  OP_EQUALS = 0xD,
  OP_NOTEQUAL = 0xE,
  OP_AND = 0xF,
  OP_OR = 0x10,
  OP_LEFTPAREN = 0x11,
  OP_COMMA = 0x12,
  OP_BITWISEAND = 0x13,
  OP_BITWISEOR = 0x14,
  OP_BITWISENOT = 0x15,
  OP_BITSHIFTLEFT = 0x16,
  OP_BITSHIFTRIGHT = 0x17,
  NUM_EXPRESSION_OPERATORS = 0x18,
  MAX_OPERATOR_VALUE = 0x4000,
};

enum expressionRpnEnum
{
  RPN_CONSTANT = 0x0,
  RPN_CMD_IDX = 0x1,
  RPN_CMD = 0x2,
  RPN_END = 0x3,
};

enum afterActionReportAwards_t
{
  AAR_AWARDS_PERSONAL_BESTS = 0x0,
  AAR_AWARDS_STATS_MILESTONES = 0x1,
  AAR_AWARDS_CONTRACTS = 0x2,
  AAR_AWARDS_COUNT = 0x3,
  AAR_MAX_AWARDS = 0x3,
};

enum $AFEE36A8640DC0DCE90F389D8ACD8D8A
{
  PLAYER_FIELD_name = 0x0,
  PLAYER_FIELD_localname = 0x1,
  PLAYER_FIELD_teamname = 0x2,
  PLAYER_FIELD_otherteamname = 0x3,
  PLAYER_FIELD_rank = 0x4,
  PLAYER_FIELD_clan = 0x5,
  PLAYER_FIELD_tag = 0x6,
  PLAYER_FIELD_rankicon = 0x7,
  PLAYER_FIELD_currentteamname = 0x8,
  PLAYER_FIELD_xuid = 0x9,
  PLAYER_FIELD_dead = 0xA,
  PLAYER_FIELD_clipAmmo = 0xB,
  PLAYER_FIELD_nightvision = 0xC,
  PLAYER_FIELD_number = 0xD,
  PLAYER_FIELD_score = 0xE,
  PLAYER_FIELD_deaths = 0xF,
  PLAYER_FIELD_kills = 0x10,
  PLAYER_FIELD_place = 0x11,
  PLAYER_FIELD_ping = 0x12,
  NUM_PLAYER_FIELDS = 0x13,
};

enum e_mapSelectionColumns
{
  FEEDER_MAPSELECTION_COLUMN_BACKGROUND = 0x0,
  FEEDER_MAPSELECTION_COLUMN_NAME = 0x1,
  FEEDER_MAPSELECTION_COLUMN_A_BUTTON = 0x2,
};

enum e_gametypesBaseColumns
{
  GAMETYPES_BASE_COLUMN_BACKGROUND = 0x0,
  GAMETYPES_BASE_COLUMN_NAME = 0x1,
  GAMETYPES_BASE_COLUMN_A_BUTTON = 0x2,
  GAMETYPES_BASE_COLUMN_ICON = 0x3,
};

enum $3BE6DD63049AD5C83B6A8150F07B5819
{
  OPERATOR = 0x0,
  OPERAND = 0x1,
  INVALID_ENTRY_TYPE = 0x2,
};

enum AssertOccurance
{
  FIRST_TIME = 0x0,
  RECURSIVE = 0x1,
};

enum $A3DFF96204E207F68E0E8BD1BDEA75BE
{
  CONDITION_TYPE_NONE = 0x0,
  CONDITION_TYPE_IF = 0x1,
  CONDITION_TYPE_ELSEIF = 0x2,
  CONDITION_TYPE_ELSE = 0x3,
};

enum msgwnd_mode_t
{
  MWM_BOTTOMUP_ALIGN_TOP = 0x0,
  MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
  MWM_TOPDOWN_ALIGN_TOP = 0x2,
  MWM_TOPDOWN_ALIGN_BOTTOM = 0x3,
};

enum PlaylistLockState
{
  PLS_UNLOCKED = 0x0,
  PLS_FETCHING = 0x1,
  PLS_XP = 0x2,
  PLS_PLEVEL = 0x3,
  PLS_MAXPARTY = 0x4,
  PLS_MINPARTY = 0x5,
  PLS_GAMETYPEBAN = 0x6,
  PLS_FINISHEDSOLO = 0x7,
  PLS_REQUIRED_DLC_DISABLED = 0x8,
  PLS_REQUIRED_DLC_NOT_AVAILABLE = 0x9,
  PLS_CODPOINTS = 0xA,
  PLS_VISPROFILEVAR = 0xB,
  PLS_LOCALPLAYERS = 0xC,
  PLS_NOGUESTS = 0xD,
  PLS_COUNT = 0xE,
};

enum parseBlockTypes
{
  PARSE_UNKNOWN = 0x0,
  PARSE_GAMETYPE = 0x1,
  PARSE_PLAYLIST = 0x2,
  PARSE_SUPERCATEGORY = 0x3,
  PARSE_CATEGORY = 0x4,
  PARSE_IGNORE = 0x5,
  PARSE_SETTINGS = 0x6,
  PARSE_MAPLIST = 0x7,
};

enum motdDescriptorStatus_e
{
  MOTD_DESCRIPTOR_STATUS_INVALID = 0x0,
  MOTD_DESCRIPTOR_STATUS_WORKING = 0x1,
  MOTD_DESCRIPTOR_STATUS_DONE = 0x2,
  MOTD_DESCRIPTOR_STATUS_ERROR = 0x3,
};

enum LbAggType
{
  LBAGG_TYPE_MIN = 0x0,
  LBAGG_TYPE_MAX = 0x1,
  LBAGG_TYPE_ADD = 0x2,
  LBAGG_TYPE_REPLACE = 0x3,
  LBAGG_TYPE_COUNT = 0x4,
};

enum LbUpdateType
{
  LBUPDATE_TYPE_NORMAL = 0x0,
  LBUPDATE_TYPE_RANK = 0x1,
  LBUPDATE_TYPE_COMBINE = 0x2,
  LBUPDATE_TYPE_COUNT = 0x3,
};

enum LbColType
{
  LBCOL_TYPE_NUMBER = 0x0,
  LBCOL_TYPE_TIME = 0x1,
  LBCOL_TYPE_LEVELXP = 0x2,
  LBCOL_TYPE_PRESTIGE = 0x3,
  LBCOL_TYPE_BIGNUMBER = 0x4,
  LBCOL_TYPE_PERCENT = 0x5,
  LBCOL_TYPE_TIME_FULL = 0x6,
  LBCOL_TYPE_COUNT = 0x7,
};

enum scoreBoardColumns_e
{
  SCOREBOARD_COLUMN_NEMESIS_BG = 0x0,
  SCOREBOARD_COLUMN_RANK_BG = 0x1,
  SCOREBOARD_COLUMN_RANK = 0x2,
  SCOREBOARD_COLUMN_RANK_ICON = 0x3,
  SCOREBOARD_COLUMN_NAME = 0x4,
  SCOREBOARD_COLUMN_1 = 0x5,
  SCOREBOARD_COLUMN_2 = 0x6,
  SCOREBOARD_COLUMN_3 = 0x7,
  SCOREBOARD_COLUMN_4 = 0x8,
  SCOREBOARD_COLUMN_5 = 0x9,
};

enum e_inGamePlayerListColumns
{
  INGAME_LIST_COLUMN_TALKING = 0x0,
  INGAME_LIST_COLUMN_BACKGROUND = 0x1,
  INGAME_LIST_COLUMN_ALT_BG = 0x2,
  INGAME_LIST_COLUMN_RANK_BG = 0x3,
  INGAME_LIST_COLUMN_RANK = 0x4,
  INGAME_LIST_COLUMN_RANK_ICON = 0x5,
  INGAME_LIST_COLUMN_NAME = 0x6,
  INGAME_LIST_COLUMN_SCORE = 0x7,
};

enum e_itemListColumns
{
  ITEM_LIST_COLUMN_BACKGROUND = 0x0,
  ITEM_LIST_COLUMN_NAME = 0x1,
  ITEM_LIST_COLUMN_IMAGE = 0x2,
  ITEM_LIST_COLUMN_COST = 0x3,
  ITEM_LIST_COLUMN_LOCK = 0x4,
  ITEM_LIST_COLUMN_COUNT = 0x5,
  ITEM_LIST_COLUMN_EXTRA_IMAGE = 0x6,
  ITEM_LIST_COLUMN_NEWICON = 0x7,
};

enum e_challengesPerksColumns
{
  PERKS_LIST_COLUMN_NAME = 0x0,
  PERKS_LIST_COLUMN_LOCK = 0x1,
  PERKS_LIST_COLUMN_COUNT = 0x2,
};

enum e_statsMilestonesListColumns
{
  STATS_MILESTONES_COLUMN_MILESTONE_NAME = 0x0,
  STATS_MILESTONES_COLUMN_PROGRESS_BAR = 0x1,
  STATS_MILESTONES_COLUMN_COMPLETED_TEXT = 0x2,
  STATS_MILESTONES_COLUMN_MILESTONE_LOCKED = 0x3,
};

enum e_playlistsColumns
{
  FEEDER_NEW_PLAYLISTS_COLUMN_BACKGROUND = 0x0,
  FEEDER_NEW_PLAYLISTS_COLUMN_NAME = 0x1,
  FEEDER_NEW_PLAYLISTS_COLUMN_A_BUTTON = 0x2,
  FEEDER_NEW_PLAYLISTS_COLUMN_BUY = 0x3,
};

enum $1D6B27BF469E3824A9DC6E79D73829FA
{
  MZ_ZIP_MAX_IO_BUF_SIZE = 0x10000,
  MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE = 0x104,
  MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE = 0x100,
};

enum $C369A7618466D1FC04A354825F62348D
{
  TINFL_MAX_HUFF_TABLES = 0x3,
  TINFL_MAX_HUFF_SYMBOLS_0 = 0x120,
  TINFL_MAX_HUFF_SYMBOLS_1 = 0x20,
  TINFL_MAX_HUFF_SYMBOLS_2 = 0x13,
  TINFL_FAST_LOOKUP_BITS = 0xA,
  TINFL_FAST_LOOKUP_SIZE = 0x400,
};

enum $7F80900445EEBFC4FED99BF182AC9229
{
  TDEFL_MAX_HUFF_TABLES = 0x3,
  TDEFL_MAX_HUFF_SYMBOLS_0 = 0x120,
  TDEFL_MAX_HUFF_SYMBOLS_1 = 0x20,
  TDEFL_MAX_HUFF_SYMBOLS_2 = 0x13,
  TDEFL_LZ_DICT_SIZE = 0x8000,
  TDEFL_LZ_DICT_SIZE_MASK = 0x7FFF,
  TDEFL_MIN_MATCH_LEN = 0x3,
  TDEFL_MAX_MATCH_LEN = 0x102,
};

enum $86626CF22C853F79432D69E65E193567
{
  TDEFL_LZ_CODE_BUF_SIZE = 0x10000,
  TDEFL_OUT_BUF_SIZE = 0x14CCC,
  TDEFL_MAX_HUFF_SYMBOLS = 0x120,
  TDEFL_LZ_HASH_BITS = 0xF,
  TDEFL_LEVEL1_HASH_SIZE_MASK = 0xFFF,
  TDEFL_LZ_HASH_SHIFT = 0x5,
  TDEFL_LZ_HASH_SIZE = 0x8000,
};

enum scaleMode_t
{
  EMBLEM_FIXED_SCALE = 0x0,
  EMBLEM_FREE_SCALE = 0x1,
};

enum emblemIdentity_e
{
  EMBLEM_IDENTITY_INVALID = 0x0,
  EMBLEM_IDENTITY_SELF = 0x1,
  EMBLEM_IDENTITY_LEAGUE = 0x2,
  EMBLEM_IDENTITY_CLAN = 0x3,
  EMBLEM_NUM_IDENTITIES = 0x4,
};

enum codtvType_e
{
  CODTV_TYPE_INVALID = 0x1,
  CODTV_TYPE_FOLDER = 0x2,
  CODTV_TYPE_DWFOLDER = 0x3,
  CODTV_TYPE_VIDEOFOLDER = 0x4,
  CODTV_TYPE_CUSTOMBUTTON = 0x5,
  CODTV_TYPE_COUNT = 0x6,
};

enum fileshareDataFilter_e
{
  CODTV_DATAFILTER_INVALID = 0x0,
  CODTV_DATAFILTER_BOOKMARKS = 0x1,
  CODTV_DATAFILTER_VICTORIES = 0x2,
  CODTV_DATAFILTER_HIGHEST_RATED = 0x3,
  CODTV_DATAFILTER_TRENDING = 0x4,
  CODTV_DATAFILTER_INGAMESTORE = 0x5,
};

enum codtvImageCategory_e
{
  CODTV_IMAGE_TYPE_INVALID = 0xFFFFFFFF,
  CODTV_IMAGE_TYPE_MATERIAL = 0x0,
};

enum EXT_INSERTTYPE
{
  EXT_INSERTTYPE_BEFORE = 0x0,
  EXT_INSERTTYPE_AFTER = 0x1,
};

enum FLAC__StreamDecoderState
{
  FLAC__STREAM_DECODER_SEARCH_FOR_METADATA = 0x0,
  FLAC__STREAM_DECODER_READ_METADATA = 0x1,
  FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC = 0x2,
  FLAC__STREAM_DECODER_READ_FRAME = 0x3,
  FLAC__STREAM_DECODER_END_OF_STREAM = 0x4,
  FLAC__STREAM_DECODER_OGG_ERROR = 0x5,
  FLAC__STREAM_DECODER_SEEK_ERROR = 0x6,
  FLAC__STREAM_DECODER_ABORTED = 0x7,
  FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR = 0x8,
  FLAC__STREAM_DECODER_UNINITIALIZED = 0x9,
};

enum FLAC__StreamDecoderReadStatus
{
  FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0x0,
  FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 0x1,
  FLAC__STREAM_DECODER_READ_STATUS_ABORT = 0x2,
};

enum FLAC__StreamDecoderWriteStatus
{
  FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0x0,
  FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 0x1,
};

enum FLAC__StreamMetadata_Picture_Type
{
  FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER = 0x0,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD = 0x1,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON = 0x2,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER = 0x3,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER = 0x4,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE = 0x5,
  FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA = 0x6,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST = 0x7,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST = 0x8,
  FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR = 0x9,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND = 0xA,
  FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER = 0xB,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST = 0xC,
  FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION = 0xD,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING = 0xE,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE = 0xF,
  FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE = 0x10,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FISH = 0x11,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION = 0x12,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE = 0x13,
  FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE = 0x14,
  FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED = 0x15,
};

enum FLAC__ChannelAssignment
{
  FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT = 0x0,
  FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE = 0x1,
  FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE = 0x2,
  FLAC__CHANNEL_ASSIGNMENT_MID_SIDE = 0x3,
};

enum FLAC__FrameNumberType
{
  FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER = 0x0,
  FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER = 0x1,
};

enum FLAC__StreamDecoderLengthStatus
{
  FLAC__STREAM_DECODER_LENGTH_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED = 0x2,
};

enum FLAC__EntropyCodingMethodType
{
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE = 0x0,
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 = 0x1,
};

enum FLAC__StreamDecoderTellStatus
{
  FLAC__STREAM_DECODER_TELL_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_TELL_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED = 0x2,
};

enum FLAC__SubframeType
{
  FLAC__SUBFRAME_TYPE_CONSTANT = 0x0,
  FLAC__SUBFRAME_TYPE_VERBATIM = 0x1,
  FLAC__SUBFRAME_TYPE_FIXED = 0x2,
  FLAC__SUBFRAME_TYPE_LPC = 0x3,
};

enum FLAC__MetadataType
{
  FLAC__METADATA_TYPE_STREAMINFO = 0x0,
  FLAC__METADATA_TYPE_PADDING = 0x1,
  FLAC__METADATA_TYPE_APPLICATION = 0x2,
  FLAC__METADATA_TYPE_SEEKTABLE = 0x3,
  FLAC__METADATA_TYPE_VORBIS_COMMENT = 0x4,
  FLAC__METADATA_TYPE_CUESHEET = 0x5,
  FLAC__METADATA_TYPE_PICTURE = 0x6,
  FLAC__METADATA_TYPE_UNDEFINED = 0x7,
};

enum FLAC__StreamDecoderInitStatus
{
  FLAC__STREAM_DECODER_INIT_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 0x1,
  FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS = 0x2,
  FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 0x3,
  FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 0x4,
  FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 0x5,
};

enum FLAC__StreamDecoderErrorStatus
{
  FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC = 0x0,
  FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER = 0x1,
  FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH = 0x2,
  FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM = 0x3,
};

enum FLAC__StreamDecoderSeekStatus
{
  FLAC__STREAM_DECODER_SEEK_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_SEEK_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED = 0x2,
};

enum serverAction_t
{
  ACTION_NOTHING = 0x0,
  ACTION_RECORDEVENT = 0x1,
  ACTION_KICK = 0x2,
  ACTION_KICKANDRECORDEVENT = 0x3,
};

enum svscmd_type
{
  SV_CMD_CAN_IGNORE = 0x0,
  SV_CMD_RELIABLE = 0x1,
};

enum ePreviousFrame
{
  PREVIOUS_FRAME_DELTA = 0x0,
  PREVIOUS_FRAME_CLIENT_NOT_ACTIVE = 0x1,
  PREVIOUS_FRAME_NO_DELTA_MESSAGE = 0x2,
  PREVIOUS_FRAME_OUT_OF_DATE_PACKET = 0x3,
  PREVIOUS_FRAME_OUT_OF_ENTITIES = 0x4,
};

enum MigrationState
{
  MSTATE_INACTIVE = 0x0,
  MSTATE_STARTING = 0x1,
  MSTATE_HEADER = 0x2,
  MSTATE_SENDING = 0x3,
  MSTATE_FINALIZING = 0x4,
};

enum MigrationClientState
{
  CSTATE_INACTIVE = 0x0,
  CSTATE_WAITFORRATING = 0x1,
  CSTATE_MIGRATING = 0x2,
};

enum SaveType
{
  SAVE_TYPE_INTERNAL = 0x0,
  SAVE_TYPE_AUTOSAVE = 0x1,
  SAVE_TYPE_CONSOLE = 0x2,
};

enum SaveHandleType
{
  SAVE_MIGRATION_HANDLE = 0x0,
};

enum $05CD523E5DAF4A07C05CAFB4C6EEDCC0
{
  QUERY_INFO_SYN = 0x0,
  QUERY_STATUS_SYN = 0x1,
  QUERY_SCORE_SYN = 0x2,
  QUERY_PING_SYN = 0x3,
  QUERY_PERF_SYN = 0x4,
  QUERY_CLIENTUIDS_SYN = 0x5,
  MAX_QUERY_CMDS = 0x6,
  QUERY_INFO_ACK = 0x64,
  QUERY_STATUS_ACK = 0x65,
  QUERY_SCORE_ACK = 0x66,
  QUERY_PING_ACK = 0x67,
  QUERY_PERF_ACK = 0x68,
  QUERY_CLIENTUIDS_ACK = 0x69,
  MAX_QUERY_ACKS = 0x6A,
};

enum server_hardware_types
{
  SERVERHARDWARE_UNKNOWN = 0x0,
  SERVERHARDWARE_LINUXDEDICATED = 0x1,
  SERVERHARDWARE_WINDEDICATED = 0x2,
  SERVERHARDWARE_MACDEDICATED = 0x3,
  SERVERHARDWARE_XENONDEDICATED = 0x4,
  SERVERHARDWARE_PS3DEDICATED = 0x5,
  SERVERHARDWARE_WIIUDEDICATED = 0x6,
  SERVERHARDWARE_WINLISTEN = 0x7,
  SERVERHARDWARE_MACLISTEN = 0x8,
  SERVERHARDWARE_XENONLISTEN = 0x9,
  SERVERHARDWARE_PS3LISTEN = 0xA,
  SERVERHARDWARE_WIIULISTEN = 0xB,
  MAX_SERVERHARDWARE = 0xC,
};

enum ComSaveLumpBehavior
{
  COM_SAVE_LUMP_AND_CLOSE = 0x0,
  COM_SAVE_LUMP_AND_REOPEN = 0x1,
};

enum $4D3AD445C93D33C17617DE0B08BB4C2A
{
  PA_UNVALIDATED = 0x0,
  PA_VALID = 0x1,
  PA_INVALID = 0x2,
};

enum FF_DIR
{
  FFD_DEFAULT = 0x0,
};

enum eExtraCamResolution
{
  EXTRACAM_RES_OFF = 0x0,
  EXTRACAM_RES_NORMAL = 0x1,
  EXTRACAM_RES_HIGH = 0x2,
  EXTRACAM_RES_DEFAULT = 0x1,
};

enum $C0188971FD43DEB8E91731A66ECD7D9E
{
  BACKEND_EVENT_WORKER_CMD = 0x0,
  BACKEND_EVENT_GENERIC = 0x1,
  BACKEND_EVENT_COUNT = 0x2,
};

enum EntityFieldInfoFlags
{
  ENTITY_FIELD_INFO_NONE = 0x0,
  ENTITY_FIELD_INFO_IS_LINKED = 0x1,
  ENTITY_FIELD_INFO_POS_USES_TR_DELTA = 0x2,
  ENTITY_FIELD_INFO_POS_USES_TR_DURATION = 0x4,
  ENTITY_FIELD_INFO_APOS_USES_TR_DELTA = 0x8,
  ENTITY_FIELD_INFO_APOS_USES_TR_DURATION = 0x10,
};

enum $45D39F2679F1E5F1D17F3EF9BB857046
{
  MAX_FILE_IDS = 0x40,
};

enum CommandProcessorType
{
  COMMAND_SERVER = 0x0,
  COMMAND_CLIENT = 0x1,
  COMMAND_BOTH = 0x2,
};

enum $CF3BBA7A6E8F0E98C9CF75147894CB40
{
  COMPRESS_NONE = 0x0,
  COMPRESS_HUFFMAN = 0x1,
  COMPRESS_ZLIB = 0x2,
};

enum $DE1ADEAA3B3B39EA25F6918514CA34B4
{
  UT_STATIC = 0x0,
  UT_VSTATIC = 0x1,
  UT_MALLOC = 0x2,
  UT_HUNK = 0x3,
  UT_VOID = 0x4,
  UT_IMAGE = 0x5,
  UT_TEMP = 0x6,
  UT_PHYSICAL = 0x7,
  UT_USERHUNK = 0x8,
  UT_COUNT = 0x9,
};

enum FS_SERVER_COMPARE_RESULT
{
  FILES_MATCH = 0x0,
  NEED_DOWNLOAD = 0x1,
  NOT_DOWNLOADABLE = 0x2,
};

enum mtxItemsCategory_e
{
  MTX_CATEGORY_STORAGEPACK = 0x0,
  MTX_CATEGORY_WEAPONPACK = 0x1,
  MTX_CATEGORY_CALLINGCARDPACK = 0x2,
  MTX_CATEGORY_INVALID = 0x3,
};

enum $195A05F3A73F3ECFBD81CF60D618253B
{
  MTX_DISABLED = 0x0,
  MTX_USEABLE = 0x1,
  MTX_ENABLED = 0x2,
};

enum $51D84A6E291A784BDEF13CF4F462EA58
{
  TDEFL_MAX_SUPPORTED_HUFF_CODESIZE = 0x20,
};

enum war_flag_t
{
  WAR_FLAG_A = 0x0,
  WAR_FLAG_B = 0x1,
  WAR_FLAG_C = 0x2,
  WAR_FLAG_D = 0x3,
  WAR_FLAG_E = 0x4,
  WAR_FLAG_COUNT = 0x5,
};

enum $7AA7D493A2AC581F4362EBE65A949FA3
{
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG = 0x6054B50,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIG = 0x2014B50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIG = 0x4034B50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIZE = 0x1E,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIZE = 0x2E,
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE = 0x16,
  MZ_ZIP_CDH_SIG_OFS = 0x0,
  MZ_ZIP_CDH_VERSION_MADE_BY_OFS = 0x4,
  MZ_ZIP_CDH_VERSION_NEEDED_OFS = 0x6,
  MZ_ZIP_CDH_BIT_FLAG_OFS = 0x8,
  MZ_ZIP_CDH_METHOD_OFS = 0xA,
  MZ_ZIP_CDH_FILE_TIME_OFS = 0xC,
  MZ_ZIP_CDH_FILE_DATE_OFS = 0xE,
  MZ_ZIP_CDH_CRC32_OFS = 0x10,
  MZ_ZIP_CDH_COMPRESSED_SIZE_OFS = 0x14,
  MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS = 0x18,
  MZ_ZIP_CDH_FILENAME_LEN_OFS = 0x1C,
  MZ_ZIP_CDH_EXTRA_LEN_OFS = 0x1E,
  MZ_ZIP_CDH_COMMENT_LEN_OFS = 0x20,
  MZ_ZIP_CDH_DISK_START_OFS = 0x22,
  MZ_ZIP_CDH_INTERNAL_ATTR_OFS = 0x24,
  MZ_ZIP_CDH_EXTERNAL_ATTR_OFS = 0x26,
  MZ_ZIP_CDH_LOCAL_HEADER_OFS = 0x2A,
  MZ_ZIP_LDH_SIG_OFS = 0x0,
  MZ_ZIP_LDH_VERSION_NEEDED_OFS = 0x4,
  MZ_ZIP_LDH_BIT_FLAG_OFS = 0x6,
  MZ_ZIP_LDH_METHOD_OFS = 0x8,
  MZ_ZIP_LDH_FILE_TIME_OFS = 0xA,
  MZ_ZIP_LDH_FILE_DATE_OFS = 0xC,
  MZ_ZIP_LDH_CRC32_OFS = 0xE,
  MZ_ZIP_LDH_COMPRESSED_SIZE_OFS = 0x12,
  MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS = 0x16,
  MZ_ZIP_LDH_FILENAME_LEN_OFS = 0x1A,
  MZ_ZIP_LDH_EXTRA_LEN_OFS = 0x1C,
  MZ_ZIP_ECDH_SIG_OFS = 0x0,
  MZ_ZIP_ECDH_NUM_THIS_DISK_OFS = 0x4,
  MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS = 0x6,
  MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 0x8,
  MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS = 0xA,
  MZ_ZIP_ECDH_CDIR_SIZE_OFS = 0xC,
  MZ_ZIP_ECDH_CDIR_OFS_OFS = 0x10,
  MZ_ZIP_ECDH_COMMENT_SIZE_OFS = 0x14,
};

enum $29872C500AC41FBF768524D118F1BE26
{
  MZ_DEFAULT_STRATEGY = 0x0,
  MZ_FILTERED = 0x1,
  MZ_HUFFMAN_ONLY = 0x2,
  MZ_RLE = 0x3,
  MZ_FIXED = 0x4,
};

enum $BE3DA9C3FD24C99CF3BF62779710DBF0
{
  MZ_NO_FLUSH = 0x0,
  MZ_PARTIAL_FLUSH = 0x1,
  MZ_SYNC_FLUSH = 0x2,
  MZ_FULL_FLUSH = 0x3,
  MZ_FINISH = 0x4,
  MZ_BLOCK = 0x5,
};

enum $A7AB30AB7F4C5B6B944AD001433C8DD5
{
  MZ_OK = 0x0,
  MZ_STREAM_END = 0x1,
  MZ_NEED_DICT = 0x2,
  MZ_ERRNO = 0xFFFFFFFF,
  MZ_STREAM_ERROR = 0xFFFFFFFE,
  MZ_DATA_ERROR = 0xFFFFFFFD,
  MZ_MEM_ERROR = 0xFFFFFFFC,
  MZ_BUF_ERROR = 0xFFFFFFFB,
  MZ_VERSION_ERROR = 0xFFFFFFFA,
  MZ_PARAM_ERROR = 0xFFFFD8F0,
};

enum $E68AF11B4C7C5B58D7DAD39B70E3F5FA
{
  MZ_NO_COMPRESSION = 0x0,
  MZ_BEST_SPEED = 0x1,
  MZ_BEST_COMPRESSION = 0x9,
  MZ_UBER_COMPRESSION = 0xA,
  MZ_DEFAULT_LEVEL = 0x6,
  MZ_DEFAULT_COMPRESSION = 0xFFFFFFFF,
};

enum mz_zip_mode
{
  MZ_ZIP_MODE_INVALID = 0x0,
  MZ_ZIP_MODE_READING = 0x1,
  MZ_ZIP_MODE_WRITING = 0x2,
  MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED = 0x3,
};

enum mz_zip_flags
{
  MZ_ZIP_FLAG_CASE_SENSITIVE = 0x100,
  MZ_ZIP_FLAG_IGNORE_PATH = 0x200,
  MZ_ZIP_FLAG_COMPRESSED_DATA = 0x400,
  MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY = 0x800,
};

enum $0F8900C198088457D16519DA9A9DE49D
{
  SLOW_MOTION_LINEAR = 0x0,
};

enum $9DEF72F1BA9A843D214304C3C8939431
{
  TINFL_FLAG_PARSE_ZLIB_HEADER = 0x1,
  TINFL_FLAG_HAS_MORE_INPUT = 0x2,
  TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 0x4,
  TINFL_FLAG_COMPUTE_ADLER32 = 0x8,
};

enum tinfl_status
{
  TINFL_STATUS_BAD_PARAM = 0xFFFFFFFD,
  TINFL_STATUS_ADLER32_MISMATCH = 0xFFFFFFFE,
  TINFL_STATUS_FAILED = 0xFFFFFFFF,
  TINFL_STATUS_DONE = 0x0,
  TINFL_STATUS_NEEDS_MORE_INPUT = 0x1,
  TINFL_STATUS_HAS_MORE_OUTPUT = 0x2,
};

enum $468C91C1B0211C5CD35C6EAAD839B744
{
  TDEFL_HUFFMAN_ONLY = 0x0,
  TDEFL_DEFAULT_MAX_PROBES = 0x80,
  TDEFL_MAX_PROBES_MASK = 0xFFF,
};

enum $5BFA36B56FFA2C3056245F56B6640459
{
  TDEFL_WRITE_ZLIB_HEADER = 0x1000,
  TDEFL_COMPUTE_ADLER32 = 0x2000,
  TDEFL_GREEDY_PARSING_FLAG = 0x4000,
  TDEFL_NONDETERMINISTIC_PARSING_FLAG = 0x8000,
  TDEFL_RLE_MATCHES = 0x10000,
  TDEFL_FILTER_MATCHES = 0x20000,
  TDEFL_FORCE_ALL_STATIC_BLOCKS = 0x40000,
  TDEFL_FORCE_ALL_RAW_BLOCKS = 0x80000,
};

enum tdefl_status
{
  TDEFL_STATUS_BAD_PARAM = 0xFFFFFFFE,
  TDEFL_STATUS_PUT_BUF_FAILED = 0xFFFFFFFF,
  TDEFL_STATUS_OKAY = 0x0,
  TDEFL_STATUS_DONE = 0x1,
};

enum tdefl_flush
{
  TDEFL_NO_FLUSH = 0x0,
  TDEFL_SYNC_FLUSH = 0x2,
  TDEFL_FULL_FLUSH = 0x3,
  TDEFL_FINISH = 0x4,
};

enum CIN_CALLBACK_TYPE
{
  CINEMATIC_CALLBACK_INVALID = 0x0,
  CINEMATIC_CALLBACK_CSCR = 0x1,
  CINEMATIC_CALLBACK_IMMEDIATE = 0x2,
  CINEMATIC_CALLBACK_TYPE_COUNT = 0x3,
};

enum MapProfileTrackedValue
{
  MAP_PROFILE_FILE_OPEN = 0x0,
  MAP_PROFILE_FILE_SEEK = 0x1,
  MAP_PROFILE_FILE_READ = 0x2,
  MAP_PROFILE_VALUE_MAX = 0x3,
};

enum SphereEdgeTraceResult
{
  SPHERE_HITS_EDGE = 0x0,
  SPHERE_MISSES_EDGE = 0x1,
  SPHERE_MAY_HIT_V0 = 0x2,
  SPHERE_MAY_HIT_V1 = 0x3,
};

enum youtubeStatus_e
{
  YT_ACCOUNT_NOT_CHECKED = 0x0,
  YT_ACCOUNT_CHECKING = 0x1,
  YT_ACCOUNT_CHECKED = 0x2,
  YT_ACCOUNT_GETTING_TOKEN = 0x3,
  YT_ACCOUNT_TOKEN_RECEIVED = 0x4,
  YT_WAITING_FOR_AUTH = 0x5,
  YT_ACCOUNT_NOT_READY = 0x6,
  YT_ACCOUNT_READY = 0x7,
  YT_ACCOUNT_AUTH_COOLOFF = 0x8,
};

enum dwVoteCategory_e
{
  DW_VOTE_CATEGORY_INVALID = 0xFFFFFFFF,
  DW_VOTE_CATEGORY_FILM = 0x0,
  DW_VOTE_CATEGORY_CLIP = 0x1,
  DW_VOTE_CATEGORY_SCREENSHOT = 0x2,
  DW_VOTE_CATEGORY_CUSTOM_GAME = 0x3,
  DW_VOTE_CATEGORY_VIDEO = 0x4,
  DW_VOTE_CATEGORY_EMBLEM = 0x5,
  DW_VOTE_NUM_CATEGORIES = 0x6,
};

enum dwVote_e
{
  DW_VOTE_INVALID = 0xFFFFFFFF,
  DW_VOTE_DISLIKE = 0x0,
  DW_VOTE_LIKE = 0xA,
};

enum twitchStatus_e
{
  TWITCH_ACCOUNT_NOT_CHECKED = 0x0,
  TWITCH_ACCOUNT_CHECKING = 0x1,
  TWITCH_ACCOUNT_CHECKED = 0x2,
  TWITCH_ACCOUNT_GETTING_INFO = 0x3,
  TWITCH_ACCOUNT_INFO_RECEIVED = 0x4,
  TWITCH_ACCOUNT_NOT_READY = 0x5,
  TWITCH_ACCOUNT_READY = 0x6,
};

enum streamBuffErr_e
{
  LIVE_STREAMBUFF_EOF = 0xFFFFFFFF,
  LIVE_STREAMBUFF_FATAL = 0xFFFFFFFE,
  LIVE_STREAMBUFF_OVERFLOW = 0xFFFFFFFD,
  LIVE_STREAMBUFF_NO_DATA = 0xFFFFFFFC,
};

enum hostDelegationState_t
{
  HOST_NOT_DELEGATED = 0x0,
  HOST_DELEGATING = 0x1,
  HOST_DELEGATED = 0x2,
  CLIENT_DELEGATE_INACTIVE = 0x3,
  CLIENT_CREATING_SESSION = 0x4,
  CLIENT_ACTIVE_DELEGATE = 0x5,
  CLIENT_ABORT = 0x6,
  HOST_DELEGATE_NUM_STATES = 0x7,
};

enum $346013B545AB0D05642FEF4930C215B0
{
  DELEGATE_CREATE_SESSION = 0x0,
  DELEGATE_NUM_MSG_TYPES = 0x1,
};

enum LeagueOutcome
{
  LEAGUE_OUTCOME_BASE = 0x0,
  LEAGUE_OUTCOME_WINNER = 0x1,
  LEAGUE_OUTCOME_LOSER = 0x2,
  LEAGUE_OUTCOME_PRE_LOSER = 0x3,
  LEAGUE_OUTCOME_RESET = 0x4,
  LEAGUE_OUTCOME_DRAW = 0x5,
};

enum StatsState
{
  STATS_STATE_ERROR = 0x0,
  STATS_STATE_READY_TO_FETCH = 0x1,
  STATS_STATE_FETCHING_SUBDIVISION = 0x2,
  STATS_STATE_FETCHED_SUBDIVISION = 0x3,
  STATS_STATE_FETCHING_STATS = 0x4,
  STATS_STATE_FETCHED = 0x5,
  STATS_STATE_HAVE_OUTCOMES = 0x6,
  STATS_STATE_DIRTY = 0x7,
  STATS_STATE_DIRTY_UPLOADING_STATS = 0x8,
  STATS_STATE_DIRTY_NEED_SUBDIVISION = 0x9,
  STATS_STATE_DIRTY_REFETCHING_SUBDIVISION = 0xA,
  NUM_STATS_STATES = 0xB,
};

enum NameChangeType
{
  NAMECHANGE_SOLO_AUTO = 0x0,
  NAMECHANGE_TEAM_PARTY = 0x1,
  NAMECHANGE_TEAM_UI = 0x2,
};

enum LbFilter
{
  LB_FILTER_NONE = 0x0,
  LB_FILTER_FRIENDS = 0x1,
  LB_FILTER_LOBBY_MEMBERS = 0x2,
  LB_FILTER_ELITE = 0x3,
  LB_FILTER_COUNT = 0x4,
};

enum $4CD1F6DA37D73859BB2B28FD2B5A3E65
{
  REQUEST_MULTI_LB_READ_COMBAT_RECORD_DATA = 0x1,
  REQUEST_MULTI_LB_READ_MINI_LBS = 0x2,
};

enum typeEnumLB
{
  LB_SERVER = 0x0,
  LB_OWNERSHIP_PLAYED = 0x1,
  LB_OWNERSHIP_OWNED = 0x2,
  LB_OWNERSHIP_DENIED = 0x3,
};

enum doubleXPColumns_t
{
  GROUPSTABLE_INDEX = 0x0,
  GROUPSTABLE_NAME = 0x1,
  GROUPSTABLE_STATPATH = 0x2,
  GROUPSTABLE_KEYARCHIVE = 0x3,
  GROUPSTABLE_CONTENTMASK = 0x4,
  GROUPSTABLE_COUNT = 0x5,
};

enum matchmakingHopperState_t
{
  HOPPER_PARKED = 0x0,
  HOPPER_UNPARKED = 0x1,
  HOPPER_NUM_STATES = 0x2,
};

enum dediConnectionState_e
{
  DEDI_STATUS_ERROR = 0x0,
  DEDI_STATUS_NOT_CONNECTED = 0x1,
  DEDI_STATUS_AUTHORIZING = 0x2,
  DEDI_STATUS_CONNECTING = 0x3,
  DEDI_STATUS_CONNECTED = 0x4,
  DEDI_STATUS_IN_BACKOFF = 0x5,
};

enum $15F727204CFF2A120845C1ABCA9EFF6F
{
  PLAY_MODE_FAST = 0x0,
  PLAY_MODE_SLOW = 0x1,
  PLAY_MODE_NORMAL = 0x2,
};

enum bandwidth_enum
{
  BANDWIDTH_NARROW = 0x0,
  BANDWIDTH_WIDE = 0x1,
  BANDWIDTH_ULTRAWIDE = 0x2,
  NUM_BANDWIDTH_MODES = 0x3,
};

enum $F3BCC0001EA0B8E51E4CC6AFFC3D286A
{
  ACTIVE_STATE_INACTIVE = 0x0,
  ACTIVE_STATE_ACTIVE = 0x1,
  ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
};

enum $63912D04CDB34ABB7ABE96E4FA235BF3
{
  TURRET_REQUIRES_AI = 0x1,
  TURRET_AUTO = 0x2,
  TURRET_FIRING = 0x4,
  TURRET_HAS_MISS_TARGET = 0x8,
  TURRET_TAKEN_PAIN = 0x10,
  TURRET_ERROR_INITED = 0x20,
  TURRET_HAS_TARGET = 0x40,
  TURRET_BAD_TARGET = 0x80,
  TURRET_FIRST_PITCH_CAP = 0x100,
  TURRET_PITCH_CAP = 0x200,
  TURRET_PITCH_MIN = 0x400,
  TURRET_INIT_VIEW = 0x800,
  TURRET_USABLE = 0x1000,
  TURRET_IGNOREGOAL = 0x2000,
  TURRET_FIRING_DISABLED = 0x4000,
  TURRET_HAS_TARGET_ORIGIN = 0x8000,
  TURRET_HAS_TARGET_OFFSET = 0x10000,
  TURRET_TARGET_SENTIENT = 0x20000,
  TURRET_TARGET_KILLSTREAK = 0x40000,
  TURRET_SCANNING = 0x80000,
  TURRET_SCANNING_TOGGLE = 0x100000,
  TURRET_OFFLINE = 0x200000,
  TURRET_TARGET_SENTRY = 0x400000,
};

enum $86225B139086A1126E86282EBC5B63FF
{
  TARGETFLAG_ATTACKPROFILETOP = 0x1,
  TARGETFLAG_JAVELINONLY = 0x2,
  TARGETFLAG_TURRETS_NO_AQUIRE = 0x4,
};

enum $DB39EA8E11238C04807CA6FF527B389E
{
  TS_IDLE = 0x0,
  TS_FIRING_HEAD = 0x1,
  TS_FIRING_FEET = 0x2,
};

enum profileLocation_e
{
  PROFILE_LOCATION_INVALID = 0xFFFFFFFF,
  PROFILE_LOCATION_COMMON = 0x0,
  PROFILE_LOCATION_EXE = 0x1,
  PROFILE_LOCATION_COUNT = 0x2,
};

enum shoutcaster_showperks
{
  SHOUTCASTER_SHOW_PERKS_OFF = 0x0,
  SHOUTCASTER_SHOW_PERKS_ON = 0x1,
  SHOUTCASTER_SHOW_PERKS_ALWAYS = 0x2,
  SHOUTCASTER_SHOW_PERKS_COUNT = 0x3,
};

enum start_game
{
  START_GAME_CAMPAIGN = 0x0,
  START_GAME_MULTIPLAYER = 0x1,
  START_GAME_ZOMBIES = 0x2,
  START_GAME_TYPE_COUNT = 0x3,
};

enum audio_preset
{
  AUDIO_PRESET_TREYARCH_MIX = 0x0,
  AUDIO_PRESET_BASS_BOOST = 0x1,
  AUDIO_PRESET_HIGH_BOOST = 0x2,
  AUDIO_PRESET_SUPERCRUNCH = 0x3,
  AUDIO_PRESET_HEADPHONES = 0x4,
  AUDIO_PRESET_COUNT = 0x5,
};

enum speaker_setup
{
  SPEAKER_SETUP_STEREO = 0x0,
  SPEAKER_SETUP_5_1 = 0x1,
  SPEAKER_SETUP_7_1 = 0x2,
  SPEAKER_SETUP_COUNT = 0x3,
};

enum DAMAGE_FLAGS
{
  DAMAGE_NOFLAG = 0x0,
  DAMAGE_RADIUS = 0x1,
  DAMAGE_ARMOR_PIERCING = 0x2,
  DAMAGE_NO_KNOCKBACK = 0x4,
  DAMAGE_PENETRATION = 0x8,
  DAMAGE_DESTRUCTIBLE_ENTITY = 0x10,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT = 0x20,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT_HUGE = 0x40,
  DAMAGE_SHIELD_EXPLOSIVE_SPLASH = 0x80,
};

enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0x0,
  VEH_MANUAL_ON = 0x1,
  VEH_MANUAL_TRANS = 0x2,
};

enum eInfluencerType
{
  INFLUENCER_TYPE_NORMAL = 0x0,
  INFLUENCER_TYPE_PLAYER = 0x1,
  INFLUENCER_TYPE_WEAPON = 0x2,
  INFLUENCER_TYPE_DOG = 0x3,
  INFLUENCER_TYPE_VEHICLE = 0x4,
  INFLUENCER_TYPE_SQUAD = 0x5,
  INFLUENCER_TYPE_GAME_MODE = 0x6,
  INFLUENCER_TYPE_ENEMY_SPAWNED = 0x7,
  INFLUENCER_TYPE_UNUSED = 0x8,
  MAX_INFLUENCER_TYPE = 0x9,
};

enum eInfluencerShape
{
  INFLUENCER_SHAPE_SPHERE = 0x0,
  INFLUENCER_SHAPE_CYLINDER = 0x1,
  INFLUENCER_SHAPE_BOX = 0x2,
  MAX_INFLUENCER_SHAPE = 0x3,
};

enum eInfluencerScoreCurve
{
  INFLUENCER_SC_CONSTANT = 0x0,
  INFLUENCER_SC_LINEAR = 0x1,
  INFLUENCER_SC_STEEP = 0x2,
  INFLUENCER_SC_INVERSE_LINEAR = 0x3,
  INFLUENCER_SC_NEGATIVE_TO_POSITIVE = 0x4,
  MAX_INFLUENCER_SCORE_CURVE = 0x5,
};

enum eSpawnSystemDebugLoadingMode
{
  SSDLM_BEGIN = 0x0,
  SSDLM_PRESETS = 0x1,
  SSDLM_INFLUENCERS = 0x2,
  SSDLM_SPAWNPOINTS = 0x3,
  SSDLM_CLIENTS = 0x4,
  SSDLM_FINALIZING = 0x5,
  SSDLM_COUNT = 0x6,
};

enum XAnimFaceEvents
{
  XANIM_FACE_CASUAL = 0x0,
  XANIM_FACE_ALERT = 0x1,
  XANIM_FACE_CQB = 0x2,
  XANIM_FACE_RUNNING = 0x3,
  XANIM_FACE_SHOOT = 0x4,
  XANIM_FACE_SHOOT_BURST = 0x5,
  XANIM_FACE_MELEE = 0x6,
  XANIM_FACE_REACT = 0x7,
  XANIM_FACE_TALK = 0x8,
  XANIM_FACE_TALK_LONG = 0x9,
  XANIM_FACE_PAIN = 0xA,
  XANIM_FACE_DEATH = 0xB,
  XANIM_FACE_NUM_EVENTS = 0xC,
};

enum $F90C4BB1092B48528BFB76505F931A55
{
  LF_NONE = 0x0,
  LF_MAP_RESTART = 0x1,
  LF_MAP_CHANGE = 0x2,
  LF_EXITLEVEL = 0x3,
};

enum BloodImpactFxType
{
  BLOOD_IMPACT_NONE = 0x0,
  BLOOD_IMPACT_NORMAL = 0x1,
  BLOOD_IMPACT_HERO = 0x2,
  NUM_BLOOD_IMPACT_TYPES = 0x3,
};

enum $008BFF3D92248210063ED517B56B9450
{
  MF_BOOST_ENABLED = 0x1,
  MF_DETONATION_ENABLED = 0x2,
  MF_MISSILE_BOOSTING = 0x4,
  MF_MISSLE_COASTING = 0x8,
  MF_MISSILE_SCRIPT_DETONATE = 0x10,
};

enum $1F60479D4DF20B9A7C54B7494D802EED
{
  ZBPS_CLOSED = 0x0,
  ZBPS_OPENING = 0x1,
  ZBPS_OPEN = 0x2,
  ZBPS_CLOSING = 0x3,
  ZBPS_TARGETTED_BY_ZOMBIE = 0x4,
};

enum $D041F2F8BB6DBA278DAA7EF0EC8058EE
{
  CF_INT = 0x0,
  CF_FLOAT = 0x1,
};

enum $683B5197685D813A1C35ADC13204382C
{
  TALKFLAG_EVERYONE_HEARS_EVERYONE = 0x1,
  TALKFLAG_DEAD_CHAT_WITH_DEAD = 0x2,
  TALKFLAG_DEAD_CHAT_WITH_TEAM = 0x4,
  TALKFLAG_DEAD_HEAR_TEAM_LIVING = 0x8,
  TALKFLAG_DEAD_HEAR_ALL_LIVING = 0x10,
  TALKFLAG_DEAD_HEAR_KILLER = 0x20,
  TALKFLAG_KILLERS_HEAR_VICTIM = 0x40,
};

enum animScrMode_t
{
  ASM_NORMAL = 0x0,
  ASM_DEATHPLANT = 0x1,
};

enum BlurTime
{
  BLUR_TIME_RELATIVE = 0x0,
  BLUR_TIME_ABSOLUTE = 0x1,
};

enum BlurPriority
{
  BLUR_PRIORITY_NONE = 0x0,
  BLUR_PRIORITY_SCRIPT = 0x1,
  BLUR_PRIORITY_CODE = 0x2,
};

enum PlayerLinkToType
{
  PLAYERLINKTO_NORMAL = 0x0,
  PLAYERLINKTO_DELTA = 0x1,
  PLAYERLINKTO_DELTA_WEAPONVIEWONLY = 0x2,
  PLAYERLINKTOCNT = 0x3,
};

enum ComDevhostCommandAI
{
  COM_DEVHOST_AI_TIMESTAMP = 0x0,
  COM_DEVHOST_AI_ENT_NUM = 0x1,
  COM_DEVHOST_AI_SCRIPT_KEYS = 0x2,
  COM_DEVHOST_AI_SCRIPT_DATA = 0x3,
  COM_DEVHOST_AI_INFO_REQ = 0x4,
};

enum SaveErrorType
{
  SAVE_ERROR_MISSING_DEVICE = 0x0,
  SAVE_ERROR_CORRUPT_SAVE = 0x1,
};

enum saveFieldtype_t
{
  SF_NONE = 0x0,
  SF_STRING = 0x1,
  SF_ENTITY = 0x2,
  SF_ENTHANDLE = 0x3,
  SF_CLIENT = 0x4,
  SF_ACTOR = 0x5,
  SF_SENTIENT = 0x6,
  SF_SENTIENTHANDLE = 0x7,
  SF_VEHICLE = 0x8,
  SF_TURRETINFO = 0x9,
  SF_DESTRUCTIBLE = 0xA,
  SF_THREAD = 0xB,
  SF_ANIMSCRIPT = 0xC,
  SF_PATHNODE = 0xD,
  SF_ANIMTREE = 0xE,
  SF_TYPE_TAG_INFO = 0xF,
  SF_TYPE_SCRIPTED = 0x10,
  SF_ACTOR_INFO = 0x11,
  SF_MODELUSHORT = 0x12,
  SF_MODELINT = 0x13,
  SF_SCRIPTFUNCTION = 0x14,
};

enum entinfoType_t
{
  ENTINFO_NO_INFO = 0x0,
  ENTINFO_ALL_AI_ALL_LINES_ALL_INFO = 0x1,
  ENTINFO_SELECTED_AI_ALL_LINES_ALL_INFO = 0x2,
  ENTINFO_SELECTED_AI_ALL_INFO = 0x3,
  ENTINFO_ALL_AI_ONLY_GOAL_LINE_AND_RADIUS = 0x4,
  ENTINFO_SELECTED_AI_ONLY_GOAL_LINE_AND_RADIUS = 0x5,
  ENTINFO_LEVEL_6 = 0x6,
  ENTINFO_LEVEL_7 = 0x7,
  ENTINFO_LEVEL_8 = 0x8,
  ENTINFO_COUNT = 0x9,
};

enum $9F4C44E132D001D305A087A88ED27133
{
  MEAT_NO_ONE_HAS = 0x0,
  MEAT_ALLIES_HAVE = 0x1,
  MEAT_AXIS_HAS = 0x2,
  MEAT_TEAM_3_HAS = 0x3,
};

enum EntInfoType
{
  ENTINFO_TYPE_ALL = 0x0,
  ENTINFO_TYPE_AI = 0x1,
  ENTINFO_TYPE_VEHICLE = 0x2,
  ENTINFO_TYPE_TRIGGER = 0x3,
  NUM_ENTINFO_TYPE = 0x4,
};

enum $8C2445ED6479335D1F38AFA476AEAA64
{
  HE_FONT_DEFAULT = 0x0,
  HE_FONT_BIGFIXED = 0x1,
  HE_FONT_SMALLFIXED = 0x2,
  HE_FONT_OBJECTIVE = 0x3,
  HE_FONT_BIG = 0x4,
  HE_FONT_SMALL = 0x5,
  HE_FONT_EXTRABIG = 0x6,
  HE_FONT_EXTRASMALL = 0x7,
  HE_FONT_COUNT = 0x8,
};

enum dvar_cmd_t
{
  DVAR_CMD_AIM_LOCKON_PITCH_STRENGTH = 0x0,
  DVAR_CMD_AMMO_COUNTER_HIDE = 0x1,
  DVAR_CMD_CG_OBJECTIVE_TEXT = 0x2,
  DVAR_CMD_COMPASS = 0x3,
  DVAR_CMD_DRAW_TALK = 0x4,
  DVAR_CMD_FOV = 0x5,
  DVAR_CMD_HUD_HARDCORE = 0x6,
  DVAR_CMD_PLAYER_SPRINT_TIME = 0x7,
  DVAR_CMD_MINI_SCOREBOARD_HIDE = 0x8,
  DVAR_CMD_NUM_LIVES = 0x9,
  DVAR_CMD_PLAYER_PUSH_AMOUNT = 0xA,
  DVAR_CMD_PLAYER_STEP_ON_ACTORS = 0xB,
  DVAR_CMD_SCRIPT_MAIN_MENU = 0xC,
  DVAR_CMD_THIRD_PERSON = 0xD,
  DVAR_CMD_THIRD_PERSON_ANGLE = 0xE,
  DVAR_CMD_COUNT = 0xF,
};

enum $976840F0D1F100564EA3285C4ACD42CA
{
  AVOID_FLAG_STUBBORN = 0x1,
  AVOID_FLAG_DISABLED = 0x2,
};

enum FxRandKey
{
  FXRAND_VELOCITY_X = 0x0,
  FXRAND_VELOCITY_Y = 0x1,
  FXRAND_VELOCITY_Z = 0x2,
  FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
  FXRAND_ANGULAR_VELOCITY_YAW = 0x4,
  FXRAND_ANGULAR_VELOCITY_ROLL = 0x5,
  FXRAND_ORIGIN_X = 0x6,
  FXRAND_ORIGIN_Y = 0x7,
  FXRAND_ORIGIN_Z = 0x8,
  FXRAND_OFFSET_YAW = 0x9,
  FXRAND_OFFSET_HEIGHT = 0xA,
  FXRAND_OFFSET_RADIUS = 0xB,
  FXRAND_ANGLES_PITCH = 0xC,
  FXRAND_ANGLES_YAW = 0xD,
  FXRAND_ANGLES_ROLL = 0xE,
  FXRAND_GRAVITY = 0xF,
  FXRAND_REFLECTION_FACTOR = 0x10,
  FXRAND_LIFE_SPAN = 0x11,
  FXRAND_SPAWN_DELAY = 0x12,
  FXRAND_SPAWN_COUNT = 0x13,
  FXRAND_EMIT_DIST = 0x14,
  FXRAND_VISUAL = 0x15,
  FXRAND_TILE_START = 0x16,
  FXRAND_COLOR = 0x17,
  FXRAND_ROTATION = 0x18,
  FXRAND_ROTATION_DELTA = 0x19,
  FXRAND_SIZE_0 = 0x1A,
  FXRAND_SIZE_1 = 0x1B,
  FXRAND_SCALE = 0x1C,
  FXRAND_CLOUD_DENSITY = 0x1D,
  FXRAND_COUNT = 0x1E,
};

enum $D069B535085F437BA41AFCCB66DC3D72
{
  FX_STATUS_REF_COUNT_MASK = 0x3FFF,
  FX_STATUS_IS_STALE_ATTACHED_FX = 0x4000,
  FX_STATUS_BASE_REF_REMOVED = 0x8000,
  FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
  FX_STATUS_OWNED_EFFECTS_SHIFT = 0x11,
  FX_STATUS_OWNED_EFFECTS_MASK = 0x7FE0000,
  FX_STATUS_IS_LOCKED = 0x20000000,
  FX_STATUS_IS_LOCKED_MASK = 0x60000000,
};

enum $8340209549BE697D1F033EFBE5B42EDF
{
  FX_ELEM_CLASS_SPRITE = 0x0,
  FX_ELEM_CLASS_NONSPRITE = 0x1,
  FX_ELEM_CLASS_CLOUD = 0x2,
  FX_ELEM_CLASS_COUNT = 0x3,
};

enum FxBoltType
{
  FX_BOLT_TYPE_NONE = 0x0,
  FX_BOLT_TYPE_BOLTED = 0x1,
  FX_BOLT_TYPE_DYNENT = 0x2,
  FX_BOLT_TYPE_MARKENT = 0x3,
};

enum $9CCA3FD9F0DB4D082B951978CDE4E62D
{
  FX_STATUS2_NO_RESTART_ON_REWIND = 0x1,
  FX_STATUS2_OFFSCREEN_SPAWN = 0x4,
  FX_STATUS2_OFFSCREEN_RETRIGGER = 0x8,
};

enum $9F22A59DBE6A71C580556868FE859A07
{
  FX_CMD_CAMERA_REGULAR = 0x0,
  FX_CMD_CAMERA_EXTRA = 0x1,
};

enum FxUpdateResult
{
  FX_UPDATE_REMOVE = 0x0,
  FX_UPDATE_KEEP = 0x1,
};

enum FxUpdateEffectType
{
  UPDATE_EFFECT_INDEPENDENT = 0x0,
  UPDATE_EFFECT_BOLTED = 0x1,
  UPDATE_EFFECT_NONSPRITE = 0x2,
  UPDATE_EFFECT_PORTALLED = 0x3,
  UPDATE_EFFECT_INVALID = 0x4,
};

enum $2FFA8DA65F127FCC5ECB7F4008BEEBA9
{
  FX_EFFECT_NEEDS_LIGHTING = 0x1,
  FX_EFFECT_HAS_SPOT_LIGHT_ELEM = 0x2,
  FX_EFFECT_USE_BOUNDING_BOX = 0x4,
  FX_EFFECT_LOCAL_BOUNDING_BOX = 0x8,
  FX_EFFECT_HAS_OMNI_LIGHT_ELEM = 0x10,
  FX_EFFECT_HAS_MODEL_ELEM = 0x20,
  FX_EFFECT_HAS_SOUND_ELEM = 0x40,
  FX_EFFECT_HAS_RUNNER_ELEM = 0x80,
  FX_EFFECT_HAS_TRAIL_ELEM = 0x100,
  FX_EFFECT_BBOX_SPAWNCULL = 0x200,
  FX_EFFECT_BBOX_PORTALLED = 0x400,
  FX_EFFECT_IGNORE_TELEPORTING = 0x800,
  FX_EFFECT_FAST_OFFSCREEN_UPDATE = 0x8000,
};

enum GfxWarningType
{
  R_WARN_FRONTEND_ENT_LIMIT = 0x0,
  R_WARN_KNOWN_MODELS = 0x1,
  R_WARN_KNOWN_SPECIAL_MODELS = 0x2,
  R_WARN_TEXTURE_OVERRIDES = 0x3,
  R_WARN_MODEL_LIGHT_CACHE = 0x4,
  R_WARN_MODEL_LIGHTING_HANDLE_ALLOC_FAILED = 0x5,
  R_WARN_SCENE_ENTITIES = 0x6,
  R_WARN_TEMP_SKIN_BUF_SIZE = 0x7,
  R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x8,
  R_WARN_MAX_SCENE_SURFS_SIZE = 0x9,
  R_WARN_MAX_SCENE_CULLINFOS_SIZE = 0xA,
  R_WARN_PORTAL_PLANES = 0xB,
  R_WARN_MAX_CLOUDS = 0xC,
  R_WARN_MAX_DLIGHTS = 0xD,
  R_WARN_SMODEL_LIGHTING = 0xE,
  R_WARN_MAX_DRAWSURFS = 0xF,
  R_WARN_GFX_CODE_MESH_LIMIT = 0x10,
  R_WARN_GFX_MARK_MESH_LIMIT = 0x11,
  R_WARN_MAX_SCENE_DRAWSURFS = 0x12,
  R_WARN_MAX_FX_DRAWSURFS = 0x13,
  R_WARN_NONEMISSIVE_FX_MATERIAL = 0x14,
  R_WARN_NONLIGHTMAP_MARK_MATERIAL = 0x15,
  R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 0x16,
  R_WARN_CMDBUF_OVERFLOW = 0x17,
  R_WARN_MISSING_DECL_NONDEBUG = 0x18,
  R_WARN_MAX_DYNENT_REFS = 0x19,
  R_WARN_MAX_SCENE_DOBJ_REFS = 0x1A,
  R_WARN_MAX_SCENE_MODEL_REFS = 0x1B,
  R_WARN_MAX_SCENE_BRUSH_REFS = 0x1C,
  R_WARN_MAX_CODE_INDS = 0x1D,
  R_WARN_MAX_CODE_VERTS = 0x1E,
  R_WARN_MAX_CODE_ARGS = 0x1F,
  R_WARN_MAX_MARK_INDS = 0x20,
  R_WARN_MAX_MARK_VERTS = 0x21,
  R_WARN_DEBUG_ALLOC = 0x22,
  R_WARN_SPOT_LIGHT_LIMIT = 0x23,
  R_WARN_FX_ELEM_LIMIT = 0x24,
  R_WARN_VTX_DATA_OVERFLOW = 0x25,
  R_WARN_WORKER_CMD_SIZE = 0x26,
  R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x27,
  R_WARN_UNKNOWN_XMODEL_SHADER = 0x28,
  R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x29,
  R_WARN_MICROCODE_BUFFER_SIZE = 0x2A,
  R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x2B,
  R_WARN_MAX_TRANSFER_REQUESTS = 0x2C,
  R_WARN_MAX_SHADER_CONSTANT_SETS = 0x2D,
  R_WARN_SHADER_CONSTANT_SET_ALLOCATE = 0x2E,
  R_WARN_MISSING_TECHNIQUE = 0x2F,
  R_WARN_DEPTH_HACK_NOT_IN_DRAWLIST = 0x30,
  R_WARN_WORLD_IN_DEPTH_HACK_DRAWLIST = 0x31,
  R_WARN_VIEWMODEL_MISSING_STENCIL = 0x32,
  R_WARN_MARKS_ERR_PROBE_MISMATCH = 0x33,
  R_WARN_MARKS_ERR_LMAP_MISMATCH = 0x34,
  R_WARN_OCCLUSION_QUERY = 0x35,
  R_WARN_MAX_OCCLUSION_QUERIES = 0x36,
  R_WARN_FX_ACTIONS_LIMIT = 0x37,
  R_WARN_FX_UNIQUE_HANDLES_LIMIT = 0x38,
  R_WARN_MAX_QUEUED_FX_SPAWN_WORKERS = 0x39,
  R_WARN_TENSION_VERT_COUNT = 0x3A,
  R_WARN_TENSION_PATCH_COUNT = 0x3B,
  R_WARN_COUNT = 0x3C,
};

enum $D93EE8878B5D4A290DC4E83F556E2E6B
{
  FX_SPRITE_ALLOCATE = 0x0,
  FX_SPRITE_GENERATE = 0x1,
};

enum MarkFragmentsAgainstEnum
{
  MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
  MARK_FRAGMENTS_AGAINST_MODELS = 0x1,
};

enum $2F93FFE02C90E331CA88C4D06B5DC238
{
  VISDATA_VISIBLE = 0x1,
  VISDATA_CULL_OUT = 0x2,
  VISDATA_VISIBLE_SPOT = 0x4,
};

enum $4372C269726758D958E15D84990A1476
{
  FX_ED_FLAG_LOOPING = 0x1,
  FX_ED_FLAG_USE_RANDOM_COLOR = 0x2,
  FX_ED_FLAG_USE_RANDOM_ALPHA = 0x4,
  FX_ED_FLAG_USE_RANDOM_SIZE_0 = 0x8,
  FX_ED_FLAG_USE_RANDOM_SIZE_1 = 0x10,
  FX_ED_FLAG_USE_RANDOM_SCALE = 0x20,
  FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 0x40,
  FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 0x80,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 0x100,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 0x200,
  FX_ED_FLAG_BACKCOMPAT_VELOCITY = 0x400,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_0 = 0x800,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_1 = 0x1000,
  FX_ED_FLAG_PLAY_ON_TOUCH = 0x2000,
  FX_ED_FLAG_PLAY_ON_DEATH = 0x4000,
  FX_ED_FLAG_PLAY_ON_RUN = 0x8000,
  FX_ED_FLAG_BOUNDING_SPHERE = 0x10000,
  FX_ED_FLAG_PLAY_ATTACHED = 0x40000,
  FX_ED_FLAG_DISABLED = 0x80000000,
};

enum $B1F137A237D69CB5545EAAA180BF3D80
{
  FX_FLAG_TYPE_EDITOR = 0x0,
  FX_FLAG_TYPE_NATIVE = 0x1,
  FX_FLAG_TYPE_ATLAS = 0x2,
  FX_FLAG_TYPE_EFFECT = 0x3,
  FX_FLAG_TYPE_COUNT = 0x4,
};

enum $D08B50511DC1C8899E35AFDC132E843B
{
  VERTS_PER_SPRITE_ELEM = 0x4,
  INDICES_PER_SPRITE_ELEM = 0x6,
};

enum $F644489DB4FC94FA65ADDF0B0CF76B7D
{
  JQ_RETURN_SUCCESS = 0x0,
  JQ_RETURN_REQUEUE = 0x1,
};

enum FX_DrawElement_Setup_Handle_Overtime_Enum
{
  FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0x0,
  FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 0x1,
};

enum FxSampleChannel
{
  FX_CHAN_RGBA = 0x0,
  FX_CHAN_SIZE_0 = 0x1,
  FX_CHAN_SIZE_1 = 0x2,
  FX_CHAN_SCALE = 0x3,
  FX_CHAN_ROTATION = 0x4,
  FX_CHAN_COUNT = 0x5,
  FX_CHAN_NONE = 0x6,
};

enum $B149CCAF329C988BF1E85A867BD131A5
{
  eFxActionPlaySound = 0x0,
};

enum PhysWorld
{
  PHYS_WORLD_DYNENT = 0x0,
  PHYS_WORLD_FX = 0x1,
  PHYS_WORLD_RAGDOLL = 0x2,
  PHYS_WORLD_COUNT = 0x3,
};

enum SERVER_TYPE
{
  P2P_SERVER_MP = 0x3E8,
  P2P_SERVER_ZM = 0x3E9,
  DEDICATED_SERVER = 0x7D0,
};

enum DevGuiInputButton
{
  INPUT_UP = 0x0,
  INPUT_DOWN = 0x1,
  INPUT_LEFT = 0x2,
  INPUT_RIGHT = 0x3,
  INPUT_ACCEPT = 0x4,
  INPUT_REJECT = 0x5,
  INPUT_BIND = 0x6,
  INPUT_GRAPH_EDIT = 0x7,
  INPUT_GRAPH_ADD = 0x8,
  INPUT_GRAPH_REMOVE = 0x9,
  INPUT_GRAPH_SAVE = 0xA,
  INPUT_LINK = 0xB,
  INPUT_RESET = 0xC,
  INPUT_COUNT = 0xD,
};

enum DevGuiInputAxis
{
  SCROLL_XAXIS = 0x0,
  SCROLL_YAXIS = 0x1,
  SCROLL_AXIS_COUNT = 0x2,
};

enum DevGuiInputState
{
  SCROLL_NONE = 0x0,
  SCROLL_PRESSED = 0x1,
  SCROLL_STALLED = 0x2,
  SCROLL_HELD = 0x3,
};

enum DevGuiTokenResult
{
  DEVGUI_TOKEN_ERROR = 0x0,
  DEVGUI_TOKEN_MORE = 0x1,
  DEVGUI_TOKEN_LAST = 0x2,
};

enum $F51A15F78E1A51C24EF4CFC3360CF629
{
  DEV_CHILD_MENU = 0x0,
  DEV_CHILD_DVAR = 0x1,
  DEV_CHILD_DVAR_LIST = 0x2,
  DEV_CHILD_COMMAND = 0x3,
  DEV_CHILD_GRAPH = 0x4,
  DEV_CHILD_TYPECOUNT = 0x5,
};

enum $94EBEECDA187A28694C391E0833B8F18
{
  HIGHLIGHT_REEL_STAR_LEVELS_COL_INDEX = 0x0,
  HIGHLIGHT_REEL_STAR_LEVELS_COL_MIN_SCORE = 0x1,
};

enum $CBD733A7679E63C5A56DE95F69FC495E
{
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_TYPE = 0x0,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOKMARK_TYPE = 0x1,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_ETYPE = 0x2,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_BEFORE = 0x3,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_AFTER = 0x4,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_THUMBNAIL_CAPTURE_TIME_DELTA = 0x5,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_WEIGHT_PER_EVENT = 0x6,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_STACK_FACTOR = 0x7,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOST_PRIORITY_ONLY = 0x8,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_KILLCAM_AVAILABLE = 0x9,
};

enum DBCloneMethod
{
  DB_CLONE_NORMAL = 0x0,
  DB_CLONE_FROM_DEFAULT = 0x1,
  DB_CLONE_SWAP = 0x2,
};

enum XZoneState
{
  XZONE_UNLOADING = 0xFFFFFFFF,
  XZONE_EMPTY = 0x0,
  XZONE_LOADING = 0x1,
  XZONE_LOADED = 0x2,
  XZONE_COMPLETE = 0x3,
};

enum $65A0C130D51B0EA679FB885B9EA01CA7
{
  DM_MAIN_MEMORY = 0x0,
  DM_VIDEO_MEMORY = 0x1,
  DM_STREAMER_RESERVE = 0x2,
  DM_MEMORY_LOCATION_COUNT = 0x3,
};

enum $82FE27F13E2804A2BFF43495E4DE60C8
{
  ENT_DRAW_DOBJ = 0x0,
  ENT_DRAW_BRUSH = 0x1,
  ENT_DRAW_COUNT = 0x2,
};

enum MaterialWorldVertexFormat
{
  MTL_WORLDVERT_TEX_1_NRM_1 = 0x0,
  MTL_WORLDVERT_TEX_2_NRM_1 = 0x1,
  MTL_WORLDVERT_TEX_2_NRM_2 = 0x2,
  MTL_WORLDVERT_TEX_3_NRM_1 = 0x3,
  MTL_WORLDVERT_TEX_3_NRM_2 = 0x4,
  MTL_WORLDVERT_TEX_3_NRM_3 = 0x5,
  MTL_WORLDVERT_TEX_4_NRM_1 = 0x6,
  MTL_WORLDVERT_TEX_4_NRM_2 = 0x7,
  MTL_WORLDVERT_TEX_4_NRM_3 = 0x8,
};

enum $35098BE1191479A0C7862784F91C52A1
{
  DB_GUMP_1 = 0x1,
  DB_GUMP_2 = 0x2,
  DB_GUMP_3 = 0x4,
  DB_GUMP_4 = 0x8,
};

enum eProgressBar
{
  PROGRESSBAR_MAX_FF_COUNT = 0x3,
  PROGRESSBAR_TEXTURES = 0x3,
  PROGRESSBAR_COUNT = 0x4,
};

enum bidTypes_e
{
  BID_RELATED = 0x0,
  BID_NOT_MET = 0x1,
  BID_RANDOM = 0x2,
  BID_SAME_MACHINE = 0x3,
  NUM_BIDS = 0x4,
};

enum $76D59E812A814399342CD6072CB9C57D
{
  LOBBYSTAT_KILLS = 0x0,
  LOBBYSTAT_DIVIDER = 0x1,
  LOBBYSTAT_DEATHS = 0x2,
  LOBBYSTAT_COUNT = 0x3,
};

enum ProberMode
{
  PROBER_UNDEFINED = 0x0,
  PROBER_SEARCH = 0x1,
  PROBER_MERGE = 0x2,
  PROBER_INVITE = 0x3,
  PROBER_NEWLOBBY = 0x4,
  PROBER_CLIENT = 0x5,
};

enum ProberState
{
  STATE_IDLE = 0x0,
  STATE_WAITING_FOR_HOSTS = 0x1,
  STATE_QOS_IN_PROGRESS = 0x2,
  STATE_QOS_COMPLETE = 0x3,
  STATE_ASSOCIATING = 0x4,
  STATE_HANDSHAKING = 0x5,
  STATE_HOST_FAILED = 0x6,
  STATE_NO_HOSTS = 0x7,
  STATE_SEARCH_EXHAUSTED = 0x8,
  STATE_CLIENT_ASSOCIATING = 0x9,
  STATE_CLIENT_HANDSHAKING = 0xA,
  STATE_CLIENT_CONNECTED = 0xB,
  STATE_CLIENT_FAILED = 0xC,
  STATE_HOST_ACCEPT = 0xD,
  STATE_CLIENTS_AGREE = 0xE,
  STATE_ALL_IN = 0xF,
  STATE_ERROR = 0x10,
};

enum PartyProberStatus
{
  PARTY_PROBER_NO_STATUS = 0x0,
  PARTY_PROBER_IDLE = 0x1,
  PARTY_PROBER_WORKING = 0x2,
  PARTY_PROBER_READY_TO_JOIN = 0x3,
  PARTY_PROBER_SEARCH_FAILED = 0x4,
  PARTY_PROBER_FORCED_ERROR = 0x5,
};

enum migrateClientState_t
{
  MIGRATE_CLIENT_IDLE = 0x0,
  MIGRATE_CLIENT_SENDING_PACKETS = 0x1,
  MIGRATE_WAITING_FOR_RESPONSES = 0x2,
  MIGRATE_ACTIVE = 0x3,
  MIGRATE_BECOMING_HOST = 0x4,
  MIGRATE_CLIENT_NUM_STATES = 0x5,
};

enum voteWinner_e
{
  NOT_VOTED_ANY_MAP = 0x0,
  VOTED_ROTATIONAL_MAP = 0x1,
  VOTED_PREVIOUS_MAP = 0x2,
  VOTED_NEXT_ROTATIONAL_MAP = 0x3,
};

enum votePossible_e
{
  VOTE_UNKNOWN = 0x0,
  VOTE_POSSIBLE = 0x1,
  VOTE_NOTPOSSIBLE = 0x2,
};

enum PartyMemberAddResult
{
  MEMBER_ADD_SUCCESS = 0x0,
  MEMBER_ADD_FAILED = 0x1,
  MEMBER_ADD_FAILED_OCCUPIED = 0x2,
  MEMBER_ADD_FAILED_CHALLENGE = 0x3,
  MEMBER_ADD_FAILED_INSUFFICIENT_FUNDS = 0x4,
};

enum partydebugValue_t
{
  PARTYSTATEDEBUG_BEGIN = 0x0,
  PARTYSTATEDEBUG_AFTER_WRITEMODES = 0x1,
  PARTYSTATEDEBUG_AFTER_ID = 0x2,
  PARTYSTATEDEBUG_AFTER_HOSTADDR = 0x3,
  PARTYSTATEDEBUG_AFTER_HOSTUISTRING = 0x4,
  PARTYSTATEDEBUG_AFTER_NONCEANDFLAGS = 0x5,
  PARTYSTATEDEBUG_AFTER_LOBBYFLAGSANDTIMES = 0x6,
  PARTYSTATEDEBUG_AFTER_SLOTS = 0x7,
  PARTYSTATEDEBUG_AFTER_MIGRATEBITS = 0x8,
  PARTYSTATEDEBUG_AFTER_VETOBITS = 0x9,
  PARTYSTATEDEBUG_AFTER_SESSIONINFO = 0xA,
  PARTYSTATEDEBUG_AFTER_PRESENCE = 0xB,
  PARTYSTATEDEBUG_AFTERMAPFLAGS = 0xC,
  PARTYSTATEDEBUG_MEMBERMARKER = 0xD,
  PARTYSTATEDEBUG_AFTERMEMBERS = 0xE,
  PARTYSTATEDEBUG_BEFORE_MEMBER = 0xF,
  PARTYSTATEDEBUG_AFTER_MEMBER = 0x10,
};

enum $ED82289B028A44A72E21B167A4BC65F5
{
  SEARCH_PREFERENCE_NORMAL = 0x0,
  SEARCH_PREFERENCE_BEST = 0x1,
  SEARCH_PREFERENCE_ANY = 0x2,
};

enum PartyMemberProbation
{
  MEMBER_PROBATION_PUBLIC = 0x0,
  MEMBER_PROBATION_LEAGUE = 0x1,
};

enum PeerDataPacketType
{
  PEER_DATA_VOICE_PACKET = 0x0,
  PEER_DATA_DATA_PACKET = 0x1,
  PEER_DATA_NUM_PACKET_TYPES = 0x2,
};

enum $554B50AEBEDD751B0320B9055BC51383
{
  RENDERCMD_BEGINFRAME = 0x1,
  RENDERCMD_ENDFRAME = 0x2,
  RENDERCMD_LEFTEYE = 0x4,
  RENDERCMD_RIGHTEYE = 0x8,
  RENDERCMD_ENDEYE = 0x10,
};

enum rankTierTableColumns_t
{
  ZM_RANKTABLE_TIER_ID = 0x0,
  ZM_RANKTABLE_TIER_TIMEPLAYEDLIMIT = 0x1,
  ZM_RANKTABLE_TIER_SKILLLIMIT0 = 0x2,
  ZM_RANKTABLE_COUNT = 0x3,
};

enum milestoneTableColumns_t
{
  MILESTONE_COLUMN_INDEX = 0x0,
  MILESTONE_COLUMN_TIERID = 0x1,
  MILESTONE_COLUMN_TARGETVALUE = 0x2,
  MILESTONE_COLUMN_STATTYPE = 0x3,
  MILESTONE_COLUMN_STATNAME = 0x4,
  MILESTONE_COLUMN_STRING = 0x5,
  MILESTONE_COLUMN_XPEARNED = 0x6,
  MILESTONE_COLUMN_PREREQUISITE = 0x7,
  MILESTONE_COLUMN_EXCLUDE = 0x8,
  MILESTONE_COLUMN_UNLOCKITEM = 0x9,
  MILESTONE_COLUMN_CHALLENGESTATNAME = 0xA,
  MILESTONE_COLUMN_UNLOCKLVL = 0xB,
  MILESTONE_COLUMN_UNLOCKIMAGE = 0xC,
  MILESTONE_COLUMN_INCLUDE = 0xD,
  MILESTONE_COLUMN_UNLOCKPLVL = 0xE,
  MILESTONE_COLUMN_RESETONPRESTIGE = 0xF,
  MILESTONE_COLUMN_CATEGORY = 0x10,
  MILESTONE_COLUMN_ISMAXLEVEL = 0x11,
  MILESTONE_COLUMN_ISMASTERY = 0x12,
  MILESTONE_COLUMN_ISITEMUNLOCKED = 0x13,
  MILESTONE_COLUMN_ISEXPERT = 0x14,
  MILESTONE_COLUMN_SETGLOBALSTAT = 0x15,
  MILESTONE_COLUMN_XPGROUPMASK = 0x16,
};

enum wagerMedalTableColumns_t
{
  WAGER_MEDAL_COLUMN_INDEX = 0x0,
  WAGER_MEDAL_COLUMN_STAT_NAME = 0x1,
  WAGER_MEDAL_COLUMN_NAME = 0x2,
  WAGER_MEDAL_COLUMN_DESC = 0x3,
  WAGER_MEDAL_COLUMN_CP_TEAMBASED = 0x4,
  WAGER_MEDAL_COLUMN_CP_FFA = 0x5,
};

enum medalTableColumns_t
{
  MEDAL_COLUMN_SCRIPT_REFERENCE = 0x0,
  MEDAL_COLUMN_MEDAL_STRING = 0x1,
};

enum $889BDFD573EF65A8169C43FA64FBB7C2
{
  KEYS_ALL = 0x0,
  KEYS_GAMEPAD_ONLY = 0x1,
};

enum LocSelInputState
{
  LOC_SEL_INPUT_NONE = 0x0,
  LOC_SEL_INPUT_CONFIRM = 0x1,
  LOC_SEL_INPUT_YAW = 0x2,
  LOC_SEL_INPUT_CANCEL = 0x3,
};

enum GamepadMapping
{
  GPAD_MAP_LINEAR = 0x0,
  GPAD_MAP_SQUARED = 0x1,
  GPAD_MAP_COUNT = 0x2,
  GPAD_MAP_NONE = 0xFFFFFFFF,
};

enum CompositeType
{
  COMPOSITE_NONE = 0x0,
  COMPOSITE_EMBLEM = 0x1,
};

enum CompositeState
{
  COMPOSITE_STATE_IDLE = 0x0,
  COMPOSITE_STATE_PRE = 0x1,
  COMPOSITE_STATE_RENDERING = 0x2,
  COMPOSITE_STATE_COMPLETE = 0x3,
};

enum ClientViewViewportSize
{
  VIEWPORT_LARGE = 0x0,
  VIEWPORT_SMALL = 0x1,
};

enum $0773D8ADD6E71959829FC4460AF129C1
{
  KB_LEFT = 0x0,
  KB_RIGHT = 0x1,
  KB_FORWARD = 0x2,
  KB_BACK = 0x3,
  KB_LOOKUP = 0x4,
  KB_LOOKDOWN = 0x5,
  KB_MOVELEFT = 0x6,
  KB_MOVERIGHT = 0x7,
  KB_STRAFE = 0x8,
  KB_SPEED = 0x9,
  KB_UP = 0xA,
  KB_DOWN = 0xB,
  KB_ANYUP = 0xC,
  KB_MLOOK = 0xD,
  KB_SPECTATE = 0xE,
  KB_SPECNEXT = 0xF,
  KB_SPECPREV = 0x10,
  KB_ATTACK = 0x11,
  KB_BREATH = 0x12,
  KB_FRAG = 0x13,
  KB_OFFHANDSECONDARY = 0x14,
  KB_THROWBACK = 0x15,
  KB_MELEE = 0x16,
  KB_ACTIVATE = 0x17,
  KB_RELOAD = 0x18,
  KB_USE_RELOAD = 0x19,
  KB_LEANLEFT = 0x1A,
  KB_LEANRIGHT = 0x1B,
  KB_PRONE = 0x1C,
  KB_CROUCH = 0x1D,
  KB_THROW = 0x1E,
  KB_STANCE = 0x1F,
  KB_SPRINT = 0x20,
  KB_NIGHTVISION = 0x21,
  KB_GAS = 0x22,
  KB_REVERSE = 0x23,
  KB_HANDBRAKE = 0x24,
  KB_SWITCHSEAT = 0x25,
  KB_VEHICLEATTACK = 0x26,
  KB_VEHICLEATTACKSECOND = 0x27,
  KB_VEHICLEMOVEUP = 0x28,
  KB_VEHICLEMOVEDOWN = 0x29,
  KB_VEHICLEBOOST = 0x2A,
  KB_JAM = 0x2B,
  KB_TALK = 0x2C,
  NUM_BUTTONS = 0x2D,
};

enum $53B725CFEA4C92DA9C0B142B2AF38C09
{
  WEAP_ANIM_VIEWMODEL_START = 0x0,
  WEAP_ANIM_VIEWMODEL_END = 0x55,
};

enum $CEF7B72D9BB816342748BECE96CB64E3
{
  WEAP_ANIM_CAMERA_START = 0x49,
  WEAP_ANIM_CAMERA_END = 0x4D,
};

enum LaserOwnerEnum
{
  LASER_OWNER_NON_PLAYER = 0x0,
  LASER_OWNER_PLAYER = 0x1,
};

enum LaserLightEnum
{
  LASER_LIGHT_OFF = 0x0,
  LASER_LIGHT_ON = 0x1,
};

enum ActionSlotIndex
{
  ACTIONSLOTINDEX_0 = 0x0,
  ACTIONSLOTINDEX_1 = 0x1,
  ACTIONSLOTINDEX_2 = 0x2,
  ACTIONSLOTINDEX_3 = 0x3,
};

enum $37B57E272067D854458255BC93C2A8A9
{
  DTYPE_BOOL = 0x0,
  DTYPE_FLOAT = 0x1,
  DTYPE_VEC3 = 0x2,
  DTYPE_VEC4 = 0x3,
  DTYPE_STEPFLOAT = 0x4,
  DTYPE_INTEGER = 0x5,
  DTYPE_MATERIAL = 0x6,
};

enum FxDrawScene
{
  FX_SCENE_MAIN = 0x0,
  FX_SCENE_EXTRACAM = 0x1,
  NUM_FX_SCENES = 0x2,
};

enum SurfaceGroupEnum
{
  SURF_GROUP_SOFT = 0x0,
  SURF_GROUP_HARD = 0x1,
  NUM_SURF_GROUPS = 0x2,
};

enum $4B4088CFD7D3A6DA3D623EBFCC5A92EB
{
  CULL_OUT = 0x0,
  CULL_CALC_POSE = 0x1,
  CULL_CALC_SKIN = 0x2,
};

enum cgVehicleTurretLoopState_t
{
  CG_VEHICLE_LOOP_STOP = 0x0,
  CG_VEHICLE_LOOP_PLAY = 0x1,
  CG_VEHICLE_LOOP_STOPPING = 0x2,
};

enum EVehicleRotorOrientation
{
  VEHROT_ORIENT_HORIZONTAL = 0x0,
  VEHROT_ORIENT_VERTICAL = 0x1,
};

enum eFoot
{
  FOOTSTEP_FRONTRIGHT = 0x0,
  FOOTSTEP_FRONTLEFT = 0x1,
  FOOTSTEP_REARRIGHT = 0x2,
  FOOTSTEP_REARLEFT = 0x3,
  FOOTSTEP_COUNT = 0x4,
};

enum dynEntFieldType_t
{
  F_DYNENT_CLIENT = 0x0,
  F_DYNENT_POSE = 0x1,
  F_DYNENT_DEF = 0x2,
};

enum gumpFadeState
{
  GUMP_FADE_OFF = 0x0,
  GUMP_FADE_WATCH_FOR_LOAD = 0x1,
  GUMP_FADE_LOADING = 0x2,
  GUMP_FADE_FADING = 0x3,
};

enum $629A16EE3BF304369818D674A8DB8A0A
{
  LL_INIT = 0x0,
  LL_INITIAL_DELAY = 0x1,
  LL_MAX = 0x2,
};

enum $EB4DE8F666E27AF7E4542652112AB875
{
  LL_FC_START_FLICKER = 0x2,
  LL_FC_FLICKER = 0x3,
};

enum $063622AA92EE08CA3BE26E5119F4949A
{
  LL_FF_START_FLICKER = 0x2,
  LL_FF_FLICKER = 0x3,
};

enum $C197AEF23BA0AA4EA91BCDAE1531DEF8
{
  LL_ETF_START_FLICKER = 0x2,
  LL_ETF_WAIT_FOR_ACTIVATION = 0x3,
  LL_ETF_BURST_WAIT = 0x4,
  LL_ETF_FADE_DOWN_INIT = 0x5,
  LL_ETF_FADE_DOWN = 0x6,
  LL_ETF_BECOME_FIRE_FLICKER = 0x7,
};

enum $2F3DD1311F55A69CBF92E240A74934B4
{
  CENTFIELD_ENTITY = 0x0,
  CENTFIELD_SENTIENT = 0x2000,
  CENTFIELD_ACTOR = 0x4000,
  CENTFIELD_CLIENT = 0x6000,
  CENTFIELD_VEHICLE = 0x8000,
  CENTFIELD_MASK = 0xE000,
};

enum $5B0B259318380977FB8022597B721AEF
{
  LL_EF_START_FLICKER = 0x2,
  LL_EF_FLICKER = 0x3,
};

enum $D18138365B09F79413191717C250B7EA
{
  LL_GS_WAIT_OFF_INIT = 0x2,
  LL_GS_WAIT = 0x3,
  LL_GS_WAIT_ON_INIT = 0x4,
};

enum $3D71967CE32F11AD9B7C8717156AD25A
{
  LL_DS_WAIT_OFF_INIT = 0x2,
  LL_DS_WAIT = 0x3,
  LL_DS_WAIT_ON_INIT = 0x4,
};

enum $09D38599A4BC2BC6E36F7598E05F9B04
{
  LL_GP_RAMP_DOWN_INIT = 0x2,
  LL_GP_RAMP_DOWN = 0x3,
  LL_GP_RAMP_UP_INIT = 0x4,
  LL_GP_RAMP_UP = 0x5,
  LL_GP_RAMP_UP_HOLD_INIT = 0x6,
  LL_GP_WAIT = 0x7,
  LL_GP_WAIT_ON_INIT = 0x8,
  LL_GP_WAIT_OFF_INIT = 0x9,
};

enum $F19143A06476E87BCD975ED83E5CDB2D
{
  LL_TV_INTENSITY_LERP_INIT = 0x2,
  LL_TV_INTENSITY_LERP = 0x3,
  LL_TV_COLOR_LERP_INIT = 0x4,
  LL_TV_COLOR_LERP = 0x5,
};

enum $CAB35430901FF050B3D9CA8C565E0D87
{
  LL_GF_FLICKER_BURST_INIT = 0x2,
  LL_GF_FLICKER_WAIT_INIT = 0x3,
  LL_GF_FLICKER_WAIT = 0x4,
  LL_GF_BETWEEN_BURSTS_WAIT_INIT = 0x5,
};

enum $4A98A59BAE44EA37D91A1A12DCDA63B0
{
  RM_DO_WAIT = 0x2,
};

enum $06CA78220F37B5AB97A7EC14C8D39E0C
{
  SL_INIT = 0x0,
  SL_TURNING_ON = 0x1,
  SL_ON = 0x2,
  SL_TURNING_OFF = 0x3,
  SL_OFF = 0x4,
};

enum listColumnTypes_t
{
  LCT_NAME = 0x0,
  LCT_CLAN = 0x1,
  LCT_SCORE = 0x2,
  LCT_PING = 0x3,
  LCT_STATUS_ICON = 0x4,
  LCT_TALKING_ICON = 0x5,
  LCT_KILLS = 0x6,
  LCT_RANK_ICON = 0x7,
  LCT_ASSISTS = 0x8,
  LCT_DOWNS = 0x9,
  LCT_REVIVES = 0xA,
  LCT_HEADSHOTS = 0xB,
  LCT_MULTIPLIER = 0xC,
  LCT_NUM = 0xD,
};

enum RumbleSourceType
{
  RUMBLESOURCE_INVALID = 0x0,
  RUMBLESOURCE_ENTITY = 0x1,
  RUMBLESOURCE_POS = 0x2,
};

enum $8351B9CBD1B94A75DE1D4D66F883528F
{
  CENT_ACTOR_PRONE_NONE = 0x0,
  CENT_ACTOR_PRONE_NORMAL = 0x1,
  CENT_ACTOR_PRONE_CORPSE = 0x2,
};

enum CompassType
{
  COMPASS_TYPE_PARTIAL = 0x0,
  COMPASS_TYPE_FULL = 0x1,
};

enum eGuidedMissileInfo
{
  GUIDED_MISSILE_VIEWPOS = 0x0,
  GUIDED_MISSILE_DIST_TO_TARG = 0x1,
  GUIDED_MISSILE_DIST_FROM_OWNER = 0x2,
};

enum e_tank_hud_component
{
  _tank_component_core = 0x0,
  _tank_component_left_tread = 0x1,
  _tank_component_right_tread = 0x2,
  _tank_component_turret = 0x3,
  _tank_component_driver_seat = 0x4,
  _tank_component_gunner_seat = 0x5,
  k_tank_hud_component_count = 0x6,
};

enum cursorHintType_t
{
  CURSORHINTS_NO_HINTS = 0x0,
  CURSORHINTS_SIN_SIZE_PULSE = 0x1,
  CURSORHINTS_ONE_WAY_SIZE_PULSE = 0x2,
  CURSORHINTS_ALPHA_PULSE = 0x3,
  CURSORHINTS_STATIC_IMAGE = 0x4,
  CURSORHINTS_COUNT = 0x5,
};

enum eScriptsMismatch
{
  SCRIPTS_MISMATCH_NO_MODIFICATION = 0x0,
  SCRIPTS_MISMATCH_MODIFIED_NO_ACTION = 0x1,
  SCRIPTS_MISMATCH_MODIFIED = 0x2,
};

enum eBattleChatterPlayStates
{
  BCMP_NONE = 0x0,
  BCMP_SOUND_ONE = 0x1,
  BCMP_SOUND_TWO = 0x2,
};

enum $10CA2977C1BBF8BEDE855066667F40C1
{
  AI_STANCE_STANDING = 0x0,
  AI_STANCE_CROUCH = 0x1,
  AI_STANCE_PRONE = 0x2,
};

enum $5E7D6C3995930F4D091E9C259C6B59D7
{
  AI_MOVEMODE_SPRINT = 0x0,
  AI_MOVEMODE_RUN = 0x1,
  AI_MOVEMODE_WALK = 0x2,
  AI_MOVEMODE_CROUCH_RUN = 0x3,
  AI_MOVEMODE_CROUCH_WALK = 0x4,
  AI_MOVEMODE_PRONE = 0x5,
};

enum ADJUST_TYPES
{
  ADJUST_NULL = 0x0,
  ADJUST_NOTHING = 0x1,
  ADJUST_DOUBLEX = 0x2,
  ADJUST_HALFY = 0x3,
  ADJUST_HALFY_CUSTOM_CENTERY = 0x4,
  ADJUST_WRT_SCREEN = 0x5,
};

enum turretAnims_t
{
  TURRETANIM_ROOT = 0x0,
  TURRETANIM_IDLE = 0x1,
  TURRETANIM_FIRE = 0x2,
  TURRETANIM_NUM = 0x3,
};

enum $80743F9C4BE2250A5CACE53CF50E42D1
{
  DRAW_INFO_STATE_NONE = 0x0,
  DRAW_INFO_STATE_PENDING = 0x1,
  DRAW_INFO_STATE_READY = 0x2,
};

enum $9C2A1AAF0C5937444DA275DE58CBA96A
{
  ZBPSS_INIT = 0x0,
  ZBPSS_INIT_WAIT = 0x1,
  ZBPSS_WAIT = 0x2,
  ZBPSS_STAGE_2 = 0x3,
  ZBPSS_STAGE_3 = 0x4,
};

enum $05853A32CE1D915AEC240F2F4107CAED
{
  OVERHEAD_DISPLAY_GAMERTAGONLY = 0x0,
  OVERHEAD_DISPLAY_RANK_AND_CLAN = 0x1,
  OVERHEAD_DISPLAY_GAMERTAG_CLAN_AND_RANK = 0x2,
  OVERHEAD_DISPLAY_MARQUEE = 0x3,
  OVERHEAD_REMOVE_MARQUEE = 0x4,
  OVERHEAD_RANK_ONLY = 0x5,
  NUM_OVERHEAD_DISPLAY_MODES = 0x6,
};

enum $1C249C43E79ECA8351FD8A93DF41D57B
{
  R_DRAW_INFO_NONE = 0x0,
  R_DRAW_INFO_STAGES = 0x1,
  R_DRAW_INFO_TARGETS = 0x2,
  R_DRAW_INFO_TRIS = 0x3,
  R_DRAW_INFO_PRIMS = 0x4,
  R_DRAW_INFO_COUNT = 0x5,
};

enum GridPointAlignType
{
  GRID_TOP_LEFT_ALIGN = 0x0,
  GRID_TOP_CENTER_ALIGN = 0x1,
  GRID_TOP_RIGHT_ALIGN = 0x2,
  GRID_LEFT_ALIGN = 0x3,
  GRID_CENTER_ALIGN = 0x4,
  GRID_RIGHT_ALIGN = 0x5,
  GRID_BOTTOM_LEFT_ALIGN = 0x6,
  GRID_BOTTOM_CENTER_ALIGN = 0x7,
  GRID_BOTTOM_RIGHT_ALIGN = 0x8,
};

enum parseSkip_t
{
  SKIP_NO = 0x0,
  SKIP_YES = 0x1,
  SKIP_ALL_ELIFS = 0x2,
};

enum unlockMapTableColumns_t
{
  UNLOCKMAPTABLE_INDEX = 0x0,
  UNLOCKMAPTABLE_GROUPLIST = 0x1,
  UNLOCKMAPTABLE_NAME = 0x2,
  UNLOCKMAPTABLE_STRINGREF = 0x3,
  UNLOCKMAPTABLE_COUNT = 0x4,
};

enum FactionTableColumn
{
  FACTION_TABLE_COLUMN_NAME = 0x0,
  FACTION_TABLE_COLUMN_TEAM = 0x1,
  FACTION_TABLE_COLUMN_RED = 0x2,
  FACTION_TABLE_COLUMN_GREEN = 0x3,
  FACTION_TABLE_COLUMN_BLUE = 0x4,
  NUM_FACTION_TABLE_COLUMNS = 0x5,
};

enum attachedFieldType_t
{
  AUFT_ATTACHMENTTYPE = 0x12,
  AUFT_HIDETAGS = 0x13,
  AUFT_OVERLAYRETICLE = 0x14,
  AUFT_CAMO = 0x15,
  AUFT_NUM_FIELD_TYPES = 0x16,
};

enum eAutoMeleeState
{
  AMS_NOT_ACTIVE = 0x0,
  AIM_MELEE_STATE_TARGETED = 0x1,
  AIM_MELEE_STATE_UPDATING = 0x2,
};

enum $B630FD68FD3ED85E9ECA47ACBCAD312B
{
  TL_MEMALLOC_NGL = 0x1000000,
  TL_MEMALLOC_NAL = 0x2000000,
  TL_MEMALLOC_AEPS = 0x3000000,
  TL_MEMALLOC_NVL = 0x4000000,
  TL_MEMALLOC_PHYSICS = 0x5000000,
  TL_MEMALLOC_LIBMASK = 0xFF000000,
  TL_MEMALLOC_TEMP = 0x1,
  TL_MEMALLOC_CANFAIL = 0x2,
  TL_MEMALLOC_PHYSICAL = 0x10000,
  TL_MEMALLOC_WRITECOMBINE = 0x20000,
  TL_MEMALLOC_FIFO = 0x80000,
  TL_MEMALLOC_RSXMAIN = 0x0,
  TL_MEMALLOC_RSXLOCAL = 0x0,
  TL_MEMALLOC_MEM1 = 0x0,
  TL_MEMALLOC_MEM2 = 0x0,
};

enum $C3BA851A8DD3906804F6CE40871C0FAA
{
  LTC_ASN1_EOL = 0x0,
  LTC_ASN1_BOOLEAN = 0x1,
  LTC_ASN1_INTEGER = 0x2,
  LTC_ASN1_SHORT_INTEGER = 0x3,
  LTC_ASN1_BIT_STRING = 0x4,
  LTC_ASN1_OCTET_STRING = 0x5,
  LTC_ASN1_NULL = 0x6,
  LTC_ASN1_OBJECT_IDENTIFIER = 0x7,
  LTC_ASN1_IA5_STRING = 0x8,
  LTC_ASN1_PRINTABLE_STRING = 0x9,
  LTC_ASN1_UTF8_STRING = 0xA,
  LTC_ASN1_UTCTIME = 0xB,
  LTC_ASN1_CHOICE = 0xC,
  LTC_ASN1_SEQUENCE = 0xD,
  LTC_ASN1_SET = 0xE,
  LTC_ASN1_SETOF = 0xF,
};

enum ltc_pkcs_1_v1_5_blocks
{
  LTC_LTC_PKCS_1_EMSA = 0x1,
  LTC_LTC_PKCS_1_EME = 0x2,
};

enum eBspSurfRegionType
{
  BSP_SURF_REGION_LIT = 0x0,
  BSP_SURF_REGION_LIGHT_MAP = 0x1,
  BSP_SURF_REGION_TYPE_COUNT = 0x2,
};

enum $7B590C3C4F20369F3FAFFAEF0FDF5703
{
  R_REFLECTIONPROBESELECTION_OFF = 0x0,
  R_REFLECTIONPROBESELECTION_BSP = 0x1,
  R_REFLECTIONPROBESELECTION_STATICMODELS = 0x2,
  R_REFLECTIONPROBESELECTION_ENTS = 0x3,
  R_REFLECTIONPROBESELECTION_COUNT = 0x4,
};

enum $78984B9C1B084E348597FC8EC078C903
{
  ADD_ALL_BSP_SURFACES_LIT = 0x0,
  ADD_ALL_BSP_SURFACES_LIT_TRANS = 0x1,
  ADD_ALL_BSP_SURFACES_EMISSIVE_OPAQUE = 0x2,
  ADD_ALL_BSP_SURFACES_EMISSIVE_TRANS = 0x3,
};

enum ViewParmsType
{
  VIEW_PARMS_CAMERA = 0x0,
  VIEW_PARMS_SHADOW = 0x1,
};

enum CullType
{
  CULL_TYPE_INVALID = 0x0,
  CULL_TYPE_BSP = 0x1,
  CULL_TYPE_STATIC_MODEL = 0x2,
  CULL_TYPE_XMODEL_RIGID = 0x3,
};

typedef $00AC6407559F9CFED34389084128FBC4 $DBCBCB8FA82A92FED8C8620DE84D3F4C;

enum TestForSunShadowList
{
  SUNSHADOWLIST_TEST_DISABLE = 0x0,
  SUNSHADOWLIST_TEST_ENABLE = 0x1,
};

enum $0DE2C444FC6B1410FCE75E9B946A22C5
{
  R_PRIMARYLIGHTLINES_OFF = 0x0,
  R_PRIMARYLIGHTLINES_BSP = 0x1,
  R_PRIMARYLIGHTLINES_STATICMODELS = 0x2,
  R_PRIMARYLIGHTLINES_SCENEMODELS = 0x3,
  R_PRIMARYLIGHTLINES_DOBJS = 0x4,
  R_PRIMARYLIGHTLINES_DYNENT_MODELS = 0x5,
  R_PRIMARYLIGHTLINES_COUNT = 0x6,
};

enum GfxDrawSceneMethod
{
  GFX_DRAW_SCENE_NONE = 0x0,
  GFX_DRAW_SCENE_FULLBRIGHT = 0x1,
  GFX_DRAW_SCENE_DEBUGSHADER = 0x2,
  GFX_DRAW_SCENE_STANDARD = 0x3,
};

enum $FD2F155A1E3123D9E706A073BD9747B9
{
  DOBJ_MAX_SURFS = 0x80,
  XMODEL_MAX_SURFS = 0x50,
};

enum StaticModelFlag
{
  STATIC_MODEL_FLAG_NO_SHADOW = 0x1,
  STATIC_MODEL_FLAG_LIGHTMAP_VC = 0x2,
};

enum $8B87E21AA2068E91D0E75800557ACF44
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
  CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
  CUSTOM_SAMPLER_COUNT = 0x3,
};

enum $B168676AE0E2FEA6E0039539F9162E78
{
  MAPTYPE_NONE = 0x0,
  MAPTYPE_INVALID1 = 0x1,
  MAPTYPE_INVALID2 = 0x2,
  MAPTYPE_2D = 0x3,
  MAPTYPE_3D = 0x4,
  MAPTYPE_CUBE = 0x5,
  MAPTYPE_COUNT = 0x6,
};

enum $C238FF4F9657772DF2CAFFCBC4EE5B81
{
  CINEMATIC_IMAGE_MAIN0 = 0x0,
  CINEMATIC_IMAGE_MAIN1 = 0x1,
  CINEMATIC_IMAGES_REQUIRED_MAIN = 0x2,
  CINEMATIC_IMAGES_REQUIRED = 0x2,
};

enum GfxScreenshotType
{
  R_SCREENSHOT_JPG = 0x0,
  R_SCREENSHOT_TGA = 0x1,
};

enum $72E71F3D9535328A1AA08FD8E568F55B
{
  CULL_STATE_OUT = 0x0,
  CULL_STATE_BOUNDED_PENDING = 0x1,
  CULL_STATE_BOUNDED = 0x2,
  CULL_STATE_SKINNED_PENDING = 0x3,
  CULL_STATE_DONE = 0x4,
};

enum $74ED78D9DDD8B62B868E836FDFA06B02
{
  R_SHOWOCCLUDERS_LEVEL_0 = 0x0,
  R_SHOWOCCLUDERS_LEVEL_1 = 0x1,
  R_SHOWOCCLUDERS_LEVEL_2 = 0x2,
  R_SHOWOCCLUDERS_LEVEL_3 = 0x3,
  R_SHOWOCCLUDERS_LEVEL_4 = 0x4,
  R_SHOWOCCLUDERS_COUNT = 0x5,
};

enum DpvsForceBevels
{
  DPVS_DONT_FORCE_BEVELS = 0x0,
  DPVS_FORCE_BEVELS = 0x1,
};

enum DpvsClipChildren
{
  DPVS_DONT_CLIP_CHILDREN = 0x0,
  DPVS_CLIP_CHILDREN = 0x1,
};

typedef $8B87E21AA2068E91D0E75800557ACF44 $4460600F3D50843206D37DCAF9109FE2;

enum LitPhaseID
{
  LIT_PHASE_LIT_BSP = 0x0,
  LIT_PHASE_LIT_STATIC_MODEL = 0x1,
  LIT_PHASE_LIT = 0x2,
  LIT_PHASE_LIT_BSP_POST_RESOLVE = 0x3,
  LIT_PHASE_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  LIT_PHASE_LIT_POST_RESOLVE = 0x5,
  LIT_PHASE_SONAR = 0x6,
  LIT_PHASE_LIGHT_MAP_BSP = 0x7,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL = 0x8,
  LIT_PHASE_LIGHT_MAP = 0x9,
  LIT_PHASE_LIGHT_MAP_BSP_POST_RESOLVE = 0xA,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xB,
  LIT_PHASE_LIGHT_MAP_POST_RESOLVE = 0xC,
  LIT_PHASE_DEPTH_HACK = 0xD,
};

enum $92BBAABD7E83DE483C62F92D5F78EDC7
{
  IMAGE_PROG_SHADOWMAP_SUN = 0x0,
  IMAGE_PROG_SHADOWMAP_SPOT = 0x1,
  IMAGE_PROG_FLOATZ = 0x2,
  IMAGE_PROG_POST_EFFECT_SRC = 0x3,
  IMAGE_PROG_POST_EFFECT_0 = 0x4,
  IMAGE_PROG_POST_EFFECT_1 = 0x5,
  IMAGE_PROG_PINGPONG_0 = 0x6,
  IMAGE_PROG_PINGPONG_1 = 0x7,
  IMAGE_PROG_RESOLVED_SCENE = 0x8,
  IMAGE_PROG_SCENE = 0x9,
  IMAGE_PROG_SAVEDSCREEN = 0xA,
  IMAGE_PROG_SCENE_DEPTH = 0xB,
  IMAGE_PROG_RAW = 0xC,
  IMAGE_PROG_SSAO_CSZ = 0xD,
  IMAGE_PROG_SSAO_CSZ_0 = 0xE,
  IMAGE_PROG_SSAO_CSZ_1 = 0xF,
  IMAGE_PROG_SSAO_CSZ_2 = 0x10,
  IMAGE_PROG_SSAO_CSZ_3 = 0x11,
  IMAGE_PROG_SSAO_CSZ_4 = 0x12,
  IMAGE_PROG_SSAO_CSZ_5 = 0x13,
  IMAGE_PROG_SSAO_1 = 0x14,
  IMAGE_PROG_SSAO_2 = 0x15,
  IMAGE_PROG_TXAA_FEEDBACK = 0x16,
  IMAGE_PROG_TXAA_SRGB = 0x17,
  IMAGE_PROG_TXAA_SRGB_SCENE = 0x18,
  IMAGE_PROG_MODEL_LIGHTING = 0x19,
  IMAGE_PROG_LUT = 0x1A,
  IMAGE_PROG_UI3D = 0x1B,
  IMAGE_PROG_UI3D_PING_PONG = 0x1C,
  IMAGE_PROG_MISSILE_CAM = 0x1D,
  IMAGE_PROG_FLOATZ_MISSILE_CAM = 0x1E,
  IMAGE_PROG_MISSILE_CAM_MULTI_0 = 0x1F,
  IMAGE_PROG_MISSILE_CAM_MULTI_1 = 0x20,
  IMAGE_PROG_MISSILE_CAM_MULTI_2 = 0x21,
  IMAGE_PROG_MISSILE_CAM_MULTI_3 = 0x22,
  IMAGE_PROG_SONAR = 0x23,
  IMAGE_PROG_SONAR_BLUR = 0x24,
  IMAGE_PROG_SONAR_DEPTH = 0x25,
  IMAGE_PROG_COMPOSITE = 0x26,
  IMAGE_PROG_DOF_SCENE_MASK_PING = 0x27,
  IMAGE_PROG_DOF_SCENE_MASK_PONG = 0x28,
  IMAGE_PROG_DOF_SCENE_FP16 = 0x29,
  IMAGE_PROG_DOF_SCENE_FP16_0 = 0x2A,
  IMAGE_PROG_DOF_SCENE_FP16_1 = 0x2B,
  IMAGE_PROG_DOF_SCENE_FP16_2 = 0x2C,
  IMAGE_PROG_DOF_SCENE_FP16_3 = 0x2D,
  IMAGE_PROG_DOF_SCENE_FP16_4 = 0x2E,
  IMAGE_PROG_DOF_SCENE_FP16_5 = 0x2F,
  IMAGE_PROG_DOF_SCENE_FINAL = 0x30,
  IMAGE_PROG_BLOOM_MIP1_PING = 0x31,
  IMAGE_PROG_BLOOM_MIP1_PONG = 0x32,
  IMAGE_PROG_BLOOM_MIP2_PING = 0x33,
  IMAGE_PROG_BLOOM_MIP2_PONG = 0x34,
  IMAGE_PROG_BLOOM_MIP3_PING = 0x35,
  IMAGE_PROG_BLOOM_MIP3_PONG = 0x36,
  IMAGE_PROG_BLOOM_MIP4_PING = 0x37,
  IMAGE_PROG_BLOOM_MIP4_PONG = 0x38,
  IMAGE_PROG_BLOOM_STREAK = 0x39,
  IMAGE_PROG_LUT2D = 0x3A,
  IMAGE_PROG_COUNT = 0x3B,
};

enum GfxDepthHackDrawMode
{
  GFX_DEPTH_HACK_IGNORE_STENCIL = 0x0,
  GFX_DEPTH_HACK_FILL_STENCIL = 0x1,
  GFX_DEPTH_HACK_TEST_STENCIL = 0x2,
};

enum $CDC13936A825151F45E8E6835FFB3FFF
{
  DRAWLIST_LIT_BSP = 0x0,
  DRAWLIST_LIT_STATIC_MODEL = 0x1,
  DRAWLIST_LIT = 0x2,
  DRAWLIST_LIT_BSP_POST_RESOLVE = 0x3,
  DRAWLIST_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  DRAWLIST_LIT_POST_RESOLVE = 0x5,
  DRAWLIST_LIT_SONAR = 0x6,
  DRAWLIST_LIGHT_MAP_BSP = 0x7,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL = 0x8,
  DRAWLIST_LIGHT_MAP = 0x9,
  DRAWLIST_LIGHT_MAP_BSP_POST_RESOLVE = 0xA,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xB,
  DRAWLIST_LIGHT_MAP_POST_RESOLVE = 0xC,
  DRAWLIST_DEPTH_HACK = 0xD,
  DRAWLIST_TRANS = 0xE,
  DRAWLIST_TRANS_POST_FX = 0xF,
  DRAWLIST_LIT_QUASI_OPAQUE = 0x10,
  DRAWLIST_EMISSIVE_OPAQUE = 0x11,
  DRAWLIST_EMISSIVE_FX = 0x12,
  DRAWLIST_SUPERFLARE = 0x13,
  DRAWLIST_VIEWMODEL_FX = 0x14,
  DRAWLIST_VIEWMODEL_TRANS = 0x15,
  DRAWLIST_POST_BLUR = 0x16,
  DRAWLIST_SUN_SHADOW_MAP0 = 0x17,
  DRAWLIST_SUN_SHADOW_MAP1 = 0x18,
  DRAWLIST_SPOT_SHADOW_MAP0 = 0x19,
  DRAWLIST_SPOT_SHADOW_MAP1 = 0x1A,
  DRAWLIST_SPOT_SHADOW_MAP2 = 0x1B,
  DRAWLIST_SPOT_SHADOW_MAP3 = 0x1C,
  DRAWLIST_COUNT = 0x1D,
};

enum $0A23D6D849D17731F74CB207338A67A1
{
  MTL_PREPASS_STANDARD = 0x0,
  MTL_PREPASS_NONSTANDARD = 0x1,
  MTL_PREPASS_NONE = 0x2,
  MTL_PREPASS_ALPHA_NO_OCCLUSION = 0x3,
  MTL_PREPASS_TYPECOUNT = 0x4,
};

enum $9DB461874B52E16647B93BFC2590F7C1
{
  R_DEBUG_PERFORMANACE_NONE = 0x0,
  R_DEBUG_PERFORMANACE_CURRENT = 0x1,
  R_DEBUG_PERFORMANACE_AVERAGE = 0x2,
  R_DEBUG_PERFORMANACE_COUNT = 0x3,
};

enum LightHasShadowMap
{
  LIGHT_HAS_SHADOWMAP = 0x0,
  LIGHT_HAS_NO_SHADOWMAP = 0x1,
};

enum $B9DE33802F94C3C6E6D0FC8B83145C96
{
  VERTEX_SHADER_NONE = 0x0,
  VERTEX_SHADER_MODEL_LIT = 0x1,
  VERTEX_SHADER_MODEL_LIT_LIGHTMAP_VC = 0x2,
  VERTEX_SHADER_MODEL_UNLIT = 0x3,
};

enum $9A0B86F307B8B373A84D86E5C75BCFF7
{
  CUSTOMINDEX_XMODEL_HAS_CULL_INFO = 0x1,
  CUSTOMINDEX_XMODEL_SHADER_CONSTANT_SET_MASK = 0x1FC,
  CUSTOMINDEX_CODEMESH_ENABLE_DEPTHHACK = 0x1,
};

enum SuperflareDrawlistModes
{
  R_SUPERFLARE_DRAWLIST_OFF = 0x0,
  R_SUPERFLARE_DRAWLIST_PRE_VIEWMODEL = 0x1,
  R_SUPERFLARE_DRAWLIST_POST_VIEWMODEL = 0x2,
  R_SUPERFLARE_DRAWLIST_POST_BLUR = 0x3,
  R_SUPERFLARE_DRAWLIST_COUNT = 0x4,
};

enum $4731293307F5B093D98CE3AA4B25D933
{
  R_ALPHA_OVERRIDE_NONE = 0x0,
  R_ALPHA_OVERRIDE_255 = 0x1,
  R_ALPHA_OVERRIDE_192 = 0x2,
  R_ALPHA_OVERRIDE_128 = 0x3,
  R_ALPHA_OVERRIDE_COUNT = 0x4,
};

enum $A4886178F4D4D7BB1856774CA9B70375
{
  R_SPECULAR_OVERRIDE_NON_METAL = 0x0,
  R_SPECULAR_OVERRIDE_NONE = 0x1,
  R_SPECULAR_OVERRIDE_METAL = 0x2,
  R_SPECULAR_OVERRIDE_COUNT = 0x3,
};

enum $A7E619F5B3F6DB23DEBF30019A978646
{
  R_GLOSS_OVERRIDE_0 = 0x0,
  R_GLOSS_OVERRIDE_NONE = 0x1,
  R_GLOSS_OVERRIDE_255 = 0x2,
  R_GLOSS_OVERRIDE_204 = 0x3,
  R_GLOSS_OVERRIDE_153 = 0x4,
  R_GLOSS_OVERRIDE_102 = 0x5,
  R_GLOSS_OVERRIDE_51 = 0x6,
  R_GLOSS_OVERRIDE_COUNT = 0x7,
};

enum $E15F6CF33E6CF0164F869776CF24E6D2
{
  R_OCCLUSION_OVERRIDE_0 = 0x0,
  R_OCCLUSION_OVERRIDE_NONE = 0x1,
  R_OCCLUSION_OVERRIDE_255 = 0x2,
  R_OCCLUSION_OVERRIDE_128 = 0x3,
  R_OCCLUSION_OVERRIDE_COUNT = 0x4,
};

enum $2CDBB6FB02DE140D6C242132EAFCD501
{
  R_FB_COLOR_DEBUG_NONE = 0x0,
  R_FB_COLOR_DEBUG_SCREEN = 0x1,
  R_FB_COLOR_DEBUG_FEEDBACK = 0x2,
  R_FB_COLOR_DEBUG_COUNT = 0x3,
};

enum $C7DDB36EBC8A0E6A12FFF07E09941262
{
  R_SHOW_COLLISION_NONE = 0x0,
  R_SHOW_COLLISION_ALL = 0x1,
  R_SHOW_COLLISION_PLAYER = 0x2,
  R_SHOW_COLLISION_BULLET = 0x3,
  R_SHOW_COLLISION_MISSILE = 0x4,
  R_SHOW_COLLISION_VEHICLE = 0x5,
  R_SHOW_COLLISION_MONSTER = 0x6,
  R_SHOW_COLLISION_ITEM = 0x7,
  R_SHOW_COLLISION_CANSHOOT = 0x8,
  R_SHOW_COLLISION_AINOSIGHT = 0x9,
  R_SHOW_COLLISION_COUNT = 0xA,
};

enum $EDDE65824B9FECD8724E2AFB60F4FAB9
{
  R_SHOW_COLLISION_GROUPS_ALL = 0x0,
  R_SHOW_COLLISION_GROUPS_BRUSH = 0x1,
  R_SHOW_COLLISION_GROUPS_TERRAIN = 0x2,
  R_SHOW_COLLISION_GROUPS_COUNT = 0x3,
};

enum $008CE78860C0EFF69FED022A9304118E
{
  R_SHOW_COLLISION_POLYTYPE_ALL = 0x0,
  R_SHOW_COLLISION_POLYTYPE_WIREFRAME = 0x1,
  R_SHOW_COLLISION_POLYTYPE_INTERIOR = 0x2,
  R_SHOW_COLLISION_POLYTYPE_COUNT = 0x3,
};

enum $2CA13DA0861E5DA3A3DB487EFAE42A43
{
  R_DEBUGSHADER_NONE = 0x0,
  R_DEBUGSHADER_TEXTURE = 0x1,
  R_DEBUGSHADER_TANGENT = 0x2,
  R_DEBUGSHADER_BINORMAL = 0x3,
  R_DEBUGSHADER_NORMAL = 0x4,
  R_DEBUGSHADER_LMAPDIR = 0x5,
  R_DEBUGSHADER_COUNT = 0x6,
};

enum $F8BAC180992631E19A574A0F352E600A
{
  GFX_SM_OVERLAY_OFF = 0x0,
  GFX_SM_OVERLAY_SUN = 0x1,
  GFX_SM_OVERLAY_SPOT = 0x2,
  GFX_SM_OVERLAY_COUNT = 0x3,
};

enum $992610B3BFC3932E8DACC0F4E0AAB928
{
  GFX_AA_ALPHA_OFF = 0x0,
  GFX_AA_ALPHA_TO_COVERAGE = 0x1,
  GFX_AA_ALPHA_SUPERSAMPLE = 0x2,
  GFX_AA_ALPHA_COUNT = 0x3,
};

enum $BAAA890B7CAD06B6387D5E0CC1077F60
{
  R_SHOWTESS_OFF = 0x0,
  R_SHOWTESS_TECH = 0x1,
  R_SHOWTESS_TECHSET = 0x2,
  R_SHOWTESS_MATERIAL = 0x3,
  R_SHOWTESS_VERTEX_SHADER = 0x4,
  R_SHOWTESS_PIXEL_SHADER = 0x5,
  R_SHOWTESS_COUNT = 0x6,
};

enum $DA8BCB5A54BAB06CD35E1014CE5D911C
{
  R_MIP_FILTER_UNCHANGED = 0x0,
  R_MIP_FILTER_FORCE_LINEAR = 0x1,
  R_MIP_FILTER_FORCE_NEAREST = 0x2,
  R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
  R_MIP_FILTER_COUNT = 0x4,
};

enum $7FBD291848EBA26EBDC524F2EAD1237D
{
  STEREO_MODE_2D = 0x0,
  STEREO_MODE_3D = 0x1,
};

enum R_STREAMPAINT_TYPES
{
  R_STREAMPAINT_OFF = 0x0,
  R_STREAMPAINT_RENDEREDMIP = 0x1,
  R_STREAMPAINT_RENDERED_AND_LOADED_MIP = 0x2,
  R_STREAMPAINT_MAX_MATERIAL_MEMORY = 0x3,
  R_STREAMPAINT_LOADED_MATERIAL_MEMORY = 0x4,
  R_STREAMPAINT_TYPE_COUNT = 0x5,
};

enum DBLOCK_READY
{
  DBLOCK_EMPTY = 0x0,
  DBLOCK_READY_FOG = 0x1,
  DBLOCK_READY_COLOR = 0x2,
  DBLOCK_READY_BLOOM = 0x3,
  DBLOCK_READY_WSI = 0x4,
};

enum DVBLOCK_FOG
{
  FOG_BaseDist = 0x0,
  FOG_HalfDist = 0x1,
  FOG_BaseHeight = 0x2,
  FOG_HalfHeight = 0x3,
  FOG_ColorR = 0x4,
  FOG_ColorG = 0x5,
  FOG_ColorB = 0x6,
  FOG_Opacity = 0x7,
  FOG_SunColorR = 0x8,
  FOG_SunColorG = 0x9,
  FOG_SunColorB = 0xA,
  FOG_SunOpacity = 0xB,
  FOG_SunPitch = 0xC,
  FOG_SunYaw = 0xD,
  FOG_SunInner = 0xE,
  FOG_SunOuter = 0xF,
  FOG_MAX = 0x10,
};

enum DVBLOCK_VC_BLOOM
{
  BLOOM_vc_LIB = 0x0,
  BLOOM_vc_LIG = 0x1,
  BLOOM_vc_LIW = 0x2,
  BLOOM_vc_LOB = 0x3,
  BLOOM_vc_LOW = 0x4,
  BLOOM_vc_RGBH = 0x5,
  BLOOM_vc_RGBL = 0x6,
  BLOOM_vc_YH = 0x7,
  BLOOM_vc_YL = 0x8,
  BLOOM_VC_MAX = 0x9,
};

enum DVBLOCK_VC_COLOR
{
  COLOR_vc_RS = 0x0,
  COLOR_vc_RE = 0x1,
  COLOR_vc_SMR = 0x2,
  COLOR_vc_SMG = 0x3,
  COLOR_vc_SMB = 0x4,
  COLOR_vc_MMR = 0x5,
  COLOR_vc_MMG = 0x6,
  COLOR_vc_MMB = 0x7,
  COLOR_vc_HMR = 0x8,
  COLOR_vc_HMG = 0x9,
  COLOR_vc_HMB = 0xA,
  COLOR_vc_FGM = 0xB,
  COLOR_vc_FSM = 0xC,
  COLOR_vc_FBM = 0xD,
  COLOR_VC_MAX = 0xE,
};

enum DVBLOCK_WSI
{
  WSI_enable = 0x0,
  WSI_ev = 0x1,
  WSI_pitch = 0x2,
  WSI_yaw = 0x3,
  WSI_MAX = 0x4,
};

enum GfxAspectRatio
{
  GFX_ASPECT_RATIO_AUTO = 0x0,
  GFX_ASPECT_RATIO_STANDARD = 0x1,
  GFX_ASPECT_RATIO_WIDE_16_10 = 0x2,
  GFX_ASPECT_RATIO_WIDE_16_9 = 0x3,
  GFX_ASPECT_RATIO_COUNT = 0x4,
};

enum $CB33564A1D9890384362DF6B1C41D5D9
{
  R_CODEC_MJPEG = 0x0,
  R_CODEC_VPX = 0x1,
  R_CODEC_COUNT = 0x2,
};

enum $3BB55576B801C4A3B2938F63B9B1E1E7
{
  R_CLIP_SIZE_360 = 0x0,
  R_CLIP_SIZE_480 = 0x1,
  R_CLIP_SIZE_720 = 0x2,
  R_CLIP_SIZE_1080 = 0x3,
  R_CLIP_SIZE_COUNT = 0x4,
};

enum $E06BEC8252F71222734B04B086D889DD
{
  R_LOD_INFO_NONE = 0x0,
  R_LOD_INFO_ALL = 0x1,
  R_LOD_INFO_CUR_LOD_ONLY = 0x2,
  R_LOD_INFO_CUR_DIST_ONLY = 0x3,
  R_LOD_INFO_AUTO_DIST_ONLY = 0x4,
  R_LOD_INFO_COUNT = 0x5,
};

enum $3B3A07E9A3E5EAD2A5E3198134EFCC7E
{
  R_COLOR_OVERRIDE_BLACK = 0x0,
  R_COLOR_OVERRIDE_NONE = 0x1,
  R_COLOR_OVERRIDE_WHITE = 0x2,
  R_COLOR_OVERRIDE_GRAY_LINEAR = 0x3,
  R_COLOR_OVERRIDE_GRAY_SRGB = 0x4,
  R_COLOR_OVERRIDE_COUNT = 0x5,
};

enum PerfTimerDisplayMode
{
  PERF_TIMER_MODE_TOP = 0x0,
  PERF_TIMER_MODE_ALL = 0x1,
  PERF_TIMER_MODE_ACTIVE = 0x2,
  PERF_TIMER_MODE_MAJOR = 0x3,
  PERF_TIMER_MODE_MINOR = 0x4,
  PERF_TIMER_MODE_UNKNOWN = 0x5,
};

enum PerfTimerDisplayType
{
  PERF_TIMER_TYPE_STANDARD = 0x0,
  PERF_TIMER_TYPE_IN_PLACE = 0x1,
  PERF_TIMER_TYPE_COM_ONLY = 0x2,
  PERF_TIMER_TYPE_UNKNOWN = 0x3,
};

enum GPUTimerId
{
  GPU_TIMER_UI3D = 0x0,
  GPU_TIMER_LIT_SONAR = 0x1,
  GPU_TIMER_SHADOW_TOTAL = 0x2,
  GPU_TIMER_SUN_SHADOW_TOTAL = 0x3,
  GPU_TIMER_SPOT_SHADOW_TOTAL = 0x4,
  GPU_TIMER_SUN_SHADOW_0 = 0x5,
  GPU_TIMER_SUN_SHADOW_1 = 0x6,
  GPU_TIMER_SPOT_SHADOW_0 = 0x7,
  GPU_TIMER_SPOT_SHADOW_1 = 0x8,
  GPU_TIMER_SPOT_SHADOW_2 = 0x9,
  GPU_TIMER_SPOT_SHADOW_3 = 0xA,
  GPU_TIMER_MAINPASS_TOTAL = 0xB,
  GPU_TIMER_CLEAR_SCREEN = 0xC,
  GPU_TIMER_DEPTH_HACK = 0xD,
  GPU_TIMER_DEPTH_PREPASS = 0xE,
  GPU_TIMER_ZCULL_RELOAD = 0xF,
  GPU_TIMER_LIT_BSP = 0x10,
  GPU_TIMER_LIT_SMODEL = 0x11,
  GPU_TIMER_LIT = 0x12,
  GPU_TIMER_LIGHTMAP = 0x13,
  GPU_TIMER_EMISSIVE_OPAQUE = 0x14,
  GPU_TIMER_LIT_QUASI_OPAQUE = 0x15,
  GPU_TIMER_RESOLVE_SCENE = 0x16,
  GPU_TIMER_LIT_POST_RESOLVE = 0x17,
  GPU_TIMER_LIGHTMAP_POST_RESOLVE = 0x18,
  GPU_TIMER_TRANS = 0x19,
  GPU_TIMER_SUN = 0x1A,
  GPU_TIMER_EMISSIVE_TOTAL = 0x1B,
  GPU_TIMER_EMISSIVE_FX = 0x1C,
  GPU_TIMER_TRANS_POST_FX = 0x1D,
  GPU_TIMER_VIEWMODEL_FX = 0x1E,
  GPU_TIMER_VIEWMODEL_TRANS = 0x1F,
  GPU_TIMER_SUPERFLARE = 0x20,
  GPU_TIMER_EXTRACAM = 0x21,
  GPU_TIMER_FXAA = 0x22,
  GPU_TIMER_BLOOM = 0x23,
  GPU_TIMER_DOF = 0x24,
  GPU_TIMER_UPSCALE = 0x25,
  GPU_TIMER_2D = 0x26,
  GPU_TIMER_2D_TOTAL = 0x27,
  GPU_TIMER_COUNT = 0x28,
};

enum GPUTimerDisplayMode
{
  GPU_TIMER_DISPLAY_MODE_DISABLED = 0x0,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE_SIMPLE = 0x1,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE = 0x2,
  GPU_TIMER_DISPLAY_MODE_ALL_IN_PLACE = 0x3,
  GPU_TIMER_DISPLAY_MODE_TOP = 0x4,
  GPU_TIMER_DISPLAY_MODE_ALL = 0x5,
  GPU_TIMER_DISPLAY_MODE_ACTIVE = 0x6,
  GPU_TIMER_DISPLAY_MODE_MAJOR = 0x7,
  GPU_TIMER_DISPLAY_MODE_MINOR = 0x8,
  GPU_TIMER_DISPLAY_MODE_MAJOR_IN_PLACE = 0x9,
  GPU_TIMER_DISPLAY_MODE_MINOR_IN_PLACE = 0xA,
  GPU_TIMER_DISPLAY_MODE_ALL_COM_ONLY = 0xB,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_COM_ONLY = 0xC,
  GPU_TIMER_DISPLAY_MODE_COLLECT_ONLY = 0xD,
  GPU_TIMER_DISPLAY_MODE_COUNT = 0xE,
};

enum file_image_flags_t
{
  IMG_FLAG_NOPICMIP = 0x1,
  IMG_FLAG_NOMIPMAPS = 0x2,
  IMG_FLAG_CUBEMAP = 0x4,
  IMG_FLAG_VOLMAP = 0x8,
  IMG_FLAG_STREAMING = 0x10,
  IMG_FLAG_CLAMP_U = 0x40,
  IMG_FLAG_CLAMP_V = 0x80,
  IMG_FLAG_FORCE_SYSTEM = 0x100,
  IMG_FLAG_DYNAMIC = 0x10000,
  IMG_FLAG_RENDER_TARGET = 0x20000,
  IMG_FLAG_MULTISAMPLE = 0x40000,
};

enum GfxImageFileFormat
{
  IMG_FORMAT_INVALID = 0x0,
  IMG_FORMAT_BITMAP_RGBA = 0x1,
  IMG_FORMAT_BITMAP_RGB = 0x2,
  IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 0x3,
  IMG_FORMAT_BITMAP_LUMINANCE = 0x4,
  IMG_FORMAT_BITMAP_ALPHA = 0x5,
  IMG_FORMAT_WAVELET_RGBA = 0x6,
  IMG_FORMAT_WAVELET_RGB = 0x7,
  IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 0x8,
  IMG_FORMAT_WAVELET_LUMINANCE = 0x9,
  IMG_FORMAT_WAVELET_ALPHA = 0xA,
  IMG_FORMAT_DXT1 = 0xB,
  IMG_FORMAT_DXT3 = 0xC,
  IMG_FORMAT_DXT5 = 0xD,
  IMG_FORMAT_DXN = 0xE,
  IMG_FORMAT_BITMAP_RGB565 = 0xF,
  IMG_FORMAT_BITMAP_RGB5A3 = 0x10,
  IMG_FORMAT_BITMAP_C8 = 0x11,
  IMG_FORMAT_BITMAP_RGBA8 = 0x12,
  IMG_FORMAT_A16B16G16R16F = 0x13,
  IMG_FORMAT_COUNT = 0x14,
};

enum J_COLOR_SPACE
{
  JCS_UNKNOWN = 0x0,
  JCS_GRAYSCALE = 0x1,
  JCS_RGB = 0x2,
  JCS_YCbCr = 0x3,
  JCS_CMYK = 0x4,
  JCS_YCCK = 0x5,
};

enum J_DCT_METHOD
{
  JDCT_ISLOW = 0x0,
  JDCT_IFAST = 0x1,
  JDCT_FLOAT = 0x2,
};

enum J_DITHER_MODE
{
  JDITHER_NONE = 0x0,
  JDITHER_ORDERED = 0x1,
  JDITHER_FS = 0x2,
};

enum J_BUF_MODE
{
  JBUF_PASS_THRU = 0x0,
  JBUF_SAVE_SOURCE = 0x1,
  JBUF_CRANK_DEST = 0x2,
  JBUF_SAVE_AND_PASS = 0x3,
};

enum MtlTechSetNotFoundBehavior
{
  MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0x0,
  MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 0x1,
};

enum MtlParseSuccess
{
  MTL_PARSE_SUCCESS = 0x0,
  MTL_PARSE_NO_MATCH = 0x1,
  MTL_PARSE_ERROR = 0x2,
};

enum ShaderParamType
{
  SHADER_PARAM_FLOAT4 = 0x0,
  SHADER_PARAM_SAMPLER_2D = 0x1,
  SHADER_PARAM_SAMPLER_3D = 0x2,
  SHADER_PARAM_SAMPLER_CUBE = 0x3,
  SHADER_PARAM_SAMPLER_1D = 0x4,
};

enum MaterialShaderType
{
  MTL_VERTEX_SHADER = 0x0,
  MTL_PIXEL_SHADER = 0x1,
};

enum GfxModelLightExtrapolation
{
  GFX_MODELLIGHT_EXTRAPOLATE = 0x0,
  GFX_MODELLIGHT_SHOW_MISSING = 0x1,
};

enum DUALPLAY_STATE
{
  DUALPLAY_NOTUSED = 0x0,
  DUALPLAY_INGAME = 0x1,
  DUALPLAY_INMENU = 0x2,
};

enum $D738FB8BEE5C4EC48191F185C3DAE38E
{
  TEXT_RENDERFLAG_FORCEMONOSPACE = 0x1,
  TEXT_RENDERFLAG_CURSOR = 0x2,
  TEXT_RENDERFLAG_DROPSHADOW = 0x4,
  TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
  TEXT_RENDERFLAG_GLOW = 0x10,
  TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
  TEXT_RENDERFLAG_FX_DECODE = 0x40,
  TEXT_RENDERFLAG_PADDING = 0x80,
  TEXT_RENDERFLAG_SUBTITLETEXT = 0x100,
  TEXT_RENDERFLAG_CINEMATIC = 0x200,
  TEXT_RENDERFLAG_TYPEWRITER = 0x400,
  TEXT_RENDERFLAG_FADEIN = 0x800,
  TEXT_RENDERFLAG_COD7_TYPEWRITER = 0x1000,
  TEXT_RENDERFLAG_POP_IN_WRITE = 0x2000,
  TEXT_RENDERFLAG_REDACT = 0x4000,
  TEXT_RENDERFLAG_JITTERSCALE = 0x8000,
  TEXT_RENDERFLAG_COD7_DECODE = 0x10000,
  TEXT_RENDERFLAG_AUTOWRAP = 0x20000,
};

enum $606D158E5B876B3516C51757BE03D409
{
  TEXT_DRAWTEXT_DEPRECATED = 0x0,
  TEXT_DRAWTEXT_TELETYPE = 0x1,
};

enum GfxProjectionTypes
{
  GFX_PROJECTION_2D = 0x0,
  GFX_PROJECTION_3D = 0x1,
};

enum RenderTargetUsage
{
  RENDERTARGET_USAGE_DEPTH = 0x0,
  RENDERTARGET_USAGE_RENDER = 0x1,
  RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
  RENDERTARGET_USAGE_TEXTURE = 0x3,
};

enum FullscreenType
{
  FULLSCREEN_DISPLAY = 0x0,
  FULLSCREEN_MIXED = 0x1,
  FULLSCREEN_SCENE = 0x2,
};

enum TexAllocFlags
{
  TEXALLOC_STREAM = 0x1,
  TEXALLOC_HIGHMEM = 0x2,
};

enum ShadowmapRTTiling
{
  SHADOWMAP_RT_TILE_VERTICAL = 0x0,
  SHADOWMAP_RT_TILE_GRID = 0x1,
};

enum $11C4F27839027461F52DEEC0E06BD30E
{
  DRAWSURFLISTINFOSETUP_LIT_QUASI_OPAQUE = 0x0,
  DRAWSURFLISTINFOSETUP_EMISSIVE_OPAQUE = 0x1,
  DRAWSURFLISTINFOSETUP_EMISSIVE_FX = 0x2,
  DRAWSURFLISTINFOSETUP_TRANS = 0x3,
  DRAWSURFLISTINFOSETUP_TRANS_POST_FX = 0x4,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_FX = 0x5,
  DRAWSURFLISTINFOSETUP_SUPERFLARE = 0x6,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_TRANS = 0x7,
  DRAWSURFLISTINFOSETUP_POST_BLUR = 0x8,
  DRAWSURFLISTINFOSETUP_LIT_BSP = 0x9,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL = 0xA,
  DRAWSURFLISTINFOSETUP_LIT = 0xB,
  DRAWSURFLISTINFOSETUP_LIT_BSP_POST_RESOLVE = 0xC,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL_POST_RESOLVE = 0xD,
  DRAWSURFLISTINFOSETUP_LIT_POST_RESOLVE = 0xE,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP = 0xF,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL = 0x10,
  DRAWSURFLISTINFOSETUP_LIGHTMAP = 0x11,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP_POST_RESOLVE = 0x12,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL_POST_RESOLVE = 0x13,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_POST_RESOLVE = 0x14,
  DRAWSURFLISTINFOSETUP_DEPTH_HACK = 0x15,
  DRAWSURFLISTINFOSETUP_SONAR = 0x16,
  DRAWSURFLISTINFOSETUP_COUNT = 0x17,
};

enum $EA98C76F4978AC39CF7AD7780729AC95
{
  POST_FX_FLAME = 0x1,
  POST_FX_ELECTRIFIED = 0x2,
  POST_FX_TRANSPORTED = 0x4,
  POST_FX_WATER = 0x8,
  POST_FX_POISON = 0x10,
  POST_FX_DOUBLE_VISION = 0x20,
  POST_FX_DEPTH_OF_FIELD = 0x40,
  POST_FX_REVIVE = 0x80,
  POST_FX_ANAGLYPH = 0x100,
  POST_FX_MAIN_GROUP = 0x1FF,
  POST_FX_GENERIC = 0x200,
  POST_FX_BLUR = 0x80000,
  POST_FX_SAVE_SCREEN_BLUR = 0x20000000,
  POST_FX_SAVE_SCREEN_FLASH = 0x40000000,
  POST_FX_SAVE_SCREEN_REQUIRED = 0x80000000,
  POST_FX_SAVE_SCREEN_MASK = 0xE0000000,
};

enum GFX_SPOT_SHADOW_FLAGS
{
  SPOT_LIGHT_USING_FULL_SPOT_SHADOW_BUFFER = 0x1,
};

enum $76757E580ED9C4098776CC687610E13E
{
  GFX_USE_VIEWPORT_FOR_VIEW = 0x0,
  GFX_USE_VIEWPORT_FULL = 0x1,
};
enum $31144037AA3F0E3980206CDC3F581D39
{
  TEMP_IMAGE_FREE = 0x0,
  TEMP_IMAGE_RESERVED = 0x1,
  TEMP_IMAGE_ALLOCED = 0x2,
  TEMP_IMAGE_ADDED = 0x3,
  TEMP_IMAGE_STOMPED = 0x4,
};

enum XSurfaceVertColType
{
  XSURFACE_VERTCOL_NONE = 0x0,
  XSURFACE_VERTCOL_GREY = 0x1,
  XSURFACE_VERTCOL_ALL = 0x2,
};

enum filterFlags
{
  FILTER_BIT0 = 0x1,
  FILTER_BIT1 = 0x2,
  FILTER_USEQUAD = 0x4,
};

enum GfxFrameBufferTextures
{
  RT_COLOR0 = 0x0,
  RT_DEPTH = 0x1,
  RT_DEPTH_AS_ARGB = 0x2,
  FRAME_BUFFER_TEXTURE_COUNT = 0x3,
};

enum J_MESSAGE_CODE
{
  JMSG_NOMESSAGE = 0x0,
  JERR_ARITH_NOTIMPL = 0x1,
  JERR_BAD_ALIGN_TYPE = 0x2,
  JERR_BAD_ALLOC_CHUNK = 0x3,
  JERR_BAD_BUFFER_MODE = 0x4,
  JERR_BAD_COMPONENT_ID = 0x5,
  JERR_BAD_DCT_COEF = 0x6,
  JERR_BAD_DCTSIZE = 0x7,
  JERR_BAD_HUFF_TABLE = 0x8,
  JERR_BAD_IN_COLORSPACE = 0x9,
  JERR_BAD_J_COLORSPACE = 0xA,
  JERR_BAD_LENGTH = 0xB,
  JERR_BAD_LIB_VERSION = 0xC,
  JERR_BAD_MCU_SIZE = 0xD,
  JERR_BAD_POOL_ID = 0xE,
  JERR_BAD_PRECISION = 0xF,
  JERR_BAD_PROGRESSION = 0x10,
  JERR_BAD_PROG_SCRIPT = 0x11,
  JERR_BAD_SAMPLING = 0x12,
  JERR_BAD_SCAN_SCRIPT = 0x13,
  JERR_BAD_STATE = 0x14,
  JERR_BAD_STRUCT_SIZE = 0x15,
  JERR_BAD_VIRTUAL_ACCESS = 0x16,
  JERR_BUFFER_SIZE = 0x17,
  JERR_CANT_SUSPEND = 0x18,
  JERR_CCIR601_NOTIMPL = 0x19,
  JERR_COMPONENT_COUNT = 0x1A,
  JERR_CONVERSION_NOTIMPL = 0x1B,
  JERR_DAC_INDEX = 0x1C,
  JERR_DAC_VALUE = 0x1D,
  JERR_DHT_INDEX = 0x1E,
  JERR_DQT_INDEX = 0x1F,
  JERR_EMPTY_IMAGE = 0x20,
  JERR_EMS_READ = 0x21,
  JERR_EMS_WRITE = 0x22,
  JERR_EOI_EXPECTED = 0x23,
  JERR_FILE_READ = 0x24,
  JERR_FILE_WRITE = 0x25,
  JERR_FRACT_SAMPLE_NOTIMPL = 0x26,
  JERR_HUFF_CLEN_OVERFLOW = 0x27,
  JERR_HUFF_MISSING_CODE = 0x28,
  JERR_IMAGE_TOO_BIG = 0x29,
  JERR_INPUT_EMPTY = 0x2A,
  JERR_INPUT_EOF = 0x2B,
  JERR_MISMATCHED_QUANT_TABLE = 0x2C,
  JERR_MISSING_DATA = 0x2D,
  JERR_MODE_CHANGE = 0x2E,
  JERR_NOTIMPL = 0x2F,
  JERR_NOT_COMPILED = 0x30,
  JERR_NO_BACKING_STORE = 0x31,
  JERR_NO_HUFF_TABLE = 0x32,
  JERR_NO_IMAGE = 0x33,
  JERR_NO_QUANT_TABLE = 0x34,
  JERR_NO_SOI = 0x35,
  JERR_OUT_OF_MEMORY = 0x36,
  JERR_QUANT_COMPONENTS = 0x37,
  JERR_QUANT_FEW_COLORS = 0x38,
  JERR_QUANT_MANY_COLORS = 0x39,
  JERR_SOF_DUPLICATE = 0x3A,
  JERR_SOF_NO_SOS = 0x3B,
  JERR_SOF_UNSUPPORTED = 0x3C,
  JERR_SOI_DUPLICATE = 0x3D,
  JERR_SOS_NO_SOF = 0x3E,
  JERR_TFILE_CREATE = 0x3F,
  JERR_TFILE_READ = 0x40,
  JERR_TFILE_SEEK = 0x41,
  JERR_TFILE_WRITE = 0x42,
  JERR_TOO_LITTLE_DATA = 0x43,
  JERR_UNKNOWN_MARKER = 0x44,
  JERR_VIRTUAL_BUG = 0x45,
  JERR_WIDTH_OVERFLOW = 0x46,
  JERR_XMS_READ = 0x47,
  JERR_XMS_WRITE = 0x48,
  JMSG_COPYRIGHT = 0x49,
  JMSG_VERSION = 0x4A,
  JTRC_16BIT_TABLES = 0x4B,
  JTRC_ADOBE = 0x4C,
  JTRC_APP0 = 0x4D,
  JTRC_APP14 = 0x4E,
  JTRC_DAC = 0x4F,
  JTRC_DHT = 0x50,
  JTRC_DQT = 0x51,
  JTRC_DRI = 0x52,
  JTRC_EMS_CLOSE = 0x53,
  JTRC_EMS_OPEN = 0x54,
  JTRC_EOI = 0x55,
  JTRC_HUFFBITS = 0x56,
  JTRC_JFIF = 0x57,
  JTRC_JFIF_BADTHUMBNAILSIZE = 0x58,
  JTRC_JFIF_EXTENSION = 0x59,
  JTRC_JFIF_THUMBNAIL = 0x5A,
  JTRC_MISC_MARKER = 0x5B,
  JTRC_PARMLESS_MARKER = 0x5C,
  JTRC_QUANTVALS = 0x5D,
  JTRC_QUANT_3_NCOLORS = 0x5E,
  JTRC_QUANT_NCOLORS = 0x5F,
  JTRC_QUANT_SELECTED = 0x60,
  JTRC_RECOVERY_ACTION = 0x61,
  JTRC_RST = 0x62,
  JTRC_SMOOTH_NOTIMPL = 0x63,
  JTRC_SOF = 0x64,
  JTRC_SOF_COMPONENT = 0x65,
  JTRC_SOI = 0x66,
  JTRC_SOS = 0x67,
  JTRC_SOS_COMPONENT = 0x68,
  JTRC_SOS_PARAMS = 0x69,
  JTRC_TFILE_CLOSE = 0x6A,
  JTRC_TFILE_OPEN = 0x6B,
  JTRC_THUMB_JPEG = 0x6C,
  JTRC_THUMB_PALETTE = 0x6D,
  JTRC_THUMB_RGB = 0x6E,
  JTRC_UNKNOWN_IDS = 0x6F,
  JTRC_XMS_CLOSE = 0x70,
  JTRC_XMS_OPEN = 0x71,
  JWRN_ADOBE_XFORM = 0x72,
  JWRN_BOGUS_PROGRESSION = 0x73,
  JWRN_EXTRANEOUS_DATA = 0x74,
  JWRN_HIT_MARKER = 0x75,
  JWRN_HUFF_BAD_CODE = 0x76,
  JWRN_JFIF_MAJOR = 0x77,
  JWRN_JPEG_EOF = 0x78,
  JWRN_MUST_RESYNC = 0x79,
  JWRN_NOT_SEQUENTIAL = 0x7A,
  JWRN_TOO_MUCH_DATA = 0x7B,
  JMSG_LASTMSGCODE = 0x7C,
};

enum JPEG_MARKER
{
  M_SOF0 = 0xC0,
  M_SOF1 = 0xC1,
  M_SOF2 = 0xC2,
  M_SOF3 = 0xC3,
  M_SOF5 = 0xC5,
  M_SOF6 = 0xC6,
  M_SOF7 = 0xC7,
  M_JPG = 0xC8,
  M_SOF9 = 0xC9,
  M_SOF10 = 0xCA,
  M_SOF11 = 0xCB,
  M_SOF13 = 0xCD,
  M_SOF14 = 0xCE,
  M_SOF15 = 0xCF,
  M_DHT = 0xC4,
  M_DAC = 0xCC,
  M_RST0 = 0xD0,
  M_RST1 = 0xD1,
  M_RST2 = 0xD2,
  M_RST3 = 0xD3,
  M_RST4 = 0xD4,
  M_RST5 = 0xD5,
  M_RST6 = 0xD6,
  M_RST7 = 0xD7,
  M_SOI = 0xD8,
  M_EOI = 0xD9,
  M_SOS = 0xDA,
  M_DQT = 0xDB,
  M_DNL = 0xDC,
  M_DRI = 0xDD,
  M_DHP = 0xDE,
  M_EXP = 0xDF,
  M_APP0 = 0xE0,
  M_APP1 = 0xE1,
  M_APP2 = 0xE2,
  M_APP3 = 0xE3,
  M_APP4 = 0xE4,
  M_APP5 = 0xE5,
  M_APP6 = 0xE6,
  M_APP7 = 0xE7,
  M_APP8 = 0xE8,
  M_APP9 = 0xE9,
  M_APP10 = 0xEA,
  M_APP11 = 0xEB,
  M_APP12 = 0xEC,
  M_APP13 = 0xED,
  M_APP14 = 0xEE,
  M_APP15 = 0xEF,
  M_JPG0 = 0xF0,
  M_JPG13 = 0xFD,
  M_COM = 0xFE,
  M_TEM = 0x1,
  M_ERROR = 0x100,
};

enum c_pass_type
{
  main_pass = 0x0,
  huff_opt_pass = 0x1,
  output_pass = 0x2,
};

enum $D283E5A92EBEB600100C8EBC9C67A011
{
  lkNormal = 0x0,
  lkPrealloc = 0x1,
  lkDeleted = 0x2,
};

enum state_t
{
  S_INIT = 0x0,
  S_EAT0L = 0x1,
  S_SIGNM = 0x2,
  S_GETL = 0x3,
  S_GETR = 0x4,
  S_POINT = 0x5,
  S_E = 0x6,
  S_SIGNE = 0x7,
  S_EAT0E = 0x8,
  S_GETE = 0x9,
  S_END = 0xA,
  S_E_IMPLICIT = 0xB,
};

enum bdNotificationType
{
    BD_FRIENDSHIP_REJECTED = 0x1,
    BD_FRIENDSHIP_ACCEPTED = 0x2,
    BD_FRIENDSHIP_REVOKED = 0x3,
    BD_TEAMNAME_UPDATED = 0x4,
    BD_TEAMMEMBER_PROMOTED_TO_ADMIN = 0x5,
    BD_TEAMMEMBER_PROMOTED_TO_OWNER = 0x6,
    BD_TEAMMEMBER_DEMOTED_TO_ORDINARY = 0x7,
    BD_TEAMMEMBER_KICKED = 0x8,
    BD_TEAM_DISSOLVED = 0x9,
    BD_TEAMMEMBER_LEFT = 0xA,
    BD_TEAMMEMBER_INVITE_REJECTED = 0xB,
    BD_TEAMMEMBER_INVITE_ACCEPTED = 0xC,
};

enum bdLobbyErrorCode : __int32
{
    BD_NO_ERROR = 0x0,
    BD_TOO_MANY_TASKS = 0x1,
    BD_NOT_CONNECTED = 0x2,
    BD_SEND_FAILED = 0x3,
    BD_HANDLE_TASK_FAILED = 0x4,
    BD_START_TASK_FAILED = 0x5,
    BD_RESULT_EXCEEDS_BUFFER_SIZE = 0x64,
    BD_ACCESS_DENIED = 0x65,
    BD_EXCEPTION_IN_DB = 0x66,
    BD_MALFORMED_TASK_HEADER = 0x67,
    BD_INVALID_ROW = 0x68,
    BD_EMPTY_ARG_LIST = 0x69,
    BD_PARAM_PARSE_ERROR = 0x6A,
    BD_PARAM_MISMATCHED_TYPE = 0x6B,
    BD_SERVICE_NOT_AVAILABLE = 0x6C,
    BD_CONNECTION_RESET = 0x6D,
    BD_INVALID_USER_ID = 0x6E,
    BD_LOBBY_PROTOCOL_VERSION_FAILURE = 0x6F,
    BD_LOBBY_INTERNAL_FAILURE = 0x70,
    BD_LOBBY_PROTOCOL_ERROR = 0x71,
    BD_LOBBY_FAILED_TO_DECODE_UTF8 = 0x72,
    BD_LOBBY_ASCII_EXPECTED = 0x73,
    BD_ASYNCHRONOUS_ERROR = 0xC8,
    BD_STREAMING_COMPLETE = 0xC9,
    BD_MEMBER_NO_PROPOSAL = 0x12C,
    BD_TEAMNAME_ALREADY_EXISTS = 0x12D,
    BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 0x12E,
    BD_MAX_TEAM_OWNERSHIPS_LIMITED = 0x12F,
    BD_NOT_A_TEAM_MEMBER = 0x130,
    BD_INVALID_TEAM_ID = 0x131,
    BD_INVALID_TEAM_NAME = 0x132,
    BD_NOT_A_TEAM_OWNER = 0x133,
    BD_NOT_AN_ADMIN_OR_OWNER = 0x134,
    BD_MEMBER_PROPOSAL_EXISTS = 0x135,
    BD_MEMBER_EXISTS = 0x136,
    BD_TEAM_FULL = 0x137,
    BD_VULGAR_TEAM_NAME = 0x138,
    BD_TEAM_USERID_BANNED = 0x139,
    BD_TEAM_EMPTY = 0x13A,
    BD_INVALID_TEAM_PROFILE_QUERY_ID = 0x13B,
    BD_TEAMNAME_TOO_SHORT = 0x13C,
    BD_UNIQUE_PROFILE_DATA_EXISTS_ALREADY = 0x13D,
    BD_INVALID_LEADERBOARD_ID = 0x190,
    BD_INVALID_STATS_SET = 0x191,
    BD_EMPTY_STATS_SET_IGNORED = 0x193,
    BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 0x194,
    BD_STATS_WRITE_PERMISSION_DENIED = 0x195,
    BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 0x196,
    BD_NO_STATS_FOR_USER = 0x197,
    BD_INVALID_ACCESS_TO_UNRANKED_LB = 0x198,
    BD_INVALID_EXTERNAL_TITLE_ID = 0x199,
    BD_DIFFERENT_LEADERBOARD_SCHEMAS = 0x19A,
    BD_TOO_MANY_LEADERBOARDS_REQUESTED = 0x19B,
    BD_ENTITLEMENTS_ERROR = 0x19C,
    BD_ENTITLEMENTS_INVALID_TITLEID = 0x19D,
    BD_ENTITLEMENTS_INVALID_LEADERBOARDID = 0x19E,
    BD_ENTITLEMENTS_INVALID_GET_MODE_FOR_TITLE = 0x19F,
    BD_ENTITLEMENTS_URL_CONNECTION_ERROR = 0x1A0,
    BD_ENTITLEMENTS_CONFIG_ERROR = 0x1A1,
    BD_ENTITLEMENTS_NAMED_PARENT_ERROR = 0x1A2,
    BD_ENTITLEMENTS_NAMED_KEY_ERROR = 0x1A3,
    BD_TOO_MANY_ENTITY_IDS_REQUESTED = 0x1A4,
    BD_STATS_READ_FAILED = 0x1A5,
    BD_INVALID_TITLE_ID = 0x1F4,
    BD_MESSAGING_INVALID_MAIL_ID = 0x258,
    BD_SELF_BLOCK_NOT_ALLOWED = 0x259,
    BD_GLOBAL_MESSAGE_ACCESS_DENIED = 0x25A,
    BD_GLOBAL_MESSAGES_USER_LIMIT_EXCEEDED = 0x25B,
    BD_AUTH_NO_ERROR = 0x2BC,
    BD_AUTH_BAD_REQUEST = 0x2BD,
    BD_AUTH_SERVER_CONFIG_ERROR = 0x2BE,
    BD_AUTH_BAD_TITLE_ID = 0x2BF,
    BD_AUTH_BAD_ACCOUNT = 0x2C0,
    BD_AUTH_ILLEGAL_OPERATION = 0x2C1,
    BD_AUTH_INCORRECT_LICENSE_CODE = 0x2C2,
    BD_AUTH_CREATE_USERNAME_EXISTS = 0x2C3,
    BD_AUTH_CREATE_USERNAME_ILLEGAL = 0x2C4,
    BD_AUTH_CREATE_USERNAME_VULGAR = 0x2C5,
    BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 0x2C6,
    BD_AUTH_MIGRATE_NOT_SUPPORTED = 0x2C7,
    BD_AUTH_TITLE_DISABLED = 0x2C8,
    BD_AUTH_ACCOUNT_EXPIRED = 0x2C9,
    BD_AUTH_ACCOUNT_LOCKED = 0x2CA,
    BD_AUTH_UNKNOWN_ERROR = 0x2CB,
    BD_AUTH_INCORRECT_PASSWORD = 0x2CC,
    BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 0x2CD,
    BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 0x2CE,
    BD_AUTH_WII_AUTHENTICATION_FAILED = 0x2CF,
    BD_AUTH_IP_KEY_LIMIT_REACHED = 0x2D0,
    BD_AUTH_INVALID_GSPID = 0x2D1,
    BD_AUTH_INVALID_IP_RANGE_ID = 0x2D2,
    BD_AUTH_3DS_TOKEN_VERIFICATION_FAILED = 0x2D1,
    BD_AUTH_3DS_AUTHENTICATION_FAILED = 0x2D2,
    BD_AUTH_STEAM_APP_ID_MISMATCH = 0x2D3,
    BD_AUTH_ABACCOUNTS_APP_ID_MISMATCH = 0x2D4,
    BD_AUTH_CODO_USERNAME_NOT_SET = 0x2D5,
    BD_AUTH_WIIU_TOKEN_VERIFICATION_FAILED = 0x2D6,
    BD_AUTH_WIIU_AUTHENTICATION_FAILED = 0x2D7,
    BD_AUTH_CODO_USERNAME_NOT_BASE64 = 0x2D8,
    BD_AUTH_CODO_USERNAME_NOT_UTF8 = 0x2D9,
    BD_AUTH_TENCENT_TICKET_EXPIRED = 0x2DA,
    BD_NO_PROFILE_INFO_EXISTS = 0x320,
    BD_FRIENDSHIP_NOT_REQUSTED = 0x384,
    BD_NOT_A_FRIEND = 0x385,
    BD_SELF_FRIENDSHIP_NOT_ALLOWED = 0x387,
    BD_FRIENDSHIP_EXISTS = 0x388,
    BD_PENDING_FRIENDSHIP_EXISTS = 0x389,
    BD_USERID_BANNED = 0x38A,
    BD_FRIENDS_FULL = 0x38C,
    BD_FRIENDS_NO_RICH_PRESENCE = 0x38D,
    BD_RICH_PRESENCE_TOO_LARGE = 0x38E,
    BD_NO_FILE = 0x3E8,
    BD_PERMISSION_DENIED = 0x3E9,
    BD_FILESIZE_LIMIT_EXCEEDED = 0x3EA,
    BD_FILENAME_MAX_LENGTH_EXCEEDED = 0x3EB,
    BD_CHANNEL_DOES_NOT_EXIST = 0x44D,
    BD_CHANNEL_ALREADY_SUBSCRIBED = 0x44E,
    BD_CHANNEL_NOT_SUBSCRIBED = 0x44F,
    BD_CHANNEL_FULL = 0x450,
    BD_CHANNEL_SUBSCRIPTIONS_FULL = 0x451,
    BD_CHANNEL_NO_SELF_WHISPERING = 0x452,
    BD_CHANNEL_ADMIN_REQUIRED = 0x453,
    BD_CHANNEL_TARGET_NOT_SUBSCRIBED = 0x454,
    BD_CHANNEL_REQUIRES_PASSWORD = 0x455,
    BD_CHANNEL_TARGET_IS_SELF = 0x456,
    BD_CHANNEL_PUBLIC_BAN_NOT_ALLOWED = 0x457,
    BD_CHANNEL_USER_BANNED = 0x458,
    BD_CHANNEL_PUBLIC_PASSWORD_NOT_ALLOWED = 0x459,
    BD_CHANNEL_PUBLIC_KICK_NOT_ALLOWED = 0x45A,
    BD_EVENT_DESC_TRUNCATED = 0x4B0,
    BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 0x514,
    BD_UNLOCK_KEY_INVALID = 0x515,
    BD_UNLOCK_KEY_ALREADY_USED_UP = 0x516,
    BD_SHARED_UNLOCK_LIMIT_REACHED = 0x517,
    BD_DIFFERENT_HARDWARE_ID = 0x518,
    BD_INVALID_CONTENT_OWNER = 0x519,
    BD_CONTENT_UNLOCK_INVALID_USER = 0x51A,
    BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 0x5DC,
    BD_KEY_ARCHIVE_EXCEEDED_MAX_IDS_PER_REQUEST = 0x5DD,
    BD_BANDWIDTH_TEST_TRY_AGAIN = 0x712,
    BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 0x713,
    BD_BANDWIDTH_TEST_NOT_PROGRESS = 0x714,
    BD_BANDWIDTH_TEST_SOCKET_ERROR = 0x715,
    BD_INVALID_SESSION_NONCE = 0x76D,
    BD_ARBITRATION_FAILURE = 0x76F,
    BD_ARBITRATION_USER_NOT_REGISTERED = 0x771,
    BD_ARBITRATION_NOT_CONFIGURED = 0x772,
    BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 0x7D0,
    BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 0x7D1,
    BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 0x7D2,
    BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 0x7D3,
    BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 0x7D4,
    BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 0x7D5,
    BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 0x7D6,
    BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 0x7D7,
    BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 0x7D8,
    BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 0x7DA,
    BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 0x7DB,
    BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 0x7DC,
    BD_CONTENTSTREAMING_HTTP_ERROR = 0x7E4,
    BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 0x7E5,
    BD_CONTENTSTREAMING_LOCALE_INVALID = 0x7E6,
    BD_CONTENTSTREAMING_LOCALE_MISSING = 0x7E7,
    BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 0x7EE,
    BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 0x7EF,
    BD_VOTERANK_ERROR_INVALID_RATING = 0x7F0,
    BD_MAX_NUM_TAGS_EXCEEDED = 0x82A,
    BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 0x82B,
    BD_EMPTY_TAG_ARRAY = 0x82C,
    BD_INVALID_QUERY_ID = 0x834,
    BD_NO_ENTRY_TO_UPDATE = 0x835,
    BD_SESSION_INVITE_EXISTS = 0x836,
    BD_INVALID_SESSION_ID = 0x837,
    BD_ATTACHMENT_TOO_LARGE = 0x838,
    BD_INVALID_GROUP_ID = 0xAF0,
    BD_UCD_SERVICE_ERROR = 0xC80,
    BD_UCD_SERVICE_DISABLED = 0xC81,
    BD_UCD_UNINTIALIZED_ERROR = 0xC82,
    BD_UCD_ACCOUNT_ALREADY_REGISTERED = 0xC83,
    BD_UCD_ACCOUNT_NOT_REGISTERED = 0xC84,
    BD_UCD_AUTH_ATTEMPT_FAILED = 0xC85,
    BD_UCD_ACCOUNT_LINKING_ERROR = 0xC86,
    BD_UCD_ENCRYPTION_ERROR = 0xC87,
    BD_UCD_ACCOUNT_DATA_INVALID = 0xC88,
    BD_UCD_ACCOUNT_DATA_INVALID_FIRSTNAME = 0xC89,
    BD_UCD_ACCOUNT_DATA_INVALID_LASTNAME = 0xC8A,
    BD_UCD_ACCOUNT_DATA_INVALID_DOB = 0xC8B,
    BD_UCD_ACCOUNT_DATA_INVALID_EMAIL = 0xC8C,
    BD_UCD_ACCOUNT_DATA_INVALID_COUNTRY = 0xC8D,
    BD_UCD_ACCOUNT_DATA_INVALID_POSTCODE = 0xC8E,
    BD_UCD_ACCOUNT_NAME_ALREADY_RESISTERED = 0xC94,
    BD_UCD_ACCOUNT_EMAIL_ALREADY_RESISTERED = 0xC95,
    BD_TWITCH_SERVICE_ERROR = 0xC1D,
    BD_TWITCH_ACCOUNT_ALREADY_LINKED = 0xC1E,
    BD_TWITCH_NO_LINKED_ACCOUNT = 0xC1F,
    BD_YOUTUBE_SERVICE_ERROR = 0xCE5,
    BD_YOUTUBE_SERVICE_COMMUNICATION_ERROR = 0xCE6,
    BD_YOUTUBE_USER_DENIED_AUTHORIZATION = 0xCE7,
    BD_YOUTUBE_AUTH_MAX_TIME_EXCEEDED = 0xCE8,
    BD_YOUTUBE_USER_UNAUTHORIZED = 0xCE9,
    BD_YOUTUBE_UPLOAD_MAX_TIME_EXCEEDED = 0xCEA,
    BD_YOUTUBE_DUPLICATE_UPLOAD = 0xCEB,
    BD_YOUTUBE_FAILED_UPLOAD = 0xCEC,
    BD_YOUTUBE_ACCOUNT_ALREADY_REGISTERED = 0xCED,
    BD_YOUTUBE_ACCOUNT_NOT_REGISTERED = 0xCEE,
    BD_YOUTUBE_CONTENT_SERVER_ERROR = 0xCEF,
    BD_YOUTUBE_UPLOAD_DOES_NOT_EXIST = 0xCF0,
    BD_YOUTUBE_NO_LINKED_ACCOUNT = 0xCF1,
    BD_YOUTUBE_DEVELOPER_TAGS_INVALID = 0xCF2,
    BD_TWITTER_AUTH_ATTEMPT_FAILED = 0xDAD,
    BD_TWITTER_AUTH_TOKEN_INVALID = 0xDAE,
    BD_TWITTER_UPDATE_LIMIT_REACHED = 0xDAF,
    BD_TWITTER_UNAVAILABLE = 0xDB0,
    BD_TWITTER_ERROR = 0xDB1,
    BD_TWITTER_TIMED_OUT = 0xDB2,
    BD_TWITTER_DISABLED_FOR_USER = 0xDB3,
    BD_TWITTER_ACCOUNT_AMBIGUOUS = 0xDB4,
    BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 0xDB5,
    BD_TWITTER_ACCOUNT_NOT_REGISTERED = 0xDB6,
    BD_TWITTER_DUPLICATE_STATUS = 0xDB7,
    BD_TWITTER_ACCOUNT_ALREADY_REGISTERED = 0xE1C,
    BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 0xE11,
    BD_FACEBOOK_AUTH_TOKEN_INVALID = 0xE12,
    BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 0xE13,
    BD_FACEBOOK_PHOTO_INVALID = 0xE14,
    BD_FACEBOOK_PHOTO_ALBUM_FULL = 0xE15,
    BD_FACEBOOK_UNAVAILABLE = 0xE16,
    BD_FACEBOOK_ERROR = 0xE17,
    BD_FACEBOOK_TIMED_OUT = 0xE18,
    BD_FACEBOOK_DISABLED_FOR_USER = 0xE19,
    BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 0xE1A,
    BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 0xE1B,
    BD_FACEBOOK_INVALID_NUM_PICTURES_REQUESTED = 0xE1C,
    BD_FACEBOOK_VIDEO_DOES_NOT_EXIST = 0xE1D,
    BD_FACEBOOK_ACCOUNT_ALREADY_REGISTERED = 0xE1E,
    BD_APNS_INVALID_PAYLOAD = 0xE74,
    BD_MAX_CONSOLEID_LENGTH_EXCEEDED = 0xEE1,
    BD_MAX_WHITELIST_LENGTH_EXCEEDED = 0xEE2,
    BD_USERGROUP_NAME_ALREADY_EXISTS = 0x1770,
    BD_INVALID_USERGROUP_ID = 0x1771,
    BD_USER_ALREADY_IN_USERGROUP = 0x1772,
    BD_USER_NOT_IN_USERGROUP = 0x1773,
    BD_INVALID_USERGROUP_MEMBER_TYPE = 0x1774,
    BD_TOO_MANY_MEMBERS_REQUESTED = 0x1775,
    BD_USERGROUP_NAME_TOO_SHORT = 0x1776,
    BD_RICH_PRESENCE_DATA_TOO_LARGE = 0x1A90,
    BD_RICH_PRESENCE_TOO_MANY_USERS = 0x1A91,
    BD_SUBSCRIPTION_TOO_MANY_USERS = 0x1B58,
    BD_SUBSCRIPTION_TICKET_PARSE_ERROR = 0x1B59,
    BD_CODO_ID_INVALID_DATA = 0x1BBC,
    BD_INVALID_MESSAGE_FORMAT = 0x1BBD,
    BD_TLOG_TOO_MANY_MESSAGES = 0x1BBE,
    BD_CODO_ID_NOT_IN_WHITELIST = 0x1BBF,
    BD_TLOG_MESSAGE_TRANSFORMATION_ERROR = 0x1BC0,
    BD_MARKETPLACE_ERROR = 0x1F40,
    BD_MARKETPLACE_RESOURCE_NOT_FOUND = 0x1F41,
    BD_MARKETPLACE_INVALID_CURRENCY = 0x1F42,
    BD_MARKETPLACE_INVALID_PARAMETER = 0x1F43,
    BD_MARKETPLACE_RESOURCE_CONFLICT = 0x1F44,
    BD_MARKETPLACE_STORAGE_ERROR = 0x1F45,
    BD_MARKETPLACE_INTEGRITY_ERROR = 0x1F46,
    BD_MARKETPLACE_INSUFFICIENT_FUNDS_ERROR = 0x1F47,
    BD_MARKETPLACE_MMP_SERVICE_ERROR = 0x1F48,
    BD_MARKETPLACE_PRECONDITION_REQUIRED = 0x1F49,
    BD_MARKETPLACE_ITEM_MULTIPLE_PURCHASE_ERROR = 0x1F4A,
    BD_MARKETPLACE_MISSING_REQUIRED_ENTITLEMENT = 0x1F4B,
    BD_MARKETPLACE_VALIDATION_ERROR = 0x1F4C,
    BD_MARKETPLACE_TENCENT_PAYMENT_ERROR = 0x1F4D,
    BD_MARKETPLACE_SKU_NOT_COUPON_ENABLED_ERROR = 0x1F4E,
    BD_LEAGUE_INVALID_TEAM_SIZE = 0x1FA4,
    BD_LEAGUE_INVALID_TEAM = 0x1FA5,
    BD_LEAGUE_INVALID_SUBDIVISION = 0x1FA6,
    BD_LEAGUE_INVALID_LEAGUE = 0x1FA7,
    BD_LEAGUE_TOO_MANY_RESULTS_REQUESTED = 0x1FA8,
    BD_LEAGUE_METADATA_TOO_LARGE = 0x1FA9,
    BD_LEAGUE_TEAM_ICON_TOO_LARGE = 0x1FAA,
    BD_LEAGUE_TEAM_NAME_TOO_LONG = 0x1FAB,
    BD_LEAGUE_ARRAY_SIZE_MISMATCH = 0x1FAC,
    BD_LEAGUE_SUBDIVISION_MISMATCH = 0x2008,
    BD_LEAGUE_INVALID_WRITE_TYPE = 0x2009,
    BD_LEAGUE_INVALID_STATS_DATA = 0x200A,
    BD_LEAGUE_SUBDIVISION_UNRANKED = 0x200B,
    BD_LEAGUE_CROSS_TEAM_STATS_WRITE_PREVENTED = 0x200C,
    BD_LEAGUE_INVALID_STATS_SEASON = 0x200D,
    BD_COMMERCE_ERROR = 0x206C,
    BD_COMMERCE_RESOURCE_NOT_FOUND = 0x206D,
    BD_COMMERCE_STORAGE_INVALID_PARAMETER = 0x206E,
    BD_COMMERCE_APPLICATION_INVALID_PARAMETER = 0x206F,
    BD_COMMERCE_RESOURCE_CONFLICT = 0x2070,
    BD_COMMERCE_STORAGE_ERROR = 0x2071,
    BD_COMMERCE_INTEGRITY_ERROR = 0x2072,
    BD_COMMERCE_MMP_SERVICE_ERROR = 0x2073,
    BD_COMMERCE_PERMISSION_DENIED = 0x2074,
    BD_COMMERCE_INSUFFICIENT_FUNDS_ERROR = 0x2075,
    BD_COMMERCE_UNKNOWN_CURRENCY = 0x2076,
    BD_COMMERCE_INVALID_RECEIPT = 0x2077,
    BD_COMMERCE_RECEIPT_USED = 0x2078,
    BD_COMMERCE_TRANSACTION_ALREADY_APPLIED = 0x2079,
    BD_COMMERCE_INVALID_CURRENCY_TYPE = 0x207A,
    BD_CONNECTION_COUNTER_ERROR = 0x20D0,
    BD_GMSG_INVALID_CATEGORY_ID = 0x27D8,
    BD_GMSG_CATEGORY_MEMBERSHIPS_LIMIT = 0x27D9,
    BD_GMSG_NONMEMBER_POST_DISALLOWED = 0x27DA,
    BD_GMSG_CATEGORY_DISALLOWS_CLIENT_TYPE = 0x27DB,
    BD_GMSG_PAYLOAD_TOO_BIG = 0x27DC,
    BD_GMSG_MEMBER_POST_DISALLOWED = 0x27DD,
    BD_GMSG_OVERLOADED = 0x27DE,
    BD_GMSG_USER_PERCATEGORY_POST_RATE_EXCEEDED = 0x27DF,
    BD_GMSG_USER_GLOBAL_POST_RATE_EXCEEDED = 0x27E0,
    BD_GMSG_GROUP_POST_RATE_EXCEEDED = 0x27E1,
    BD_MAX_ERROR_CODE = 0x27E2,
};

typedef serverAction_t serverSignedStatsAction_t;

struct MenuCell
{
  int type;
  int maxChars;
  char *stringValue;
};

union vec4_t
{
  float v[4];
  struct {
      float x;
      float y;
      float z;
      float w;
  };
  struct {
      float r;
      float g;
      float b;
      float a;
  };
};

union DvarValue
{
  bool enabled;
  int integer;
  unsigned int unsignedInt;
  __int64 integer64;
  unsigned __int64 unsignedInt64;
  float value;
  vec4_t vector;
  const char *string;
  unsigned __int8 color[4];
};

typedef union DvarLimits
{
    struct
    {
        int stringCount;
        const char **strings;
    } enumeration;
    struct
    {
        int min;
        int max;
    } integer;
    struct
    {
        __int64 min;
        __int64 max;
    } integer64;
    struct
    {
        float min;
        float max;
    } value;
    struct
    {
        float min;
        float max;
    } vector;
} DvarLimits;

struct __declspec(align(8)) dvar_t
{
  const char *name;
  const char *description;
  int hash;
  unsigned int flags;
  dvarType_t type;
  bool modified;
  DvarValue current;
  DvarValue latched;
  DvarValue reset;
  DvarLimits domain;
  dvar_t *hashNext;
};

union operandInternalDataUnion
{
  int intVal;
  float floatVal;
  const char *string;
  const dvar_t *dvar;
};

union vec3_t
{
    float v[3];
    struct {
        float x;
        float y;
        float z;
    };
};

struct cplane_s
{
  vec3_t normal;
  float dist;
  unsigned __int8 type;
  unsigned __int8 signbits;
  unsigned __int8 pad[2];
};

struct cbrushside_t
{
  cplane_s *plane;
  int cflags;
  int sflags;
};

struct GfxDrawSurfFields
{
  unsigned __int64 objectId : 16;
  unsigned __int64 customIndex : 9;
  unsigned __int64 reflectionProbeIndex : 5;
  unsigned __int64 dlightMask : 2;
  unsigned __int64 materialSortedIndex : 12;
  unsigned __int64 primaryLightIndex : 8;
  unsigned __int64 surfType : 4;
  unsigned __int64 prepass : 2;
  unsigned __int64 primarySortKey : 6;
};

union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  unsigned __int64 packed;
};

struct __declspec(align(8)) MaterialInfo
{
  const char *name;
  unsigned int gameFlags;
  unsigned __int8 pad;
  unsigned __int8 sortKey;
  unsigned __int8 textureAtlasRowCount;
  unsigned __int8 textureAtlasColumnCount;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
  unsigned int layeredSurfaceTypes;
  unsigned __int16 hashIndex;
  int surfaceFlags;
  int contents;
};

struct MaterialStreamRouting
{
  unsigned __int8 source;
  unsigned __int8 dest;
};

struct MaterialVertexStreamRouting
{
  MaterialStreamRouting data[16];
  ID3D11InputLayout *decl[20];
};

struct MaterialVertexDeclaration
{
  unsigned __int8 streamCount;
  bool hasOptionalSource;
  bool isLoaded;
  MaterialVertexStreamRouting routing;
};

struct GfxVertexShaderLoadDef
{
  unsigned __int8 *program;
  unsigned int programSize;
};

struct MaterialVertexShaderProgram
{
  ID3D11VertexShader *vs;
  GfxVertexShaderLoadDef loadDef;
};

struct MaterialVertexShader
{
  const char *name;
  MaterialVertexShaderProgram prog;
};

struct GfxPixelShaderLoadDef
{
  unsigned __int8 *program;
  unsigned int programSize;
};

struct MaterialPixelShaderProgram
{
  ID3D11PixelShader *ps;
  GfxPixelShaderLoadDef loadDef;
};

struct MaterialPixelShader
{
  const char *name;
  MaterialPixelShaderProgram prog;
};

struct $8514BDC4D443D0EE4E7523DDD937FABD
{
  unsigned __int8 textureIndex;
  unsigned __int8 samplerIndex;
};

union MaterialArgumentLocation
{
  unsigned __int16 offset;
  $8514BDC4D443D0EE4E7523DDD937FABD __s1;
};

struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  unsigned __int8 firstRow;
  unsigned __int8 rowCount;
};

union MaterialArgumentDef
{
  const float *literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

struct MaterialShaderArgument
{
  unsigned __int16 type;
  MaterialArgumentLocation location;
  unsigned __int16 size;
  unsigned __int16 buffer;
  MaterialArgumentDef u;
};

union $77EECB44B199C2EB4EDE6B9029E80D61
{
  MaterialPixelShader *pixelShader;
  MaterialPixelShader *localPixelShader;
};

union $1117502D9463626EB1EBD975BD01E3D7
{
  MaterialShaderArgument *localArgs;
  MaterialShaderArgument *args;
};

struct MaterialPass
{
  MaterialVertexDeclaration *vertexDecl;
  MaterialVertexShader *vertexShader;
  $77EECB44B199C2EB4EDE6B9029E80D61 ___u2;
  unsigned __int8 perPrimArgCount;
  unsigned __int8 perObjArgCount;
  unsigned __int8 stableArgCount;
  unsigned __int8 customSamplerFlags;
  unsigned __int8 precompiledIndex;
  unsigned __int8 materialType;
  $1117502D9463626EB1EBD975BD01E3D7 ___u9;
};

struct MaterialTechnique
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

struct MaterialTechniqueSet
{
  const char *name;
  unsigned __int8 worldVertFormat;
  MaterialTechnique *techniques[36];
};

struct __declspec(align(4)) GfxImageLoadDef
{
  unsigned __int8 levelCount;
  unsigned __int8 flags;
  int format;
  int resourceSize;
  unsigned __int8 data[1];
};

union GfxTexture
{
  ID3D11ShaderResourceView *basemap;
  GfxImageLoadDef *loadDef;
};

struct Picmip
{
  unsigned __int8 platform[2];
};

struct CardMemory
{
  int platform[2];
};

struct GfxStreamedPartInfo
{
  unsigned int levelCountAndSize;
  unsigned int hash;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int32 offset : 32;
  unsigned __int32 size : 28;
  unsigned __int32 ipakIndex : 4;
  unsigned __int32 adjacentLeft : 15;
  unsigned __int32 adjacentRight : 15;
  unsigned __int32 compressed : 1;
  unsigned __int32 valid : 1;
};

struct GfxImage
{
  GfxTexture texture;
  unsigned __int8 mapType;
  unsigned __int8 semantic;
  unsigned __int8 category;
  bool delayLoadPixels;
  Picmip picmip;
  bool noPicmip;
  unsigned __int8 track;
  CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  unsigned __int8 levelCount;
  unsigned __int8 streaming;
  unsigned int baseSize;
  unsigned __int8 *pixels;
  GfxStreamedPartInfo streamedParts[1];
  unsigned __int8 streamedPartCount;
  unsigned int loadedSize;
  unsigned __int8 skippedMipLevels;
  const char *name;
  unsigned int hash;
};

struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  unsigned __int8 samplerState;
  unsigned __int8 semantic;
  unsigned __int8 isMatureContent;
  unsigned __int8 pad[3];
  GfxImage *image;
};

struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  vec4_t literal;
};

struct GfxStateBits
{
  unsigned int loadBits[2];
  ID3D11BlendState *blendState;
  ID3D11DepthStencilState *depthStencilState;
  ID3D11RasterizerState *rasterizerState;
};

struct Material
{
  MaterialInfo info;
  unsigned __int8 stateBitsEntry[36];
  unsigned __int8 textureCount;
  unsigned __int8 constantCount;
  unsigned __int8 stateBitsCount;
  unsigned __int8 stateFlags;
  unsigned __int8 cameraRegion;
  unsigned __int8 probeMipBits;
  union {
      MaterialTechniqueSet* localTechniqueSet;
      MaterialTechniqueSet* techniqueSet;
  };
  MaterialTextureDef *textureTable;
  union {
      MaterialConstantDef* localConstantTable;
      MaterialConstantDef* constantTable;
  };
  GfxStateBits *stateBitsTable;
  Material *thermalMaterial;
};

struct PhysConstraint
{
  unsigned __int16 targetname;
  ConstraintType type;
  AttachPointType attach_point_type1;
  int target_index1;
  unsigned __int16 target_ent1;
  const char *target_bone1;
  AttachPointType attach_point_type2;
  int target_index2;
  unsigned __int16 target_ent2;
  const char *target_bone2;
  vec3_t offset;
  vec3_t pos;
  vec3_t pos2;
  vec3_t dir;
  int flags;
  int timeout;
  int min_health;
  int max_health;
  float distance;
  float damp;
  float power;
  vec3_t scale;
  float spin_scale;
  float minAngle;
  float maxAngle;
  Material *material;
  int constraintHandle;
  int rope_index;
  int centity_num[4];
};

struct XNADDR
{
  unsigned __int8 addrBuff[37];
};

struct liveAddr
{
  XNADDR xnaddr;
};

struct LerpEntityStateVehicleRotorArm
{
  __int16 pitch;
  __int16 roll;
};

struct $0D0CB43DF22755AD856C77DD3F304010
{
  unsigned __int8 r;
  unsigned __int8 g;
  unsigned __int8 b;
  unsigned __int8 a;
};

union hudelem_color_t
{
  $0D0CB43DF22755AD856C77DD3F304010 __s0;
  int rgba;
};

struct des_key
{
  unsigned int ek[32];
  unsigned int dk[32];
};

struct des3_key
{
  unsigned int ek[3][32];
  unsigned int dk[3][32];
};

struct blowfish_key
{
  unsigned int S[4][256];
  unsigned int K[18];
};

struct rijndael_key
{
  unsigned int eK[60];
  unsigned int dK[60];
  int Nr;
};

union Symmetric_key
{
  des_key des;
  des3_key des3;
  blowfish_key blowfish;
  rijndael_key rijndael;
  void *data;
};

struct symmetric_CTR
{
  int cipher;
  int blocklen;
  int padlen;
  int mode;
  int ctrlen;
  unsigned __int8 ctr[128];
  unsigned __int8 pad[128];
  Symmetric_key key;
};

struct Operand
{
  expDataType dataType;
  operandInternalDataUnion internals;
};

struct MenuRow
{
  MenuCell *cells;
  char *eventName;
  char *onFocusEventName;
  bool disableArg;
  int status;
  int name;
};

struct Glyph
{
  unsigned __int16 letter;
  char x0;
  char y0;
  unsigned __int8 dx;
  unsigned __int8 pixelWidth;
  unsigned __int8 pixelHeight;
  float s0;
  float t0;
  float s1;
  float t1;
};

struct KerningPairs
{
  unsigned __int16 wFirst;
  unsigned __int16 wSecond;
  int iKernAmount;
};

struct Font_s
{
  const char *fontName;
  int pixelHeight;
  int isScalingAllowed;
  int glyphCount;
  int kerningPairsCount;
  Material *material;
  Material *glowMaterial;
  Glyph *glyphs;
  KerningPairs *kerningPairs;
};

struct rectDef_s
{
  float x;
  float y;
  float w;
  float h;
  int horzAlign;
  int vertAlign;
};

struct columnInfo_s
{
  int elementStyle;
  int maxChars;
  rectDef_s rect;
};

struct LerpEntityStateVehicleGunnerAngles
{
  __int16 pitch;
  __int16 yaw;
};

struct LerpEntityStateZBarrierPiece
{
  unsigned __int8 flags;
  unsigned __int8 animTime;
};

struct BrushWrapper
{
  vec3_t mins;
  int contents;
  vec3_t maxs;
  unsigned int numsides;
  cbrushside_t *sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  vec3_t *verts;
  cplane_s *planes;
};

struct multiDef_s
{
  const char *dvarList[32];
  const char *dvarStr[32];
  float dvarValue[32];
  int count;
  int actionOnEnterPressOnly;
  int strDef;
};


struct __declspec(align(4)) hudelem_s
{
  float x;
  float y;
  float z;
  float fontScale;
  float fromFontScale;
  int fontScaleStartTime;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int scaleStartTime;
  float fromX;
  float fromY;
  int moveStartTime;
  int time;
  int duration;
  float value;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  unsigned int flags;
  __int16 targetEntNum;
  __int16 fontScaleTime;
  __int16 fadeTime;
  __int16 label;
  __int16 width;
  __int16 height;
  __int16 fromWidth;
  __int16 fromHeight;
  __int16 scaleTime;
  __int16 moveTime;
  __int16 text;
  unsigned __int16 fxLetterTime;
  unsigned __int16 fxDecayStartTime;
  unsigned __int16 fxDecayDuration;
  unsigned __int16 fxRedactDecayStartTime;
  unsigned __int16 fxRedactDecayDuration;
  unsigned __int8 type;
  unsigned __int8 font;
  unsigned __int8 alignOrg;
  unsigned __int8 alignScreen;
  unsigned __int8 materialIndex;
  unsigned __int8 offscreenMaterialIdx;
  unsigned __int8 fromAlignOrg;
  unsigned __int8 fromAlignScreen;
  unsigned __int8 soundID;
  char ui3dWindow;
};

struct ltc_ecc_set_type
{
  int size;
  char *name;
  char *prime;
  char *B;
  char *order;
  char *Gx;
  char *Gy;
};

union expressionRpnDataUnion
{
  Operand constant;
  void *cmd;
  int cmdIdx;
};


struct LerpEntityStateJetThrust
{
  vec3_t thrustDir;
  int dummy;
  float dotLimit;
};

struct XModelCollTri_s
{
  vec4_t plane;
  vec4_t svec;
  vec4_t tvec;
};

struct PhysConstraints
{
  const char *name;
  unsigned int count;
  PhysConstraint data[16];
};

struct gameTypeInfo
{
  char gameType[12];
  char gameTypeName[32];
  char gameTypeShortName[32];
  char gameTypeNameCaps[32];
  int splitscreen;
};

struct mapStartLocInfo
{
  char startLoc[12];
  char startLocName[32];
  char mapLoadName[24];
  int numGameModes;
  gameTypeInfo gameModes[16];
};

struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float minDisplacement;
  float maxDisplacement;
};

struct __declspec(align(4)) netadr_t
{
    union {
        unsigned __int8 ip[4];
        unsigned int inaddr;
    };
  unsigned __int16 port;
  netadrtype_t type;
  netsrc_t localNetID;
  unsigned __int16 serverID;
};

struct __declspec(align(4)) platformNetAdr
{
  netadr_t netAddr;
  liveAddr liveaddr;
};

struct ScriptCondition
{
  bool fireOnTrue;
  int constructID;
  int blockID;
  ScriptCondition *next;
};

struct listBoxDef_s
{
  int mousePos;
  int cursorPos[1];
  int startPos[1];
  int endPos[1];
  int drawPadding;
  float elementWidth;
  float elementHeight;
  int numColumns;
  float special;
  columnInfo_s columnInfo[16];
  int notselectable;
  int noScrollBars;
  int usePaging;
  vec4_t selectBorder;
  vec4_t disableColor;
  vec4_t focusColor;
  vec4_t elementHighlightColor;
  vec4_t elementBackgroundColor;
  Material *selectIcon;
  Material *backgroundItemListbox;
  Material *highlightTexture;
  int noBlinkingHighlight;
  MenuRow *rows;
  int maxRows;
  int rowCount;
};


struct pinglist_t
{
  char adrstr[64];
  int start;
};

struct pendingServer_t
{
  char adrstr[64];
  char name[64];
  int startTime;
  int serverNum;
  int valid;
};

struct expressionRpn
{
  int type;
  expressionRpnDataUnion data;
};

struct ExpressionStatement
{
  char *filename;
  int line;
  int numRpn;
  expressionRpn *rpn;
};

struct GenericEventScript
{
  ScriptCondition *prerequisites;
  ExpressionStatement condition;
  int type;
  bool fireOnTrue;
  const char *action;
  int blockID;
  int constructID;
  GenericEventScript *next;
};

struct GenericEventHandler
{
  const char *name;
  GenericEventScript *eventScript;
  GenericEventHandler *next;
};

struct animParamsDef_t
{
  const char *name;
  rectDef_s rectClient;
  float borderSize;
  vec4_t foreColor;
  vec4_t backColor;
  vec4_t borderColor;
  vec4_t outlineColor;
  float textScale;
  float rotation;
  GenericEventHandler *onEvent;
};

struct HunkUser
{
  HU_ALLOCATION_SCHEME scheme;
  unsigned int flags;
  const char *name;
  int type;
};

template <typename T>
class bdArray
{
public:
    T* m_data;
    unsigned int m_capacity;
    unsigned int m_size;
};

struct scrVarPub_t
{
  const char *fieldBuffer;
  bool developer;
  bool developer_script;
  bool evaluate;
  const char *error_message;
  int error_index;
  unsigned int time;
  unsigned int timeArrayId;
  unsigned int pauseArrayId;
  unsigned int levelId;
  unsigned int gameId;
  unsigned int animId;
  unsigned int freeEntList;
  unsigned int tempVariable;
  bool bInited;
  unsigned __int16 savecount;
  unsigned int checksum;
  unsigned int entId;
  unsigned int entFieldName;
  HunkUser *programHunkUser;
  unsigned __int8 *programBuffer;
  unsigned __int8 *endScriptBuffer;
  unsigned __int16 *saveIdMap;
  unsigned __int16 *saveIdMapRev;
  unsigned int numScriptThreads;
  unsigned int numScriptValues;
  unsigned int numScriptObjects;
  unsigned __int8 *varUsagePos;
  int ext_threadcount;
  int totalObjectRefCount;
  volatile int totalVectorRefCount;
  int allocationCount;
};

struct yarrow_prng
{
  int cipher;
  int hash;
  unsigned __int8 pool[128];
  symmetric_CTR ctr;
};

struct serverStatus_s
{
  pinglist_t pingList[16];
  int numqueriedservers;
  int currentping;
  int nextpingtime;
  int maxservers;
  int refreshtime;
  int numServers;
  int sortKey;
  int sortDir;
  int lastCount;
  int refreshActive;
  int currentServer;
  int displayServers[20000];
  int numDisplayServers;
  int serverCount;
  int numPlayersOnServers;
  int nextDisplayRefresh;
  int nextSortTime;
  Material *currentServerPreview;
  int motdLen;
  int motdWidth;
  int motdPaintX;
  int motdPaintX2;
  int motdOffset;
  int motdTime;
  char motd[1024];
  unsigned __int8 displayServersFriendNameInd[300];
};

struct UnarchivedMatchState
{
  int teamScores[9];
  int matchUIVisibilityFlags;
  scoreboardColumnType_t scoreboardColumnTypes[5];
  unsigned __int8 sideHasMeat;
  bool initialPlayersConnected;
  unsigned int talkFlags;
};

struct enumDvarDef_s
{
  const char *enumDvarName;
};

struct PhysPreset
{
  const char *name;
  int flags;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  int canFloat;
  float gravityScale;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
};

struct profileMultiDef_s
{
  const char *profileVarList[32];
  const char *profileVarStr[32];
  float profileVarValue[32];
  int count;
  int actionOnEnterPressOnly;
  int strDef;
};

struct $190F2CF944EC18EE3AF27F473C4F9DBE
{
  unsigned __int32 weaponIdx : 8;
  unsigned __int32 attachment1 : 6;
  unsigned __int32 attachment2 : 6;
  unsigned __int32 attachment3 : 6;
  unsigned __int32 padding : 6;
};

union Weapon
{
  $190F2CF944EC18EE3AF27F473C4F9DBE __s0;
  unsigned int weaponData;
};

struct LerpEntityStatePlayer
{
  float leanf;
  int movementDir;
  int moveType;
  Weapon primaryWeapon;
  Weapon stowedWeapon;
  Weapon offhandWeapon;
  Weapon meleeWeapon;
  unsigned __int8 meleeWeaponCamo;
  unsigned __int8 meleeWeaponModel;
  unsigned __int8 vehicleType;
  unsigned __int8 vehicleAnimBoneIndex;
  unsigned __int8 vehicleSeat;
  unsigned __int8 stowedWeaponCamo;
  unsigned __int8 weaponHeat;
  unsigned __int8 proneLegsAngle;
};

struct customGameTypeInfo
{
  char gameType[12];
  char gameTypeName[32];
  char gameTypeDesc[128];
  char fileName[32];
  char gameTypeNameCaps[32];
  int splitscreen;
};

struct PhysGeomInfo
{
  BrushWrapper *brush;
  int type;
  vec3_t orientation[3];
  vec3_t offset;
  vec3_t halfLengths;
};

struct XModelCollSurf_s
{
  XModelCollTri_s *collTris;
  int numCollTris;
  vec3_t mins;
  vec3_t maxs;
  int boneIdx;
  int contents;
  int surfFlags;
};

struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

struct LerpEntityStateCustomExplode
{
  int startTime;
  int effectIndex;
};

struct gameMsgDef_s
{
  int gameMsgWindowIndex;
  int gameMsgWindowMode;
};

struct pendingServerStatus_t
{
  int num;
  pendingServer_t server[16];
};

struct SndAlias
{
  const char *name;
  unsigned int id;
  const char *subtitle;
  const char *secondaryname;
  unsigned int assetId;
  const char *assetFileName;
  unsigned int flags0;
  unsigned int flags1;
  unsigned int duck;
  unsigned int contextType;
  unsigned int contextValue;
  unsigned int stopOnPlay;
  unsigned int futzPatch;
  unsigned __int16 fluxTime;
  unsigned __int16 startDelay;
  unsigned __int16 reverbSend;
  unsigned __int16 centerSend;
  unsigned __int16 volMin;
  unsigned __int16 volMax;
  unsigned __int16 pitchMin;
  unsigned __int16 pitchMax;
  unsigned __int16 distMin;
  unsigned __int16 distMax;
  unsigned __int16 distReverbMax;
  unsigned __int16 envelopMin;
  unsigned __int16 envelopMax;
  unsigned __int16 envelopPercentage;
  __int16 fadeIn;
  __int16 fadeOut;
  __int16 dopplerScale;
  unsigned __int8 minPriorityThreshold;
  unsigned __int8 maxPriorityThreshold;
  unsigned __int8 probability;
  unsigned __int8 occlusionLevel;
  unsigned __int8 minPriority;
  unsigned __int8 maxPriority;
  unsigned __int8 pan;
  unsigned __int8 limitCount;
  unsigned __int8 entityLimitCount;
  unsigned __int8 duckGroup;
};

struct SndAliasList
{
  const char *name;
  unsigned int id;
  SndAlias *head;
  int count;
  int sequence;
};

struct CachedAssets_t
{
  Material *scrollBarArrowUp;
  Material *scrollBarArrowDown;
  Material *scrollBarArrowLeft;
  Material *scrollBarArrowRight;
  Material *scrollBar;
  Material *scrollBarThumb;
  Material *sliderBar;
  Material *sliderThumb;
  Material *whiteMaterial;
  Material *cursor;
  Material *dvarlistArrowLeft;
  Material *dvarlistArrowRight;
  Material *line;
  Material *blur;
  Material *lineGraph;
  Font_s *bigFont;
  Font_s *smallFont;
  Font_s *consoleFont;
  Font_s *boldFont;
  Font_s *textFont;
  Font_s *extraBigFont;
  Font_s *extraSmallFont;
  Font_s *fxFont;
  SndAliasList *itemFocusSound;
};

struct mapInfo
{
  char mapName[32];
  char mapLoadName[24];
  char mapNameCaps[32];
  int splitscreen;
  char mapPackType[16];
  dlcIndex_t mapPackTypeIndex;
};

struct contentPackInfo
{
  char mapPackName[16];
};

struct serverStatusInfo_s
{
  char address[64];
  const char *lines[128][8];
  char text[1024];
  char pings[54];
  int numLines;
};

struct __declspec(align(8)) sharedUiInfo_t
{
  CachedAssets_t assets;
  int playerCount;
  char playerNames[18][32];
  char teamNames[18][32];
  ClientNum_t playerClientNums[18];
  int numGameTypes;
  gameTypeInfo gameTypes[32];
  int numCustomGameTypes;
  customGameTypeInfo customGameTypes[32];
  int numCustomMatchGameTypes;
  gameTypeInfo customMatchGameTypes[32];
  int gameTypeMapCount[32];
  int numMapStartLocsZombie;
  mapStartLocInfo mapStartLocsZombie[16];
  int numJoinGameTypes;
  gameTypeInfo joinGameTypes[32];
  int mapCount;
  int mapsLoadedCount;
  mapInfo mapList[128];
  contentPackInfo contentPackList[8];
  unsigned __int64 partyMemberXuid;
  Material *talkingIcons[3];
  serverStatus_s serverStatus;
  char serverStatusAddress[64];
  serverStatusInfo_s serverStatusInfo;
  serverStatusInfo_s serverStatusInfoScoreBoard;
  int nextServerStatusRefresh;
  int nextServerStatusScoreBoardRefresh;
  pendingServerStatus_t pendingServerStatus;
  unsigned __int64 visibilityBits[1];
  unsigned __int64 localVisibilityBits[1];
  Material *loadingScreen;
};

struct __declspec(align(4)) XBoneInfo
{
  vec3_t bounds[2];
  vec3_t offset;
  float radiusSquared;
  unsigned __int8 collmap;
};

struct ecc_point
{
  void *x;
  void *y;
  void *z;
};

struct editFieldDef_s
{
  int cursorPos[1];
  float minVal;
  float maxVal;
  float defVal;
  float range;
  int maxChars;
  int maxCharsGotoNext;
  int maxPaintChars;
  int paintOffset;
};

union Prng_state
{
  char dummy[1];
  yarrow_prng yarrow;
};

struct LerpEntityStateTurret
{
  vec3_t gunAngles;
  int ownerNum;
  float heatVal;
  int overheating;
  float pivotOffset;
  int flags;
};

struct ecc_key
{
  int type;
  int idx;
  const ltc_ecc_set_type *dp;
  ecc_point pubkey;
  void *k;
};

struct __declspec(align(2)) VariableStackBuffer
{
  unsigned __int8 *pos;
  unsigned __int8 *creationPos;
  int waitTime;
  unsigned __int16 size;
  unsigned __int16 bufLen;
  unsigned __int16 localId;
  unsigned __int8 buf[1];
};

union VariableUnion
{
  int intValue;
  unsigned int uintValue;
  float floatValue;
  unsigned int stringValue;
  const float *vectorValue;
  unsigned __int8 *codePosValue;
  unsigned int pointerValue;
  VariableStackBuffer *stackValue;
  unsigned int entityOffset;
};

struct ObjectVariableChildren
{
  unsigned __int16 firstChild;
  unsigned __int16 lastChild;
};

struct ObjectVariableValue
{
  union {
    struct {
      unsigned __int16 prev;
      unsigned __int16 next;
    } f;
    struct {
      unsigned __int16 refCount;
      union {
        unsigned __int16 size;
        unsigned __int16 entnum;
        unsigned __int16 nextEntId;
        unsigned __int16 self;
      } u;
    } o;
  } u;
  union {
    unsigned int typeAndData;
    unsigned int classnum;
    unsigned int notifyName;
    unsigned int waitTime;
    unsigned int parentLocalId;
  } w;
};

union ChildBucketMatchKeys
{
  struct {
    unsigned __int16 name_hi;
    unsigned __int16 parentId;
  } keys;
  unsigned int match;
};

struct ChildVariableValue
{
  union {
    struct {
      unsigned __int16 prev;
      unsigned __int16 next;
    } f;
    VariableUnion u;
  } u;
  unsigned __int16 next;
  unsigned __int8 type;
  unsigned __int8 name_lo;
  ChildBucketMatchKeys k;
  unsigned __int16 nextSibling;
  unsigned __int16 prevSibling;
};

struct scrVarGlob_t
{
  ObjectVariableValue *objectVariableValue;
  __declspec(align(128)) ObjectVariableChildren *objectVariableChildren;
  __declspec(align(128)) unsigned __int16 *childVariableBucket;
  __declspec(align(128)) ChildVariableValue *childVariableValue;
};

struct WeaponCamoMaterial
{
  unsigned __int16 replaceFlags;
  unsigned __int16 numBaseMaterials;
  Material **baseMaterials;
  Material **camoMaterials;
  float shaderConsts[8];
};

struct ActionSlotParam_SpecifyWeapon
{
  Weapon weapon;
};

struct LeagueStats
{
  int rankPoints;
  int rank;
  float floats[3];
  int ints[8];
};

struct LerpEntityStateZBarrier
{
  unsigned int barrierTypeIndex;
  LerpEntityStateZBarrierPiece pieces[6];
};

struct mover_slidedata_t
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t velocity;
};

struct LerpEntityStateAnonymous
{
  int data[9];
};

struct symmetric_CBC
{
  int cipher;
  int blocklen;
  unsigned __int8 IV[128];
  Symmetric_key key;
};

struct scrMemTreePub_t
{
  char *mt_buffer;
};

struct netProfilePacket_t
{
  int iTime;
  int iSize;
  int bFragment;
};

struct netProfileStream_t
{
  netProfilePacket_t packets[60];
  int iCurrPacket;
  int iBytesPerSecond;
  int iLastBPSCalcTime;
  int iCountedPackets;
  int iCountedFragments;
  int iFragmentPercentage;
  int iLargestPacket;
  int iSmallestPacket;
};

struct LerpEntityStateExplosion
{
  float innerRadius;
  float magnitude;
  float innerDamage;
  int dummy;
  float outerDamage;
};

struct LerpEntityStateBulletHit
{
  vec3_t start;
};

struct clientLinkInfo_t
{
  __int16 parentEnt;
  unsigned __int8 tagIndex;
  unsigned __int8 flags;
};

struct LerpEntityStatePrimaryLight
{
  unsigned __int8 colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  unsigned int mixerIndex;
};

struct PhysGeomList
{
  unsigned int count;
  PhysGeomInfo *geoms;
  int contents;
};

struct textExp_s
{
  ExpressionStatement textExp;
};

struct windowDef_t
{
  const char *name;
  rectDef_s rect;
  rectDef_s rectClient;
  const char *group;
  unsigned __int8 style;
  unsigned __int8 border;
  unsigned __int8 modal;
  unsigned __int8 frameSides;
  float frameTexSize;
  float frameSize;
  int ownerDraw;
  int ownerDrawFlags;
  float borderSize;
  int staticFlags;
  int dynamicFlags[1];
  int nextTime;
  vec4_t foreColor;
  vec4_t backColor;
  vec4_t borderColor;
  vec4_t outlineColor;
  float rotation;
  Material *background;
};

struct BlurStackEntry
{
  char menuName[64];
};

struct ItemKeyHandler
{
  int key;
  GenericEventScript *keyScript;
  ItemKeyHandler *next;
};

union vec2_t
{
  float v[2];
  struct {
      float x;
      float y;
  };
};

union focusDefData_t
{
  listBoxDef_s *listBox;
  multiDef_s *multi;
  profileMultiDef_s *profileMulti;
  editFieldDef_s *editField;
  enumDvarDef_s *enumDvar;
  void *data;
};

struct focusItemDef_s
{
  const char *mouseEnterText;
  const char *mouseExitText;
  const char *mouseEnter;
  const char *mouseExit;
  ItemKeyHandler *onKey;
  focusDefData_t focusTypeData;
};

union textDefData_t
{
  focusItemDef_s *focusItemDef;
  gameMsgDef_s *gameMsgDef;
  void *data;
};

struct textDef_s
{
  rectDef_s textRect[1];
  int alignment;
  int fontEnum;
  int itemFlags;
  int textAlignMode;
  float textalignx;
  float textaligny;
  float textscale;
  float textpadding;
  int textStyle;
  vec4_t fontColor;
  vec4_t glowColor;
  vec4_t shadowColor;
  float fontBlur;
  float glowSize;
  float shadowSize;
  vec2_t shadowOffset;
  const char *text;
  textExp_s *textExpData;
  textDefData_t textTypeData;
};

struct imageDef_s
{
  ExpressionStatement materialExp;
};

struct ownerDrawDef_s
{
  ExpressionStatement dataExp;
};

union itemDefData_t
{
  textDef_s *textDef;
  imageDef_s *imageDef;
  focusItemDef_s *blankButtonDef;
  ownerDrawDef_s *ownerDrawDef;
  void *data;
};

struct __declspec(align(8)) menuDef_t
{
  windowDef_t window;
  const char *font;
  int fullScreen;
  int ui3dWindowId;
  int itemCount;
  int fontIndex;
  int cursorItem[1];
  int fadeCycle;
  int priority;
  float fadeClamp;
  float fadeAmount;
  float fadeInAmount;
  float blurRadius;
  int openSlideSpeed;
  int closeSlideSpeed;
  int openSlideDirection;
  int closeSlideDirection;
  rectDef_s initialRectInfo;
  int openFadingTime;
  int closeFadingTime;
  int fadeTimeCounter;
  int slideTimeCounter;
  GenericEventHandler *onEvent;
  ItemKeyHandler *onKey;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  const char *allowedBinding;
  const char *soundName;
  int imageTrack;
  int control;
  vec4_t focusColor;
  vec4_t disableColor;
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  itemDef_s **items;
};

struct rectData_s
{
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  ExpressionStatement rectWExp;
  ExpressionStatement rectHExp;
};

struct UIAnimInfo
{
  int animStateCount;
  animParamsDef_t **animStates;
  animParamsDef_t currentAnimState;
  animParamsDef_t nextAnimState;
  int animating;
  int animStartTime;
  int animDuration;
};

struct __declspec(align(8)) itemDef_s
{
  windowDef_t window;
  int type;
  int dataType;
  int imageTrack;
  const char *dvar;
  const char *profileVar;
  const char *dvarTest;
  const char *enableDvar;
  int dvarFlags;
  itemDefData_t typeData;
  menuDef_t *parent;
  rectData_s *rectExpData;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  ExpressionStatement forecolorAExp;
  int ui3dWindowId;
  GenericEventHandler *onEvent;
  UIAnimInfo *animInfo;
};

struct UiMenuMap_t
{
  unsigned int hash;
  menuDef_t *menu;
};

struct menuClientNum_t
{
  menuDef_t *menu;
  LocalClientNum_t localClientNum;
};

struct UILocalVar
{
  UILocalVarType type;
  const char *name;
  union {
    int integer;
    float value;
    const char *string;
  } u;
};

struct UILocalVarContext
{
  UILocalVar table[256];
};

struct __declspec(align(4)) UiContext
{
  UIContextIndex_t contextIndex;
  float bias;
  int realTime;
  int frameTime;
  struct {
    float x;
    float y;
  } cursor;
  int isCursorVisible;
  int screenWidth;
  int screenHeight;
  float screenAspect;
  float FPS;
  float blurRadiusOut;
  BlurStackEntry blurMenuStack[8];
  int blurMenuStackIndex;
  UiMenuMap_t Menus[600];
  int menuCount;
  menuClientNum_t menuStack[16];
  int openMenuCount;
  bool enableSlideAndFadeEffectForMenu;
  UILocalVarContext localVars;
  menuDef_t *uiBlurMenu;
  menuDef_t *menuToastPopupMenu;
  menuDef_t *subtitlesMenu;
  menuDef_t *cinematicSubtitlesMenu;
  UiMenuMap_t history[4];
  unsigned __int8 historyPos;
  unsigned __int8 historyCount;
};

union SndEntHandle
{
  struct {
    unsigned __int32 entIndex : 12;
    unsigned __int32 useCount : 5;
    unsigned __int32 localClientNum : 2;
    unsigned __int32 isStationary : 1;
    unsigned __int32 isInKillCam : 1;
    unsigned __int32 team : 4;
    unsigned __int32 tag : 7;
  } field;
  int handle;
};

struct PartyMemberTeam
{
  int team;
  int switchTeam;
  int switchTeamTime;
  int lastTeam;
};

struct WeaponCamoMaterialSet
{
  unsigned int numMaterials;
  WeaponCamoMaterial *materials;
};

struct Rsa_key
{
  int type;
  void *e;
  void *d;
  void *N;
  void *p;
  void *q;
  void *qP;
  void *dP;
  void *dQ;
};

struct __declspec(align(8)) sha256_state
{
  unsigned __int64 length;
  unsigned int state[8];
  unsigned int curlen;
  unsigned __int8 buf[64];
};

struct sha1_state
{
  unsigned __int64 length;
  unsigned int state[5];
  unsigned int curlen;
  unsigned __int8 buf[64];
};

struct __declspec(align(8)) md5_state
{
  unsigned __int64 length;
  unsigned int state[4];
  unsigned int curlen;
  unsigned __int8 buf[64];
};

struct __declspec(align(8)) tiger_state
{
  unsigned __int64 state[3];
  unsigned __int64 length;
  unsigned int curlen;
  unsigned __int8 buf[64];
};

union Hash_state
{
  char dummy[1];
  sha256_state sha256;
  sha1_state sha1;
  md5_state md5;
  tiger_state tiger;
  void *data;
};

struct __declspec(align(8)) Hmac_state
{
  Hash_state md;
  int hash;
  Hash_state hashstate;
  unsigned __int8 *key;
};

struct LerpEntityStateCreateDynEnt
{
  int model;
  int fxId;
  int mature;
};

struct MaterialInfoRaw
{
  unsigned int nameOffset;
  unsigned int refImageNameOffset;
  unsigned int gameFlags;
  unsigned __int8 _unused;
  unsigned __int8 sortKey;
  unsigned __int8 textureAtlasRowCount;
  unsigned __int8 textureAtlasColumnCount;
  float maxDeformMove;
  unsigned __int8 deformFlags;
  unsigned __int8 usage;
  unsigned __int16 toolFlags;
  unsigned int locale;
  unsigned __int16 autoTexScaleWidth;
  unsigned __int16 autoTexScaleHeight;
  float tessSize;
  int surfaceFlags;
  int contents;
};

struct LerpEntityStateMissile
{
  int launchTime;
  int parentClientNum;
  int fuseTime;
  int forcedDud;
  float autoDetonateTime;
  vec3_t passThrough;
};

struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  wchar_t *_W_decimal_point;
  wchar_t *_W_thousands_sep;
  wchar_t *_W_int_curr_symbol;
  wchar_t *_W_currency_symbol;
  wchar_t *_W_mon_decimal_point;
  wchar_t *_W_mon_thousands_sep;
  wchar_t *_W_positive_sign;
  wchar_t *_W_negative_sign;
};

struct __lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  unsigned int ww_lcid;
  int ww_caltype;
  int refcount;
  wchar_t *_W_wday_abbr[7];
  wchar_t *_W_wday[7];
  wchar_t *_W_month_abbr[12];
  wchar_t *_W_month[12];
  wchar_t *_W_ampm[2];
  wchar_t *_W_ww_sdatefmt;
  wchar_t *_W_ww_ldatefmt;
  wchar_t *_W_ww_timefmt;
};

struct LerpEntityStateScriptMover
{
  unsigned __int8 attachTagIndex[4];
  int attachedTagIndex;
  __int16 attachModelIndex[4];
  __int16 animScriptedAnim;
  __int16 attachedEntNum;
  int attachedEntTime;
  __int16 exploderIndex;
  unsigned __int16 scale;
  unsigned __int8 flags;
  unsigned __int16 aiType;
};

struct partyMergeData_t
{
  int timeSinceLastJoin;
  int lastSessionSearch;
  MergeDedicatedState dedicatedState;
};

struct zbarrier_piece_t
{
  unsigned __int8 state;
  unsigned __int8 scalar;
  unsigned __int8 nextState;
  int startTime;
};

struct __declspec(align(2)) PartyHostData
{
  int partyGameStateChangeTime;
  int partyStateChangeTime;
  int stateSequenceNumber;
  int expectedPlayers;
  int vetoPassTime;
  int uiState;
  int uiEvent;
  int uiEventTime;
  int sessionSendTime;
  int lastValidLeagueTime;
  unsigned __int8 votePossible;
  bool preloadingMap;
  bool firstLobby;
  bool migrateAfterRound;
  bool stopAfterRound;
  bool readyToStart;
  bool initialAckComplete;
};

struct LeagueOutcomes
{
  LeagueStats base;
  LeagueStats winner;
  LeagueStats loser;
};

struct TraceCheckCount
{
  unsigned __int16 global;
  unsigned __int16 *partitions;
  unsigned __int16 *brushes;
};

struct ddlHash_t
{
  int hash;
  int index;
};

struct ddlEnumDef_t
{
  const char *name;
  int memberCount;
  const char **members;
  ddlHash_t *hashTable;
};

struct LerpEntityStateDestructibleHit
{
  unsigned int modelState[3];
};

struct __declspec(align(8)) lobbyBanSlot_t
{
  unsigned __int64 bannedXuid;
  int banTime;
};

struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  vec3_t impulse;
};

struct __declspec(align(4)) PlayerVehicleState
{
  vec3_t origin;
  vec3_t angles;
  vec3_t velocity;
  vec3_t angVelocity;
  vec2_t tilt;
  vec2_t tiltVelocity;
  float targetHeightDelta;
  float lastGroundHeight;
  int entity;
  int flags;
  bool fullPhysics;
};

struct renderOptions_s
{
  unsigned int s;
};

struct __declspec(align(4)) PlayerHeldWeapon
{
  Weapon weapon;
  renderOptions_s options;
  float heatPercent;
  int fuelTankTime;
  int adsZoomSelect;
  bool overHeating;
  bool needsRechamber;
  bool heldBefore;
  bool quickReload;
  bool blockWeaponPickup;
  unsigned __int8 model;
};

struct AmmoPool
{
  int count;
};

struct AmmoClip
{
  int count;
};

struct SprintState
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
  int sprintDuration;
  int sprintCooldown;
};

struct MantleState
{
  float yaw;
  int timer;
  int transIndex;
  int flags;
};

struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

struct __declspec(align(2)) objective_t
{
  objectiveState_t state;
  vec3_t origin;
  __int16 entNum;
  vec2_t size;
  int icon;
  __int16 ownerNum;
  unsigned __int16 name;
  __int16 teamMask;
  unsigned __int8 progress;
  int clientUseMask[1];
  unsigned __int8 gamemodeFlags;
  unsigned __int8 flags;
  unsigned __int8 teamNum;
};

struct __declspec(align(8)) playerState_s
{
  int commandTime;
  int pm_type;
  int bobCycle;
  int pm_flags;
  __int64 weapFlags;
  int otherFlags;
  int pm_time;
  unsigned int loopSoundId;
  int loopSoundFade;
  vec3_t origin;
  vec3_t velocity;
  int remoteEyesEnt;
  int remoteEyesTagname;
  int remoteControlEnt;
  int weaponTime;
  int weaponDelay;
  int weaponTimeLeft;
  int weaponDelayLeft;
  int weaponIdleTime;
  int grenadeTimeLeft;
  int throwBackGrenadeOwner;
  int throwBackGrenadeTimeLeft;
  int weaponRestrictKickTime;
  bool mountAvailable;
  bool bRunLeftGun;
  bool bCarryingTurret;
  vec3_t mountPos;
  float mountDir;
  bool bThirdPerson;
  int foliageSoundTime;
  int gravity;
  float leanf;
  int speed;
  vec3_t delta_angles;
  int groundEntityNum;
  int moverEntityNum;
  int moverTimestamp;
  int groundType;
  vec3_t vLadderVec;
  int jumpTime;
  float jumpOriginZ;
  int slideTime;
  int moveType;
  int legsTimer;
  int torsoTimer;
  __int16 legsAnim;
  __int16 torsoAnim;
  int legsAnimDuration;
  int torsoAnimDuration;
  int damageTimer;
  int damageDuration;
  int dmgDirection;
  int dmgType;
  int corpseIndex;
  int movementDir;
  int eFlags;
  int eFlags2;
  PlayerVehicleState vehicleState;
  __int16 predictableEventSequence;
  __int16 predictableEventSequenceOld;
  int predictableEvents[4];
  unsigned int predictableEventParms[4];
  __int16 unpredictableEventSequence;
  __int16 unpredictableEventSequenceOld;
  int unpredictableEvents[4];
  unsigned int unpredictableEventParms[4];
  ClientNum_t clientNum;
  Weapon offHandWeapon;
  OffhandSecondaryClass offhandSecondary;
  OffhandPrimaryClass offhandPrimary;
  renderOptions_s renderOptions;
  int momentum;
  Weapon weapon;
  Weapon lastStandPrevWeapon;
  Weapon lastWeaponAltModeSwitch;
  Weapon stowedWeapon;
  unsigned __int8 unusedCompatibilityPadding;
  Weapon meleeWeapon;
  int weaponstate;
  int weaponstateLeft;
  unsigned int weaponShotCount;
  unsigned int weaponShotCountLeft;
  float fWeaponPosFrac;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  float weaponSpinLerp;
  int viewmodelIndex;
  vec3_t viewangles;
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  vec2_t viewAngleClampBase;
  vec2_t viewAngleClampRange;
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int stats[4];
  PlayerHeldWeapon heldWeapons[15];
  AmmoPool ammoNotInClip[15];
  AmmoClip ammoInClip[15];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  __int16 viewlocked_entNum;
  int vehiclePos;
  int vehicleType;
  int vehicleAnimBoneIndex;
  int linkFlags;
  vec3_t linkAngles;
  int cursorHint;
  int cursorHintString;
  int cursorHintEntIndex;
  int cursorHintWeapon;
  int iCompassPlayerInfo;
  unsigned int spyplaneTypeEnabled;
  unsigned int satelliteTypeEnabled;
  int locationSelectionInfo;
  locSel_t locationSelectionType;
  SprintState sprintState;
  int lastDtpEnd;
  float fTorsoPitch;
  float fWaistPitch;
  float holdBreathScale;
  int holdBreathTimer;
  int chargeShotTimer;
  unsigned int chargeShotLevel;
  unsigned int shotsFiredFromChamber;
  float quickScopeScale;
  int quickScopeTimer;
  unsigned int clientFields;
  unsigned int clientFields2;
  unsigned int clientFields3;
  unsigned int entityStateClientFields;
  float moveSpeedScaleMultiplier;
  MantleState mantleState;
  int vehicleAnimStage;
  int vehicleEntryPoint;
  unsigned int scriptedAnim;
  int scriptedAnimTime;
  int meleeChargeEnt;
  int meleeChargeDist;
  int meleeChargeTime;
  int weapLockFlags;
  int weapLockedEntnum;
  unsigned int airburstMarkDistance;
  unsigned int perks[2];
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  Weapon inventoryWeapon;
  __int16 wiiumoteAimX;
  __int16 wiiumoteAimY;
  char wiiuControllerType;
  char vehicleDefIndex;
  int entityEventSequence;
  int weapAnim;
  int weapAnimLeft;
  float aimSpreadScale;
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  float dofViewmodelStart;
  float dofViewmodelEnd;
  int waterlevel;
  int smokeColorIndex;
  int hudElemLastAssignedSoundID;
  int adsZoomSelect;
  int adsZoomLatchTime;
  bool adsZoomLatchState;
  int adsPrevZoomSelect;
  int adsPrevZoomSelectTime;
  int artilleryInboundIconLocation;
  float visionSetLerpRatio;
  int poisoned;
  int binoculars;
  int scriptCursorHintString;
  objective_t objective[32];
  int deltaTime;
  int killCamEntity;
  int killCamTargetEntity;
  int introShotsFired;
  struct {
    hudelem_s current[31];
    hudelem_s archival[31];
  } hud;
};

struct ArchivedMatchState
{
  int matchUIVisibilityFlags;
  int bombTimer[2];
  int roundsPlayed;
  int worldFields[8];
};

struct TracerDef
{
  const char *name;
  tracerType_t type;
  Material *material;
  unsigned int drawInterval;
  float speed;
  float beamLength;
  float beamWidth;
  float screwRadius;
  float screwDist;
  float fadeTime;
  float fadeScale;
  float texRepeatRate;
  vec4_t colors[5];
};

struct SubpartyMember
{
  int memberIndex;
  char *gamertag;
  int lastTeam;
  unsigned int affinityBits;
};

struct SubpartyInfo
{
  SubpartyMember members[18];
  bool links[18];
  int count;
  float skill;
  int skillRanking;
  int searchStartUTC;
  int score;
  int team;
};

struct score_s
{
  int ping;
  int status_icon;
  int place;
  int score;
  int kills;
  int assists;
  int deaths;
  int wagerWinnings;
  int scoreboardColumns[5];
  int downs;
  int revives;
  int headshots;
  int scoreMultiplier;
  int currentStreak;
};

struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  int partBits[5];
};

struct EntHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

struct entityShared_t
{
  unsigned __int8 linked;
  unsigned __int8 bmodel;
  unsigned __int8 svFlags;
  unsigned __int8 inuse;
  int broadcastTime;
  vec3_t mins;
  vec3_t maxs;
  int contents;
  vec3_t absmin;
  vec3_t absmax;
  vec3_t currentOrigin;
  vec3_t currentAngles;
  EntHandle ownerNum;
  int eventTime;
};

struct MemoryFile
{
  unsigned __int8 *buffer;
  int bufferSize;
  int bytesUsed;
  unsigned __int8 *careerStatsBuffer;
  int cacheBufferUsed;
  int segmentIndex;
  int segmentStart;
  int nonZeroCount;
  int zeroCount;
  bool errorOnOverflow;
  bool memoryOverflow;
  bool compress_enabled;
  bool rle_enabled;
  bool is_writing;
  int cacheBufferAvail;
  unsigned __int8 cacheBuffer[32760];
};

struct fxLightingState_t
{
  float primaryLightFraction;
  int lightingOriginOffset;
};

struct mover_positions_t
{
  float decelTime;
  float speed;
  float midTime;
  vec3_t pos1;
  vec3_t pos2;
  vec3_t pos3;
};

struct scriptMoverState_t
{
  unsigned __int8 fov;
  unsigned __int8 treeId;
  __int16 animId;
};

struct svEntity_s
{
  unsigned __int16 worldSector;
  unsigned __int16 nextEntityInWorldSector;
  int linkcontents;
  vec3_t linkmin;
  vec3_t linkmax;
};

struct MaterialConstantDefRaw
{
  unsigned int nameOffset;
  vec4_t literal;
};

struct LerpEntityStateStreamerHint
{
  float factor;
};

struct netUInt64
{
  unsigned int low;
  unsigned int high;
};

struct __declspec(align(8)) clientState_s
{
  ClientNum_t clientIndex;
  team_t team;
  ffa_team_t ffaTeam;
  int modelindex;
  int riotShieldNext;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  float maxSprintTimeMultiplier;
  int rank;
  union {
    int prestige;
    int lastDaysPlayed;
  };
  int lastDamageTime;
  int lastStandStartTime;
  int turnedHumanTime;
  int beingRevived;
  union {
    unsigned __int64 xuid;
    netUInt64 xuid64;
  };
  union {
    unsigned __int64 leagueTeamID;
    netUInt64 leagueTeamID64;
  };
  int leagueDivisionID;
  union {
    unsigned __int64 leagueSubdivisionID;
    netUInt64 leagueSubdivisionID64;
  };
  int leagueSubdivisionRank;
  unsigned int perks[2];
  int voiceConnectivityBits;
  char clanAbbrev[8];
  int attachedVehEntNum;
  int attachedVehSeat;
  int needsRevive;
  int clanAbbrevEV;
  VehicleAnimState vehAnimState;
  score_s score;
  int clientUIVisibilityFlags;
  int offhandWeaponVisible;
};

struct cmd_function_s
{
  cmd_function_s *next;
  const char *name;
  const char *autoCompleteDir;
  const char *autoCompleteExt;
  void (__cdecl *function)();
};

struct ClientVoicePacket_s
{
  unsigned __int8 data[256];
  int dataSize;
};

struct __declspec(align(8)) MatchState
{
  int index;
  ArchivedMatchState archivedState;
  UnarchivedMatchState unarchivedState;
  unsigned int pad[1];
};

struct WeaponAttachment
{
  const char *szInternalName;
  const char *szDisplayName;
  eAttachment attachmentType;
  eAttachmentPoint attachmentPoint;
  PenetrateType penetrateType;
  weapFireType_t fireType;
  int firstRaisePriority;
  float fHipIdleAmount;
  bool bAltWeaponAdsOnly;
  bool bAltWeaponDisableSwitching;
  float altScopeADSTransInTime;
  float altScopeADSTransOutTime;
  bool bSilenced;
  bool bDualMag;
  bool laserSight;
  bool bInfraRed;
  bool bUseAsMelee;
  bool bDualWield;
  bool sharedAmmo;
  float fDamageRangeScale;
  float fAdsZoomFov1;
  float fAdsZoomFov2;
  float fAdsZoomFov3;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  float fAdsTransInTimeScale;
  float fAdsTransOutTimeScale;
  float fAdsRecoilReductionRate;
  float fAdsRecoilReductionLimit;
  float fAdsViewKickCenterSpeedScale;
  float fAdsIdleAmountScale;
  bool swayOverride;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  bool adsSwayOverride;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  float fAdsSwayHorizScale;
  float fAdsSwayVertScale;
  float adsMoveSpeedScale;
  float fHipSpreadMinScale;
  float fHipSpreadMaxScale;
  float strafeRotR;
  float standMoveF;
  vec3_t vStandRot;
  float fFireTimeScale;
  float fReloadTimeScale;
  float fReloadEmptyTimeScale;
  float fReloadAddTimeScale;
  float fReloadQuickTimeScale;
  float fReloadQuickEmptyTimeScale;
  float fReloadQuickAddTimeScale;
  bool mmsWeapon;
  bool mmsInScope;
  float mmsFOV;
  float mmsAspect;
  float mmsMaxDist;
  float clipSizeScale;
  int iClipSize;
  unsigned int stackFire;
  float stackFireSpread;
  float stackFireAccuracyDecay;
  unsigned int perks[2];
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

struct clSnapshot_t
{
  int valid;
  int snapFlags;
  int serverTime;
  int physicsTime;
  int messageNum;
  int deltaNum;
  int ping;
  int cmdNum;
  playerState_s ps;
  int numEntities;
  int numClients;
  int numActors;
  int parseMatchStateIndex;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseActorsIndex;
  int serverCommandNum;
};

struct __declspec(align(4)) MigrateMemberData
{
  ClientNum_t nominee;
  int nomineeUpload;
  int nomineeNAT;
  bool nomineeOnLSP;
  bool heardFrom;
  int lastHeardFrom;
  int lastSentTo;
  bool inSameGeographicalRegion;
};

struct trajectory_t
{
  unsigned __int8 trType;
  int trTime;
  int trDuration;
  vec3_t trBase;
  vec3_t trDelta;
};

struct LerpEntityStateActor
{
  union {
    int actorNum;
    int corpseNum;
  } index;
  int species;
  int team;
  int enemy;
  int freeCameraLockOnAllowed;
  struct {
    __int16 fBodyPitch;
  } proneInfo;
  unsigned __int16 aiType;
};

struct __declspec(align(2)) LerpEntityStateVehicle
{
  float steerYaw;
  float bodyRoll;
  union {
    LerpEntityStateVehicleGunnerAngles gunnerAngles[4];
    LerpEntityStateVehicleRotorArm rotors[4];
  };
  union {
    __int16 throttle;
    __int16 bodyPitch;
  };
  __int16 gunPitch;
  __int16 gunYaw;
  unsigned __int8 targetRotorSpeed;
};

struct LerpEntityStateEarthquake
{
    float scale;
    float radius;
    int duration;
};

union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStateActor actor;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateVehicle vehicle;
  LerpEntityStateMissile missile;
  LerpEntityStateScriptMover scriptMover;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStateJetThrust jetThrust;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStateDestructibleHit destructibleHit;
  LerpEntityStateCreateDynEnt createDynEnt;
  LerpEntityStateStreamerHint streamerHint;
  LerpEntityStateZBarrier zbarrier;
  LerpEntityStateAnonymous anonymous;
};

struct LerpEntityState
{
  int eFlags;
  int eFlags2;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
  __int16 useCount;
  union {
    unsigned __int8 iHeadIconTeam;
    __int16 teamAndOwnerIndex;
  } faction;
  unsigned int clientFields;
};

struct actorAnimState_t
{
  __int16 state;
  unsigned __int8 subState;
  float fLeanAmount;
  float fAimUpDown;
  float fAimLeftRight;
};

struct playerAnimState_t
{
  int legsAnim;
  int torsoAnim;
  float fTorsoPitch;
  float fWaistPitch;
};

struct vehicleState_t
{
  __int16 flags;
  unsigned __int8 vehicleDefIndex;
  unsigned __int8 treeId;
  __int16 animId;
  __int16 attachModelIndex[2];
  unsigned __int8 attachTagIndex[2];
};

struct hardlineHint_t
{
  unsigned __int8 team;
  unsigned __int8 perk;
  unsigned __int8 hint;
};

struct __declspec(align(2)) entityState_s
{
  int number;
  LerpEntityState lerp;
  int time2;
  unsigned int loopSoundId;
  int solid;
  renderOptions_s renderOptions;
  union {
    actorAnimState_t animState;
    playerAnimState_t anim;
    vehicleState_t vehicleState;
    hardlineHint_t hardline;
    scriptMoverState_t moverState;
    fxLightingState_t fx;
  } un2;
  union {
    int hintString;
    int vehicleXModel;
    unsigned int secondBcAlias;
    unsigned int soundTag;
  } un3;
  unsigned int partBits[5];
  clientLinkInfo_t clientLinkInfo;
  int clientMask[1];
  unsigned __int8 events[4];
  unsigned int eventParms[4];
  unsigned int eventParm;
  __int16 eType;
  __int16 groundEntityNum;
  union {
    __int16 brushmodel;
    __int16 xmodel;
    __int16 primaryLight;
    unsigned __int16 bone;
  } index;
  __int16 otherEntityNum;
  __int16 attackerEntityNum;
  __int16 enemyModel;
  Weapon weapon;
  Weapon lastStandPrevWeapon;
  unsigned __int16 targetname;
  __int16 loopSoundFade;
  __int16 eventSequence;
  unsigned __int8 surfType;
  unsigned __int8 clientNum;
  unsigned __int8 iHeadIcon;
  unsigned __int8 weaponModel;
  union {
    unsigned __int8 scale;
    unsigned __int8 eventParm2;
    unsigned __int8 helicopterStage;
    unsigned __int8 destructibleid;
    unsigned __int8 zombieShrinkOn;
  } un1;
};

struct /*__cppobj*/ usercmd_s
{
  int serverTime;
  bitarray<64> button_bits;
  int angles[3];
  Weapon weapon;
  Weapon offHandWeapon;
  Weapon lastWeaponAltModeSwitch;
  char forwardmove;
  char rightmove;
  char upmove;
  char pitchmove;
  char yawmove;
  __int16 gunPitch;
  __int16 gunYaw;
  __int16 wiiumoteAimX;
  __int16 wiiumoteAimY;
  char wiiuControllerType;
  unsigned __int16 meleeChargeEnt;
  unsigned __int8 meleeChargeDist;
  union {
      float rollmove;
      __int16 damageKick[2];
  };
  char selectedLocation[2];
  unsigned __int8 selectedYaw;
  unsigned __int16 airburstMarkDistance;
  unsigned __int16 lastInput;
};

struct playerTeamState_t
{
  int location;
};

struct /*__cppobj*/ __declspec(align(8)) clientSession_t
{
  sessionState_t sessionState;
  ClientNum_t forceSpectatorClient;
  int killCamEntity;
  int killCamTargetEntity;
  int archiveTime;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  int predictItemPickup;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  int teamInfo;
  clientState_s cs;
  int psOffsetTime;
  int scoreboardColumnCache[26];
};

struct viewClamp
{
  vec2_t start;
  vec2_t current;
  vec2_t goal;
};

struct viewClampState
{
  viewClamp min;
  viewClamp max;
  float accelTime;
  float decelTime;
  float totalTime;
  float startTime;
};

struct ActorFlags
{
    union {
        struct {
            unsigned __int32 inuse : 1;
            unsigned __int32 useable : 1;
            unsigned __int32 ignoreTriggers : 1;
            unsigned __int32 pushable : 1;
            unsigned __int32 ikPriority : 1;
            unsigned __int32 noPlayerMeleeBlood : 1;
            unsigned __int32 talkToSpecies : 5;
        };
        unsigned int allBits;
    };
};

struct ai_transition_cmd_t
{
  ai_state_transition_t eTransition;
  ai_state_t eState;
};

struct actorState_s
{
  int actorIndex;
  int entityNum;
  int modelindex;
  int attachModelIndex[6];
  int attachTagIndex[6];
  unsigned int attachIgnoreCollision;
  char name[32];
  int animScriptedAnim;
};

struct ActorState
{
  ai_state_t eState[6];
  ai_substate_t eSubState[6];
  unsigned int stateLevel;
  int iStateTime;
  int preThinkTime;
  ai_transition_cmd_t StateTransitions[13];
  unsigned int transitionCount;
  ai_state_t eSimulatedState[6];
  unsigned int simulatedStateLevel;
  actorState_s as;
};

struct ActorShoot
{
  float accuracy;
  float playerSightAccuracy;
  unsigned int missCount;
  unsigned int hitCount;
  float debugLastAccuracy;
  int lastShotTime;
  bool lastCanShootEnemyResult;
  int lastCanShootEnemyTime;
  int bPerfectAim;
  int bIgnoreLocationalDamage;
  float debugWeaponAccuracy;
};

struct __declspec(align(4)) ActorOrientation
{
  float fDesiredBodyYaw;
  float fLookPitch;
  float fLookYaw;
  vec3_t vLookForward;
  vec3_t vLookRight;
  vec3_t vLookUp;
  float yawVeloc;
  int allowPitchAngle;
  float turnRate;
  int bNotifyTurnDone;
  float maxFaceEnemyDistSq;
  unsigned __int8 relativeDir;
  unsigned __int8 prevRelativeDir;
  bool faceMotion;
  bool gunBlockedByWall;
  int dontTurnTime;
  bool lockScriptOrient;
  bool fixedLinkYawOnly;
};

struct ai_orient_t
{
  ai_orient_mode_t eMode;
  float fDesiredLookPitch;
  float fDesiredLookYaw;
  float fDesiredBodyYaw;
};

struct __declspec(align(4)) ActorPainDeath
{
  int iPainTime;
  bool allowPain;
  bool blockingPain;
  bool allowDeath;
  bool delayedDeath;
  int iDamageTaken;
  int iDamageYaw;
  vec3_t damageDir;
  unsigned __int16 damageHitLoc;
  unsigned __int16 damageWeapon;
  unsigned __int16 damageMod;
  int deathContents;
  int bDropWeapon;
  bool forceRagdollImmediate;
  int minPainDamage;
  bool dieQuietly;
};

struct __declspec(align(4)) ActorProne
{
  unsigned __int16 animProneLow;
  unsigned __int16 animProneLevel;
  unsigned __int16 animProneHigh;
  int bProneOK;
  float fInvProneAnimLowPitch;
  float fInvProneAnimHighPitch;
  float fProneLastDiff;
  unsigned __int8 feetDirection;
};

union $A899A4A44C693354E5CF33C9EDFF92AE
{
  float fTorsoPitch;
  float fBodyPitch;
};

union $8F7A1F2A0E788339D3BE9A175DA5EAEF
{
  float fWaistPitch;
  float fBodyRoll;
};

struct actor_prone_info_s
{
  bool bCorpseOrientation;
  bool orientPitch;
  bool prone;
  int iProneTime;
  int iProneTrans;
  float fBodyHeight;
  $A899A4A44C693354E5CF33C9EDFF92AE ___u6;
  $8F7A1F2A0E788339D3BE9A175DA5EAEF ___u7;
};

struct ActorCachedInfo
{
  int time;
  vec3_t pos;
  vec3_t dir;
};

struct ActorLookAtInfo
{
  vec3_t vLookAtPos;
  float fLookAtTurnAngle;
  float fLookAtTurnSpeed;
  float fLookAtTurnAccel;
  float fLookAtAnimYawLimit;
  float fLookAtYawLimit;
  unsigned __int16 animLookAtStraight;
  unsigned __int16 animLookAtLeft;
  unsigned __int16 animLookAtRight;
  bool bDoLookAt;
  bool bLookAtSetup;
  int iLookAtBlendEndTime;
  float fLookAtAnimBlendRate;
  float fLookAtLimitBlendRate;
};

struct ActorCoverArrivalInfo
{
  int arrivalNotifyRequested;
  int animscriptOverrideRunTo;
  vec3_t animscriptOverrideRunToPos;
  vec2_t offsetIncrement;
  int offsetAdjustCount;
  float arrivalYaw;
  EntHandle scriptedArrivalEnt;
};

struct ActorNodeSelect
{
  int numCoverNodesInGoal;
  int iPotentialCoverNodeCount;
  bool keepNodeDuringScriptedAnim;
  unsigned __int16 potentialCoverNode[10];
  unsigned __int16 potentialAmbushNode[32];
  int iPotentialAmbushNodeCount;
  int nextFindBestCoverTime;
  int coverSearchInterval;
  bool requestDifferentCover;
  bool keepClaimedNode;
  bool keepClaimedNodeIfValid;
  pathnode_t *pPotentialReacquireNode[10];
  int iPotentialReacquireNodeCount;
  pathnode_t *pPotentialCoverNode[32];
  bool doDangerReact;
  int dangerReactGoalTime;
  int dangerReactDuration;
};

struct ActorSight
{
  float fovDot;
  float fMaxSightDistSqrd;
  int ignoreCloseFoliage;
  bool lastEnemySightPosValid;
  vec3_t lastEnemySightPos;
  vec3_t anglesToLikelyEnemyPath;
  int faceLikelyEnemyPathNeedCheckTime;
  int faceLikelyEnemyPathNeedRecalculateTime;
  const pathnode_t *faceLikelyEnemyPathNode;
  int iTraceCount;
  unsigned __int16 vis_blockers[72];
  float fovDotBusy;
  int latency;
  float upAimLimit;
  float downAimLimit;
  float rightAimLimit;
  float leftAimLimit;
};

struct ActorString
{
  unsigned __int16 properName;
  unsigned __int16 weaponName;
  unsigned __int16 primaryWeaponName;
  unsigned __int16 secondaryWeaponName;
  unsigned __int16 sideArmName;
  unsigned __int16 anim_pose;
  unsigned __int16 scriptState;
  unsigned __int16 lastScriptState;
  unsigned __int16 stateChangeReason;
  int iUseHintString;
};

struct ActorAnimSets
{
  unsigned __int16 aimLow;
  unsigned __int16 aimLevel;
  unsigned __int16 aimHigh;
  unsigned __int16 shootLow;
  unsigned __int16 shootLevel;
  unsigned __int16 shootHigh;
};

struct __declspec(align(4)) scr_animscript_t
{
  int func;
  int endFunc;
  unsigned __int16 name;
};

struct ActorAnimation
{
  ai_stance_e eAllowedStances;
  unsigned __int16 AnimScriptHandle;
  scr_animscript_t *pAnimScriptFunc;
  scr_animscript_t *pPrevAnimScriptFunc;
  scr_animscript_t AnimScriptSpecific;
  ai_traverse_mode_t eTraverseMode;
  unsigned __int8 moveMode;
  bool useCombatScriptAtCover;
  bool prevAnimScriptTerminated;
  bool safeToChangeScript;
  bool bUseGoalWeight;
  ai_animmode_t eAnimMode;
  ai_animmode_t eScriptSetAnimMode;
  float fAnimTranslationScale;
};

struct pathpoint_t
{
  vec3_t vOrigPoint;
  vec2_t fDir2D;
  float fOrigLength;
  int iNodeNum;
};

struct path_t
{
  pathpoint_t pts[32];
  __int16 wPathLen;
  __int16 wOrigPathLen;
  __int16 wDodgeCount;
  __int16 wNegotiationStartNode;
  __int16 lookaheadNextNode;
  __int16 pathChangeNotifyNode;
  __int16 wDodgeEntity;
  vec3_t vFinalGoal;
  vec3_t vStartPos;
  vec3_t lookaheadDir;
  vec3_t lookaheadPos;
  float fLookaheadDist;
  float fLookaheadAmount;
  float fLookaheadDistToNextNode;
  int minLookAheadNodes;
  int flags;
  int iPathTime;
  int iPathClearedTime;
  team_t eTeam;
  float fCurrLength;
  vec3_t vCurrPoint;
  int iPathEndTime;
  float pathEndAnimDistSq;
  bool pathEndAnimNotified;
  bool lookaheadHitsStairs;
  bool useChokePoints;
  vec2_t pathChangeTracePos;
  int randomPercent;
  int owner;
  float physRadius;
  float physHeight;
};

struct path_trim_t
{
  int iIndex;
  int iDelta;
};

struct __declspec(align(4)) ActorNavigation
{
  float fWalkDist;
  float fWalkDistFacingMotion;
  float badPlaceAwareness;
  path_t Path;
  path_trim_t TrimInfo;
  int iFollowMin;
  int iFollowMax;
  float fInterval;
  int pathWaitTime;
  int iTeamMoveWaitTime;
  int iTeamMoveDodgeTime;
  int stoppedWaitStartTime;
  EntHandle stoppedWaitEnt;
  actor_t *pPileUpActor;
  gentity_t *pPileUpEnt;
  int bDontAvoidPlayer;
  float sideMove;
  bool noDodgeMove;
  int mayMoveTime;
  float nodeOffsetDist;
  vec3_t nodeOffsetPos;
  vec2_t prevMoveDir;
  float leanAmount;
  EntHandle pCloseEnt;
  ai_badplace_t aiBadPlace;
  bool isInBadPlace;
  char badplaceRecheckPathLen;
};

struct ActorCombat
{
  int exposedStartTime;
  int exposedDuration;
  bool provideCoveringFire;
  scr_animscript_t *pAttackScriptFunc;
  float pathEnemyLookahead;
  float pathEnemyFightDist;
  float meleeAttackDist;
  bool useEnemyGoal;
  bool useMeleeAttackSpot;
  vec3_t goodShootPos;
  int goodShootPosValid;
  float engageMinDist;
  float engageMinFalloffDist;
  float engageMaxDist;
  float engageMaxFalloffDist;
  bool noGrenadeReturnThrow;
  AlertLevel alertLevel;
  CombatMode combatMode;
  int exposedResumeTime;
  int stopPathTime;
  int ambushStartTime;
  bool doingAmbush;
  bool currentAmbushNodeInvalid;
  bool allAmbushNodesFailed;
  bool noAttackerAccuracyMod;
  bool canFlank;
  bool isWounded;
  bool damageShield;
  float frontShieldAngleCos;
};

struct __declspec(align(4)) ActorReact
{
  int iReactTime;
  int nextAllowedReactTime;
  bool allowReact;
  vec3_t reactOrigin;
  int lastHitTime;
  float newEnemyReactionDistSq;
  vec3_t newEnemyReactionPos;
  bool newEnemyReaction;
};

struct potential_threat_t
{
  bool isEnabled;
  vec2_t direction;
};

struct SentientHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

struct ActorSecondaryTarget
{
  EntHandle entity;
  vec2_t dirToEnt;
  float distToEnt;
  pathnode_t *node;
};

struct ActorThreat
{
  int hasThreateningEnemy;
  int bPacifist;
  int iPacifistWait;
  potential_threat_t potentialThreat;
  int threatUpdateTime;
  SentientHandle pFavoriteEnemy;
  int bDrawOnCompass;
  int bActivateCrosshair;
  float highlyAwareRadius;
  bool ignoreExplosionEvents;
  int numSecondaryTarget;
  ActorSecondaryTarget secondaryTargets[2];
  bool allEnemiesInSimilarDir;
  int goodEnemyOnly;
  float footstepDetectDistSq;
  float footstepDetectDistWalkSq;
  float footstepDetectDistSprintSq;
};

struct ActorGrenade
{
  float grenadeAwareness;
  EntHandle pGrenade;
  unsigned __int16 GrenadeTossMethod;
  int bGrenadeTossValid;
  int bGrenadeTargetValid;
  int iGrenadeAmmo;
  vec3_t vGrenadeTossPos;
  vec3_t vGrenadeTargetPos;
  vec3_t vGrenadeTossVel;
  EntHandle throwBackGrenadeKilledOriginalOwner;
  int bThrowbackGrenades;
  EntHandle pGrenadeFlee;
  int flashBanged;
  float flashBangedStrength;
  int flashBangImmunity;
  int grenadeExistTime;
  Weapon GrenadeWeapon;
  bool grenadeTossWithBounce;
  vec3_t pickupPos;
};

struct __declspec(align(2)) ActorTurret
{
  gentity_t *pTurret;
  unsigned __int16 turretAnim;
  unsigned __int8 turretAnimSet;
};

struct actor_goal_s
{
  vec3_t pos;
  vec3_t ang;
  float radius;
  float height;
  pathnode_t *node;
  gentity_t *volume;
};

struct ActorGoal
{
  actor_goal_s codeGoal;
  aiGoalSources codeGoalSrc;
  actor_goal_s scriptGoal;
  EntHandle scriptGoalEnt;
  bool goalPosChanged;
  bool commitToFixedNode;
  bool ignoreForFixedNodeSafeCheck;
  bool fixedNode;
  float fixedNodeSafeRadius;
  float fixedNodeSafeVolumeRadiusSq;
  EntHandle fixedNodeSafeVolume;
  int moveHistoryIndex;
  bool moveHistoryConsistent;
  vec2_t moveHistory[10];
};

struct ActorSuppression
{
  int ignoreSuppression;
  int suppressionWait;
  int suppressionDuration;
  int suppressionStartTime;
  float suppressionMeter;
};

struct ActorDelayedWeaponDrop
{
  vec3_t matrix[4];
  int time;
  unsigned __int16 tagName;
  DelayedWeapDropState state;
  int weaponIndex;
};

struct vis_cache_t
{
  bool bVisible;
  int iLastUpdateTime;
  int iLastVisTime;
};

struct __declspec(align(4)) sentient_info_t
{
  vis_cache_t VisCache;
  int iLastAttackMeTime;
  int lastKnownPosTime;
  int attackTime;
  bool surprised;
  vec3_t vLastKnownPos;
  pathnode_t *pLastKnownNode;
  int iPathTestTime;
  bool bPathTestResult;
};

struct ai_suppression_t
{
  int iTime;
  sentient_t *pSuppressor;
  vec3_t clipPlane;
  int movementOnly;
};

union $FC3A6267FE0F5339E010A222FD8EA39F
{
  const CollisionAabbTree *tree;
  const cbrush_t *brush;
};

struct col_prim_t
{
  int type;
  $FC3A6267FE0F5339E010A222FD8EA39F ___u1;
};

template <int SIZE>
class __declspec(align(16)) colgeom_visitor_inlined_t : colgeom_visitor_t
{
    int nprims;
    bool overflow;
    col_prim_t prims[SIZE];
};

struct /*__cppobj*/ __declspec(align(8)) actor_physics_t
{
  vec3_t vOrigin;
  vec3_t vVelocity;
  unsigned __int16 groundEntNum;
  int iFootstepTimer;
  int bHasGroundPlane;
  float groundplaneSlope;
  int iSurfaceType;
  vec3_t vWishDelta;
  int bIsAlive;
  int iEntNum;
  aiphys_t ePhysicsType;
  float fGravity;
  int iMsec;
  vec3_t vMins;
  vec3_t vMaxs;
  bool prone;
  int iTraceMask;
  int foliageSoundTime;
  int iNumTouch;
  int iTouchEnts[32];
  int iHitEntnum;
  vec3_t vHitOrigin;
  vec3_t vHitNormal;
  unsigned __int8 bStuck;
  unsigned __int8 bDeflected;
  const gjkcc_input_t *m_gjkcc_input;
  //colgeom_visitor_inlined_t<300> proximity_data;
  bool pathGoingDown;
  AI_STAIRS_STATE stairsState;
  int groundEntityTimestamp;
};

struct ActorCoverInfluenceInfo
{
  pathnode_t *node;
  float weightAdjust;
  int timeAdded;
};

struct /*__cppobj*/ actor_t
{
  ActorFlags flags;
  gentity_t *ent;
  sentient_t *sentient;
  AISpecies species;
  ActorState state;
  ActorShoot shoot;
  ActorOrientation orientation;
  ai_orient_t CodeOrient;
  ai_orient_t ScriptOrient;
  ActorPainDeath painDeath;
  ActorProne prone;
  actor_prone_info_s ProneInfo;
  ActorCachedInfo eyeInfo;
  ActorCachedInfo muzzleInfo;
  ActorLookAtInfo lookAtInfo;
  ActorCoverArrivalInfo arrivalInfo;
  ActorNodeSelect nodeSelect;
  ActorSight sight;
  ActorString string;
  ActorAnimSets animSets;
  ActorAnimation anim;
  ActorNavigation navigation;
  ActorCombat combat;
  ActorReact react;
  ActorThreat threat;
  ActorGrenade grenade;
  ActorTurret turret;
  ActorGoal goal;
  ActorSuppression suppression;
  ActorDelayedWeaponDrop weapDrops[2];
  sentient_info_t sentientInfo[72];
  ai_suppression_t Suppressant[4];
  __declspec(align(16)) actor_physics_t Physics;
  const char *pszDebugInfo;
  ActorCoverInfluenceInfo cover_influencers[8];
};

struct flame_timed_damage_t
{
  gentity_t *attacker;
  int damage;
  float damageDuration;
  float damageInterval;
  int start_timestamp;
  int end_timestamp;
  int lastupdate_timestamp;
};

struct item_ent_t
{
  int ammoCount;
  int clipAmmoCount;
  Weapon weapon;
};

struct trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  unsigned __int8 perk;
  bool requireLookAt;
  bool ignoreTeam;
  bool excludeTeam;
  int exposureIndex;
  float exposureLerpToLighter;
  float exposureLerpToDarker;
  vec3_t exposureFeather;
};

struct mover_ent_t
{
    union {
        mover_positions_t pos;
        mover_slidedata_t slide;
    };
  mover_positions_t angle;
};

struct corpse_ent_t
{
  int deathAnimStartTime;
};

struct missile_ent_t
{
  int timestamp;
  float time;
  int timeOfBirth;
  float travelDist;
  vec3_t surfaceNormal;
  team_t team;
  unsigned __int8 flags;
  int antilagTimeOffset;
  int timeAlive;
  float airburstActivationDistance;
  union {
      struct {
          vec3_t curvature;
          vec3_t targetOffset;
          MissileStage stage;
          MissileFlightMode flightMode;
      } missile;
      struct {
          int effectIndex;
      } grenade;
  };
  int forcedDud;
  float grenadeWobbleCycle;
  float grenadeCurve;
  int destructibleBounceCount;
};

struct blend_ent_t
{
  vec3_t pos;
  vec3_t vel;
  vec4_t viewQuat;
  bool changed;
  float posAccelTime;
  float posDecelTime;
  float angleAccelTime;
  float angleDecelTime;
  float startTime;
  float posTotalTime;
  float angleTotalTime;
};

struct actor_ent_t
{
  int spawnTime;
  animscripted_t *scripted;
};

struct spawner_ent_t
{
  int team;
  int timestamp;
};

struct zbarrier_ent_t
{
  zbarrier_piece_t pieces[6];
};

class gclient_t
{
public:
    playerState_s ps;
    playerState_s lastPlayerPS;
    clientSession_t sess;
    ClientNum_t spectatorClient;
    int flags;
    int lastCmdTime;
    bitarray<64> button_bits;
    bitarray<64> oldbutton_bits;
    bitarray<64> latched_button_bits;
    bitarray<64> button_bitsSinceLastFrame;
    float fGunPitch;
    float fGunYaw;
    int damage_blood;
    vec3_t damage_from;
    int damage_fromWorld;
    int inactivityTime;
    int inactivityWarning;
    int lastVoiceTime;
    int outWaterTime;
    int switchSeatTime;
    float currentAimSpreadScale;
    int dropWeaponTime;
    EntHandle pLookatEnt;
    vec4_t prevLinkedInvQuat;
    bool prevLinkAnglesSet;
    bool link_doCollision;
    bool link_useTagAnglesForViewAngles;
    bool link_useBaseAnglesForViewClamp;
    float linkAnglesFrac;
    viewClampState link_viewClamp;
    EntHandle useHoldEntity;
    int useHoldTime;
    int useButtonDone;
    int iLastCompassPlayerInfoEnt;
    int compassPingTime;
    int damageTime;
    float v_dmg_roll;
    float v_dmg_pitch;
    vec3_t swayViewAngles;
    vec3_t swayOffset;
    vec3_t swayAngles;
    vec3_t baseAngles;
    vec3_t baseOrigin;
    vec3_t recoilAngles;
    float fLastIdleFactor;
    int weaponIdleTime;
    vec3_t recoilSpeed;
    int previousRecoilTime;
    float previousRecoilRatio;
    int lastServerTime;
    int lastSpawnTime;
    Weapon lastWeapon;
    bool previouslyFiring;
    bool previouslyUsingNightVision;
    bool previouslyDTP;
    bool previouslyBeganWeaponRaise;
    bool previouslySprinting;
    unsigned int hasSpyplane;
    unsigned int hasSatellite;
    int revive;
    int reviveTime;
    int disallowVehicleUsage;
    unsigned __int16 attachShieldTagName;
    int lastStand;
    int lastStandTime;
};

struct gentity_t
{
  entityState_s s;
  entityShared_t r;
  gclient_t *client;
  actor_t *actor;
  sentient_t *sentient;
  TurretInfo *pTurretInfo;
  Destructible *destructible;
  vehicle_t *vehicle;
  unsigned __int16 model;
  unsigned __int8 physicsObject;
  unsigned __int8 takedamage;
  unsigned __int8 active;
  unsigned __int8 nopickup;
  unsigned __int8 handler;
  unsigned __int8 team;
  unsigned __int8 avoidHandle;
  unsigned __int16 classname;
  unsigned __int16 target;
  unsigned __int16 targetname;
  unsigned __int16 script_noteworthy;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int freeAfterEvent;
  int unlinkAfterEvent;
  int clipmask;
  int processedFrame;
  EntHandle parent;
  int nextthink;
  int health;
  int maxHealth;
  int damage;
  flame_timed_damage_t flame_timed_damage[4];
  int last_timed_radius_damage;
  int count;
  union {
      item_ent_t item[2];
      trigger_ent_t trigger;
      mover_ent_t mover;
      corpse_ent_t corpse;
      missile_ent_t missile;
      blend_ent_t blend;
      actor_ent_t actorInfo;
      spawner_ent_t spawner;
      zbarrier_ent_t zbarrier;
  };
  EntHandle missileTargetEnt;
  struct {
      unsigned __int16 notifyString;
      unsigned int index;
      unsigned __int8 stoppable;
      int basetime;
      int duration;
  } snd_wait;
  tagInfo_t *tagInfo;
  gentity_t *tagChildren;
  unsigned __int16 attachModelNames[19];
  unsigned __int16 attachTagNames[19];
  XAnimTree_s *pAnimTree;
  unsigned __int16 disconnectedLinks;
  int iDisconnectTime;
  int useCount;
  int physObjId;
  gentity_t *nextFree;
  int birthTime;
  int ikPlayerclipTerrainTime;
  int ikDisableTerrainMappingTime;
};

struct __declspec(align(4)) pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  unsigned __int8 disconnectCount;
  unsigned __int8 negotiationLink;
  unsigned __int8 flags;
  unsigned __int8 ubBadPlaceCount[5];
};

struct pathnode_constant_t
{
  nodeType type;
  int spawnflags;
  unsigned __int16 targetname;
  unsigned __int16 script_linkName;
  unsigned __int16 script_noteworthy;
  unsigned __int16 target;
  unsigned __int16 animscript;
  int animscriptfunc;
  vec3_t vOrigin;
  float fAngle;
  vec2_t forward;
  float fRadius;
  float minUseDistSq;
  __int16 wOverlapNode[2];
  unsigned __int16 totalLinkCount;
  pathlink_s *Links;
};

struct __declspec(align(4)) pathnode_dynamic_t
{
  SentientHandle pOwner;
  int iFreeTime;
  int iValidTime[3];
  int dangerousNodeTime[3];
  int inPlayerLOSTime;
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  __int16 userCount;
  bool hasBadPlaceLink;
};

struct pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t *pNextOpen;
  pathnode_t *pPrevOpen;
  pathnode_t *pParent;
  float fCost;
  float fHeuristic;
  union {
      float nodeCost;
      int linkIndex;
  };
};

struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

class PathFindInput
{
public:
    path_t* pPath;
    const vec3_t* vStartPos;
    const vec3_t* vGoalPos;
    pathnode_t* pNodeFrom;
    pathnode_t* pNodeTo;
    int bAllowNegotiationLinks;
    int bAllowNegotiationHints;
    int useChokePoints;
    int bIgnoreBadPlaces;
    int searchEntNum;
    team_t eTeam;
    float physRadius;
    float physHeight;
};

struct __declspec(align(4)) sentient_t
{
  gentity_t *ent;
  team_t eTeam;
  EntHandle scriptOwner;
  int iThreatBias;
  int iThreatBiasGroupIndex;
  bool bIgnoreMe;
  bool bIgnoreAll;
  bool bIgnoreForFriendlyFire;
  bool originChanged;
  vec3_t oldOrigin;
  float maxVisibleDist;
  float surprisedByMeDistSq;
  int iEnemyNotifyTime;
  int attackerCount;
  EntHandle lastAttacker;
  EntHandle syncedMeleeEnt;
  EntHandle targetEnt;
  EntHandle scriptTargetEnt;
  unsigned __int16 scriptTargetTag;
  float entityTargetThreat;
  int meleeAttackerSpot[4];
  float attackerAccuracy;
  bool ignoreRandomBulletDamage;
  bool turretInvulnerability;
  pathnode_t *pClaimedNode;
  pathnode_t *pPrevClaimedNode;
  pathnode_t *pNearestNode;
  unsigned __int8 bNearestNodeValid;
  unsigned __int8 bNearestNodeBad;
  vec3_t vNearestNodeCheckPos;
  bool inuse;
  int banNodeTime;
  bool bInMeleeCharge;
};

struct TurretInfo
{
  bool inuse;
  int state;
  int flags;
  int fireTime;
  EntHandle manualTarget;
  EntHandle target;
  vec3_t targetPos;
  int targetTime;
  vec3_t missOffsetNormalized;
  float arcmin[2];
  float arcmax[2];
  float initialYawmin;
  float initialYawmax;
  float forwardAngleDot;
  float dropPitch;
  float scanningPitch;
  int convergenceTime[2];
  int suppressTime;
  float maxRangeSquared;
  SentientHandle detachSentient;
  int stance;
  int prevStance;
  int fireSndDelay;
  float accuracy;
  vec3_t userOrigin;
  int prevSentTarget;
  float aiSpread;
  float playerSpread;
  team_t eTeam;
  float heatVal;
  bool overheating;
  int fireBarrel;
  float scanSpeed;
  float scanDecelYaw;
  int scanPauseTime;
  vec3_t originError;
  vec3_t anglesError;
  float pitchCap;
  int triggerDown;
  unsigned int fireSnd;
  unsigned int fireSndPlayer;
  unsigned int startFireSnd;
  unsigned int startFireSndPlayer;
  unsigned int loopFireEnd;
  unsigned int loopFireEndPlayer;
  unsigned int rotateLoopSnd;
  unsigned int rotateLoopSndPlayer;
  unsigned int rotateStopSnd;
  unsigned int rotateStopSndPlayer;
  int sndIsFiring;
  vec3_t targetOffset;
  float onTargetAngle;
  TurretRotateState turretRotateState;
  vec3_t previousAngles;
};

struct DestructibleBurnData
{
  int burnTime;
  unsigned int fx;
  int sndId;
};

struct DESTRUCTIBLE_PIECE_INFO
{
  __int16 health;
  int xdollHandle;
  unsigned int fx;
  DestructibleBurnData burnData;
};

struct DObjAnimMat
{
  vec4_t quat;
  vec3_t trans;
  float transWeight;
};

struct XSurfaceVertexInfo
{
  __int16 vertCount[4];
  unsigned __int16 *vertsBlend;
  float *tensionData;
};

union GfxColor
{
  unsigned int packed;
  unsigned __int8 array[4];
};

union PackedTexCoords
{
  unsigned int packed;
};

union PackedUnitVec
{
  unsigned int packed;
};

struct GfxPackedVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

struct XSurfaceCollisionTree
{
  vec3_t trans;
  vec3_t scale;
  unsigned int nodeCount;
  XSurfaceCollisionNode *nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf *leafs;
};

struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree *collisionTree;
};

struct __declspec(align(16)) XSurface
{
  unsigned __int8 tileMode;
  unsigned __int8 vertListCount;
  unsigned __int16 flags;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 baseVertIndex;
  unsigned __int16 *triIndices;
  XSurfaceVertexInfo vertInfo;
  GfxPackedVertex *verts0;
  ID3D11Buffer *vb0;
  union {
      XRigidVertList* vertList;
      XRigidVertList* vertListEA;
  };
  ID3D11Buffer *indexBuffer;
  int partBits[5];
};

struct Collmap
{
    PhysGeomList* geomList;
};

struct XModel
{
  const char *name;
  unsigned __int8 numBones;
  unsigned __int8 numRootBones;
  unsigned __int8 numsurfs;
  unsigned __int8 lodRampType;
  union {
      unsigned __int16* localBoneNames;
      unsigned __int16* boneNames;
  };
  union {
      unsigned __int8* localParentList;
      unsigned __int8* parentList;
  };
  union {
      __int16* localQuats;
      __int16* quats;
  };
  union {
      float* localTrans;
      float* trans;
  };
  unsigned __int8 *partClassification;
  DObjAnimMat *baseMat;
  XSurface *surfs;
  Material **materialHandles;
  XModelLodInfo lodInfo[4];
  XModelCollSurf_s *collSurfs;
  int numCollSurfs;
  int contents;
  union {
      XBoneInfo* localBoneInfo;
      XBoneInfo* boneInfo;
  };
  float radius;
  vec3_t mins;
  vec3_t maxs;
  __int16 numLods;
  __int16 collLod;
  float *himipInvSqRadii;
  int memUsage;
  int flags;
  bool bad;
  PhysPreset *physPreset;
  unsigned __int8 numCollmaps;
  Collmap *collmaps;
  PhysConstraints *physConstraints;
  vec3_t lightingOriginOffset;
  float lightingOriginRange;
};

struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

struct FxIntRange
{
  int base;
  int amplitude;
};

struct FxSpawnDefOneShot
{
  FxIntRange count;
};

union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

struct FxFloatRange
{
  float base;
  float amplitude;
};

struct FxElemAtlas
{
  unsigned __int8 behavior;
  unsigned __int8 index;
  unsigned __int8 fps;
  unsigned __int8 loopCount;
  unsigned __int8 colIndexBits;
  unsigned __int8 rowIndexBits;
  unsigned __int16 entryCountAndIndexRange;
};

struct FxElemVec3Range
{
  vec3_t base;
  vec3_t amplitude;
};

struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

struct FxElemVisualState
{
  unsigned __int8 color[4];
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

struct FxElemMarkVisuals
{
  Material *materials[2];
};

union $23C427795B37393287299D2772FE5089
{
  const FxElemDef *elemDefs;
  const FxElemDef *localElemDefs;
};

const struct FxEffectDef
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int8 efPriority;
  __int16 elemDefCountLooping;
  __int16 elemDefCountOneShot;
  __int16 elemDefCountEmission;
  int totalSize;
  int msecLoopingLife;
  int msecNonLoopingLife;
  $23C427795B37393287299D2772FE5089 ___u9;
  vec3_t boundingBoxDim;
  vec3_t boundingBoxCentre;
  float occlusionQueryDepthBias;
  int occlusionQueryFadeIn;
  int occlusionQueryFadeOut;
  FxFloatRange occlusionQueryScaleRange;
};

union FxEffectDefRef
{
  const FxEffectDef *handle;
  const char *name;
};

struct __declspec(align(4)) GfxLightImage
{
  GfxImage *image;
  unsigned __int8 samplerState;
};

struct GfxLightDef
{
  const char *name;
  GfxLightImage attenuation;
  int lmapLookupStart;
};

union FxElemVisuals
{
  const void *anonymous;
  Material *material;
  XModel *model;
  FxEffectDefRef effectDef;
  const char *soundName;
  GfxLightDef *lightDef;
};

union FxElemDefVisuals
{
  FxElemMarkVisuals *markArray;
  FxElemVisuals *array;
  FxElemVisuals instance;
};

struct FxTrailVertex
{
  vec2_t pos;
  vec2_t normal;
  float texCoord;
};

union $6F757D3FECE1EA491BD8B6C97BF0CB9E
{
  FxTrailVertex *vertsEA;
  FxTrailVertex *verts;
};

union $D31B43AE1E46D24CA4A859818848B5E1
{
  unsigned __int16 *indsEA;
  unsigned __int16 *inds;
};

struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  int splitDist;
  int vertCount;
  $6F757D3FECE1EA491BD8B6C97BF0CB9E ___u4;
  int indCount;
  $D31B43AE1E46D24CA4A859818848B5E1 ___u6;
};

struct FxSpotLightDef
{
  float fovInnerFraction;
  float startRadius;
  float endRadius;
};

union FxElemExtendedDefPtr
{
  FxTrailDef *localTrailDef;
  FxTrailDef *trailDef;
  FxSpotLightDef *localSpotLightDef;
  FxSpotLightDef *spotLightDef;
  void *unknownDef;
};

struct FxBillboardTrim
{
  float topWidth;
  float bottomWidth;
};

union FxElemDefUnion
{
  FxBillboardTrim billboard;
  FxIntRange cloudDensityRange;
};

struct FxElemSpawnSound
{
  const char *spawnSound;
};

const struct FxElemDef
{
  int flags;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  unsigned int rotationAxis;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  float windInfluence;
  unsigned __int8 elemType;
  unsigned __int8 visualCount;
  unsigned __int8 velIntervalCount;
  unsigned __int8 visStateIntervalCount;
  const FxElemVelStateSample *velSamples;
  const FxElemVisStateSample *visSamples;
  FxElemDefVisuals visuals;
  vec3_t collMins;
  vec3_t collMaxs;
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxEffectDefRef effectAttached;
  FxElemExtendedDefPtr extended;
  unsigned __int8 sortOrder;
  unsigned __int8 lightingFrac;
  unsigned __int8 unused[2];
  unsigned __int16 alphaFadeTimeMsec;
  unsigned __int16 maxWindStrength;
  unsigned __int16 spawnIntervalAtMaxWind;
  unsigned __int16 lifespanAtMaxWind;
  FxElemDefUnion u;
  FxElemSpawnSound spawnSound;
  vec2_t billboardPivot;
};

struct DestructibleStage
{
  unsigned __int16 showBone;
  float breakHealth;
  float maxTime;
  unsigned int flags;
  const FxEffectDef *breakEffect;
  const char *breakSound;
  const char *breakNotify;
  const char *loopSound;
  XModel *spawnModel[3];
  PhysPreset *physPreset;
};

struct DestructiblePiece
{
  DestructibleStage stages[5];
  unsigned __int8 parentPiece;
  float parentDamagePercent;
  float bulletDamageScale;
  float explosiveDamageScale;
  float meleeDamageScale;
  float impactDamageScale;
  float entityDamageTransfer;
  PhysConstraints *physConstraints;
  int health;
  const char *damageSound;
  const FxEffectDef *burnEffect;
  const char *burnSound;
  unsigned __int16 enableLabel;
  int hideBones[5];
};

struct DestructibleDef
{
  const char *name;
  XModel *model;
  XModel *pristineModel;
  int numPieces;
  DestructiblePiece *pieces;
  int clientOnly;
};

struct DestructibleState
{
  LerpEntityStateDestructibleHit state;
  int time;
};

struct __declspec(align(4)) Destructible
{
  int entNum;
  DESTRUCTIBLE_PIECE_INFO *pieceArray;
  int oldestBurnTime;
  unsigned __int8 destructiblePoseID;
  int pieceCount;
  DestructibleDef *ddef;
  unsigned int flags;
  DestructibleState states[5];
  unsigned __int8 bHasBeenHit;
};

struct vehicle_spline_node_t
{
  __int16 nextIdx;
  __int16 prevIdx;
  float length;
  vec3_t dir;
  float t;
};

struct vehicle_path_node_t
{
  __int16 numLinks;
  __int16 firstLinkIndex;
};

struct vehicle_node_t
{
  unsigned __int16 name;
  unsigned __int16 target;
  unsigned __int16 target2;
  unsigned __int16 script_linkname;
  unsigned __int16 script_noteworthy;
  __int16 index;
  int flags;
  float speed;
  float lookAhead;
  vec3_t origin;
  vec3_t angles;
  float radius;
  float tension;
  union {
      vehicle_spline_node_t splineNode;
      vehicle_path_node_t pathNode;
  };
};

struct __declspec(align(2)) vehicle_custom_path_t
{
  __int16 pathOrder[128];
  __int16 pathLinkIdx[128];
  unsigned __int8 inUse;
};

struct /*__cppobj*/ vehicle_pathpos_t
{
  __int16 nodeIdx;
  __int16 prevIdx;
  __int16 endOfPath;
  float frac;
  float speed;
  float lookAhead;
  float slide;
  float width;
  float manualTime;
  float widthLookAheadFrac;
  float distanceTraveled;
  vec3_t origin;
  vec3_t angles;
  vec3_t lookPos;
  vec3_t origin_on_spline;
  vec3_t angles_on_spline;
  vec3_t lookPos_on_spline;
  int use_spline_speed;
  vehicle_node_t switchNode[2];
  int flags;
  vehicle_custom_path_t *customPath;
  float customGoalLength;
  vec3_t customGoalDir;
  path_t *aiPath;
  path_type_e path_type;
  __int16 startNodeIdx;
  float t;
  float tot_len;
  float tot_time;
};

struct vehicle_physic_t
{
  vec3_t origin;
  vec3_t prevOrigin;
  vec3_t angles;
  vec3_t prevAngles;
  vec3_t maxAngleVel;
  float yawAccel;
  float yawDecel;
  vec3_t mins;
  vec3_t maxs;
  vec3_t vel;
  vec3_t bodyVel;
  vec3_t rotVel;
  vec3_t accel;
  float maxPitchAngle;
  float maxRollAngle;
  float wheelZVel[6];
  float wheelZPos[6];
  int wheelSurfType[6];
  vec3_t bodyTilt;
  vec3_t worldTilt;
  vec3_t worldTiltVel;
  float heliLockHeight;
  float curveLength;
  int curveID;
  float curveStep;
  float curveTime;
  float timeStep;
};

struct VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int flags;
  float heatVal;
  float turretOnTargetRange;
  int overheating;
  int weaponShotCount;
  VehicleTurretState turretState;
};

struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  vec3_t jitterOffsetRange;
  vec3_t jitterDeltaAccel;
  vec3_t jitterAccel;
  vec3_t jitterPos;
};

struct VehicleHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  vec3_t hoverGoalPos;
  int useHoverAccelForAngles;
};

struct VehicleTarget
{
  int valid;
  int hasTargetYaw;
  int targetEnt;
  int lookAtEnt;
  vec3_t targetOrigin;
  vec3_t targetOffset;
  float targetYaw;
};

struct VehicleGunnerTags
{
  int turret;
  int barrel;
  int flash;
  int flash2;
};

struct VehicleTags
{
  int player;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[4];
  VehicleGunnerTags gunnerTags[4];
  int wheel[6];
  int seats[11];
  int entryPoints[5];
};

struct VehicleSeat
{
  int _occupantEntNum;
};

struct WheelState
{
  WheelEffectState m_state;
  WheelEffectState m_last_state;
  float m_state_time;
  float m_rate;
};

struct VehicleStun
{
  bool m_changed_this_frame;
  float m_stun_time;
  float m_last_throttle;
  float m_throttle_stun_time;
  float m_last_brake;
  float m_brake_stun_time;
};

const struct __declspec(align(8)) cbrush_t
{
  vec3_t mins;
  int contents;
  vec3_t maxs;
  unsigned int numsides;
  cbrushside_t *sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  vec3_t *verts;
};

struct hitinfo_t
{
  int hittime;
  vec3_t hitp;
  vec3_t hitn;
  int stype;
  int entnum;
  float intensity;
};

const struct VehicleParameter
{
  float m_speed_max;
  float m_accel_max;
  float m_reverse_scale;
  float m_steer_angle_max;
  float m_steer_angle_speed_scale;
  float m_steer_speed;
  float m_wheel_radius;
  float m_susp_spring_k;
  float m_susp_damp_k;
  float m_susp_adj;
  float m_susp_hard_limit;
  float m_susp_min_height;
  float m_tire_fric_fwd;
  float m_tire_fric_side;
  float m_tire_fric_brake;
  float m_tire_fric_hand_brake;
  float m_body_mass;
  float m_roll_stability;
  float m_pitch_stability;
  float m_pitch_roll_resistance;
  float m_yaw_resistance;
  float m_upright_strength;
  float m_tilt_fakey;
  float m_peel_out_max_speed;
  float m_tire_damp_coast;
  float m_tire_damp_brake;
  float m_tire_damp_hand;
  float m_auto_hand_brake_min_speed;
  TractionType m_traction_type;
  const char *m_name;
  vec3_t m_bbox_min;
  vec3_t m_bbox_max;
  vec3_t m_mass_center_offset;
  vec3_t m_buoyancybox_min;
  vec3_t m_buoyancybox_max;
  float m_water_speed_max;
  float m_water_accel_max;
  float m_water_turn_accel;
  float m_water_turn_speed_max;
  float m_water_ebrake_power;
  vec3_t m_boat_motor_offset;
  float m_boat_speed_rise;
  float m_boat_speed_tilt;
  float m_boat_side_fric_scale;
  float m_boat_forward_fric_scale;
  float m_boat_vertical_fric_scale;
  float m_jump_force;
  float m_tire_fric_side_max;
  bool m_drive_on_walls;
  float m_linear_drag_scale;
  float m_angular_drag_scale;
};

struct view_limits_t
{
  float horizSpanLeft;
  float horizSpanRight;
  float vertSpanUp;
  float vertSpanDown;
  float horizResistLeft;
  float horizResistRight;
  float vertResistUp;
  float vertResistDown;
};

struct __declspec(align(4)) DevGraph
{
  vec2_t *knots;
  int *knotCount;
  int knotCountMax;
  int selectedKnot;
  void (__cdecl *eventCallback)(const DevGraph *, DevEventType, LocalClientNum_t);
  void (__cdecl *textCallback)(const DevGraph *, const float, const float, char *, const int);
  void *data;
  bool disableEditingEndPoints;
};

struct GraphFloat
{
  char name[64];
  vec2_t knots[32];
  int knotCount;
  float scale;
  DevGraph devguiGraph;
};

struct VehicleDriveBySound
{
  int apex;
  const char *name;
  unsigned int alias;
};

struct VehicleEngineSound
{
  const char *name;
  unsigned int alias;
  float params[5];
};

struct VehicleGearData
{
  float minRPM;
  float maxRPM;
  float ratio;
};

struct VehicleEngine
{
  float idleRpms;
  float maxRpms;
  float maxTorque;
  float brakingCoeff;
  vec4_t loadFadeParams;
  float loadScale;
  float loadSmoothing;
  float throttleLag;
  float pitchScale;
  VehicleEngineSound onload[5];
  VehicleEngineSound offload[5];
  int numGears;
  int loopLastGear;
  VehicleGearData gears[10];
};

struct VehicleAntenna
{
  float springK;
  float damp;
  float length;
  float gravity;
};

const struct VehicleDef
{
  const char *name;
  __int16 type;
  int remoteControl;
  int bulletDamage;
  int armorPiercingDamage;
  int grenadeDamage;
  int projectileDamage;
  int projectileSplashDamage;
  int heavyExplosiveDamage;
  __int16 cameraMode;
  int autoRecenterOnAccel;
  int thirdPersonDriver;
  int thirdPersonUseVehicleRoll;
  int thirdPersonCameraPitchVehicleRelative;
  int thirdPersonCameraHeightWorldRelative;
  float thirdPersonCameraRange;
  float thirdPersonCameraMinPitchClamp;
  float thirdPersonCameraMaxPitchClamp;
  float thirdPersonCameraHeight[2];
  float thirdPersonCameraPitch[2];
  int cameraAlwaysAutoCenter;
  float cameraAutoCenterLerpRate;
  float cameraAutoCenterMaxLerpRate;
  float thirdPersonCameraSpringDistance;
  float thirdPersonCameraSpringTime;
  float thirdPersonCameraHandbrakeTurnRateInc;
  float cameraFOV;
  float cameraRollFraction;
  vec3_t tagPlayerOffset;
  int killcamCollision;
  float killcamDist;
  float killcamZDist;
  float killcamMinDist;
  float killcamZTargetOffset;
  float killcamFOV;
  float killcamNearBlur;
  float killcamNearBlurStart;
  float killcamNearBlurEnd;
  float killcamFarBlur;
  float killcamFarBlurStart;
  float killcamFarBlurEnd;
  int isDrivable;
  int numberOfSeats;
  int numberOfGunners;
  int seatSwitchOrder[11];
  int driverControlledGunPos;
  float entryPointRadius[5];
  float texScrollScale;
  float wheelRotRate;
  float extraWheelRotScale;
  int wheelChildTakesSteerYaw;
  float maxSpeed;
  float maxSpeedVertical;
  float accel;
  float accelVertical;
  float rotRate;
  float rotAccel;
  float maxBodyPitch;
  float maxBodyRoll;
  float collisionDamage;
  float collisionSpeed;
  float suspensionTravel;
  float heliCollisionScalar;
  float viewPitchOffset;
  float viewInfluence;
  float tiltFromAcceleration[2];
  float tiltFromDeceleration[2];
  float tiltFromVelocity[2];
  float tiltSpeed[2];
  const char *turretWeapon;
  view_limits_t turretViewLimits;
  float turretRotRate;
  int turretClampPlayerView;
  int turretLockTurretToPlayerView;
  const char *gunnerWeapon[4];
  unsigned __int16 gunnerWeaponIndex[4];
  float gunnerRotRate;
  vec2_t gunnerRestAngles[4];
  view_limits_t passengerViewLimits[6];
  const char *sndNames[2];
  unsigned int sndIndices[2];
  const char *sndMaterialNames[3];
  float skidSpeedMin;
  float skidSpeedMax;
  const char *futzName;
  float futzBlend;
  int animType;
  const char *animSet;
  int scriptedAnimationEntry;
  float mantleAngles[4];
  unsigned __int16 extraWheelTags[4];
  unsigned __int16 driverHideTag;
  XModel *attachmentModels[4];
  unsigned __int16 attachmentTags[4];
  XModel *deathAttachmentModels[4];
  unsigned __int16 deathAttachmentTags[4];
  float tracerOffset[2];
  XModel *model;
  XModel *viewModel;
  XModel *deathModel;
  XModel *enemyModel;
  float modelSwapDelay;
  const FxEffectDef *exhaustFx;
  int oneExhaust;
  const FxEffectDef *treadFx[32];
  const FxEffectDef *deathFx;
  unsigned __int16 deathFxTag;
  const char *deathFxSound;
  const FxEffectDef *lightFx[4];
  unsigned __int16 lightFxTag[4];
  const FxEffectDef *friendlyLightFx;
  unsigned __int16 friendlyLightFxTag;
  const FxEffectDef *enemyLightFx;
  unsigned __int16 enemyLightFxTag;
  float radiusDamageMin;
  float radiusDamageMax;
  float radiusDamageRadius;
  const char *shootShock;
  const char *shootRumble;
  float deathQuakeScale;
  float deathQuakeDuration;
  float deathQuakeRadius;
  const char *rumbleType;
  float rumbleScale;
  float rumbleDuration;
  float rumbleRadius;
  float rumbleBaseTime;
  float rumbleAdditionalTime;
  int healthDefault;
  int healthMin;
  int healthMax;
  int eTeam;
  int boostAccelMultiplier;
  float boostDuration;
  float boostSpeedIncrease;
  int addToCompass;
  int addToCompassEnemy;
  const char *compassIcon;
  Material *compassIconMaterial;
  const char *gasButtonName;
  int gasButton;
  const char *reverseBrakeButtonName;
  int reverseBrakeButton;
  const char *handBrakeButtonName;
  int handBrakeButton;
  const char *attackButtonName;
  int attackButton;
  const char *attackSecondaryButtonName;
  int attackSecondaryButton;
  const char *boostButtonName;
  int boostButton;
  const char *moveUpButtonName;
  int moveUpButton;
  const char *moveDownButtonName;
  int moveDownButton;
  const char *switchSeatButtonName;
  int switchSeatButton;
  const char *steerGraphName;
  GraphFloat *steerGraph;
  const char *accelGraphName;
  GraphFloat *accelGraph;
  int isNitrous;
  int isFourWheelSteering;
  int useCollmap;
  float radius;
  float minHeight;
  float maxHeight;
  float max_fric_tilt_angle;
  float max_fric_tilt;
  int noDirectionalDamage;
  int fakeBodyStabilizer;
  float vehHelicopterBoundsRadius;
  float vehHelicopterDecelerationFwd;
  float vehHelicopterDecelerationSide;
  float vehHelicopterDecelerationUp;
  float vehHelicopterTiltFromControllerAxes;
  float vehHelicopterTiltFromFwdAndYaw;
  float vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt;
  float vehHelicopterTiltMomentum;
  int vehHelicopterQuadRotor;
  int vehHelicopterAccelTwardsView;
  float maxRotorArmMovementAngle;
  float maxRotorArmRotationAngle;
  int vehHelicopterMaintainHeight;
  int vehHelicopterMaintainMaxHeight;
  float vehHelicopterMaintainHeightLimit;
  float vehHelicopterMaintainHeightAccel;
  float vehHelicopterMaintainHeightMinimum;
  float vehHelicopterMaintainHeightMaximum;
  float vehHelicopterMaintainCeilingMinimum;
  int joltVehicle;
  int joltVehicleDriver;
  float joltMaxTime;
  float joltTime;
  float joltWaves;
  float joltIntensity;
  VehicleParameter nitrousVehParams;
  float driveBySoundRadius[2];
  VehicleDriveBySound driveBySounds[40];
  int doFootSteps;
  int isSentient;
  VehicleEngine engine;
  VehicleAntenna antenna[2];
  char *csvInclude;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

union CollisionAabbTreeIndex
{
  int firstChildIndex;
  int partitionIndex;
};

const struct CollisionAabbTree
{
  vec3_t origin;
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  vec3_t halfSize;
  CollisionAabbTreeIndex u;
};

struct ClipMaterial
{
  const char *name;
  int surfaceFlags;
  int contentFlags;
};

struct cLeafBrushNodeLeaf_t
{
  unsigned __int16 *brushes;
};

struct cLeafBrushNodeChildren_t
{
  float dist;
  float range;
  unsigned __int16 childOffset[2];
};

union cLeafBrushNodeData_t
{
  cLeafBrushNodeLeaf_t leaf;
  cLeafBrushNodeChildren_t children;
};

struct cLeafBrushNode_s
{
  unsigned __int8 axis;
  __int16 leafBrushCount;
  int contents;
  cLeafBrushNodeData_t data;
};

struct Bounds
{
  vec3_t midPoint;
  vec3_t halfSize;
};

struct ClipInfo
{
  int planeCount;
  cplane_s *planes;
  unsigned int numMaterials;
  ClipMaterial *materials;
  unsigned int numBrushSides;
  cbrushside_t *brushsides;
  unsigned int leafbrushNodesCount;
  cLeafBrushNode_s *leafbrushNodes;
  unsigned int numLeafBrushes;
  unsigned __int16 *leafbrushes;
  unsigned int numBrushVerts;
  vec3_t *brushVerts;
  unsigned int nuinds;
  unsigned __int16 *uinds;
  unsigned __int16 numBrushes;
  cbrush_t *brushes;
  Bounds *brushBounds;
  int *brushContents;
};

struct __declspec(align(4)) cLeaf_s
{
  unsigned __int16 firstCollAabbIndex;
  unsigned __int16 collAabbCount;
  int brushContents;
  int terrainContents;
  vec3_t mins;
  vec3_t maxs;
  int leafBrushNode;
  __int16 cluster;
};

struct cmodel_t
{
  vec3_t mins;
  vec3_t maxs;
  float radius;
  ClipInfo *info;
  cLeaf_s leaf;
};

struct TraceThreadInfo
{
  TraceCheckCount checkcount;
  cbrush_t *box_brush;
  cmodel_t *box_model;
  PhysGeomList **geoms;
};

struct /*__cppobj*/ __declspec(align(16)) vehicle_cache_t
{
  vec3_t lastOrigin;
  vec3_t lastAngles;
  int hit_indices[6];
  int hit_sflags[6];
  vec3_t hit_normals[6];
  float hit_fractions[6];
  TraceHitType hit_type[6];
  unsigned __int16 hit_id[6];
  //colgeom_visitor_inlined_t<300> proximity_data;
  int wheel_mask;
};

typedef struct NitrousVehicleController { int temp; } NitrousVehicleController;
typedef struct NitrousVehicle { int temp; } NitrousVehicle;

struct /*__cppobj*/ __declspec(align(16)) vehicle_t
{
  vehicle_pathpos_t pathPos;
  int pathOffsetFlags;
  vec3_t pathOffsetTransform[4];
  vec3_t pathFixedOffset;
  vec3_t pathVariableOffset;
  vec3_t pathVariableOffsetTargetPrev;
  vec3_t pathVariableOffsetTarget;
  float pathVariableOffsetRate;
  float pathVariableOffsetTime;
  vehicle_physic_t phys;
  int entNum;
  __int16 defIndex;
  int flags;
  team_t team;
  VehicleMoveState moveState;
  VehicleTurret turret;
  float turretRotScale;
  VehicleJitter jitter;
  VehicleHover hover;
  VehicleTurret gunnerTurrets[4];
  VehicleJitter gunnerJitter[4];
  float minigunRotationSpeed;
  unsigned __int16 lookAtText0;
  unsigned __int16 lookAtText1;
  int manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float speed;
  float maxSpeedOverride;
  float maxDragSpeed;
  float turningAbility;
  int hasTarget;
  int hasTargetYaw;
  int hasGoalYaw;
  int stopAtGoal;
  int stopping;
  int targetEnt;
  EntHandle lookAtEnt;
  vec3_t targetOrigin;
  vec3_t targetOffset;
  float targetYaw;
  vec3_t goalPosition;
  float goalYaw;
  float prevGoalYaw;
  float yawOverShoot;
  int yawSlowDown;
  float pathTransitionTime;
  float maxPathTransitionTime;
  vec3_t pathTransitionOffset;
  vec3_t pathTransitionAngleOffset;
  int hasDefaultPitch;
  float defaultPitch;
  float hasGoalRoll;
  float goalRoll;
  float goalRollTime;
  float currentRollTime;
  int numRolls;
  VehicleTarget gunnerTargets[4];
  float nearGoalNotifyDist;
  vec2_t joltDir;
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  VehicleTags boneIndex;
  int turretHitNum;
  VehicleSeat seats[11];
  float modelSwapDelay;
  int oneExhaust;
  float deathQuakeScale;
  float deathQuakeDuration;
  float deathQuakeRadius;
  int secTurretAiControlled;
  int addToCompass;
  NitrousVehicle* nitrousVehicle;
  vehicle_cache_t vehicle_cache;
  float heliHeightLockOffset;
  float lastViewOffset;
  int driveBySoundIndex[2];
  float driveBySoundDelay[2];
  float driveBySoundTimeout[2];
  sentient_t *sentient;
  ActorSight sight;
  ActorThreat threat;
  sentient_info_t sentientInfo[72];
};

struct animscripted_t
{
  vec3_t axis[4];
  vec3_t originError;
  vec3_t originErrorReduction;
  vec3_t anglesError;
  vec3_t anglesErrorReduction;
  unsigned __int16 anim;
  unsigned __int16 root;
  unsigned __int8 bStarted;
  unsigned __int8 mode;
  int startTime;
  int lerpTime;
  float fHeightOfs;
  float fEndPitch;
  float fEndRoll;
  float fOrientLerp;
};

struct tagInfo_t
{
  gentity_t *parent;
  gentity_t *next;
  unsigned __int16 name;
  bool blendToParent;
  bool blendOnlyYaw;
  bool collisionPhysics;
  int index;
  vec3_t axis[4];
  vec3_t parentInvAxis[4];
};

struct XAnimParam
{
  char strName[16];
  float fValue;
};

union XAnimIndices
{
  unsigned __int8 *_1;
  unsigned __int16 *_2;
  void *data;
};

struct XAnimNotifyInfo
{
  unsigned __int16 name;
  float time;
};

union XAnimDynamicFrames
{
  unsigned __int8 (*_1)[3];
  unsigned __int16 (*_2)[3];
};

union XAnimDynamicIndices
{
  unsigned __int8 _1[1];
  unsigned __int16 _2[1];
};

struct __declspec(align(4)) XAnimPartTransFrames
{
  vec3_t mins;
  vec3_t size;
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};

union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  vec3_t frame0;
};

struct XAnimPartTrans
{
  unsigned __int16 size;
  unsigned __int8 smallTrans;
  XAnimPartTransData u;
};

struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames2
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};

union XAnimDeltaPartQuatData2
{
  XAnimDeltaPartQuatDataFrames2 frames;
  __int16 frame0[2];
};

struct XAnimDeltaPartQuat2
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData2 u;
};

struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[4];
  XAnimDynamicIndices indices;
};

union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[4];
};

struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData u;
};

struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat2 *quat2;
  XAnimDeltaPartQuat *quat;
};

struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  bool bLoop;
  bool bDelta;
  bool bDelta3D;
  bool bLeftHandGripIK;
  unsigned int streamedFileSize;
  unsigned __int8 boneCount[10];
  unsigned __int8 notifyCount;
  unsigned __int8 assetType;
  bool isDefault;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  float primedLength;
  float loopEntryTime;
  unsigned __int16 *names;
  unsigned __int8 *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  unsigned __int8 *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};

struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

union $116030E995657A430F3AA349367D1AF2
{
  XAnimParts *parts;
  XAnimParent animParent;
};

struct XAnimEntry
{
  unsigned __int16 bCreated;
  unsigned __int16 numAnims;
  unsigned __int16 firstParamIxPlusOne;
  unsigned __int16 paramCount;
  unsigned __int16 parent;
  $116030E995657A430F3AA349367D1AF2 ___u5;
};

struct XAnim_s
{
  const char *debugName;
  unsigned int size;
  unsigned int paramSize;
  XAnimParam *params;
  const char **debugAnimNames;
  bool *wasLoggedIfMissing;
  XAnimEntry entries[1];
};

struct XAnimTree_s
{
  XAnim_s *anims;
  unsigned __int16 children;
  __int16 inst;
};

struct gjccc_create_t
{
  gjccc_create_type_e type;
  const vec3_t *mins;
  const vec3_t *maxs;
  const PhysGeomList *collmap;
};

typedef struct gjkcc_input_t { int temp; } gjkcc_input_t;

struct clientsPositionArchive_t
{
  int time;
  bool valid[18];
  unsigned __int8 flags[18];
  vec3_t positions[18];
  vec3_t angles[18];
};

struct bdStringData
{
  unsigned int m_referenceCount;
  unsigned int m_length;
  unsigned int m_capacity;
};

struct __declspec(align(4)) SessionStaticData
{
  char *sessionName;
  bool registerUsersWithVoice;
  bool isDedicated;
};

struct __declspec(align(8)) ClientInfo
{
  bool registered;
  bool voiceRegistered;
  unsigned __int64 xuid;
  int natType;
  netadr_t addr;
  int voiceConnectivityBits;
  int lastConnectivityTestTime[1];
  bool friends;
  int flags;
  bool muted;
  int performanceValue;
  bool privateSlot;
};

struct RegisteredUser
{
  bool active;
  unsigned __int64 xuid;
  bool privateSlot;
  int performanceValue;
};

typedef struct bdSecurityKey { int temp; } bdSecurityKey;
class bdSecurityID
{
public:
    unsigned __int8 ab[8];
};

class XSESSION_INFO
{
public:
    bdSecurityID sessionID;
    XNADDR hostAddress;
    bdSecurityKey keyExchangeKey;
};

class SessionDynamicData
{
public:
  bool sessionHandle;
  XSESSION_INFO sessionInfo;
  bool keysGenerated;
  bool sessionStartCalled;
  unsigned __int64 sessionNonce;
  int privateSlots;
  int publicSlots;
  int flags;
  bool qosListenEnabled;
  ClientInfo users[19];
  ControllerIndex_t sessionCreateController;
  int sessionDeleteTime;
  int actualPublicSlots;
  int voiceConnectivityBits;
  RegisteredUser internalRegisteredUsers[19];
};

struct MigrateData
{
  int indexBits;
  int startTime;
  MigrateMemberData memberData[18];
};

struct PartySceNpId
{
  char handle[20];
  unsigned __int8 opt[8];
  unsigned __int8 reserved[8];
};

struct /*__cppobj*/ PartyMember
{
  unsigned __int8 status;
  int ackedMembers;
  int lastPacketTime;
  int lastHeartbeatTime;
  int lastPartyStateAck;
  int lastDemoHeartBeatTime;
  unsigned int challenge;
  int subpartyIndex;
  connstate_t reportedConnState;
  bool invited;
  bool headsetPresent;
  bool inLivePartyVoice;
  bool inLivePartyTalking;
  bool finishedLoadingDemo;
  bool isReady;
  bool isGuest;
  bool isSplitscreenClient;
  connectionType_e connectionType;
  int natType;
  unsigned __int64 player;
  char gamertag[32];
  ControllerIndex_t localControllerIndex;
  int playerEmblem;
  PartySceNpId npid;
  char clanAbbrev[5];
  bool clanAbbrev_IsEliteValidated;
  int codPoints;
  unsigned int affinityBits;
  platformNetAdr platformAddr;
  int availableMapPackFlags;
  bdSecurityID privatePartyId;
  union {
      int rank;
      int rankPosition;
  };
  union {
      int prestige;
      int divisionID;
      int daysLastPlayed;
  };
  int deaths;
  float skillRating;
  float skillVariance;
  PartyMemberTeam teamInfo;
  int score;
  int vetoedMap;
  int downloadPercent;
  bool readyForPlayback;
  int maximumPing;
  int specialFlags;
  int clanTagFeature;
  int voiceConnectivityBits;
  unsigned __int64 leagueTeamID;
  int leagueMemberCount;
  int searchStartUTC;
  int uploadBandwidth;
  unsigned __int8 probation;
  unsigned __int8 recentPlaylistEntries[3];
  unsigned int serverchallenge;
  int serverChallengeDeadline;
};

struct PartyMemberProfile
{
  int updateTime;
  int sendTime;
  int ackTime;
  int acked;
  char DDL[1024];
};

struct __declspec(align(8)) PartyMemberLeagueData
{
  LeagueDataState state;
  int stateChangeTime;
  int stateUpdateTime;
  unsigned __int64 teamID;
  unsigned __int64 subdivisionID;
  int divisionID;
  int memberCount;
  char teamName[32];
  LeagueOutcomes outcomes;
};

struct __declspec(align(8)) PartyLeagueTeamData
{
  unsigned __int64 teamID;
  bool valid;
  char name[32];
};

struct PartyStatePacket_s
{
  int sequenceNumber;
  int totalSize;
  int size;
  int offset;
};

class __declspec(align(4)) PartyHostDetails
{
public:
    netadr_t addr;
    XSESSION_INFO sessionInfo;
    unsigned __int64 xuid;
    int lastPacketTime;
    int lastPacketSentTime;
    int numPrivateSlots;
    int numPublicSlots;
    ClientNum_t hostNum;
    bool accepted;
    unsigned int challenge;
    bool isDedicated;
};

struct /*__cppobj*/ PartyData_s
{
  SessionData *session;
  SessionData *presenceSession;
  MigrateData migrateData;
  PartyMember partyMembers[19];
  PartyMemberProfile partyProfiles[19];
  PartyLeagueState leagueState;
  PartyMemberLeagueData memberLeagueData[19];
  PartyLeagueTeamData leagueTeamData[9];
  SubpartyInfo subparties[19];
  int subpartyCount;
  lobbyBanSlot_t lobbyBans[16];
  int partyJoinTime;
  __declspec(align(8)) PartyHostDetails currentHost;
  PartyHostDetails potentialHost;
  PartyHostData hostData;
  partyMergeData_t mergeData;
  float qosPercent;
  int qosSuccesses;
  int qosTotal;
  int localPlayerFlags[1];
  int lastMemberUpdateTime[1];
  int memberUpdateInterval[1];
  int areWeHost;
  int joiningAnotherParty;
  int inParty;
  int party_systemActive;
  int veto;
  bool enteringStartReadyState;
  bool ready;
  int wagerTime;
  int allowedTeams;
  bool teamBased;
  unsigned __int64 demoFileId;
  int demoFileSize;
  bool demoIsUserFile;
  bool finishedLoadingDemo;
  bool retryDemoDownload;
  unsigned __int64 demoAuthorXUID;
  int partyId;
  int nextSessionSearchTime;
  int mapPackSearchFlags;
  int mapPackFlags;
  unsigned __int64 leagueTeamID;
  char leagueTeamName[32];
  int lastPartyStateTime;
  int gameStartTime;
  int countDownTimeLeft;
  int interEndTime;
  int partyTimer;
  int restartMatchmakingTimer;
  int goResumeTime;
  int hostTimeouts;
  unsigned __int8 lobbyFlags;
  PartyData_s *partyToNotify;
  bool registeredWithArbitration;
  bool rejoining;
  unsigned __int8 stateMsgBuf[7200];
  PartyStatePacket_s partyStatePackets[6];
  unsigned __int8 lastEntries[8];
  int currentEntry;
  int lastQosEntry;
  bool qosDataReady;
  int lobbyBeginTime;
  bool stateParsed;
  int soundEvents;
  int hostChangelist;
  int partyStartTimeMs;
  int nextChallengeSend;
  unsigned int serverChallenge;
};

struct flameTable
{
  float flameVar_streamChunkGravityStart;
  float flameVar_streamChunkGravityEnd;
  float flameVar_streamChunkMaxSize;
  float flameVar_streamChunkStartSize;
  float flameVar_streamChunkEndSize;
  float flameVar_streamChunkStartSizeRand;
  float flameVar_streamChunkEndSizeRand;
  float flameVar_streamChunkDistScalar;
  float flameVar_streamChunkDistSwayScale;
  float flameVar_streamChunkDistSwayVelMax;
  float flameVar_streamChunkSpeed;
  float flameVar_streamChunkDecel;
  float flameVar_streamChunkVelocityAddScale;
  float flameVar_streamChunkDuration;
  float flameVar_streamChunkDurationScaleMaxVel;
  float flameVar_streamChunkDurationVelScalar;
  float flameVar_streamChunkSizeSpeedScale;
  float flameVar_streamChunkSizeAgeScale;
  float flameVar_streamChunkSpawnFireIntervalStart;
  float flameVar_streamChunkSpawnFireIntervalEnd;
  float flameVar_streamChunkSpawnFireMinLifeFrac;
  float flameVar_streamChunkSpawnFireMaxLifeFrac;
  float flameVar_streamChunkFireMinLifeFrac;
  float flameVar_streamChunkFireMinLifeFracStart;
  float flameVar_streamChunkFireMinLifeFracEnd;
  float flameVar_streamChunkDripsMinLifeFrac;
  float flameVar_streamChunkDripsMinLifeFracStart;
  float flameVar_streamChunkDripsMinLifeFracEnd;
  float flameVar_streamChunkRotationRange;
  float flameVar_streamSizeRandSinWave;
  float flameVar_streamSizeRandCosWave;
  float flameVar_streamDripsChunkInterval;
  float flameVar_streamDripsChunkMinFrac;
  float flameVar_streamDripsChunkRandFrac;
  float flameVar_streamSmokeChunkInterval;
  float flameVar_streamSmokeChunkMinFrac;
  float flameVar_streamSmokeChunkRandFrac;
  float flameVar_streamChunkCullDistSizeFrac;
  float flameVar_streamChunkCullMinLife;
  float flameVar_streamChunkCullMaxLife;
  float flameVar_streamFuelSizeStart;
  float flameVar_streamFuelSizeEnd;
  float flameVar_streamFuelLength;
  float flameVar_streamFuelNumSegments;
  float flameVar_streamFuelAnimLoopTime;
  float flameVar_streamFlameSizeStart;
  float flameVar_streamFlameSizeEnd;
  float flameVar_streamFlameLength;
  float flameVar_streamFlameNumSegments;
  float flameVar_streamFlameAnimLoopTime;
  float flameVar_streamPrimaryLightRadius;
  float flameVar_streamPrimaryLightRadiusFlutter;
  float flameVar_streamPrimaryLightR;
  float flameVar_streamPrimaryLightG;
  float flameVar_streamPrimaryLightB;
  float flameVar_streamPrimaryLightFlutterR;
  float flameVar_streamPrimaryLightFlutterG;
  float flameVar_streamPrimaryLightFlutterB;
  float flameVar_fireLife;
  float flameVar_fireLifeRand;
  float flameVar_fireSpeedScale;
  float flameVar_fireSpeedScaleRand;
  float flameVar_fireVelocityAddZ;
  float flameVar_fireVelocityAddZRand;
  float flameVar_fireVelocityAddSideways;
  float flameVar_fireGravity;
  float flameVar_fireGravityEnd;
  float flameVar_fireMaxRotVel;
  float flameVar_fireFriction;
  float flameVar_fireEndSizeAdd;
  float flameVar_fireStartSizeScale;
  float flameVar_fireEndSizeScale;
  float flameVar_fireBrightness;
  float flameVar_dripsLife;
  float flameVar_dripsLifeRand;
  float flameVar_dripsSpeedScale;
  float flameVar_dripsSpeedScaleRand;
  float flameVar_dripsVelocityAddZ;
  float flameVar_dripsVelocityAddZRand;
  float flameVar_dripsVelocityAddSideways;
  float flameVar_dripsGravity;
  float flameVar_dripsGravityEnd;
  float flameVar_dripsMaxRotVel;
  float flameVar_dripsFriction;
  float flameVar_dripsEndSizeAdd;
  float flameVar_dripsStartSizeScale;
  float flameVar_dripsEndSizeScale;
  float flameVar_dripsBrightness;
  float flameVar_smokeLife;
  float flameVar_smokeLifeRand;
  float flameVar_smokeSpeedScale;
  float flameVar_smokeVelocityAddZ;
  float flameVar_smokeGravity;
  float flameVar_smokeGravityEnd;
  float flameVar_smokeMaxRotation;
  float flameVar_smokeMaxRotVel;
  float flameVar_smokeFriction;
  float flameVar_smokeEndSizeAdd;
  float flameVar_smokeStartSizeAdd;
  float flameVar_smokeOriginSizeOfsZScale;
  float flameVar_smokeOriginOfsZ;
  float flameVar_smokeFadein;
  float flameVar_smokeFadeout;
  float flameVar_smokeMaxAlpha;
  float flameVar_smokeBrightness;
  float flameVar_smokeOriginOffset;
  float flameVar_collisionSpeedScale;
  float flameVar_collisionVolumeScale;
  const char *name;
  Material *fire;
  Material *smoke;
  Material *heat;
  Material *drips;
  Material *streamFuel;
  Material *streamFuel2;
  Material *streamFlame;
  Material *streamFlame2;
  const char *flameOffLoopSound;
  const char *flameIgniteSound;
  const char *flameOnLoopSound;
  const char *flameCooldownSound;
};

struct cStaticModelWritable
{
  unsigned __int16 nextModelInWorldSector;
};

struct cStaticModel_s
{
  cStaticModelWritable writable;
  XModel *xmodel;
  int contents;
  vec3_t origin;
  vec3_t invScaledAxis[3];
  vec3_t absmin;
  vec3_t absmax;
};

template <typename T>
class bdReference
{
public:
    T* m_ptr;
};

class bdReferencable
{
public:
    int addRef();
    int releaseRef();
    int getRefCount();
protected:
    int m_refCount;
};

class __declspec(align(2)) bdByteBuffer : bdReferencable
{
public:
    unsigned int m_size;
    unsigned __int8* m_data;
    unsigned __int8* m_readPtr;
    unsigned __int8* m_writePtr;
    bool m_typeChecked;
    bool m_typeCheckedCopy;
    bool m_allocatedData;
};

class bdTaskResult
{
public:
    virtual bool deserialize(bdReference<bdByteBuffer>);
    unsigned int sizeOf();
};

class bdTag : bdTaskResult
{
public:
    unsigned __int64 m_priTag;
    unsigned __int64 m_secTag;
};

class /*__cppobj*/ bdFileMetaData : bdTaskResult
{
public:    
    enum bdVisibility
    {
        BD_VISIBLE_PUBLIC = 0x0,
        BD_VISIBLE_PRIVATE = 0x1,
        BD_MAX_VISIBILITY_TYPE = 0x2,
    };
    unsigned __int64 m_fileID;
    unsigned int m_createTime;
    unsigned int m_modifedTime;
    unsigned int m_fileSize;
    unsigned __int64 m_ownerID;
    char m_ownerName[64];
    unsigned __int16 m_fileSlot;
    char m_fileName[128];
    char m_url[384];
    unsigned __int16 m_category;
    unsigned int m_numTags;
    unsigned __int8 m_metaData[512];
    unsigned int m_metaDataSize;
    unsigned int m_summaryFileSize;
    bdTag m_tags[60];
    unsigned int m_numCopiesMade;
    unsigned __int64 m_originID;
};

class /*__cppobj*/ bdMatchMakingInfo : bdTaskResult
{
public:
  bdSecurityID m_sessionID;
  unsigned __int8 m_hostAddr[255];
  unsigned int m_hostAddrSize;
  unsigned int m_maxPlayers;
  unsigned int m_numPlayers;
  unsigned int m_gameType;
};

struct __declspec(align(2)) ContentPackMetaData
{
  int contentPack;
  char filename[256];
  char drivename[16];
  unsigned int licenseBits;
  bool mounted;
  bool isAuthorizedToUse;
  bool controllers[1];
};

class /*__cppobj*/ __declspec(align(8)) bdFacebookFriend : bdTaskResult
{
public:
  unsigned __int64 m_accountID;
  char m_accountName[128];
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned __int8 m_platformState[64];
  unsigned int m_platformStateLength;
};

class /*__cppobj*/ bdBackoffTimer
{
public:
  unsigned int m_timestamp;
  unsigned int m_failures;
  unsigned int m_sizeTimeouts;
  char m_timeouts[16];
};

class /*__cppobj*/ bdUCDPublicKeyInfo : bdTaskResult
{
public:
  bdUCD *m_requestingUCDService;
  unsigned __int8 m_publicKey[140];
};

class /*__cppobj*/ __declspec(align(8)) bdChannelMember : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned int m_subscribedTimestamp;
};

const struct outPacket_t
{
  int p_cmdNumber;
  int p_serverTime;
  int p_realtime;
};

class bdInAddr
{
    union {
        struct {
            unsigned __int8 m_b1;
            unsigned __int8 m_b2;
            unsigned __int8 m_b3;
            unsigned __int8 m_b4;
        } m_caddr;
        unsigned int m_iaddr;
    } inUn;
};

class bdInetAddr
{
    bdInAddr m_addr;
};

class __declspec(align(4)) bdAddr
{
    bdInetAddr m_address;
    unsigned __int16 m_port;
};

class /*__cppobj*/ bdNATTraversalPacket
{
public:
  unsigned __int8 m_type;
  unsigned __int16 m_protocolVersion;
  unsigned __int8 m_hmac[10];
  unsigned int m_ident;
  bdAddr m_addrSrc;
  bdAddr m_addrDest;
};

struct WeaponCamoSet
{
  GfxImage *solidCamoImage;
  GfxImage *patternCamoImage;
  vec2_t patternOffset;
  float patternScale;
};

struct WeaponCamo
{
  const char *name;
  GfxImage *solidBaseImage;
  GfxImage *patternBaseImage;
  WeaponCamoSet *camoSets;
  unsigned int numCamoSets;
  WeaponCamoMaterialSet *camoMaterials;
  unsigned int numCamoMaterials;
};

struct WeaponDef
{
  const char *szOverlayName;
  XModel **gunXModel;
  XModel *handXModel;
  const char *szModeName;
  unsigned __int16 *notetrackSoundMapKeys;
  unsigned __int16 *notetrackSoundMapValues;
  int playerAnimType;
  weapType_t weapType;
  weapClass_t weapClass;
  PenetrateType penetrateType;
  ImpactType impactType;
  weapInventoryType_t inventoryType;
  weapFireType_t fireType;
  weapClipType_t clipType;
  barrelType_t barrelType;
  int itemIndex;
  const char *parentWeaponName;
  int iJamFireTime;
  int overheatWeapon;
  float overheatRate;
  float cooldownRate;
  float overheatEndVal;
  bool coolWhileFiring;
  bool fuelTankWeapon;
  int iTankLifeTime;
  OffhandClass offhandClass;
  OffhandSlot offhandSlot;
  weapStance_t stance;
  const FxEffectDef *viewFlashEffect;
  const FxEffectDef *worldFlashEffect;
  const FxEffectDef *barrelCooldownEffect;
  int barrelCooldownMinCount;
  vec3_t vViewFlashOffset;
  vec3_t vWorldFlashOffset;
  const char *pickupSound;
  const char *pickupSoundPlayer;
  const char *ammoPickupSound;
  const char *ammoPickupSoundPlayer;
  const char *projectileSound;
  const char *pullbackSound;
  const char *pullbackSoundPlayer;
  const char *fireSound;
  const char *fireSoundPlayer;
  const char *fireLoopSound;
  const char *fireLoopSoundPlayer;
  const char *fireLoopEndSound;
  const char *fireLoopEndSoundPlayer;
  const char *fireStartSound;
  const char *fireStopSound;
  const char *fireKillcamSound;
  const char *fireStartSoundPlayer;
  const char *fireStopSoundPlayer;
  const char *fireKillcamSoundPlayer;
  const char *fireLastSound;
  const char *fireLastSoundPlayer;
  const char *emptyFireSound;
  const char *emptyFireSoundPlayer;
  const char *crackSound;
  const char *whizbySound;
  const char *meleeSwipeSound;
  const char *meleeSwipeSoundPlayer;
  const char *meleeHitSound;
  const char *meleeMissSound;
  const char *rechamberSound;
  const char *rechamberSoundPlayer;
  const char *reloadSound;
  const char *reloadSoundPlayer;
  const char *reloadEmptySound;
  const char *reloadEmptySoundPlayer;
  const char *reloadStartSound;
  const char *reloadStartSoundPlayer;
  const char *reloadEndSound;
  const char *reloadEndSoundPlayer;
  const char *rotateLoopSound;
  const char *rotateLoopSoundPlayer;
  const char *rotateStopSound;
  const char *rotateStopSoundPlayer;
  const char *deploySound;
  const char *deploySoundPlayer;
  const char *finishDeploySound;
  const char *finishDeploySoundPlayer;
  const char *breakdownSound;
  const char *breakdownSoundPlayer;
  const char *finishBreakdownSound;
  const char *finishBreakdownSoundPlayer;
  const char *detonateSound;
  const char *detonateSoundPlayer;
  const char *nightVisionWearSound;
  const char *nightVisionWearSoundPlayer;
  const char *nightVisionRemoveSound;
  const char *nightVisionRemoveSoundPlayer;
  const char *altSwitchSound;
  const char *altSwitchSoundPlayer;
  const char *raiseSound;
  const char *raiseSoundPlayer;
  const char *firstRaiseSound;
  const char *firstRaiseSoundPlayer;
  const char *adsRaiseSoundPlayer;
  const char *adsLowerSoundPlayer;
  const char *putawaySound;
  const char *putawaySoundPlayer;
  const char *overheatSound;
  const char *overheatSoundPlayer;
  const char *adsZoomSound;
  const char *shellCasing;
  const char *shellCasingPlayer;
  const char **bounceSound;
  const char *standMountedWeapdef;
  const char *crouchMountedWeapdef;
  const char *proneMountedWeapdef;
  int standMountedIndex;
  int crouchMountedIndex;
  int proneMountedIndex;
  const FxEffectDef *viewShellEjectEffect;
  const FxEffectDef *worldShellEjectEffect;
  const FxEffectDef *viewLastShotEjectEffect;
  const FxEffectDef *worldLastShotEjectEffect;
  vec3_t vViewShellEjectOffset;
  vec3_t vWorldShellEjectOffset;
  vec3_t vViewShellEjectRotation;
  vec3_t vWorldShellEjectRotation;
  Material *reticleCenter;
  Material *reticleSide;
  int iReticleCenterSize;
  int iReticleSideSize;
  int iReticleMinOfs;
  activeReticleType_t activeReticleType;
  vec3_t vStandMove;
  vec3_t vStandRot;
  vec3_t vDuckedOfs;
  vec3_t vDuckedMove;
  vec3_t vDuckedSprintOfs;
  vec3_t vDuckedSprintRot;
  vec2_t vDuckedSprintBob;
  float fDuckedSprintCycleScale;
  vec3_t vSprintOfs;
  vec3_t vSprintRot;
  vec2_t vSprintBob;
  float fSprintCycleScale;
  vec3_t vLowReadyOfs;
  vec3_t vLowReadyRot;
  vec3_t vRideOfs;
  vec3_t vRideRot;
  vec3_t vDtpOfs;
  vec3_t vDtpRot;
  vec2_t vDtpBob;
  float fDtpCycleScale;
  vec3_t vMantleOfs;
  vec3_t vMantleRot;
  vec3_t vSlideOfs;
  vec3_t vSlideRot;
  vec3_t vDuckedRot;
  vec3_t vProneOfs;
  vec3_t vProneMove;
  vec3_t vProneRot;
  vec3_t vStrafeMove;
  vec3_t vStrafeRot;
  float fPosMoveRate;
  float fPosProneMoveRate;
  float fStandMoveMinSpeed;
  float fDuckedMoveMinSpeed;
  float fProneMoveMinSpeed;
  float fPosRotRate;
  float fPosProneRotRate;
  float fStandRotMinSpeed;
  float fDuckedRotMinSpeed;
  float fProneRotMinSpeed;
  XModel **worldModel;
  XModel *worldClipModel;
  XModel *rocketModel;
  XModel *mountedModel;
  XModel *additionalMeleeModel;
  Material *fireTypeIcon;
  Material *hudIcon;
  weaponIconRatioType_t hudIconRatio;
  Material *indicatorIcon;
  weaponIconRatioType_t indicatorIconRatio;
  Material *ammoCounterIcon;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
  int iStartAmmo;
  int iMaxAmmo;
  int shotCount;
  const char *szSharedAmmoCapName;
  int iSharedAmmoCapIndex;
  int iSharedAmmoCap;
  bool unlimitedAmmo;
  bool ammoCountClipRelative;
  int damage[6];
  float damageRange[6];
  int minPlayerDamage;
  float damageDuration;
  float damageInterval;
  int playerDamage;
  int iMeleeDamage;
  int iDamageType;
  unsigned __int16 explosionTag;
  int iFireDelay;
  int iMeleeDelay;
  int meleeChargeDelay;
  int iDetonateDelay;
  int iSpinUpTime;
  int iSpinDownTime;
  float spinRate;
  const char *spinLoopSound;
  const char *spinLoopSoundPlayer;
  const char *startSpinSound;
  const char *startSpinSoundPlayer;
  const char *stopSpinSound;
  const char *stopSpinSoundPlayer;
  bool applySpinPitch;
  int iFireTime;
  int iLastFireTime;
  int iRechamberTime;
  int iRechamberBoltTime;
  int iHoldFireTime;
  int iDetonateTime;
  int iMeleeTime;
  int iBurstDelayTime;
  int meleeChargeTime;
  int iReloadTimeRight;
  int iReloadTimeLeft;
  int reloadShowRocketTime;
  int iReloadEmptyTimeLeft;
  int iReloadAddTime;
  int iReloadEmptyAddTime;
  int iReloadQuickAddTime;
  int iReloadQuickEmptyAddTime;
  int iReloadStartTime;
  int iReloadStartAddTime;
  int iReloadEndTime;
  int iDropTime;
  int iRaiseTime;
  int iAltDropTime;
  int quickDropTime;
  int quickRaiseTime;
  int iFirstRaiseTime;
  int iEmptyRaiseTime;
  int iEmptyDropTime;
  int sprintInTime;
  int sprintLoopTime;
  int sprintOutTime;
  int lowReadyInTime;
  int lowReadyLoopTime;
  int lowReadyOutTime;
  int contFireInTime;
  int contFireLoopTime;
  int contFireOutTime;
  int dtpInTime;
  int dtpLoopTime;
  int dtpOutTime;
  int crawlInTime;
  int crawlForwardTime;
  int crawlBackTime;
  int crawlRightTime;
  int crawlLeftTime;
  int crawlOutFireTime;
  int crawlOutTime;
  int slideInTime;
  int deployTime;
  int breakdownTime;
  int iFlourishTime;
  int nightVisionWearTime;
  int nightVisionWearTimeFadeOutEnd;
  int nightVisionWearTimePowerUp;
  int nightVisionRemoveTime;
  int nightVisionRemoveTimePowerDown;
  int nightVisionRemoveTimeFadeInStart;
  int fuseTime;
  int aiFuseTime;
  int lockOnRadius;
  int lockOnSpeed;
  bool requireLockonToFire;
  bool noAdsWhenMagEmpty;
  bool avoidDropCleanup;
  unsigned int stackFire;
  float stackFireSpread;
  float stackFireAccuracyDecay;
  const char *stackSound;
  float autoAimRange;
  float aimAssistRange;
  bool mountableWeapon;
  float aimPadding;
  float enemyCrosshairRange;
  bool crosshairColorChange;
  float moveSpeedScale;
  float adsMoveSpeedScale;
  float sprintDurationScale;
  weapOverlayReticle_t overlayReticle;
  WeapOverlayInteface_t overlayInterface;
  float overlayWidth;
  float overlayHeight;
  float fAdsBobFactor;
  float fAdsViewBobMult;
  bool bHoldBreathToSteady;
  float fHipSpreadStandMin;
  float fHipSpreadDuckedMin;
  float fHipSpreadProneMin;
  float hipSpreadStandMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float fHipSpreadDecayRate;
  float fHipSpreadFireAdd;
  float fHipSpreadTurnAdd;
  float fHipSpreadMoveAdd;
  float fHipSpreadDuckedDecay;
  float fHipSpreadProneDecay;
  float fHipReticleSidePos;
  float fAdsIdleAmount;
  float fHipIdleAmount;
  float adsIdleSpeed;
  float hipIdleSpeed;
  float fIdleCrouchFactor;
  float fIdleProneFactor;
  float fGunMaxPitch;
  float fGunMaxYaw;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  float swayShellShockScale;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  bool sharedAmmo;
  bool bRifleBullet;
  bool armorPiercing;
  bool bAirburstWeapon;
  bool bBoltAction;
  bool bUseAltTagFlash;
  bool bUseAntiLagRewind;
  bool bIsCarriedKillstreakWeapon;
  bool aimDownSight;
  bool bRechamberWhileAds;
  bool bReloadWhileAds;
  float adsViewErrorMin;
  float adsViewErrorMax;
  bool bCookOffHold;
  bool bClipOnly;
  bool bCanUseInVehicle;
  bool bNoDropsOrRaises;
  bool adsFireOnly;
  bool cancelAutoHolsterWhenEmpty;
  bool suppressAmmoReserveDisplay;
  bool laserSight;
  bool laserSightDuringNightvision;
  bool bHideThirdPerson;
  bool bHasBayonet;
  bool bDualWield;
  bool bExplodeOnGround;
  bool bThrowBack;
  bool bRetrievable;
  bool bDieOnRespawn;
  bool bNoThirdPersonDropsOrRaises;
  bool bContinuousFire;
  bool bNoPing;
  bool bForceBounce;
  bool bUseDroppedModelAsStowed;
  bool bNoQuickDropWhenEmpty;
  bool bKeepCrosshairWhenADS;
  bool bUseOnlyAltWeaoponHideTagsInAltMode;
  bool bAltWeaponAdsOnly;
  bool bAltWeaponDisableSwitching;
  Material *killIcon;
  weaponIconRatioType_t killIconRatio;
  bool flipKillIcon;
  bool bNoPartialReload;
  bool bSegmentedReload;
  bool bNoADSAutoReload;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  const char *szSpawnedGrenadeWeaponName;
  const char *szDualWieldWeaponName;
  unsigned int dualWieldWeaponIndex;
  int iDropAmmoMin;
  int iDropAmmoMax;
  int iDropClipAmmoMin;
  int iDropClipAmmoMax;
  int iShotsBeforeRechamber;
  bool blocksProne;
  bool bShowIndicator;
  int isRollingGrenade;
  int useBallisticPrediction;
  int isValuable;
  int isTacticalInsertion;
  bool isReviveWeapon;
  bool bUseRigidBodyOnVehicle;
  int iExplosionRadius;
  int iExplosionRadiusMin;
  int iIndicatorRadius;
  int iExplosionInnerDamage;
  int iExplosionOuterDamage;
  float damageConeAngle;
  int iProjectileSpeed;
  int iProjectileSpeedUp;
  int iProjectileSpeedRelativeUp;
  int iProjectileSpeedForward;
  float fProjectileTakeParentVelocity;
  int iProjectileActivateDist;
  float projLifetime;
  float timeToAccelerate;
  float projectileCurvature;
  XModel *projectileModel;
  weapProjExposion_t projExplosion;
  const FxEffectDef *projExplosionEffect;
  bool projExplosionEffectForceNormalUp;
  const FxEffectDef *projExplosionEffect2;
  bool projExplosionEffect2ForceNormalUp;
  const FxEffectDef *projExplosionEffect3;
  bool projExplosionEffect3ForceNormalUp;
  const FxEffectDef *projExplosionEffect4;
  bool projExplosionEffect4ForceNormalUp;
  const FxEffectDef *projExplosionEffect5;
  bool projExplosionEffect5ForceNormalUp;
  const FxEffectDef *projDudEffect;
  const char *projExplosionSound;
  const char *projDudSound;
  const char *mortarShellSound;
  const char *tankShellSound;
  bool bProjImpactExplode;
  bool bProjSentientImpactExplode;
  bool bProjExplodeWhenStationary;
  bool bBulletImpactExplode;
  WeapStickinessType stickiness;
  WeapRotateType rotateType;
  bool plantable;
  bool hasDetonator;
  bool timedDetonation;
  bool bNoCrumpleMissile;
  bool rotate;
  bool bKeepRolling;
  bool holdButtonToThrow;
  bool offhandHoldIsCancelable;
  bool freezeMovementWhenFiring;
  float lowAmmoWarningThreshold;
  bool bDisallowAtMatchStart;
  float meleeChargeRange;
  bool bUseAsMelee;
  bool isCameraSensor;
  bool isAcousticSensor;
  bool isLaserSensor;
  bool isHoldUseGrenade;
  float *parallelBounce;
  float *perpendicularBounce;
  const FxEffectDef *projTrailEffect;
  vec3_t vProjectileColor;
  guidedMissileType_t guidedMissileType;
  float maxSteeringAccel;
  int projIgnitionDelay;
  const FxEffectDef *projIgnitionEffect;
  const char *projIgnitionSound;
  float fAdsAimPitch;
  float fAdsCrosshairInFrac;
  float fAdsCrosshairOutFrac;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float fAdsGunKickPitchMin;
  float fAdsGunKickPitchMax;
  float fAdsGunKickYawMin;
  float fAdsGunKickYawMax;
  float fAdsGunKickAccel;
  float fAdsGunKickSpeedMax;
  float fAdsGunKickSpeedDecay;
  float fAdsGunKickStaticDecay;
  float fAdsViewKickPitchMin;
  float fAdsViewKickPitchMax;
  float fAdsViewKickMinMagnitude;
  float fAdsViewKickYawMin;
  float fAdsViewKickYawMax;
  float fAdsRecoilReductionRate;
  float fAdsRecoilReductionLimit;
  float fAdsRecoilReturnRate;
  float fAdsViewScatterMin;
  float fAdsViewScatterMax;
  float fAdsSpread;
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float fHipGunKickPitchMin;
  float fHipGunKickPitchMax;
  float fHipGunKickYawMin;
  float fHipGunKickYawMax;
  float fHipGunKickAccel;
  float fHipGunKickSpeedMax;
  float fHipGunKickSpeedDecay;
  float fHipGunKickStaticDecay;
  float fHipViewKickPitchMin;
  float fHipViewKickPitchMax;
  float fHipViewKickMinMagnitude;
  float fHipViewKickYawMin;
  float fHipViewKickYawMax;
  float fHipViewScatterMin;
  float fHipViewScatterMax;
  float fAdsViewKickCenterDuckedScale;
  float fAdsViewKickCenterProneScale;
  float fAntiQuickScopeTime;
  float fAntiQuickScopeScale;
  float fAntiQuickScopeSpreadMultiplier;
  float fAntiQuickScopeSpreadMax;
  float fAntiQuickScopeSwayFactor;
  float fightDist;
  float maxDist;
  const char *accuracyGraphName[2];
  vec2_t *accuracyGraphKnots[2];
  vec2_t *originalAccuracyGraphKnots[2];
  int accuracyGraphKnotCount[2];
  int originalAccuracyGraphKnotCount[2];
  int iPositionReloadTransTime;
  float leftArc;
  float rightArc;
  float topArc;
  float bottomArc;
  float accuracy;
  float aiSpread;
  float playerSpread;
  float minTurnSpeed[2];
  float maxTurnSpeed[2];
  float pitchConvergenceTime;
  float yawConvergenceTime;
  float suppressTime;
  float maxRange;
  float fAnimHorRotateInc;
  float fPlayerPositionDist;
  const char *szUseHintString;
  const char *dropHintString;
  int iUseHintStringIndex;
  int dropHintStringIndex;
  float horizViewJitter;
  float vertViewJitter;
  float cameraShakeScale;
  int cameraShakeDuration;
  int cameraShakeRadius;
  float explosionCameraShakeScale;
  int explosionCameraShakeDuration;
  int explosionCameraShakeRadius;
  const char *szScript;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  float *locationDamageMultipliers;
  const char *fireRumble;
  const char *meleeImpactRumble;
  const char *reloadRumble;
  const char *explosionRumble;
  TracerDef *tracerType;
  TracerDef *enemyTracerType;
  float adsDofStart;
  float adsDofEnd;
  float hipDofStart;
  float hipDofEnd;
  float scanSpeed;
  float scanAccel;
  int scanPauseTime;
  const char *flameTableFirstPerson;
  const char *flameTableThirdPerson;
  flameTable *flameTableFirstPersonPtr;
  flameTable *flameTableThirdPersonPtr;
  const FxEffectDef *tagFx_preparationEffect;
  const FxEffectDef *tagFlash_preparationEffect;
  bool doGibbing;
  float maxGibDistance;
  float altScopeADSTransInTime;
  float altScopeADSTransOutTime;
  int iIntroFireTime;
  int iIntroFireLength;
  const FxEffectDef *meleeSwipeEffect;
  const FxEffectDef *meleeImpactEffect;
  const FxEffectDef *meleeImpactNoBloodEffect;
  const char *throwBackType;
  WeaponCamo *weaponCamo;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

struct WeaponAttachmentUnique
{
  const char *szInternalName;
  eAttachment attachmentType;
  int siblingLink;
  int childLink;
  int combinedAttachmentTypeMask;
  const char *szAltWeaponName;
  unsigned int altWeaponIndex;
  const char *szDualWieldWeaponName;
  unsigned int dualWieldWeaponIndex;
  unsigned __int16 *hideTags;
  XModel *viewModel;
  XModel *viewModelAdditional;
  XModel *viewModelADS;
  XModel *worldModel;
  XModel *worldModelAdditional;
  const char *viewModelTag;
  const char *worldModelTag;
  vec3_t viewModelOffsets;
  vec3_t worldModelOffsets;
  vec3_t viewModelRotations;
  vec3_t worldModelRotations;
  vec3_t viewModelAddOffsets;
  vec3_t worldModelAddOffsets;
  vec3_t viewModelAddRotations;
  vec3_t worldModelAddRotations;
  WeaponCamo *weaponCamo;
  bool disableBaseWeaponAttachment;
  bool disableBaseWeaponClip;
  bool overrideBaseWeaponAttachmentOffsets;
  vec3_t viewModelOffsetBaseAttachment;
  vec3_t worldModelOffsetBaseAttachment;
  Material *overlayMaterial;
  Material *overlayMaterialLowRes;
  weapOverlayReticle_t overlayReticle;
  int iFirstRaiseTime;
  int iAltRaiseTime;
  int iAltDropTime;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  bool bSegmentedReload;
  const char **szXAnims;
  int animationOverrides[3];
  float *locationDamageMultipliers;
  int soundOverrides;
  const char *fireSound;
  const char *fireSoundPlayer;
  const char *fireLoopSound;
  const char *fireLoopSoundPlayer;
  const char *fireLoopEndSound;
  const char *fireLoopEndSoundPlayer;
  const char *fireStartSound;
  const char *fireStopSound;
  const char *fireStartSoundPlayer;
  const char *fireStopSoundPlayer;
  const char *fireLastSound;
  const char *fireLastSoundPlayer;
  const char *fireKillcamSound;
  const char *fireKillcamSoundPlayer;
  int effectOverrides;
  const FxEffectDef *viewFlashEffect;
  const FxEffectDef *worldFlashEffect;
  TracerDef *tracerType;
  TracerDef *enemyTracerType;
  float adsDofStart;
  float adsDofEnd;
  int iAmmoIndex;
  int iClipIndex;
  bool bOverrideLeftHandIK;
  bool bOverrideLeftHandProneIK;
  vec3_t ikLeftHandOffset;
  vec3_t ikLeftHandRotation;
  vec3_t ikLeftHandProneOffset;
  vec3_t ikLeftHandProneRotation;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

struct WeaponVariantDef
{
  const char *szInternalName;
  int iVariantCount;
  WeaponDef *weapDef;
  const char *szDisplayName;
  const char *szAltWeaponName;
  const char *szAttachmentUnique;
  WeaponAttachment **attachments;
  WeaponAttachmentUnique **attachmentUniques;
  const char **szXAnims;
  unsigned __int16 *hideTags;
  XModel **attachViewModel;
  XModel **attachWorldModel;
  const char **attachViewModelTag;
  const char **attachWorldModelTag;
  float attachViewModelOffsets[24];
  float attachWorldModelOffsets[24];
  float attachViewModelRotations[24];
  float attachWorldModelRotations[24];
  vec3_t stowedModelOffsets;
  vec3_t stowedModelRotations;
  unsigned int altWeaponIndex;
  int iAttachments;
  bool bIgnoreAttachments;
  int iClipSize;
  int iReloadTime;
  int iReloadEmptyTime;
  int iReloadQuickTime;
  int iReloadQuickEmptyTime;
  int iAdsTransInTime;
  int iAdsTransOutTime;
  int iAltRaiseTime;
  const char *szAmmoDisplayName;
  const char *szAmmoName;
  int iAmmoIndex;
  const char *szClipName;
  int iClipIndex;
  float fAimAssistRangeAds;
  float fAdsSwayHorizScale;
  float fAdsSwayVertScale;
  float fAdsViewKickCenterSpeed;
  float fHipViewKickCenterSpeed;
  float fAdsZoomFov1;
  float fAdsZoomFov2;
  float fAdsZoomFov3;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  float fOverlayAlphaScale;
  float fOOPosAnimLength[2];
  bool bSilenced;
  bool bDualMag;
  bool bInfraRed;
  bool bTVGuided;
  unsigned int perks[2];
  bool bAntiQuickScope;
  Material *overlayMaterial;
  Material *overlayMaterialLowRes;
  Material *dpadIcon;
  weaponIconRatioType_t dpadIconRatio;
  bool noAmmoOnDpadIcon;
  bool mmsWeapon;
  bool mmsInScope;
  float mmsFOV;
  float mmsAspect;
  float mmsMaxDist;
  vec3_t ikLeftHandIdlePos;
  vec3_t ikLeftHandOffset;
  vec3_t ikLeftHandRotation;
  bool bUsingLeftHandProneIK;
  vec3_t ikLeftHandProneOffset;
  vec3_t ikLeftHandProneRotation;
  vec3_t ikLeftHandUiViewerOffset;
  vec3_t ikLeftHandUiViewerRotation;
};

struct WeaponDobjInfo
{
  unsigned __int8 numModelMasks;
  typedef enum Slot {
      HELD = 0x0,
      STOWED = 0x1,
      MELEE = 0x2,
  } addingSlot;
  __int16 lastAddedModel;
  struct ModelMask {
      Slot slot;
      bool weapon;
      union {
          const WeaponDef* weapDef;
          const WeaponAttachmentUnique* attachment;
      };
      unsigned int dobjModelMask;
  } modelMasks[8];
};

struct ddlMemberDef_t
{
  const char *name;
  int size;
  int offset;
  int type;
  int externalIndex;
  unsigned int rangeLimit;
  unsigned int serverDelta;
  unsigned int clientDelta;
  int arraySize;
  int enumIndex;
  int permission;
};

struct ddlStructDef_t
{
  const char *name;
  int size;
  int memberCount;
  ddlMemberDef_t *members;
  ddlHash_t *hashTable;
};

struct ddlDef_t
{
  int version;
  int size;
  ddlStructDef_t *structList;
  int structCount;
  ddlEnumDef_t *enumList;
  int enumCount;
  ddlDef_t *next;
};

struct ddlState_t
{
  int absoluteOffset;
  int arrayIndex;
  ddlMemberDef_t *member;
  const ddlDef_t *ddl;
  ddlReturnCodes_e returnCode;
};

class /*__cppobj*/ bdTwitterAccount : bdTaskResult
{
public:
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

class /*__cppobj*/ bdTwitterSearchResult : bdTaskResult
{
public:
  char m_screenName[1024];
  char m_profileImageURL[560];
  char m_text[560];
  unsigned int m_createdTimestamp;
};

struct DObjSkelMat
{
  vec4_t axis[3];
  vec4_t origin;
};

struct CmdArgs
{
  int nesting;
  LocalClientNum_t localClientNum[8];
  ControllerIndex_t controllerIndex[8];
  itemDef_s *itemDef[8];
  int argshift[8];
  int argc[8];
  const char **argv[8];
  char textPool[8192];
  const char *argvPool[512];
  int usedTextPool[8];
  int totalUsedArgvPool;
  int totalUsedTextPool;
};

struct scrStringDebugGlob_t
{
  volatile long refCount[65536];
  volatile long totalRefCount;
  int ignoreLeaks;
};

struct ClientArchiveData
{
  int serverTime;
  vec3_t origin;
  vec3_t velocity;
  int bobCycle;
  int movementDir;
  PlayerVehicleState playerVehStateClientArchive;
};

class /*__cppobj*/ clientActive_t
{
public:
  MatchState *parseMatchStatesBuf;
  int numParseMatchStates;
  int maxParseMatchStates;
  entityState_s *parseEntitiesBuf;
  int numParseEntities;
  int maxParseEntities;
  clientState_s *parseClientsBuf;
  int numParseClients;
  int maxParseClients;
  actorState_s *parseActorsBuf;
  int numParseActors;
  int maxParseActors;
  outPacket_t *outPackets;
  clSnapshot_t *snapshots;
  int packetBackupCount;
  int packetBackupMask;
  int gameStateMarker;
  bool usingAds;
  int timeoutcount;
  clSnapshot_t snap;
  int snapServerTime;
  int oldSnapServerTime;
  bool alwaysFalse;
  int serverTime;
  int oldServerTime;
  int oldFrameServerTime;
  int serverTimeDelta;
  int extrapolatedSnapshot;
  int newSnapshots;
  int serverId;
  int forceNewSnapshots;
  int unpausedTimeBehind;
  int serverTimeErrorIndex;
  int serverTimeErrorCount;
  int serverTimeErrorCumul;
  int serverTimeErrorAvg;
  int serverTimeErrorPrev;
  int serverTimeError[20];
  int serverTimeError2[20];
  char mapname[64];
  int parseMatchStateIndex;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseActorsIndex;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  bool weapNextHeld;
  int weapNextTime;
  bool switchingToInventory;
  Weapon cgameUserCmdWeapon;
  Weapon cgameUserCmdOffHandWeapon;
  Weapon cgameUserCmdLastWeaponForAlt;
  float cgameFOVSensitivityScale;
  float cgameMaxPitchSpeed;
  float cgameMaxYawSpeed;
  vec3_t cgameKickAngles;
  vec3_t cgameOrigin;
  vec3_t cgameVelocity;
  PlayerVehicleState cgamePlayerVehState;
  int cgameBobCycle;
  int cgameMovementDir;
  bitarray<64> cgameExtraButton_bits;
  int cgamePredictedDataServerTime;
  vec3_t viewangles;
  int skelTimeStamp;
  volatile int skelMemPos;
  char skelMemory[262144];
  char *skelMemoryStart;
  bool allowedAllocSkel;
  usercmd_s cmds[128];
  int cmdNumber;
  ClientArchiveData clientArchive[256];
  int clientArchiveIndex;
  entityState_s entityBaselines[1024];
  int corruptedTranslationFile;
  char translationVersion[256];
  int lastFireTime;
  bool useHeld;
  int useTime;
  int useCount;
  int wasInVehicle;
  int serverFrameMS;
  int serverKbps;
  int serverKbpsAvg[2];
  int serverKbpsCount[2];
};

struct MaterialRaw
{
  MaterialInfoRaw info;
  unsigned int refStateBits[2];
  unsigned __int16 textureCount;
  unsigned __int16 constantCount;
  unsigned int techSetNameOffset;
  unsigned int textureTableOffset;
  unsigned int constantTableOffset;
  unsigned int thermalMaterialNameOffset;
};


class /*__cppobj*/ bdTagsArray : bdTaskResult
{
public:
  unsigned __int64 m_entityID;
  unsigned int m_numTags;
  bdTag m_tags[60];
};

struct recentFrame
{
  bool lagged;
};

struct server_t
{
  serverState_t state;
  int physicsTime;
  int timeResidual;
  int levelTime;
  bool inFrame;
  bool allowNetPackets;
  int restarting;
  int start_frameTime;
  int checksumFeed;
  cmodel_t *models[512];
  bool wroteConfigStrings;
  unsigned __int16 emptyConfigString;
  unsigned __int16 configstrings[2806];
  svEntity_s svEntities[1024];
  gentity_t *gentities;
  int gentitySize;
  int num_entities;
  playerState_s *gameClients;
  int gameClientSize;
  actor_t *gameActors;
  int gameActorSize;
  int checksum;
  int skelTimeStamp;
  int skelMemPos;
  int bpsWindow[20];
  int bpsWindowSteps;
  int bpsTotalBytes;
  int bpsMaxBytes;
  int ubpsWindow[20];
  int ubpsTotalBytes;
  int ubpsMaxBytes;
  float ucompAve;
  int ucompNum;
  volatile int serverFrameTime;
  volatile int serverFrameTimeMin;
  volatile int serverFrameTimeMax;
  char gametype[64];
  bool killServer;
  const char *killReason;
  recentFrame recentFrameInfo[200];
  int currentFrameNum;
  unsigned __int8 xpmods;
  int nextClientsPositionArchive;
  clientsPositionArchive_t clientsPositionArchive[100];
  int securityChecksum[3];
};

struct msg_t
{
  int overflowed;
  int readOnly;
  unsigned __int8 *data;
  unsigned __int8 *splitData;
  int maxsize;
  int cursize;
  int splitSize;
  int readcount;
  int bit;
  int lastEntityRef;
  int flush;
  netsrc_t targetLocalNetID;
};

struct netProfileInfo_t
{
  netProfileStream_t send;
  netProfileStream_t recieve;
};

struct MigrationPers
{
  int time;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  Weapon cgameUserCmdWeapon;
  Weapon cgameUserCmdOffHandWeapon;
  Weapon weaponSelect;
  int weaponSelectTime;
  int weaponForcedSelectTime;
  Weapon weaponLatestPrimary;
  Weapon primaryWeaponForAlt[256];
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
};

struct clientUIActive_t
{
  int flags;
  int keyCatchers;
  connstate_t connectionState;
  int nextScrollTime;
  clientMigState_t migrationState;
  MigrationPers migrationPers;
  int numVoicePacketsSent;
  int numVoicePacketsSentStart;
};

struct __declspec(align(4)) scrVarDebugPub_t
{
  unsigned __int8 **objectVarUsage;
  unsigned __int8 **childVarUsage;
  unsigned __int16 *extRefCount;
  int *objectLeakCount;
  int *childLeakCount;
  bool dummy;
};

class /*__cppobj*/ bdDMLInfo : bdTaskResult
{
public:
  char m_countryCode[3];
  char m_country[65];
  char m_region[65];
  char m_city[129];
  float m_latitude;
  float m_longitude;
};

struct ReliableCommands
{
  int sequence;
  int acknowledge;
  char *commands[128];
  int commandBufferNext;
  char commandBuffer[16384];
};

class hybrid_vector
{
public:
    __m128 vec;
};

class visitor_base_t
{

};

class __declspec(align(8)) colgeom_visitor_t : visitor_base_t
{
public:
    hybrid_vector m_mn;
    hybrid_vector m_mx;
    hybrid_vector m_p0;
    hybrid_vector m_p1;
    hybrid_vector m_delta;
    hybrid_vector m_rvec;
    float m_radius;
    int m_mask;
    TraceThreadInfo* m_threadInfo;
};

class __declspec(align(16)) static_colgeom_visitor_t : colgeom_visitor_t
{
public:
  int ntrees;
  const CollisionAabbTree *trees[512];
  int nbrushes;
  const cbrush_t *brushes[512];
};

struct FastCriticalSection
{
  volatile long readCount;
  volatile long writeCount;
};

class /*__cppobj*/ __declspec(align(8)) bdTeamMember : bdTaskResult
{
public:
  unsigned __int64 m_teamID;
  unsigned __int64 m_userID;
  char m_userName[64];
  bool m_isOnline;
  unsigned __int8 m_status;
};

struct MaterialTextureDefRaw
{
  unsigned int nameOffset;
  unsigned __int8 samplerState;
  unsigned __int8 semantic;
  unsigned int imageNameOffset;
};

struct netchan_t
{
  int outgoingSequence;
  netsrc_t sock;
  int dropped;
  int incomingSequence;
  netadr_t remoteAddress;
  int qport;
  int fragmentSequence;
  int fragmentLength;
  unsigned __int8 *fragmentBuffer;
  int fragmentBufferSize;
  int unsentFragments;
  int unsentOnLoan;
  int unsentFragmentStart;
  int unsentLength;
  unsigned __int8 *unsentBuffer;
  int unsentBufferSize;
  int reliable_fragments;
  unsigned __int8 fragment_send_count[128];
  unsigned int fragment_ack[4];
  int lowest_send_count;
  netProfileInfo_t prof;
};

struct __declspec(align(8)) clientConnection_t
{
  int qport;
  ClientNum_t clientNum;
  int lastPacketSentTime;
  int lastPacketTime;
  netadr_t serverAddress;
  int connectTime;
  int connectPacketCount;
  char serverMessage[256];
  int challenge;
  int checksumFeed;
  ReliableCommands reliableCommands;
  int serverMessageSequence;
  int serverCommandSequence;
  int lastExecutedServerCommand;
  char serverCommands[128][1024];
  bool isServerRestarting;
  bool areTexturesLoaded;
  bool waitForMovie;
  bool hostCompromised;
  netchan_t netchan;
  char netchanOutgoingBuffer[2048];
  char netchanIncomingBuffer[65536];
  netProfileInfo_t OOBProf;
  __int64 statPacketsToSend;
  int statPacketSendTime[41];
};

class /*__cppobj*/ __declspec(align(8)) bdLeagueSubdivisionInfo : bdTaskResult
{
public:
  unsigned __int64 m_subdivisionID;
  unsigned __int64 m_leagueID;
  unsigned __int64 m_seasonID;
  bool m_isDefault;
  unsigned int m_createdTime;
  unsigned __int8 m_metadata[64];
  unsigned int m_metadataLength;
};

class /*__cppobj*/ __declspec(align(8)) bdFileInfo : bdTaskResult
{
public:
  unsigned __int64 m_fileID;
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  enum bdVisibility {
      BD_VISIBLE_PUBLIC = 0x0,
      BD_VISIBLE_PRIVATE = 0x1,
      BD_MAX_VISIBILITY_TYPE = 0x2,
  } m_visibility;
  unsigned __int64 m_ownerID;
  char m_fileName[128];
  unsigned int m_fileSize;
};

struct NetField
{
  const char *name;
  int offset;
  int size;
  int bits;
  unsigned __int8 changeHints;
  const char *bitsStr;
  const char *changeHintsStr;
};

class /*__cppobj*/ __declspec(align(8)) bdLeagueUserTeamResult : bdTaskResult
{
public:
  unsigned __int64 m_teamID;
  char m_name[65];
  unsigned __int8 m_icon[1024];
  unsigned int m_iconLength;
  unsigned int m_lastLoginTimestamp;
};

class jqQueue
{
public:
    jqQueue* ThisPtr;
    //jqAtomicQueue<jqBatch, 32> Queue;
    int QueuedBatchCount;
    unsigned int ProcessorsMask;
};

class jqAtomicHeap
{
public:
    jqAtomicHeap* ThisPtr;
    tlAtomicMutex Mutex;
    unsigned __int8* HeapBase;
    unsigned int HeapSize;
    unsigned int BlockSize;
    volatile unsigned int TotalUsed;
    volatile unsigned int TotalBlocks;
    int NLevels;
    struct LevelInfo {
        unsigned int BlockSize;
        int NBlocks;
        int NCells;
        unsigned __int64* CellAvailable;
        unsigned __int64* CellAllocated;
    } Levels[11];
    unsigned __int8* LevelData;
};

class jqBatchPool
{
public:
  jqBatchPool *ThisPtr;
  jqQueue BaseQueue;
  union {
      struct {
          int QueuedBatchCount;
          int ExecutingBatchCount;
      };
      unsigned __int64 BatchCount;
  };
  jqAtomicHeap BatchDataHeap;
};

class /*__cppobj*/ __declspec(align(8)) bdFriendProposal : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned __int8 m_attachment[1024];
  unsigned int m_attachmentSize;
};

class /*__cppobj*/ __declspec(align(8)) bdFriendInfo : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  char m_userName[64];
  bool m_isOnline;
  unsigned __int8 m_groupID;
};

class /*__cppobj*/ __declspec(align(4)) bdGroupInfo : bdTaskResult
{
public:
  unsigned __int8 m_groupID;
  char m_groupName[32];
};

class /*__cppobj*/ bdFriendAndRichPresence : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned __int8 m_groupID;
  bool m_isOnline;
  unsigned __int8 m_richPresence[255];
  unsigned int m_richPresenceSize;
};

class /*__cppobj*/ bdLeagueTeamMemberInfo: bdTaskResult
{
public:
  unsigned __int64 m_teamID;
  unsigned int m_numMembers;
  unsigned __int64 m_userIDs[16];
  char m_userNames[16][65];
};

class /*__cppobj*/ bdStats
{
public:
    enum bdWriteType {
        STAT_WRITE_REPLACE = 0x0,
        STAT_WRITE_ADD = 0x1,
        STAT_WRITE_MAX = 0x2,
        STAT_WRITE_MIN = 0x3,
        STAT_WRITE_REPLACE_WHEN_RATING_INCREASE = 0x4,
        STAT_WRITE_ADD_WHEN_RATING_INCREASE = 0x5,
        STAT_WRITE_MAX_WHEN_RATING_INCREASE = 0x6,
        STAT_WRITE_MIN_WHEN_RATING_INCREASE = 0x7,
    };
    //bdRemoteTaskManager* m_remoteTaskManager;
};

class /*__cppobj*/ bdStatsInfo : bdTaskResult
{
public:
  unsigned int m_leaderboardID;
  unsigned __int64 m_entityID;
  bdStats::bdWriteType m_writeType;
  __int64 m_rating;
  unsigned __int64 m_rank;
  char m_entityName[65];
  unsigned int m_secondsSinceUpdate;
};

struct GfxMarkContext
{
  unsigned __int8 lmapIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 modelTypeAndSurf;
  unsigned __int16 modelIndex;
};

class /*__cppobj*/ XAnimClientNotifyAdder
{
};

struct voiceCommunication_t
{
  ClientVoicePacket_s voicePackets[10];
  int voicePacketCount;
  int voicePacketLastTransmit;
};

struct StringTableCell
{
  const char *string;
  int hash;
};

struct StringTable
{
  const char *name;
  int columnCount;
  int rowCount;
  StringTableCell *values;
  __int16 *cellIndex;
};

class mover_record_t
{
public:
    vec3_t m_origin;
    vec3_t m_angles;
    int m_time;
};

class mover_info_t
{
public:
  mover_record_t m_records[32];
  int m_last_record;
};

struct __declspec(align(128)) snapshot_s
{
  int snapFlags;
  int ping;
  int serverTime;
  int physicsTime;
  playerState_s ps;
  int numEntities;
  int numClients;
  int numActors;
  entityState_s entities[512];
  clientState_s clients[18];
  actorState_s actors[32];
  __declspec(align(32)) MatchState matchState;
  unsigned __int16 entIndices[512];
  int serverCommandSequence;
};

struct GfxSkinCacheEntry
{
  unsigned int frameCount;
  int skinnedCachedOffset;
  unsigned __int16 numSkinnedVerts;
  unsigned __int16 ageCount;
};

struct clientControllers_t
{
  vec3_t angles[6];
  vec3_t tag_origin_angles;
  vec3_t tag_origin_offset;
};

struct CEntPlayerInfo
{
  clientControllers_t *control;
  unsigned __int8 tag[6];
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
};

struct CEntTurretAngles
{
  float pitch;
  float yaw;
  float barrelPitch;
};

struct __declspec(align(4)) CEntTurretInfo
{
    union {
        CEntTurretAngles angles;
        vec3_t viewAngles;
    };
    bool playerUsing;
    float minigunRotation;
    float minigunRotationSpeed;
    unsigned __int8 tag_aim;
    unsigned __int8 tag_aim_animated;
    unsigned __int8 tag_flash;
    unsigned __int8 tag_spin;
    unsigned __int8 tag_turret;
    unsigned __int8 tag_barrel;
    float barrelPitch;
    float pivotOffset;
    float firingOffset;
    unsigned __int8 tag_aim_pivot;
    unsigned __int8 tag_weapon;
};

struct CEntVehicleDefGround
{
  float wheelHeight[6];
  float nitrousWheelRotation[6];
  __int16 nitrousWheelYaw[6];
  unsigned __int8 tag_extra_tank_wheels[4];
};

struct CEntVehicleRotor
{
  float rotation;
  float speed;
  unsigned __int8 tag;
  unsigned __int8 orientation;
  unsigned __int8 armTag;
  float armRotation;
};

struct CEntVehicleDefAir
{
  CEntVehicleRotor rotor[4];
};

union $42CA23D1ED50486B72A76B075A70CA3B
{
  CEntVehicleDefGround ground;
  CEntVehicleDefAir air;
};

struct CEntVehicleDef
{
  float barrelRecoil;
  __int16 pitch;
  __int16 roll;
  __int16 barrelYaw;
  __int16 barrelPitch;
  __int16 steerYaw;
  __int16 steerPitch;
  __int16 gunnerPitch[4];
  __int16 gunnerYaw[4];
  __int16 minigunRotation;
  __int16 antennaPitch[2];
  __int16 antennaRoll[2];
  unsigned __int8 wheelBoneIndex[6];
  unsigned __int8 tag_body;
  unsigned __int8 tag_turret;
  unsigned __int8 tag_barrel;
  unsigned __int8 tag_barrel_recoil;
  unsigned __int8 tag_gunner_turret[4];
  unsigned __int8 tag_gunner_barrel[4];
  unsigned __int8 tag_player;
  unsigned __int8 tag_minigun_spin;
  unsigned __int8 tag_antennas[2];
  $42CA23D1ED50486B72A76B075A70CA3B ___u22;
};

struct CEntFx
{
  int triggerTime;
  unsigned int effect;
};

union $B5C6484BFC4A9A509FCDCE318554591E
{
  float height;
  float yaw;
};

struct __declspec(align(4)) CEntActorInfo
{
  int proneType;
  float pitch;
  float roll;
  unsigned __int8 headBone;
  $B5C6484BFC4A9A509FCDCE318554591E ___u4;
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
  float lookAtBlend;
  unsigned __int8 lookAtFlags;
};

struct CEntGeneral
{
  int contents;
  bool linked;
  vec3_t mins;
  vec3_t maxs;
};

struct ShaderConstantSet
{
  vec4_t value[7];
  unsigned __int8 constantSource[7];
  unsigned __int8 used;
};

union $60D21612B457BDC98BEB77BAF7B9C3AE
{
  CEntPlayerInfo player;
  CEntTurretInfo turret;
  CEntVehicleDef vehicle;
  CEntFx fx;
  CEntActorInfo actor;
  CEntGeneral general;
};

struct cpose_t
{
  unsigned __int16 lightingHandle;
  unsigned __int8 eType;
  unsigned __int8 eTypeUnion;
  unsigned __int8 localClientNum;
  unsigned __int8 isRagdoll;
  int ragdollHandle;
  int physObjId;
  int physUserBody;
  int killcamRagdollHandle;
  int physUserBodyProneFeet;
  unsigned __int8 destructiblePose;
  int startBurnTime;
  float wetness;
  int cullIn;
  vec3_t origin;
  vec3_t angles;
  vec3_t absmin;
  vec3_t absmax;
  GfxSkinCacheEntry skinCacheEntry;
  $60D21612B457BDC98BEB77BAF7B9C3AE ___u19;
  ShaderConstantSet constantSet;
};

struct $4E48DA81AE6944637E6E45560C08B001
{
  unsigned __int32 relativeAnglesSet : 1;
  unsigned __int32 identityLinkto : 1;
};

union $9DA5FAEB537AFF94B38B35BCA5A31381
{
  unsigned int packed_bits;
  $4E48DA81AE6944637E6E45560C08B001 __s1;
};

struct cLinkInfo_s
{
  vec3_t axis[4];
  int linkEnt;
  int linkTag;
  vec3_t relativeAngles;
  $9DA5FAEB537AFF94B38B35BCA5A31381 ___u4;
};

struct cgVehicleWheelEffect
{
  int surfaceType;
  int lastSurfaceType;
};

struct Engine
{
  float throttle;
  float load;
  int currentGear;
  float rpms;
  float targetDownShiftRPM;
  float inAirTime;
  bool onGround;
  VehicleEngineState state;
};

struct cgVehicle_t
{
  int lastGunnerFire[4];
  int wheelSurfType[6];
  int fireTime;
  int flags;
  float materialTime;
  float materialTime2;
  vehicle_cache_t *vehicle_cache;
  cgVehicleWheelEffect wheelEffects[3];
  unsigned int notes[2];
  int driveBySoundIndex[2];
  float driveBySoundDelay[2];
  float driveBySoundTimeout[2];
  float prevTurretPitch;
  float prevTurretYaw;
  float prevGunnerPitch[4];
  float prevGunnerYaw[4];
  float prevAngularVelocity[5];
  Engine engine;
  float minigunRotationSpeed;
  vec3_t gunSoundOrigins[5];
  unsigned __int8 wasFiring;
  vec3_t antennaPos[2];
  vec3_t antennaVel[2];
  vec3_t antennaParentBoneWorldAxis[2][3];
  vec3_t antennaRelativePos[2];
  vec3_t poseAxis[4];
};

struct cached_client_tag_t
{
  int time;
  vec3_t lastLocalTagOrigin;
  bool visible;
  int predictedTime;
  vec3_t predictedPosition;
  vec3_t predictedAngles;
};

struct ClientTagCache
{
  cached_client_tag_t aim_head_tag;
  cached_client_tag_t aim_highest_tag;
  cached_client_tag_t tag_flash;
};

struct AimTargetCache
{
  int lastUpdateTime;
  float targetHeight;
};

struct cgScriptMover_s
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  vec3_t pos1;
  vec3_t pos2;
  vec3_t pos3;
  vec3_t apos1;
  vec3_t apos2;
  vec3_t apos3;
};

struct __declspec(align(2)) canimscripted_t
{
  vec3_t axis[4];
  unsigned __int16 anim;
  unsigned __int8 bStarted;
};

struct centity_t
{
  cpose_t pose;
  LerpEntityState prevState;
  entityState_s nextState;
  __int16 previousEventSequence;
  int miscTime;
  int lastMuzzleFlash;
  int numShotsFiredLast;
  unsigned __int16 attachModelNames[2];
  unsigned __int16 attachTagNames[2];
  XAnimTree_s *tree;
  Destructible *destructible;
  NitrousVehicle *nitrousVeh;
  cLinkInfo_s *linkInfo;
  cgVehicle_t *vehicle;
  ClientTagCache *clientTagCache;
  AimTargetCache *aimTargetInfo;
  cgScriptMover_s *cScriptMover;
  canimscripted_t *scripted;
  cgZBarrier_s *zbarrier;
  DroppedWeaponDobjInfo *droppedWeaponDobjInfo;
  int nextSlideFX;
  unsigned __int16 flagIndex;
  unsigned __int16 flagState;
  Material *compassMaterial;
  int lastTrailTime;
  unsigned int fxTrailHandle;
  unsigned int fxProjExplosion;
  unsigned int fxHeartbeat;
  unsigned int fxLaserSight;
  vec3_t oldLinkOrigin;
  vec3_t originError;
  vec3_t anglesError;
  unsigned __int8 tracerDrawRateCounter;
  centity_t *updateDelayedNext;
  unsigned __int16 classname;
  unsigned int stepSound;
  unsigned __int8 footstepSurfaceOverride;
  unsigned __int8 deployedRiotshieldHits[8];
  union {
      unsigned int packed_bits[2];
      struct {
          unsigned __int32 applyLeftHandIK : 1;
          unsigned __int32 nextValid : 1;
          unsigned __int32 bMuzzleFlash : 1;
          unsigned __int32 bMuzzleFlashLeft : 1;
          unsigned __int32 bMuzzleFlashLastShot : 1;
          unsigned __int32 bShellEject : 1;
          unsigned __int32 bShellEjectLeft : 1;
          unsigned __int32 bTrailMade : 1;
          unsigned __int32 isBurning : 1;
          unsigned __int32 skipBloodImpacts : 1;
          unsigned __int32 heroBloodImpact : 1;
          unsigned __int32 scriptThreaded : 1;
          unsigned __int32 clientRumbleLoop : 1;
          unsigned __int32 didOverheatFx : 1;
          unsigned __int32 leftFootstep : 1;
          unsigned __int32 rightFootstep : 1;
          unsigned __int32 leftRearFootstep : 1;
          unsigned __int32 rightRearFootstep : 1;
          unsigned __int32 bIsTrigger : 1;
          unsigned __int32 bIsTriggerRadius : 1;
          unsigned __int32 bIsTriggerBox : 1;
          unsigned __int32 bIsOneShot : 1;
          unsigned __int32 bIsPlaneOnRadar : 1;
          unsigned __int32 bFloatLonger : 1;
          unsigned __int32 bForceBuoyancy : 1;
          unsigned __int32 bIgnoreRagdoll : 1;
          unsigned __int32 bClientFlagsNeedProcessing : 1;
          unsigned __int32 bUpdatedSinceReset : 1;
          unsigned __int32 bUpdateToggle : 1;
          unsigned __int32 bZombieEyeGlowHasBeenTurnedOn : 1;
          unsigned __int32 bFakeEntityMoving : 1;
          unsigned __int32 bFakeEntityTurning : 1;
          unsigned __int32 bFakeEntityRemoved : 1;
          unsigned __int32 originAnglesError : 1;
          unsigned __int32 partOfZBarrier : 1;
          unsigned __int32 linkRelativeAngles : 1;
          unsigned __int32 sndTurretWasFiring : 1;
          unsigned __int32 clientMainThreaded : 1;
          unsigned __int32 renderInThirdPersonSpectate : 1;
          unsigned __int32 overrideLightingOrigin : 1;
          unsigned __int32 forceNotSimple : 1;
      };
  };
};

struct playerEntity_t
{
  float fLastWeaponPosFrac;
  int bPositionToADS;
  vec3_t vPositionLastOrg;
  float fLastIdleFactor;
  vec3_t baseMoveOrigin;
  vec3_t baseMoveAngles;
};

struct GfxFilm
{
  bool enabled;
  vec4_t visColorRangeS;
  vec4_t visColorRangeE;
  vec4_t visColorShadowMatrixR;
  vec4_t visColorShadowMatrixG;
  vec4_t visColorShadowMatrixB;
  vec4_t visColorMidtoneMatrixR;
  vec4_t visColorMidtoneMatrixG;
  vec4_t visColorMidtoneMatrixB;
  vec4_t visColorHilightMatrixR;
  vec4_t visColorHilightMatrixG;
  vec4_t visColorHilightMatrixB;
  vec4_t visColorFinalGamma;
  vec4_t visColorFinalSaturation;
  vec4_t visColorFinalBlend;
  __int16 lutA;
  __int16 lutB;
  __int16 lutC;
  __int16 lutD;
  vec4_t lutBlendWeights;
  float filmLut;
  vec4_t sunFlareTint;
};

struct GfxBloom
{
  vec4_t visBloomLevelsRGBYInB;
  vec4_t visBloomLevelsRGBYInG;
  vec4_t visBloomLevelsRGBYInW;
  vec4_t visBloomLevelsRGBYOutB;
  vec4_t visBloomLevelsRGBYOutW;
  vec4_t visBloomRGBHi;
  vec4_t visBloomRGBLo;
  vec4_t visBloomYHi;
  vec4_t visBloomYLo;
};

struct GfxReviveFx
{
  bool enabled;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  vec3_t reviveEdgeScale;
  vec3_t reviveEdgeContrast;
  vec3_t reviveEdgeOffset;
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
};

struct GfxLightScale
{
  float diffuseScale;
  float specularScale;
};

struct GfxVisionSet
{
  GfxFilm film;
  GfxBloom bloom;
  GfxReviveFx reviveFx;
  GfxLightScale charPrimaryLightScale;
};

struct __declspec(align(4)) GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
  bool useAltMaterial;
};

struct GfxDoubleVision
{
  vec3_t direction;
  float motionBlurMagnitude;
  float deltaPerMS;
  float cur;
  float targ;
};

struct __declspec(align(4)) GfxCompositeFx
{
  vec2_t distortionScale;
  float blurRadius;
  float distortionMagnitude;
  float frameRate;
  int lastUpdate;
  int frame;
  int startMSec;
  int currentTime;
  int duration;
  bool enabled;
  bool scriptEnabled;
};

struct GfxGenericFilter
{
  bool passEnabled[8][4];
  Material *passMaterial[8][4];
  int passTarget[8][4];
  int passSampler0[8][4];
  int passSampler1[8][4];
  float passParam[8][4][16];
  int passQuads[8][4];
  int bitFlag[8];
};

struct GfxPoison
{
  float curAmountTarget;
  float curAmount;
};

struct __declspec(align(4)) GfxSaveScreenParam
{
  float s0;
  float t0;
  float ds;
  float dt;
  LocalClientNum_t screenTimerId;
  unsigned __int8 mode;
};

struct __declspec(align(4)) GfxBlendSaveScreenBlurredParam
{
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  unsigned __int8 enabled;
};

struct __declspec(align(4)) GfxBlendSaveScreenFlashedParam
{
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  unsigned __int8 enabled;
};

struct GfxSaveScreenFx
{
  GfxSaveScreenParam saveScreenParam;
  GfxBlendSaveScreenBlurredParam blendBlurredParam;
  GfxBlendSaveScreenFlashedParam blendFlashedParam;
};

union $3476473680F47223795C50AF57F4AD83
{
  vec4_t m[4];
  float member[16];
};

struct float44
{
  $3476473680F47223795C50AF57F4AD83 ___u0;
};

struct GfxLight
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  unsigned __int8 shadowmapVolume;
  __int16 cullDist;
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  float dAttenuation;
  float roundness;
  vec3_t angles;
  float spotShadowHiDistance;
  vec4_t diffuseColor;
  vec4_t shadowColor;
  vec4_t falloff;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  __declspec(align(16)) float44 viewMatrix;
  float44 projMatrix;
  GfxLightDef *def;
};

struct GfxViewport
{
  int x;
  int y;
  int width;
  int height;
};

struct GfxWorldFog
{
  float baseDist;
  float halfDist;
  float baseHeight;
  float halfHeight;
  float sunFogPitch;
  float sunFogYaw;
  float sunFogInner;
  float sunFogOuter;
  vec3_t fogColor;
  float fogOpacity;
  vec3_t sunFogColor;
  float sunFogOpacity;
};

struct WaterFogDef
{
  int startTime;
  int finishTime;
  vec4_t color;
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  vec4_t sunFogColor;
  vec3_t sunFogDir;
  float sunFogStartAng;
  float sunFogEndAng;
};

struct ExtraCamLodInfo
{
  vec3_t pos[4];
  unsigned int posValidBits;
};

struct GfxRippleWave
{
  vec3_t wavePosition;
  float waveWidth;
  float waveSpeedScale;
  float waveAmplitudeRatio;
  float waveInnerStart;
  float waveInnerEnd;
  float waveOuterStart;
  float waveOuterEnd;
  int waveTimeStamp;
};

struct __declspec(align(8)) refdef_t
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
  float sceneViewportX;
  float sceneViewportY;
  float sceneViewportWidth;
  float sceneViewportHeight;
  float tanHalfFovX;
  float tanHalfFovY;
  float maincamTanHalfFovY;
  float extracamTanHalfFovY;
  float fov_x;
  vec3_t vieworg;
  float yaw;
  vec3_t viewaxis[3];
  int frametime;
  int time;
  float zNear;
  float zFar;
  GfxVisionSet visionset;
  float blurRadius;
  GfxDepthOfField dof;
  float rimIntensity;
  vec4_t genericSceneVector0;
  vec4_t genericSceneVector1;
  vec4_t genericSceneVector2;
  vec4_t genericSceneVector3;
  vec4_t cameraVelocity;
  GfxDoubleVision doubleVision;
  GfxCompositeFx flameFx;
  GfxCompositeFx waterSheetingFx;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  float sunVisibility;
  GfxLight primaryLights[255];
  GfxViewport scissorViewport;
  bool useScissorViewport;
  LocalClientNum_t localClientNum;
  int hideMatureContent;
  int splitscreen;
  int splitscreenBlurEdges;
  int playerTeleported;
  int oldExposureId;
  int newExposureId;
  float lerpcount;
  int lastTime;
  float exposure;
  float linearExposure;
  unsigned __int16 exposureMode;
  unsigned __int16 worldFogMode;
  vec3_t worldFogVolumeEntryPosition;
  __int16 newWorldFogVolumeId;
  __int16 oldWorldFogVolumeId;
  int worldFogVolumeTimeStamp;
  int worldFogFlags;
  bool worldFogSnapTransition;
  bool worldFogUseSystemTime;
  GfxWorldFog worldFogOld;
  GfxWorldFog worldFogNow;
  __int16 worldFogModifierVolumeId;
  int worldFogModifierTimeStamp;
  float worldFogModifierTimeScale;
  float worldFogModifierScaleD;
  float worldFogModifierScaleH;
  vec4_t worldFogModifierColorA;
  float nWorldFogModifierScaleD;
  float nWorldFogModifierScaleH;
  vec4_t nWorldFogModifierColor;
  vec3_t worldFogVolumeLastViewOrg;
  unsigned __int16 lutBankMask;
  __int16 lutScriptIndex;
  __int16 newLutVolumeId;
  __int16 oldLutVolumeId;
  int lutVolumeTimeStamp;
  float lutBlendWeights[32];
  float postEmissiveBrightening;
  bool noLodCullOut;
  float lodScaleRigid;
  float lodScaleSkinned;
  WaterFogDef waterFog;
  float adsZScale;
  ExtraCamLodInfo extraCamLodInfo;
  vec3_t preExtraCamVieworg;
  vec3_t preExtraCamViewaxis[3];
  float preExtraCamTanHalfFovX;
  float preExtraCamTanHalfFovY;
  float weaponTanHalfFovX;
  float weaponTanHalfFovY;
  bool sonarActive;
  bool sonarUseThermalMaterial;
  bool sonarOverrideBlend;
  float sonarTanHalfFovX;
  float sonarTanHalfFovY;
  vec2_t sonarViewScale;
  vec2_t sonarViewOffset;
  float sonarBlur;
  bool drawInfrared;
  float convergence;
  bool drawPostBlur;
  bool drawWaypointsPostBloom;
  bool useColorControl;
  float colorSaturation;
  float colorTemp;
  float colorHue;
  vec3_t colorScale;
  GfxRippleWave rWaves[1];
  bool darknessActive;
};

struct ScriptCamera
{
  int flags;
  vec3_t origin;
  vec3_t angles;
  vec3_t lookat;
  int originCent;
  int lookAtCent;
};

struct __declspec(align(4)) ScriptExtraCam
{
  vec3_t origin[4];
  vec3_t angles[4];
  int entNum[4];
  float fov[4];
  int curCameraIndex;
  bool multiCamEnabled;
  bool multiCamRequest;
};

struct __declspec(align(4)) Camera
{
  vec3_t lastViewOrg;
  vec3_t lastViewAngles;
  float lastFOV;
  int lastViewInputTime;
  float lastSpringOffset;
  float lastViewTraceFraction;
  int lastTime;
  int lastClientNum;
  vec3_t tweenStartOrg;
  vec3_t tweenStartAngles;
  float tweenStartFOV;
  int tweenStartTime;
  float tweenDuration;
  CameraMode lastCamMode;
  int lastVehicleDefIndex;
  int lastVehicleSeatPos;
  vec3_t missileViewAngles;
  bool missileWasKillCam;
  ScriptCamera scriptCam;
  ScriptExtraCam scriptExtraCam;
  bool useTagCamera;
  bool bWasRemoteTurretCam;
};

struct __declspec(align(4)) objectiveMapInfo_t
{
  Material *icon;
  float iconSize;
  unsigned __int8 ignoreEntity : 1;
  unsigned __int8 rotateWithEntity : 1;
  unsigned __int8 flipMaterial : 1;
  unsigned __int8 clipToMap : 1;
  unsigned __int8 colorMaterialInCode : 1;
  unsigned __int8 stencilToPartialMap : 1;
};

struct viewDirectionalHitIndicator_t
{
  int time;
  vec3_t entOrigin;
};

struct viewDamage_t
{
  int time;
  int duration;
  float yaw;
};

struct shellshock_t
{
  const shellshock_parms_t *parms;
  int startTime;
  int duration;
  int loopEndTime;
  float sensitivity;
  vec2_t viewDelta;
  int hasSavedScreen;
  int visionSetStarted;
};

struct lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s *animation;
  int animationTime;
  vec3_t oldFramePos;
  float oldFrameYaw;
  float animSpeedScale;
  int oldFrameSnapshotTime;
};

struct SonarAttachmentInfo
{
  vec3_t prevOrigin;
  float movementDistance[60];
  int nextMovementDistanceIndex;
};

struct clientInfo_t
{
  int infoValid;
  int nextValid;
  ClientNum_t clientNum;
  char name[32];
  team_t team;
  team_t oldteam;
  ffa_team_t ffaTeam;
  int clanAbbrev_IsEliteValidated;
  unsigned __int64 leagueTeamID;
  int leagueDivisionID;
  unsigned __int64 leagueSubdivisionID;
  Material *hLeagueDivisionIcon;
  int leagueSubdivisionRank;
  int rank;
  union {
      int prestige;
      int lastDaysPlayed;
  };
  int needsRevive;
  unsigned int perks[2];
  unsigned __int64 xuid;
  char clanAbbrev[8];
  score_s score;
  Material *hStatusIcon;
  Material *hRankIcon;
  int location;
  int health;
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  unsigned int modelChecksum;
  unsigned int attachModelChecksums[6];
  unsigned int attachTagChecksums[6];
  lerpFrame_t legs;
  lerpFrame_t torso;
  float lerpMoveDir;
  float lerpLean;
  vec3_t playerAngles;
  int leftHandGun;
  int dobjDirty;
  clientControllers_t control;
  int lastDamageTime;
  int lastStandStartTime;
  int turnedHumanTime;
  __int64 moveType;
  __int64 eventType;
  int beingRevived;
  unsigned int clientConditions[25];
  XAnimTree_s *pXAnimTree;
  Weapon DObjWeapon;
  unsigned __int8 weaponModel;
  Weapon DObjOffhandWeapon;
  Weapon DObjMeleeWeapon;
  unsigned __int8 meleeWeaponModel;
  int showReloadClipInHand;
  int hideWeaponClipModel;
  int dropWeaponClipTime;
  int stanceTransitionTime;
  int turnAnimEndTime;
  char turnAnimType;
  int attachedVehEntNum;
  int attachedVehSeat;
  bool hideWeapon;
  unsigned int weaponHideBits[5];
  bool usingKnife;
  bool usingGrenade;
  bool usingLaser;
  int nextHideWeaponTime;
  vec3_t vehAnimLastOrg;
  vec3_t vehAnimLastAngle;
  int vehAnimLastBone;
  int vehAnimLastTime;
  int vehAnimLerpStartTime;
  int vehAnimLerpEndTime;
  float weaponSpinLerp;
  float lastWeaponSpinLerp;
  float weaponSpin;
  bool wasFiring[5];
  int laseFXCentNum;
  unsigned int laseFXHandle;
  int clientUIVisibilityFlags;
  int teleportTime;
  bool teleportBit;
  int surfaceType;
  int movementType;
  int footstepEventCount;
  SonarAttachmentInfo sonarAttachmentInfo;
  float infraredFadeOut;
  WeaponDobjInfo weaponDobjInfo;
  int offhandWeaponVisible;
};

struct actorLerpFrame_t
{
  int bAnimating;
  int animationState;
};

struct animInfo_t
{
  actorLerpFrame_t lerp;
  lerpFrame_t legs;
};

struct actorInfo_t
{
  int infoValid;
  int nextValid;
  int actorNum;
  int entityNum;
  char name[32];
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  unsigned int modelChecksum;
  unsigned int attachModelChecksums[6];
  unsigned int attachTagChecksums[6];
  unsigned int attachIgnoreCollision;
  animInfo_t animInfo;
  int animScriptedAnim;
  int nextAnimScriptedAnim;
  SonarAttachmentInfo sonarAttachmentInfo;
  int dobjDirty;
  XAnimTree_s *pXAnimTree;
};

struct bgs_clientfieldapi_t
{
  void (__cdecl *CompareHashToGameState)(unsigned int);
  bool (__cdecl *AllowVersionReRegistration)();
  bool (__cdecl *FieldVersionAllowsRegistration)(clientField_s *, unsigned int);
  bool (__cdecl *ServerVersionAllowsRegistration)(unsigned int);
};

struct bgs_t
{
  bgsAnim_s *animData;
  bgsClientFields_s *clientFields;
  scr_animtree_t (*scriptmoveranim_trees)[16];
  unsigned int *scriptmoveranim_tree_count;
  int time;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  int proneTime[18];
  XModel *(__cdecl *GetXModel)(const char *);
  void (__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree_s *, int, LocalClientNum_t, clientInfo_t *);
  unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, clientInfo_t *, bool);
  unsigned __int16 (__cdecl *AttachStowedWeapon)(DObjModel_s *, unsigned __int16, entityState_s *, WeaponDobjInfo *, Weapon, unsigned __int16 *);
  DObj *(__cdecl *GetDObj)(int, LocalClientNum_t);
  void (__cdecl *SafeDObjFree)(int, LocalClientNum_t);
  void *(__cdecl *AllocXAnim)(int);
  void (__cdecl *AnimCmdRefCount)(__int16, __int16, int);
  void (__cdecl *AnimCmdAddDependent)(__int16, __int16);
  void (__cdecl *SetEntAnimSpeed)(int, float);
  float (__cdecl *GetEntAnimSpeed)(int);
  clientInfo_t clientinfo[18];
  actorInfo_t actorinfo[32];
  void (__cdecl *PlayerDobjChanging)(LocalClientNum_t, clientInfo_t *, const Weapon);
  void (__cdecl *Scr_AddInt)(int);
  void (__cdecl *Scr_AddFloat)(float);
  void (__cdecl *Scr_AddString)(const char *);
  void (__cdecl *Scr_AddLocalClientNumber)(LocalClientNum_t);
  void (__cdecl *Scr_ExecEntThreadNum)(LocalClientNum_t, int, int, int);
  bgs_clientfieldapi_t clientFieldAPI;
};

struct visionSetVars_t
{
  bool filmEnable;
  vec4_t visBloomLevelsRGBYInB;
  vec4_t visBloomLevelsRGBYInG;
  vec4_t visBloomLevelsRGBYInW;
  vec4_t visBloomLevelsRGBYOutB;
  vec4_t visBloomLevelsRGBYOutW;
  vec4_t visBloomRGBHi;
  vec4_t visBloomRGBLo;
  vec4_t visBloomYHi;
  vec4_t visBloomYLo;
  vec4_t visColorRangeS;
  vec4_t visColorRangeE;
  vec4_t visColorShadowMatrixR;
  vec4_t visColorShadowMatrixG;
  vec4_t visColorShadowMatrixB;
  vec4_t visColorMidtoneMatrixR;
  vec4_t visColorMidtoneMatrixG;
  vec4_t visColorMidtoneMatrixB;
  vec4_t visColorHilightMatrixR;
  vec4_t visColorHilightMatrixG;
  vec4_t visColorHilightMatrixB;
  vec4_t visColorFinalGamma;
  vec4_t visColorFinalSaturation;
  vec4_t visColorFinalBlend;
  float filmLut;
  bool reviveEnable;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  vec3_t reviveEdgeScale;
  vec3_t reviveEdgeContrast;
  vec3_t reviveEdgeOffset;
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
  bool charPrimaryUseTweaks;
  float charPrimaryDiffuseScale;
  float charPrimarySpecularScale;
  float masterRingmod;
  float reverbRingmod;
  float hiFilter;
  float lowFilter;
  vec4_t sunFlareTint;
  float postEmissiveBrightening;
  char name[64];
};

struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  float lerpFraction;
  visionSetLerpStyle_t style;
};

struct transPlayerState_t
{
  int otherFlags;
  int damageEvent;
  __int16 predictableEventSequence;
  int predictableEvents[4];
  __int16 unpredictableEventSequence;
  int unpredictableEvents[4];
};

struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

struct CompassScrambler
{
  vec2_t pos;
  int startTime;
  int handle;
};

struct ShieldHitDelayedEvent
{
  unsigned int eventParm;
};

struct DroppedWeaponDobjInfo
{
  int entnum;
  WeaponDobjInfo weaponDobjInfo;
};

struct footstepEvent_t
{
  centity_t *cent;
  unsigned __int16 bone;
  unsigned __int16 notetrack;
  unsigned __int8 moveType;
  unsigned __int8 surface;
  unsigned __int32 playerView : 1;
  unsigned __int32 quiet : 1;
  unsigned __int32 isLouder : 1;
  unsigned __int32 footprint : 1;
};

struct bullet_hit_info_t
{
  vec3_t hitp;
  vec3_t hitn;
  int sflags;
  float depth;
  int hitid;
  float range;
};

struct targetInfo_t
{
  int entNum;
  vec3_t offset;
  int materialIndex;
  int offscreenMaterialIndex;
  int flags;
};

struct snd_context
{
  unsigned int type;
  unsigned int value;
};

struct snd_ambient_script_data
{
  bool isAmbientRoom;
  bool isAmbientPackage;
  bool isDefaultRoom;
  __int16 entnums[16];
  char priorities[16];
  char name[64];
  unsigned int hash;
  int numContexts;
  snd_context contexts[16];
};

struct __declspec(align(4)) snd_ambient_collider
{
  int roomTriggerIndex;
  int previousRoomTriggerIndex;
  int packageTriggerIndex;
  int roomPriorityIndex;
  int packagePriorityIndex;
  int entnum;
  unsigned int hash;
  int colliderEntnum;
  bool firstFrame;
  bool inUse;
  unsigned int playerRingoff;
  bool updated;
  bool localPlayer;
};

struct /*__cppobj*/ __declspec(align(128)) cg_t
{
  ClientNum_t clientNum;
  LocalClientNum_t localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s *snap;
  snapshot_s *nextSnap;
  snapshot_s activeSnapshots[2];
  bool slowMotionModified;
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int mapRestart;
  bool bThirdPerson;
  thirdPersonType renderingThirdPerson;
  playerState_s predictedPlayerState;
  int lastPlayerStateOverride;
  centity_t predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  vec3_t predictedError;
  playerState_s lastUIPlayerState;
  float landChange;
  int landTime;
  float heightToCeiling;
  int heightToCeilingTS;
  refdef_t refdef;
  vec3_t refdefViewAngles;
  Camera cameraData;
  float lastPelvisCameraOffset;
  vec3_t baseGunAngles;
  vec3_t swayViewAngles;
  vec3_t swayAngles;
  vec3_t swayOffset;
  vec3_t recoilAngles;
  vec3_t recoilSpeed;
  vec3_t damageKickAngles;
  int previousRecoilTime;
  float previousRecoilRatio;
  vec3_t lastStandSwayAngles;
  vec3_t lastStandSwayAVel;
  vec3_t lastStandSwayTarget;
  vec3_t radiantCameraOrigin;
  vec3_t radiantCameraAngles;
  int radiantCamInUse;
  int iEntityLastType[1792];
  XModel *pEntityLastXModel[1792];
  float zoomSensitivity;
  bool isLoading;
  char objectiveText[1024];
  team_indicator teamIndicator;
  bool colorBlindAssist;
  int teamPlayerMask[10][1];
  int vehicleInitView;
  vec3_t prevVehicleInvAxis[3];
  bool vehicleViewLocked;
  vec3_t vehicleViewLockedAngles;
  int missileInitView;
  vec3_t storedRemoteCameraAngles;
  vec3_t storedRemoteCameraOrigin;
  char scriptMainMenu[256];
  bool initialPlayersConnected;
  bool initialPlayersConnectedRespondedTo;
  int numScores;
  int teamScores[10];
  unsigned int teamHasMeat[10];
  int teamPings[10];
  int teamPlayers[10];
  ClientNum_t scoreOrder[18];
  scoreboardColumnType_t scoreboardColumnTypes[5];
  int matchUIVisibilityFlags;
  unsigned int talkFlags;
  objectiveMapInfo_t objectiveMapInfo[64][2];
  objective_t clientObjectives[32];
  int bombTimer[2];
  int showScores;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  int selectedGamerIndex;
  int bannerLines[10];
  unsigned __int64 selectedGamerXuid;
  int selectedGamerClientNum;
  int drawHud;
  int timeScaleTimeStart;
  int timeScaleTimeEnd;
  float timeScaleStart;
  float timeScaleEnd;
  ClientNum_t crosshairClientNum;
  int crosshairClientLastTime;
  int crosshairClientStartTime;
  unsigned int crosshairTraceDistance;
  unsigned int airburstMarkDistance;
  int airburstMarkStartTime;
  int airburstMarkEndTime;
  int airburstMarkInProgress;
  int gpsJammerLastInactive;
  int bulletsFiredContinuously;
  int bulletsFiredContinuouslyLeft;
  int bulletsFiredStopTime;
  int cursorHintIcon;
  int cursorHintTime;
  int cursorHintFade;
  int cursorHintString;
  int vehicleHintTime;
  int lastVehicleSeat;
  int driverHintShown;
  int gunnerHintShown;
  int lastClipFlashTime;
  InvalidCmdHintType invalidCmdHintType;
  int invalidCmdHintTime;
  SuccessfulCmdHintType successfulCmdHintType;
  int successfulCmdHintTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  float healthOverlayFromAlpha;
  float healthOverlayToAlpha;
  int healthOverlayPulseTime;
  int healthOverlayPulseDuration;
  int healthOverlayPulsePhase;
  bool healthOverlayHurt;
  int healthOverlayLastHitTime;
  float healthOverlayOldHealth;
  int healthOverlayPulseIndex;
  int proneBlockedEndTime;
  int lastStance;
  int lastStanceChangeTime;
  int lastStanceFlashTime;
  int voiceTime;
  Weapon weaponSelect;
  int weaponSelectTime;
  bool weaponForcedSelect;
  Weapon weaponLatestPrimary;
  Weapon lastWeaponForAlt[15];
  unsigned int viewModelFx;
  Weapon prevViewmodelWeapon;
  bool prevViewmodelWeaponInASD;
  Weapon equippedOffHand;
  viewDirectionalHitIndicator_t directionalHitIndicator[4];
  viewDamage_t viewDamage[8];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int waterDropCount;
  int waterDropStartTime;
  int waterDropStopTime;
  int weaponIdleTime;
  int nomarks;
  int clearMarks;
  int newPlayerViewmodel;
  bool weaponLaserOff;
  int v_dmg_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float v_dmg_flash;
  float fBobCycle;
  float xyspeed;
  vec3_t kickAVel;
  vec3_t kickAngles;
  vec3_t offsetAngles;
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  vec3_t flamethrowerKickOffset;
  float minigunSpinAngle;
  vec3_t viewModelAxis[4];
  float rumbleScale;
  float compassNorthYaw;
  vec2_t compassNorth;
  Material *compassMapMaterial;
  Material *compassMapScrambledMaterial;
  vec2_t compassMapUpperLeft;
  vec2_t compassMapWorldSize;
  int compassLastTime;
  float compassYaw;
  float compassSpeed;
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int stanceFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  int waypointFadeTime;
  int vehicleControlsFadeTime;
  shellshock_t shellshock;
  struct {
      int time;
      int duration;
  } testShock;
  int shellshockSoundActive;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  float radarProgress;
  float satelliteProgress;
  int radarType;
  vec2_t selectedLocation;
  vec2_t selectedYaw;
  int typewriterStartTime;
  vec2_t selectedLocations[3];
  int lastTimeSelected;
  SprintState sprintStates;
  int adsViewErrorDone;
  int inKillCam;
  int wasInKillCam;
  bool killCamFirstFrameRan;
  int killCamEntity;
  int invalidKillCamEntity;
  KillCamEntityType killCamEntityType;
  int killCamLastEntityNum;
  vec3_t killCamLastEntityOrg;
  vec3_t killCamLastEntityAngles;
  KillCamEntityRestState killCamEntityRestState;
  int killCamLookAtEntity;
  vec3_t killCamLookAt;
  vec3_t killCamHelicopterOffset;
  __int16 killCamLastVehicleDefIndex;
  int killCamStoppedTime;
  float killCamStoppedDecelTime;
  vec3_t killCamStoppedPos;
  vec3_t killCamStoppedVel;
  vec3_t killCamPrevBombOrigin;
  int killCamLerpEndTime;
  vec3_t killCamOldViewAngles;
  vec3_t killCamOldViewOrg;
  bgs_t bgs;
  cpose_t viewModelPose;
  visionSetVars_t visionSetPreLoaded[8];
  char visionSetPreLoadedName[8][64];
  visionSetVars_t visionSetFrom[8];
  visionSetVars_t visionSetTo[8];
  visionSetVars_t visionSetCurrent[8];
  visionSetLerpData_t visionSetLerpData[8];
  char visionNameNaked[64];
  char visionNameNight[64];
  char visionNameLastStand[64];
  char visionNameFlare[64];
  char visionNameInfrared[64];
  char visionNameTvguided[64];
  char visionNameExtraCam[64];
  bool drewReticle;
  bitarray<64> extraButton_bits;
  bool breathPressedLastFrame;
  int lastActionSlotTime;
  bool playerTeleported;
  float flareRatioLastFrame;
  int stepViewStart;
  float stepViewChange;
  struct {
      float aimSpreadScale;
  } lastFrame;
  int oldCommandTime;
  vec3_t oldOrigin;
  vec3_t oldViewangles;
  transPlayerState_t oldTransPlayerState;
  hudElemSoundInfo_t hudElemSound[32];
  int nextRippleTime;
  unsigned int impactEffectsNext;
  unsigned int impactEffects[256];
  float warDesiredMomentumProgress;
  float warCurrentMomentumProgress;
  int warMomentumMultiplier;
  int warMomentumBlitzkriegTime;
  int warMomentumFlashTime;
  float gunnerPitchOffset;
  unsigned int centInNextSnapshot[32];
  centity_t *slideFakeEnt;
  int cameraLinkedEntitiesCount;
  int cameraLinkedEntities[4];
  link_type_e cameraLinkedEntitiesType[4];
  vec3_t cameraLinkedEntitiesOffset[4];
  int groundTiltEntNum;
  int poisoned;
  Material *genericMaterialMap[64];
  bool genericFilterPassEnabled[8][4];
  Material *genericFilterPassMaterial[8][4];
  int genericFilterPassTarget[8][4];
  int genericFilterPassSampler0[8][4];
  int genericFilterPassSampler1[8][4];
  float genericFilterPassParam[8][4][16];
  int genericFilterPassQuads[8][4];
  int genericFilterBitFlag[8];
  bool genericOverlayEnabled[3];
  Material *genericOverlayMaterial[3];
  float genericOverlayParam[3][16];
  int genericOverlaySortIndex[3];
  float genericOverlayParamADS[8];
  bool genericOverlayEnableADS;
  int swimming;
  int swimmingStartTime;
  int missileViewWobbleLastTime;
  vec3_t missileViewWobbleFreq;
  vec3_t missileViewWobbleAmp;
  int counterSpinTime;
  float counterSpinTarget;
  float counterSpinAngle;
  int extraCamEntity;
  int extraCamActive;
  int extraCamStatic;
  vec3_t extraCamOrigin;
  vec3_t extraCamAngles;
  int hasLocalRadar;
  vec2_t localRadarPos;
  float localRadarProgress;
  int globalScramblerActive;
  float scramblerEnemyAlpha;
  float scramblerFriendlyAlpha;
  int popUpSwayStartTime;
  float popupRotationAngle;
  float popUpAngleDelta;
  CompassScrambler compassScrambler[16];
  centity_t *closestEnemyScrambler;
  int alliesFlagAway;
  int axisFlagAway;
  int resetWeaponStateFlag;
  int delayedShieldHitEventsCount;
  ShieldHitDelayedEvent delayedShieldHitEvents[2];
  int recentKilledByClientNum;
  int recentKilledByTime;
  int recentVictimClientNums[8];
  int recentVictimTimes[8];
  int recentVictimIndex;
  bool talkingToEnemy;
  struct FogSettings {
      float start;
      float r;
      float g;
      float b;
      float density;
      float heightDensity;
      float baseHeight;
      float fogColorScale;
      float sunFogColorR;
      float sunFogColorG;
      float sunFogColorB;
      float sunFogDirX;
      float sunFogDirY;
      float sunFogDirZ;
      float sunFogStartAng;
      float sunFogEndAng;
      float fogMaxOpacity;
  } serverFogSettings;
  bool forceInfraredMaterialsStreaming;
  bool sonarAttachmentOn;
  bool hudOutlineOn;
  bool sonarAttachmentFullscreenOn;
  DroppedWeaponDobjInfo droppedWeaponDobjInfo[64];
  vec3_t traceHitPos;
  int traceHitDistance;
  bool traceHitEnemy;
  int rangeFinderStartTime;
  bool rangeFinderTimerActive;
  bool rangeFinderPerformTrace;
  bool rangeFinderPerformFxVisTest;
  int playerVehicleEntity;
  bool clientCollisionLinked;
  float altScopeFrac;
  int lastAltScopeFracUpdateTime;
  bool useAlternateAimAssistParams;
  bool useFlashLight;
  int empStartTime;
  int lastEmpTime;
  footstepEvent_t footstepEvents[16];
  unsigned int numFootstepEvents;
  int movers[64];
  int moversCount;
  bullet_hit_info_t hit_infos[12];
  int num_hit_infos;
  int hit_charge;
  bool hit_possible;
  bool bClientNeedsConnectCallback;
  targetInfo_t targets[32];
  snd_ambient_script_data soundAmbientData[32];
  int numAmbientDataStructs;
  snd_ambient_script_data *defaultAmbientRoom;
  snd_ambient_collider soundAmbientColliderData[64];
  int currentAmbientRoom;
  int currentAmbientPackage;
  unsigned int ambientRoomOverride;
  unsigned int ambientPackageOverride;
  int shoutcastListenInBits;
  Weapon selectedClassWeapon;
  int gumpTransitionState;
  vec3_t gumpTransitionColor;
  float gumpTransitionAlpha;
  int gumpTransitionTime;
  int hudDpadShown;
  int resetLuiNeeded;
  int hostMigrationOccured;
  int safeSpectatorCamTime;
  vec3_t safeSpectatorCamPos;
  vec3_t safeSpectatorCamOffset;
  team_t team;
};

struct ZBarrierBoard
{
  XModel *pBoardModel;
  XModel *pAlternateBoardModel;
  XModel *pUpgradedBoardModel;
  const char *pTearAnim;
  const char *pBoardAnim;
  const FxEffectDef *repairEffect1;
  const FxEffectDef *repairEffect2;
  vec3_t repairEffect1Offset;
  vec3_t repairEffect2Offset;
  unsigned int boardRepairSound;
  unsigned int boardRepairHoverSound;
  unsigned int pauseAndRepeatRepSound;
  float minPause;
  float maxPause;
  unsigned __int16 zombieBoardTearStateName;
  unsigned __int16 zombieBoardTearSubStateName;
  unsigned int numRepsToPullProBoard;
};

struct ZBarrierDef
{
  const char *name;
  unsigned int generalRepairSound1;
  unsigned int generalRepairSound2;
  unsigned int upgradedGeneralRepairSound1;
  unsigned int upgradedGeneralRepairSound2;
  unsigned int delayBetweenRepSounds;
  float delayBetweenRepSoundsDuration;
  unsigned int earthquakeOnRepair;
  float earthquakeMinScale;
  float earthquakeMaxScale;
  float earthquakeMinDuration;
  float earthquakeMaxDuration;
  float earthquakeRadius;
  int numBoardsInBarrier;
  unsigned int autoHideOpenPieces;
  unsigned int taunts;
  unsigned int reachThroughAttacks;
  unsigned __int16 zombieTauntAnimState;
  unsigned __int16 zombieReachThroughAnimState;
  int numAttackSlots;
  float attackSpotHorzOffset;
  ZBarrierBoard boards[6];
};

struct __declspec(align(4)) _cgZBarrierPiece_t
{
  centity_t *pPiece;
  XModel *curXModel;
  void (__cdecl *pStateLogic)(LocalClientNum_t, cg_t *, centity_t *, ZBarrierDef *, _cgZBarrierPiece_t *, LerpEntityStateZBarrierPiece *, unsigned int);
  int timeVal;
  int intVal;
  unsigned __int8 state;
  unsigned __int8 prevState;
  unsigned __int8 subState;
  unsigned __int8 nextSubState;
  unsigned __int8 curAnim;
  bool flagsChanged;
};

struct cgZBarrier_s
{
  bool forceUpdateForDemoJump;
  _cgZBarrierPiece_t pieces[6];
};

struct shellshock_parms_t
{
    struct {
        int blurredFadeTime;
        int blurredEffectTime;
        int flashWhiteFadeTime;
        int flashShotFadeTime;
        ShockViewTypes type;
    } screenBlend;
    struct {
        int fadeTime;
        float kickRate;
        float kickRadius;
    } view;
    struct {
        bool affect;
        char loop[64];
        char loopSilent[64];
        char end[64];
        char endAbort[64];
        int fadeInTime;
        int fadeOutTime;
        float drylevel;
        float wetlevel;
        char roomtype[64];
        int modEndDelay;
        int loopFadeTime;
        int loopEndDelay;
        char snapshot[64];
    } sound;
    struct {
        bool affect;
        int fadeTime;
        float mouseSensitivity;
        float maxPitchSpeed;
        float maxYawSpeed;
    } lookControl;
    struct {
        float scale;
    } movement;
    struct {
        bool affect;
    } animation;
    struct {
        char name[32];
        int inTime;
        int outTime;
    } visionSet;
};

struct __declspec(align(8)) animation_s
{
  char name[64];
  int initialLerp;
  int finalLerp;
  float forceAnimRate;
  float moveSpeed;
  float rotSpeed;
  int duration;
  int nameHash;
  int flags;
  __int64 movetype;
  int stance;
  int movestatus;
  int noteType;
};

struct animScriptCondition_t
{
  int index;
  unsigned int value;
};

struct animScriptCommand_t
{
  __int16 bodyPart[2];
  __int16 animIndex[2];
  unsigned __int16 animDuration[2];
  SndAliasList *soundAlias;
  unsigned __int16 tagName;
  unsigned __int16 flags;
};

struct animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[4];
  int numCommands;
  animScriptCommand_t commands[8];
};

struct animScript_t
{
  int numItems;
  animScriptItem_t *items[128];
};

struct scr_animtree_t
{
  XAnim_s *anims;
};

struct animScriptData_t
{
  animation_s animations[1024];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][27];
  animScript_t scriptCannedAnims[1][27];
  animScript_t scriptStateChange[1][1];
  animScript_t scriptEvents[37];
  animScriptItem_t scriptItems[2158];
  int numScriptItems;
  scr_animtree_t animTree;
  unsigned __int16 bodyAnim;
  unsigned __int16 mainAnim;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 turningAnim;
  SndAliasList *(__cdecl *soundAlias)(const char *);
  void (__cdecl *playSoundAlias)(ClientNum_t, SndAliasList *);
};

struct scr_anim_s
{
    union {
        struct {
            unsigned __int16 index;
            unsigned __int16 tree;
        };
        const unsigned __int8* linkPointer;
    };
};

struct bgsAnim_s
{
  animScriptData_t animScriptData;
    struct
    {
        scr_animtree_t tree;
        scr_anim_s     body;
        scr_anim_s     main;
        scr_anim_s     torso;
        scr_anim_s     legs;
    } generic_human;
    struct {
        scr_animtree_t tree;
        scr_anim_s main;
    } generic_dog;
  unsigned int done_notify;
};

struct clientFieldCodeCallback_s
{
  unsigned __int32 bHasCodeCallback : 1;
  unsigned __int32 bCodeCallbackIsFloatVal : 1;
  union {
      void(__cdecl* floatCallbackFunc)(LocalClientNum_t, unsigned int, float, float, bool, bool, const char*, bool);
      void(__cdecl* uintCallbackFunc)(LocalClientNum_t, unsigned int, unsigned int, unsigned int, bool, bool, const char*, bool);
  };
};

struct clientField_s
{
  int scriptCallbackFunc;
  clientFieldCodeCallback_s codeCallbackFunc;
  unsigned __int16 nameHash;
  unsigned int fieldOffset;
  unsigned int fieldType;
  float floatMin;
  float floatMax;
  unsigned int accessMask;
  int bSplitscreenHostOnly;
  int bCallbacksFor0WhenNew;
  unsigned __int8 bitOffset;
  bool obsolete;
  unsigned int numBits;
  unsigned int version;
};

struct clientFieldNetfield_s
{
  int bitsUsed;
  int netFieldOffset;
};

struct clientFieldSet_s
{
  int numFields;
  clientField_s *pFields[160];
  int numNetFields;
  clientFieldNetfield_s *pNetFields;
};

union $4CACCB39A83665877BF7BAA110BB8661
{
  float oldFloat;
  unsigned int oldInt;
};

union $34F79CE00BEDC2B36903F1372ED1DE35
{
  float newFloat;
  unsigned int newInt;
};

struct __declspec(align(2)) clientFieldCallback_s
{
  clientField_s *pField;
  $4CACCB39A83665877BF7BAA110BB8661 ___u1;
  $34F79CE00BEDC2B36903F1372ED1DE35 ___u2;
  unsigned int localClientNum;
  unsigned int entNum;
  bool bInitialSnap;
  bool bNewEnt;
  bool bWasDemoJump;
};

struct bgsClientFieldCallbacks_s
{
  clientFieldCallback_s clientFieldCallbacks[1][256];
  unsigned int numCallbacks[1];
};

struct bgsClientFields_s
{
  int bRegistrationFinished;
  clientFieldSet_s clientFieldSets[12];
  unsigned int fieldHash;
  unsigned int highestVersionUsed;
  bgsClientFieldCallbacks_s *pPendingCallbacks;
};

struct DObjModel_s
{
  XModel *model;
  unsigned __int16 boneName;
  unsigned __int16 parentModel;
  bool ignoreCollision;
  vec3_t trans;
  vec3_t rot;
};

struct DSkelPartBits
{
  int anim[5];
  int control[5];
  int skel[5];
};

union $4D66080CBB4E1333C40818031E69E6B8
{
  DObjAnimMat *mat;
  DObjAnimMat *localMat;
};

struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  $4D66080CBB4E1333C40818031E69E6B8 ___u2;
};

union $912815140B19172F6168495ADE6CFF29
{
  XAnimTree_s *localTree;
  XAnimTree_s *tree;
};

union $50B028246FCF571FDD896B3932BE9068
{
  XModel **localModels;
  XModel **models;
};

struct DObj
{
  $912815140B19172F6168495ADE6CFF29 ___u0;
  unsigned __int16 duplicateParts;
  unsigned __int16 entnum;
  unsigned __int8 duplicatePartsSize;
  unsigned __int8 numModels;
  unsigned __int8 numBones;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  unsigned int hidePartBits[5];
  char localClientIndex;
  unsigned __int8 flags;
  unsigned __int8 numRootAdjustMats;
  unsigned __int8 *ikState;
  $50B028246FCF571FDD896B3932BE9068 ___u15;
};

struct bot_goal_t
{
  vec3_t position;
  pathnode_t *node;
  float radius;
  int time;
  unsigned __int16 notify;
  BotGoalPriority priority;
};

struct bot_aim_t
{
  Weapon grenadeWeapon;
  vec3_t grenadeOrigin;
  int grenadeTime;
};

struct bot_steering_t
{
  vec2_t anglesDesired;
  vec2_t anglesAverage;
  vec2_t anglesBase;
  float yawDelta;
  float pitchDelta;
};

struct __declspec(align(4)) bot_t
{
  gentity_t *ent;
  bot_goal_t goals[4];
  bot_aim_t aim;
  bot_steering_t steering;
  path_t path;
  vec3_t vLookAt;
  pathnode_t *failsafe;
  Weapon weapon;
  BotStance stance;
  int useButtonEndTime;
  int weaponDelayEndTime;
  int lastMoveTime;
  int grenadeTime;
  vec3_t kickAngles;
  vec3_t kickAVel;
  __int16 flags;
};

struct SpawnVar
{
  bool spawnVarsValid;
  int numSpawnVars;
  char *spawnVars[64][2];
  int numSpawnVarChars;
  char spawnVarChars[2048];
};

struct cached_tag_mat_t
{
  int time;
  int entnum;
  unsigned __int16 name;
  vec3_t tagMat[4];
};

struct trigger_info_t
{
  unsigned __int16 entnum;
  unsigned __int16 otherEntnum;
  int useCount;
  int otherUseCount;
};

struct com_parse_mark_t
{
  int lines;
  const char *text;
  int ungetToken;
  int backup_lines;
  const char *backup_text;
};

struct sv_FxVisBlock_t
{
  const gentity_t *fxEnt;
  float radius;
};

struct actorAntilagFrame_t
{
  vec3_t position[32];
  vec3_t angles[32];
  unsigned __int8 useCount[32];
  unsigned __int8 inUse[32];
  int time;
};

struct vehicleAntilagFrame_t
{
  vec3_t position[16];
  vec3_t angles[16];
  unsigned __int8 useCount[16];
  unsigned __int8 inUse[16];
  int time;
};

struct ZBarrierPieceAnims
{
  XAnimTree_s *pAnimTree;
};

struct ZBarrierType
{
  unsigned __int8 serverIndex;
  unsigned __int8 clientIndex;
  ZBarrierDef *zbarrierDef;
  ZBarrierPieceAnims clientAnims[6];
  ZBarrierPieceAnims serverAnims[6];
  int boardModelIndex[6];
  int upgradedBoardModelIndex[6];
  int alternateBoardModelIndex[6];
};

struct level_locals_t
{
  gclient_t *clients;
  gentity_t *gentities;
  int gentitySize;
  int num_entities;
  gentity_t *firstFreeEnt;
  gentity_t *lastFreeEnt;
  vehicle_t *vehicles;
  gentity_t *firstFreeActor;
  gentity_t *lastFreeActor;
  int num_actors;
  sentient_t *sentients;
  actor_t *actors;
  int actorCorpseCount;
  bot_t *bots;
  TurretInfo *turrets;
  int logFile;
  int initializing;
  int clientIsSpawning;
  int maxclients;
  int teamSortedClients[18];
  objective_t objectives[32];
  int objectivesClientMask[32][2];
  int framenum;
  int time;
  int previousTime;
  int frametime;
  int startTime;
  SpawnVar spawnVar;
  EntHandle droppedWeaponCue[32];
  int savepersist;
  float fFogOpaqueDist;
  float fFogOpaqueDistSqrd;
  int bPlayerIgnoreRadiusDamage;
  int bPlayerIgnoreRadiusDamageLatched;
  int currentEntityThink;
  int registerWeapons;
  int bRegisterItems;
  int bRegisterLeaderboards;
  cached_tag_mat_t cachedTagMat;
  cached_tag_mat_t cachedEntTargetTagMat;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int openScriptIOFileHandles[1];
  char *openScriptIOFileBuffers[1];
  com_parse_mark_t currentScriptIOLineMark[1];
  int scriptPrintChannel;
  vec2_t compassMapUpperLeft;
  vec2_t compassMapWorldSize;
  vec2_t compassNorth;
  int finished;
  int manualNameChange;
  unsigned __int16 modelMap[512];
  int disable_grenade_suicide;
  int numConnectedClients;
  ClientNum_t sortedClients[18];
  int bUpdateScoresForIntermission;
  int numVotingClients;
  __declspec(align(32)) MatchState matchState;
  int teamScores[10];
  int lastTeammateHealthTime;
  unsigned int teamHasSpyplane[10];
  unsigned int teamHasSatellite[10];
  unsigned int teamHasMeat[10];
  char voteString[1024];
  char voteDisplayString[1024];
  int voteTime;
  int voteExecuteTime;
  int voteYes;
  int voteNo;
  int currentActorClone;
  int iSearchFrame;
  sv_FxVisBlock_t fxVisibilityEnts[32];
  int currentPlayerClone;
  bool hostMigrationActive;
  int hostMigrationStart;
  actorAntilagFrame_t actorAntilagFrames[20];
  int nextActorAntilagFrame;
  vehicleAntilagFrame_t vehicleAntilagFrames[20];
  int nextVehicleAntilagFrame;
  ZBarrierType *zbarrierTypes[255];
};

struct /*__cppobj*/ I_spuDmaSave
{
};

struct $_TypeDescriptor$_extraBytes_28
{
  const void *pVFTable;
  void *spare;
  char name[28];
};

struct SndVolumeGroup
{
  char name[32];
  char parentName[32];
  unsigned int id;
  int parentIndex;
  SndMenuCategory category;
  unsigned __int16 attenuationSp;
  unsigned __int16 attenuationMp;
};

struct ClientPlayerWeaponInfo
{
  XModel *handModel;
  XModel *gogglesModel;
  XModel *rocketModel;
  unsigned __int8 weapModelIdx;
  int registered;
  Weapon weapon;
  const char *translatedDisplayName;
  const char *translatedModename;
  const char *translatedAIOverlayDescription;
};

struct actorGravity_t
{
  centity_t *actor;
  int gravity;
};

struct CgEntCollTree
{
  float dist;
  unsigned __int16 axis;
  union {
      unsigned __int16 parent;
      unsigned __int16 nextFree;
  } u;
  unsigned __int16 child[2];
};

struct __declspec(align(4)) CgEntCollSector
{
  CgEntCollTree tree;
  unsigned __int16 entListHead;
};

struct CgEntCollWorld
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  CgEntCollSector sectors[1024];
};

struct __declspec(align(8)) cgs_t
{
  int viewX;
  int viewY;
  int viewWidth;
  int viewHeight;
  float viewAspect;
  float sceneViewportX;
  float sceneViewportY;
  float sceneViewportWidth;
  float sceneViewportHeight;
  int serverCommandSequence;
  int processedSnapshotNum;
  int localServer;
  char gametype[32];
  char szHostName[256];
  int maxclients;
  int privateClients;
  char mappath[64];
  char mapname[32];
  int gameEndTime;
  int voteTime;
  int voteYes;
  int voteNo;
  char voteString[256];
  int redCrosshair;
  XModel *gameModels[512];
  const FxEffectDef *fxs[196];
  const FxEffectDef *grenadeFx[40];
  int grenadeFxCount;
  const FxEffectDef *playerFireFx[3];
  shellshock_parms_t holdBreathParams;
  char teamChatMsgs[8][90];
  int teamChatMsgTimes[8];
  int teamChatPos;
  int teamLastChatPos;
  float compassWidth;
  float compassHeight;
  float compassY;
  clientInfo_t corpseinfo[4];
  actorInfo_t actorCorpseInfo[8];
  bool entUpdateToggleContextKey;
  actorGravity_t actorGravity[32];
};

struct GfxPlacement
{
  vec4_t quat;
  vec3_t origin;
};

struct XModelPiece
{
  XModel *model;
  vec3_t offset;
};

struct XModelPieces
{
  const char *name;
  int numpieces;
  XModelPiece *pieces;
};

struct DynEntityDef
{
  DynEntityType type;
  GfxPlacement pose;
  XModel *xModel;
  XModel *destroyedxModel;
  unsigned __int16 brushModel;
  unsigned __int16 physicsBrushModel;
  const FxEffectDef *destroyFx;
  unsigned int destroySound;
  XModelPieces *destroyPieces;
  PhysPreset *physPreset;
  __int16 physConstraints[4];
  int health;
  int flags;
  int contents;
  unsigned __int16 targetname;
  unsigned __int16 target;
};

const struct CollisionPartition
{
  unsigned __int8 triCount;
  int firstTri;
  int nuinds;
  int fuind;
};

struct CgEntCollNode
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  vec3_t linkMins;
  vec3_t linkMaxs;
};

struct ViewModelHand
{
  int iPrevAnim;
  int iHandAnimIndex;
};

struct ViewModelInfo
{
  DObj *viewModelDObj;
  WeaponDobjInfo weaponDobjInfo;
  int hasAnimTree;
  XAnimTree_s *tree;
  XAnim_s *anims;
  unsigned int partBits[5];
  ViewModelHand hand[2];
};

struct GlassDef
{
  const char *name;
  int maxHealth;
  float thickness;
  float minShardSize;
  float maxShardSize;
  float shardLifeProbablility;
  int maxShards;
  Material *pristineMaterial;
  Material *crackedMaterial;
  Material *shardMaterial;
  const char *crackSound;
  const char *shatterShound;
  const char *autoShatterShound;
  const FxEffectDef *crackEffect;
  const FxEffectDef *shatterEffect;
};

struct Glass
{
  unsigned int numCellIndices;
  unsigned __int16 cellIndices[6];
  GlassDef *glassDef;
  unsigned int index;
  unsigned int brushModel;
  vec3_t origin;
  vec3_t angles;
  vec3_t absmin;
  vec3_t absmax;
  bool isPlanar;
  unsigned __int8 numOutlineVerts;
  unsigned __int8 binormalSign;
  vec2_t *outline;
  vec3_t outlineAxis[3];
  vec3_t outlineOrigin;
  float uvScale;
  float thickness;
};

struct /*__cppobj*/ __declspec(align(4)) clients_rewind_context_t
{
  vec3_t m_client_pos[18];
  bool m_active;
};

struct /*__cppobj*/ __declspec(align(4)) actors_rewind_context_t
{
  vec3_t m_actor_pos[32];
  vec3_t m_actor_angles[32];
  bool m_active;
};

struct scr_const_t
{
  unsigned __int16 _;
  unsigned __int16 active;
  unsigned __int16 spawn;
  unsigned __int16 exit;
  unsigned __int16 aim_bone;
  unsigned __int16 aim_highest_bone;
  unsigned __int16 aim_vis_bone;
  unsigned __int16 alert;
  unsigned __int16 all;
  unsigned __int16 allies;
  unsigned __int16 ambush;
  unsigned __int16 ambush_nodes_only;
  unsigned __int16 angles;
  unsigned __int16 any_exposed_nodes_only;
  unsigned __int16 arc_min_pitch;
  unsigned __int16 arc_max_pitch;
  unsigned __int16 arc_min_yaw;
  unsigned __int16 arc_max_yaw;
  unsigned __int16 asleep;
  unsigned __int16 axis;
  unsigned __int16 bad_path;
  unsigned __int16 begin_firing;
  unsigned __int16 unknown_location;
  unsigned __int16 cancel_location;
  unsigned __int16 confirm_location;
  unsigned __int16 deployed_turret;
  unsigned __int16 combat;
  unsigned __int16 cover;
  unsigned __int16 crouch;
  unsigned __int16 current;
  unsigned __int16 damage;
  unsigned __int16 deathshield;
  unsigned __int16 damage_afterdeath;
  unsigned __int16 dead;
  unsigned __int16 death;
  unsigned __int16 disconnect;
  unsigned __int16 death_or_disconnect;
  unsigned __int16 detonate;
  unsigned __int16 direct;
  unsigned __int16 dlight;
  unsigned __int16 done;
  unsigned __int16 dropweapon;
  unsigned __int16 empty;
  unsigned __int16 end_firing;
  unsigned __int16 enter_vehicle;
  unsigned __int16 entity;
  unsigned __int16 exit_vehicle;
  unsigned __int16 exposed_nodes_only;
  unsigned __int16 change_seat;
  unsigned __int16 vehicle_death;
  unsigned __int16 explode;
  unsigned __int16 failed;
  unsigned __int16 free;
  unsigned __int16 fraction;
  unsigned __int16 goal;
  unsigned __int16 goal_changed;
  unsigned __int16 goal_yaw;
  unsigned __int16 grenade;
  unsigned __int16 grenadedanger;
  unsigned __int16 grenade_flee;
  unsigned __int16 grenade_fire;
  unsigned __int16 grenade_launcher_fire;
  unsigned __int16 grenade_pullback;
  unsigned __int16 grenade_throwback;
  unsigned __int16 stationary;
  unsigned __int16 grenade_stuck;
  unsigned __int16 grenade_bounce;
  unsigned __int16 hero;
  unsigned __int16 info_notnull;
  unsigned __int16 invisible;
  unsigned __int16 j_gun;
  unsigned __int16 key1;
  unsigned __int16 key2;
  unsigned __int16 killanimscript;
  unsigned __int16 left;
  unsigned __int16 left_tread;
  unsigned __int16 light;
  unsigned __int16 missile_fire;
  unsigned __int16 missile_boost;
  unsigned __int16 movedone;
  unsigned __int16 multikill;
  unsigned __int16 next_node;
  unsigned __int16 no_cover;
  unsigned __int16 only_cover;
  unsigned __int16 noclass;
  unsigned __int16 node;
  unsigned __int16 noncombat;
  unsigned __int16 none;
  unsigned __int16 normal;
  unsigned __int16 origin;
  unsigned __int16 over;
  unsigned __int16 player;
  unsigned __int16 point_relative;
  unsigned __int16 position;
  unsigned __int16 projectile_impact;
  unsigned __int16 prone;
  unsigned __int16 result;
  unsigned __int16 right;
  unsigned __int16 right_tread;
  unsigned __int16 tank_armor;
  unsigned __int16 reload;
  unsigned __int16 reload_start;
  unsigned __int16 rocket;
  unsigned __int16 rotatedone;
  unsigned __int16 script_brushmodel;
  unsigned __int16 script_model;
  unsigned __int16 script_origin;
  unsigned __int16 snd_enveffectsprio_level;
  unsigned __int16 snd_enveffectsprio_shellshock;
  unsigned __int16 snd_busvolprio_holdbreath;
  unsigned __int16 snd_busvolprio_pain;
  unsigned __int16 snd_busvolprio_shellshock;
  unsigned __int16 stand;
  unsigned __int16 suppression;
  unsigned __int16 suppression_end;
  unsigned __int16 surfacetype;
  unsigned __int16 tag_aim_pitch;
  unsigned __int16 tag_aim;
  unsigned __int16 tag_aim_animated;
  unsigned __int16 tag_brass;
  unsigned __int16 tag_brass1;
  unsigned __int16 tag_brass_2;
  unsigned __int16 tag_butt;
  unsigned __int16 tag_clip;
  unsigned __int16 tag_flash;
  unsigned __int16 tag_explosive;
  unsigned __int16 tag_flash1;
  unsigned __int16 tag_flash2;
  unsigned __int16 tag_flash3;
  unsigned __int16 tag_flash4;
  unsigned __int16 tag_flash_alt;
  unsigned __int16 tag_fx;
  unsigned __int16 tag_inhand;
  unsigned __int16 tag_knife_attach;
  unsigned __int16 tag_knife_fx;
  unsigned __int16 tag_bayonet;
  unsigned __int16 tag_laser;
  unsigned __int16 tag_origin;
  unsigned __int16 tag_weapon;
  unsigned __int16 tag_weapon1;
  unsigned __int16 tag_player;
  unsigned __int16 tag_camera;
  unsigned __int16 tag_weapon_right;
  unsigned __int16 tag_weapon_left;
  unsigned __int16 tag_stowed_back;
  unsigned __int16 tag_weapon_chest;
  unsigned __int16 tag_gasmask;
  unsigned __int16 tag_gasmask2;
  unsigned __int16 tag_sync;
  unsigned __int16 tag_wake;
  unsigned __int16 target_script_trigger;
  unsigned __int16 team3;
  unsigned __int16 team_changed;
  unsigned __int16 tempEntity;
  unsigned __int16 top;
  unsigned __int16 touch;
  unsigned __int16 trigger;
  unsigned __int16 trigger_use;
  unsigned __int16 trigger_use_touch;
  unsigned __int16 trigger_damage;
  unsigned __int16 trigger_lookat;
  unsigned __int16 trigger_radius;
  unsigned __int16 trigger_box;
  unsigned __int16 trigger_box_use;
  unsigned __int16 trigger_radius_use;
  unsigned __int16 truck_cam;
  unsigned __int16 turret_return_default_pos;
  unsigned __int16 turret_scan_start;
  unsigned __int16 turret_scan_stop;
  unsigned __int16 turret_target_aquired;
  unsigned __int16 turret_target_lost;
  unsigned __int16 turret_tow_fire;
  unsigned __int16 turret_tow_unlink;
  unsigned __int16 weapon_change_on_turret;
  unsigned __int16 weapon_change;
  unsigned __int16 weapon_change_complete;
  unsigned __int16 weapon_raising;
  unsigned __int16 weapon_fired;
  unsigned __int16 weapon_melee;
  unsigned __int16 weapon_switch_started;
  unsigned __int16 raise_riotshield;
  unsigned __int16 deploy_riotshield;
  unsigned __int16 pickup_riotshield;
  unsigned __int16 worldspawn;
  unsigned __int16 flashbang;
  unsigned __int16 flash;
  unsigned __int16 smoke;
  unsigned __int16 night_vision_on;
  unsigned __int16 night_vision_off;
  unsigned __int16 back;
  unsigned __int16 back_low;
  unsigned __int16 back_mid;
  unsigned __int16 back_up;
  unsigned __int16 head;
  unsigned __int16 j_mainroot;
  unsigned __int16 neck;
  unsigned __int16 pelvis;
  unsigned __int16 j_head;
  unsigned __int16 purchased;
  unsigned __int16 for_sale;
  unsigned __int16 wrong_era;
  unsigned __int16 blacklisted;
  unsigned __int16 locked;
  unsigned __int16 mod_unknown;
  unsigned __int16 mod_pistol_bullet;
  unsigned __int16 mod_rifle_bullet;
  unsigned __int16 mod_grenade;
  unsigned __int16 mod_grenade_splash;
  unsigned __int16 mod_projectile;
  unsigned __int16 mod_projectile_splash;
  unsigned __int16 mod_melee;
  unsigned __int16 mod_bayonet;
  unsigned __int16 mod_head_shot;
  unsigned __int16 mod_crush;
  unsigned __int16 mod_telefrag;
  unsigned __int16 mod_falling;
  unsigned __int16 mod_suicide;
  unsigned __int16 mod_trigger_hurt;
  unsigned __int16 mod_explosive;
  unsigned __int16 mod_impact;
  unsigned __int16 mod_burned;
  unsigned __int16 mod_hit_by_object;
  unsigned __int16 mod_drown;
  unsigned __int16 mod_gas;
  unsigned __int16 face;
  unsigned __int16 face_casual;
  unsigned __int16 face_alert;
  unsigned __int16 face_cqb;
  unsigned __int16 face_running;
  unsigned __int16 face_shoot_single;
  unsigned __int16 face_shoot_burst;
  unsigned __int16 face_melee;
  unsigned __int16 face_react;
  unsigned __int16 face_talk;
  unsigned __int16 face_talk_long;
  unsigned __int16 face_pain;
  unsigned __int16 face_death;
  unsigned __int16 melee;
  unsigned __int16 script_vehicle;
  unsigned __int16 script_vehicle_collision;
  unsigned __int16 script_vehicle_corpse;
  unsigned __int16 turret_fire;
  unsigned __int16 turret_on_target;
  unsigned __int16 gunner_turret_on_target;
  unsigned __int16 gunner_turret_overheat;
  unsigned __int16 gunner_turret_stop_overheat;
  unsigned __int16 turret_not_on_target;
  unsigned __int16 turret_on_vistarget;
  unsigned __int16 turret_no_vis;
  unsigned __int16 turret_rotate_stopped;
  unsigned __int16 turret_rotate_moving;
  unsigned __int16 turret_deactivate;
  unsigned __int16 turretstatechange;
  unsigned __int16 turretownerchange;
  unsigned __int16 reached_node;
  unsigned __int16 reached_end_node;
  unsigned __int16 reached_wait_node;
  unsigned __int16 reached_wait_speed;
  unsigned __int16 near_goal;
  unsigned __int16 veh_collision;
  unsigned __int16 veh_predictedcollision;
  unsigned __int16 veh_inair;
  unsigned __int16 veh_landed;
  unsigned __int16 veh_suspension_limit_activated;
  unsigned __int16 veh_engine_stutter;
  unsigned __int16 veh_ejectoccupants;
  unsigned __int16 veh_heightmesh_max;
  unsigned __int16 veh_heightmesh_min;
  unsigned __int16 veh_stuck;
  unsigned __int16 script_camera;
  unsigned __int16 begin;
  unsigned __int16 jumpcut;
  unsigned __int16 playerBreathInSound;
  unsigned __int16 playerBreathGaspSound;
  unsigned __int16 playerBreathOutSound;
  unsigned __int16 mantlesoundplayer;
  unsigned __int16 meleeswipesoundplayer;
  unsigned __int16 dtplandsoundplayer;
  unsigned __int16 curve_nodehit;
  unsigned __int16 curve_start;
  unsigned __int16 curve_end;
  unsigned __int16 asphalt;
  unsigned __int16 bark;
  unsigned __int16 brick;
  unsigned __int16 carpet;
  unsigned __int16 ceramic;
  unsigned __int16 cloth;
  unsigned __int16 concrete;
  unsigned __int16 cushion;
  unsigned __int16 dirt;
  unsigned __int16 flesh;
  unsigned __int16 foliage;
  unsigned __int16 fruit;
  unsigned __int16 glass;
  unsigned __int16 grass;
  unsigned __int16 gravel;
  unsigned __int16 ice;
  unsigned __int16 metal;
  unsigned __int16 mud;
  unsigned __int16 paintedmetal;
  unsigned __int16 paper;
  unsigned __int16 plaster;
  unsigned __int16 plastic;
  unsigned __int16 rock;
  unsigned __int16 rubber;
  unsigned __int16 sand;
  unsigned __int16 snow;
  unsigned __int16 water;
  unsigned __int16 wood;
  unsigned __int16 tag_enter_driver;
  unsigned __int16 tag_enter_gunner1;
  unsigned __int16 tag_enter_gunner2;
  unsigned __int16 tag_enter_gunner3;
  unsigned __int16 tag_enter_gunner4;
  unsigned __int16 tag_enter_passenger1;
  unsigned __int16 tag_enter_passenger2;
  unsigned __int16 tag_enter_passenger3;
  unsigned __int16 tag_enter_passenger4;
  unsigned __int16 tag_driver;
  unsigned __int16 tag_passenger1;
  unsigned __int16 tag_passenger2;
  unsigned __int16 tag_passenger3;
  unsigned __int16 tag_passenger4;
  unsigned __int16 tag_passenger5;
  unsigned __int16 tag_passenger6;
  unsigned __int16 tag_gunner1;
  unsigned __int16 tag_gunner2;
  unsigned __int16 tag_gunner3;
  unsigned __int16 tag_gunner4;
  unsigned __int16 tag_gunner_barrel1;
  unsigned __int16 tag_gunner_barrel2;
  unsigned __int16 tag_gunner_barrel3;
  unsigned __int16 tag_gunner_barrel4;
  unsigned __int16 tag_gunner_turret1;
  unsigned __int16 tag_gunner_turret2;
  unsigned __int16 tag_gunner_turret3;
  unsigned __int16 tag_gunner_turret4;
  unsigned __int16 tag_flash_gunner[8];
  unsigned __int16 tag_gunner_brass1;
  unsigned __int16 tag_gunner_brass1a;
  unsigned __int16 tag_gunner_brass2;
  unsigned __int16 tag_gunner_brass2a;
  unsigned __int16 tag_gunner_hands1;
  unsigned __int16 tag_wheel_front_left;
  unsigned __int16 tag_wheel_front_right;
  unsigned __int16 tag_wheel_back_left;
  unsigned __int16 tag_wheel_back_right;
  unsigned __int16 tag_wheel_middle_left;
  unsigned __int16 tag_wheel_middle_right;
  unsigned __int16 tag_wheel_front;
  unsigned __int16 tag_wheel_back;
  unsigned __int16 tag_main_rotor;
  unsigned __int16 tag_tail_rotor;
  unsigned __int16 tag_main_rotor_blur;
  unsigned __int16 tag_main_rotor_static;
  unsigned __int16 tag_tail_rotor_blur;
  unsigned __int16 tag_tail_rotor_static;
  unsigned __int16 tag_rotor_fl_arm;
  unsigned __int16 tag_rotor_fr_arm;
  unsigned __int16 tag_rotor_rl_arm;
  unsigned __int16 tag_rotor_rr_arm;
  unsigned __int16 tag_antenna1;
  unsigned __int16 tag_antenna2;
  unsigned __int16 host_sucks_end_game;
  unsigned __int16 freelook;
  unsigned __int16 localplayers;
  unsigned __int16 tag_enter_right;
  unsigned __int16 tag_enter_left;
  unsigned __int16 tag_enter_back;
  unsigned __int16 tag_popout;
  unsigned __int16 tag_body;
  unsigned __int16 tag_turret;
  unsigned __int16 tag_turret_base;
  unsigned __int16 tag_barrel;
  unsigned __int16 tag_barrel_recoil;
  unsigned __int16 tag_engine_left;
  unsigned __int16 tag_engine_right;
  unsigned __int16 tag_spin;
  unsigned __int16 tag_minigun_right_barrel;
  unsigned __int16 front_left;
  unsigned __int16 front_right;
  unsigned __int16 back_left;
  unsigned __int16 back_right;
  unsigned __int16 middle_left;
  unsigned __int16 middle_right;
  unsigned __int16 stuck_to_player;
  unsigned __int16 stuck_to_shield;
  unsigned __int16 auto_ai;
  unsigned __int16 auto_nonai;
  unsigned __int16 manual;
  unsigned __int16 manual_ai;
  unsigned __int16 scavenger;
  unsigned __int16 neutral;
  unsigned __int16 team4;
  unsigned __int16 team5;
  unsigned __int16 team6;
  unsigned __int16 team7;
  unsigned __int16 team8;
  unsigned __int16 auto_change;
  unsigned __int16 call_vote;
  unsigned __int16 intermission;
  unsigned __int16 manual_change;
  unsigned __int16 menuresponse;
  unsigned __int16 pistol;
  unsigned __int16 plane_waypoint;
  unsigned __int16 playing;
  unsigned __int16 spectator;
  unsigned __int16 spectator_cycle;
  unsigned __int16 vote;
  unsigned __int16 sprint_begin;
  unsigned __int16 sprint_end;
  unsigned __int16 tag_gunner_pov;
  unsigned __int16 tag_flamer_pilot_light;
  unsigned __int16 tag_fx_front;
  unsigned __int16 tag_fx_right;
  unsigned __int16 tag_fx_left;
  unsigned __int16 flared_or_tabuned_death;
  unsigned __int16 destroyed_vehicle;
  unsigned __int16 vehicle_driver;
  unsigned __int16 died_in_turret;
  unsigned __int16 force_crouch;
  unsigned __int16 trigger_use_doubletap;
  unsigned __int16 doubletap_detonate;
  unsigned __int16 dtp_through_glass;
  unsigned __int16 dtp_start;
  unsigned __int16 dtp_end;
  unsigned __int16 mantle_start;
  unsigned __int16 moon_gravity;
  unsigned __int16 draw;
  unsigned __int16 remote_revive;
  unsigned __int16 begin_custom_anim;
  unsigned __int16 deathplant;
  unsigned __int16 zombie;
  unsigned __int16 zombie_dog;
  unsigned __int16 _custom;
  unsigned __int16 angle_deltas;
  unsigned __int16 bigdog;
  unsigned __int16 bulletwhizby;
  unsigned __int16 dog;
  unsigned __int16 enemy;
  unsigned __int16 enemy_visible;
  unsigned __int16 face_angle;
  unsigned __int16 face_current;
  unsigned __int16 face_default;
  unsigned __int16 face_direction;
  unsigned __int16 face_enemy;
  unsigned __int16 face_enemy_or_motion;
  unsigned __int16 face_enemy_or_motion_sidestep;
  unsigned __int16 face_goal;
  unsigned __int16 face_motion;
  unsigned __int16 face_point;
  unsigned __int16 gravity;
  unsigned __int16 groundEntChanged;
  unsigned __int16 gunshot;
  unsigned __int16 obstacle;
  unsigned __int16 movemode;
  unsigned __int16 node_out_of_range;
  unsigned __int16 node_relinquished;
  unsigned __int16 node_taken;
  unsigned __int16 node_not_safe;
  unsigned __int16 noclip;
  unsigned __int16 nogravity;
  unsigned __int16 slide;
  unsigned __int16 nophysics;
  unsigned __int16 pain;
  unsigned __int16 react;
  unsigned __int16 pos_deltas;
  unsigned __int16 run;
  unsigned __int16 runto_arrived;
  unsigned __int16 silenced_shot;
  unsigned __int16 spawned;
  unsigned __int16 start_move;
  unsigned __int16 stop;
  unsigned __int16 stop_soon;
  unsigned __int16 tag_eye;
  unsigned __int16 walk;
  unsigned __int16 world;
  unsigned __int16 zonly_physics;
  unsigned __int16 down;
  unsigned __int16 j_ankle_le;
  unsigned __int16 j_ankle_ri;
  unsigned __int16 j_ball_le;
  unsigned __int16 j_ball_ri;
  unsigned __int16 j_palm_le;
  unsigned __int16 j_palm_ri;
  unsigned __int16 j_elbow_le;
  unsigned __int16 j_wrist_le;
  unsigned __int16 broken;
  unsigned __int16 destructible;
  unsigned __int16 destructible_base_piece_death;
  unsigned __int16 breakafter;
  unsigned __int16 snapacknowledged;
  unsigned __int16 snap_processed;
  unsigned __int16 j_barrel;
  unsigned __int16 j_counter;
  unsigned __int16 j_dial_left;
  unsigned __int16 j_dial_right;
  unsigned __int16 j_spinnerRF;
  unsigned __int16 j_spinnerLF;
  unsigned __int16 j_spinnerR1;
  unsigned __int16 j_spinnerL1;
  unsigned __int16 j_spinnerR2;
  unsigned __int16 j_spinnerL2;
  unsigned __int16 j_spinnerR3;
  unsigned __int16 j_spinnerL3;
  unsigned __int16 ca_disconnected;
  unsigned __int16 ca_cinematic;
  unsigned __int16 ca_uicinematic;
  unsigned __int16 ca_logo;
  unsigned __int16 ca_connecting;
  unsigned __int16 ca_challenging;
  unsigned __int16 ca_connected;
  unsigned __int16 ca_sendingstats;
  unsigned __int16 ca_loading;
  unsigned __int16 ca_primed;
  unsigned __int16 ca_active;
  unsigned __int16 ca_map_restart;
  unsigned __int16 orientdone;
  unsigned __int16 menuchanged;
  unsigned __int16 unlink;
  unsigned __int16 init;
  unsigned __int16 move;
  unsigned __int16 traverse;
  unsigned __int16 idle;
  unsigned __int16 move_run;
  unsigned __int16 move_sprint;
  unsigned __int16 move_stumpy;
  unsigned __int16 move_start;
  unsigned __int16 move_stop;
  unsigned __int16 move_walk;
  unsigned __int16 move_turn_left;
  unsigned __int16 move_turn_right;
  unsigned __int16 move_run_turn_left;
  unsigned __int16 move_run_turn_right;
  unsigned __int16 move_turn_around_left;
  unsigned __int16 move_turn_around_right;
  unsigned __int16 move_run_turn_around_left;
  unsigned __int16 move_run_turn_around_right;
  unsigned __int16 move_attack;
  unsigned __int16 nopatrol;
  unsigned __int16 stop_idle;
  unsigned __int16 stop_attackidle;
  unsigned __int16 stop_attackidle_bark;
  unsigned __int16 stop_attackidle_growl;
  unsigned __int16 pain_main;
  unsigned __int16 pain_front;
  unsigned __int16 pain_back;
  unsigned __int16 pain_left;
  unsigned __int16 pain_right;
  unsigned __int16 pain_run_front;
  unsigned __int16 pain_run_back;
  unsigned __int16 pain_run_left;
  unsigned __int16 pain_run_right;
  unsigned __int16 death_front;
  unsigned __int16 death_back;
  unsigned __int16 death_left;
  unsigned __int16 death_right;
  unsigned __int16 flashed;
  unsigned __int16 combat_attackidle;
  unsigned __int16 combat_attackidle_bark;
  unsigned __int16 combat_attackidle_growl;
  unsigned __int16 combat_attack_run;
  unsigned __int16 combat_attack_player;
  unsigned __int16 combat_attack_player_early;
  unsigned __int16 combat_attack_player_lunge;
  unsigned __int16 combat_attack_player_close_range;
  unsigned __int16 combat_attack_miss;
  unsigned __int16 combat_attack_miss_left;
  unsigned __int16 combat_attack_miss_right;
  unsigned __int16 combat_player_neck_snap;
  unsigned __int16 combat_player_neck_miss;
  unsigned __int16 traverse_jump_up_40;
  unsigned __int16 traverse_jump_up_80;
  unsigned __int16 traverse_jump_down_40;
  unsigned __int16 traverse_jump_down_80;
  unsigned __int16 traverse_wallhop;
  unsigned __int16 traverse_window;
  unsigned __int16 traverse_through_hole_42;
  unsigned __int16 zombie_climb_chain;
  unsigned __int16 zombie_jump_down_40;
  unsigned __int16 zombie_jump_down_48;
  unsigned __int16 zombie_jump_down_72;
  unsigned __int16 zombie_jump_down_96;
  unsigned __int16 zombie_jump_down_120;
  unsigned __int16 zombie_jump_down_127;
  unsigned __int16 zombie_jump_down_184;
  unsigned __int16 zombie_jump_down_190;
  unsigned __int16 zombie_jump_down_222;
  unsigned __int16 zombie_jump_down_240;
  unsigned __int16 zombie_jump_down_286;
  unsigned __int16 zombie_jump_down_386;
  unsigned __int16 zombie_jump_up_222;
  unsigned __int16 zombie_jump_up_to_climb;
  unsigned __int16 zombie_jump_up_to_climb_coast;
  unsigned __int16 zombie_ladder_up;
  unsigned __int16 zombie_lighthouse_crawl_down;
  unsigned __int16 zombie_mantle_over_40;
  unsigned __int16 zombie_quad_vent_jump_down;
  unsigned __int16 zombie_wall_crawl_drop;
  unsigned __int16 zombie_wall_crawl_drop_quick;
  unsigned __int16 zombie_ground_rise;
  unsigned __int16 zombie_ground_rise_death;
  unsigned __int16 zombie_death;
  unsigned __int16 zombie_run_melee;
  unsigned __int16 zombie_walk_melee;
  unsigned __int16 zombie_crawl_melee;
  unsigned __int16 zombie_stumpy_melee;
  unsigned __int16 zombie_window_melee;
  unsigned __int16 zombie_board_tear;
  unsigned __int16 zombie_jump_on_bus;
  unsigned __int16 zombie_board_tear_bus;
  unsigned __int16 zombie_climbin_bus;
  unsigned __int16 zombie_bus_window_idle;
  unsigned __int16 zombie_bus_window_melee;
  unsigned __int16 swimming_begin;
  unsigned __int16 swimming_end;
  unsigned __int16 snd_boat_engine;
  unsigned __int16 snd_boat_bow_l;
  unsigned __int16 snd_boat_bow_r;
  unsigned __int16 gv_event;
  unsigned __int16 gv_action;
  unsigned __int16 gv_target;
  unsigned __int16 gv_parameter;
  unsigned __int16 gv_condlhs;
  unsigned __int16 gv_condop;
  unsigned __int16 gv_condrhs;
  unsigned __int16 basic_score;
  unsigned __int16 perk_score;
  unsigned __int16 challenge_score;
  unsigned __int16 intel_score;
  unsigned __int16 difficulty_score;
  unsigned __int16 total_score;
  unsigned __int16 freeze;
  unsigned __int16 up;
  unsigned __int16 liveupdate;
  unsigned __int16 respawn;
  unsigned __int16 dtp_land;
  unsigned __int16 hidden;
  unsigned __int16 fake_fire;
  unsigned __int16 sprint;
  unsigned __int16 crouchrun;
  unsigned __int16 crouchwalk;
  unsigned __int16 entityshutdown;
  unsigned __int16 guidance_none;
  unsigned __int16 guidance_sidewinder;
  unsigned __int16 guidance_hellfire;
  unsigned __int16 guidance_javelin;
  unsigned __int16 guidance_ballistic;
  unsigned __int16 guidance_wireguided;
  unsigned __int16 guidance_tvguided;
  unsigned __int16 guidance_drone;
  unsigned __int16 guidance_heatseeking;
  unsigned __int16 lightbehavior_firecaster;
  unsigned __int16 lightbehavior_fire_flicker;
  unsigned __int16 lightbehavior_electrical_flicker;
  unsigned __int16 lightbehavior_flicker_then_stop;
  unsigned __int16 lightbehavior_generic_double_strobe;
  unsigned __int16 lightbehavior_generic_strobe;
  unsigned __int16 lightbehavior_light_off;
  unsigned __int16 lightbehavior_light_solid;
  unsigned __int16 lightbehavior_television;
  unsigned __int16 lightbehavior_generic_flickering;
  unsigned __int16 lightbehavior_generic_pulsing;
  unsigned __int16 lightbehavior_explode_then_ficker;
  unsigned __int16 mixerbehavior_robot;
  unsigned __int16 footstep_left_large;
  unsigned __int16 footstep_left_small;
  unsigned __int16 footstep_right_large;
  unsigned __int16 footstep_right_small;
  unsigned __int16 footstep_left;
  unsigned __int16 footstep_right;
  unsigned __int16 footstep_front_left;
  unsigned __int16 footstep_front_right;
  unsigned __int16 footstep_rear_left;
  unsigned __int16 footstep_rear_right;
  unsigned __int16 footstep_front_left_small;
  unsigned __int16 footstep_front_right_small;
  unsigned __int16 footstep_rear_left_small;
  unsigned __int16 footstep_rear_right_small;
  unsigned __int16 footstep_front_left_shuffle;
  unsigned __int16 footstep_front_right_shuffle;
  unsigned __int16 footstep_rear_left_shuffle;
  unsigned __int16 footstep_rear_right_shuffle;
  unsigned __int16 footstep_front_left_scrape;
  unsigned __int16 footstep_front_right_scrape;
  unsigned __int16 footstep_rear_left_scrape;
  unsigned __int16 footstep_rear_right_scrape;
  unsigned __int16 dogstep_lf;
  unsigned __int16 dogstep_rf;
  unsigned __int16 dogstep_lr;
  unsigned __int16 dogstep_rr;
  unsigned __int16 jnt_f_l_ankle;
  unsigned __int16 jnt_f_r_ankle;
  unsigned __int16 jnt_r_l_ankle;
  unsigned __int16 jnt_r_r_ankle;
  unsigned __int16 jnt_f_l_knee_upper_dmg;
  unsigned __int16 jnt_f_r_knee_upper_dmg;
  unsigned __int16 jnt_r_l_knee_upper_dmg;
  unsigned __int16 jnt_r_r_knee_upper_dmg;
  unsigned __int16 open;
  unsigned __int16 closed;
  unsigned __int16 opening;
  unsigned __int16 closing;
  unsigned __int16 targetted_by_zombie;
  unsigned __int16 actor;
  unsigned __int16 actor_spawner;
  unsigned __int16 actor_corpse;
  unsigned __int16 cf_int;
  unsigned __int16 cf_float;
  unsigned __int16 ambient_package;
  unsigned __int16 save_restore;
  unsigned __int16 difficulty_change;
  unsigned __int16 tag_board_1;
  unsigned __int16 tag_board_2;
  unsigned __int16 tag_board_3;
  unsigned __int16 tag_board_4;
  unsigned __int16 tag_board_5;
  unsigned __int16 tag_board_6;
  unsigned __int16 tag_control_dial_1;
  unsigned __int16 tag_control_dial_2;
  unsigned __int16 tag_control_dial_3;
};

struct IgnoreEntParams
{
  int baseEntity;
  int parentEntity;
  bool ignoreSelf;
  bool ignoreParent;
  bool ignoreSiblings;
  bool ignoreChildren;
};

class col_context_t
{
public:
    int mask;
    const col_prim_t* prims;
    int nprims;
    IgnoreEntParams* ignoreEntParams;
    int passEntityNum0;
    int passEntityNum1;
    int staticmodels;
    int locational;
    unsigned __int8* priorityMap;
    int(__cdecl* collide_entity_func)(int);
};


class __declspec(align(16)) trace_t
{
public:
    hybrid_vector normal;
    float fraction;
    int sflags;
    int cflags;
    TraceHitType hitType;
    unsigned __int16 hitId;
    unsigned __int16 modelIndex;
    unsigned __int16 partName;
    unsigned __int16 boneIndex;
    unsigned __int16 partGroup;
    bool allsolid;
    bool startsolid;
    bool walkable;
    cStaticModel_s* staticModel;
    int hitPartition;
};


struct pmoveHandler_t
{
  void (__cdecl *trace)(trace_t *, const vec3_t *, const vec3_t *, const vec3_t *, const vec3_t *, int, int, col_context_t *);
  void (__cdecl *playerEvent)(int, int);
  bool (__cdecl *getEntityOriginAngles)(LocalClientNum_t, int, vec3_t *, vec3_t *);
  bool (__cdecl *getEntityVelocity)(LocalClientNum_t, int, vec3_t *);
  unsigned __int16 (__cdecl *getVehicleTypeString)(ClientNum_t, int, VehicleDef **);
  void (__cdecl *entityLinkFromPMove)(int, int, const int);
  Weapon (__cdecl *getPlayerWeapon)(const playerState_s *, const LocalClientNum_t);
  void (__cdecl *setVehDriverInputs)(const LocalClientNum_t, playerState_s *, usercmd_s *);
  int (__cdecl *isEntWalkable)(const LocalClientNum_t, const int);
};

class __declspec(align(2)) TaskRecord
{
public:
    TaskRecord* next;
    const TaskDefinition* definition;
    TaskState state;
    ControllerIndex_t controllerIndex;
    unsigned int lastPoll;
    unsigned int lastPollMS;
    unsigned int id;
    TaskGroup group;
    int startMS;
    int timeOut;
    int timeIn;
    //bdReference<bdRemoteTask> remoteTask;
    TaskRecord* nestedTask;
    void* payload;
    bool isChildTask;
    bool cancelImmediately;
    bool skipAllCallbacksAfterComplete;
};

const struct __declspec(align(8)) TaskDefinition
{
  unsigned __int64 category;
  const char *name;
  int payloadSize;
  bool (__cdecl *completed_callback)(TaskRecord *);
  bool (__cdecl *failure_callback)(TaskRecord *);
  LocalTaskState (__cdecl *localTask)(TaskRecord *);
};

struct GfxCodeImageRenderTargetFields
{
  unsigned __int64 renderTargetId : 8;
  unsigned __int64 enable : 1;
  unsigned __int64 fbufferTexture : 3;
  unsigned __int64 filtering : 20;
};

struct GfxPrimStats
{
  int counters[8];
};

struct GfxDebugPoly
{
  vec4_t faceColor;
  bool faceDepthTest;
  vec4_t edgeColor;
  bool edgeDepthTest;
  int firstVert;
  int vertCount;
};

struct GfxSunShadowBoundingPoly
{
  vec2_t snapDelta;
  int pointCount;
  vec2_t points[9];
  int pointIsNear[9];
};

struct TxaaCtxDX
{
  unsigned int pad[256];
};

struct GfxLightingInfo
{
  unsigned __int8 primaryLightIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int16 lightingHandle;
};

struct PolySet
{
  vec3_t *verts;
  int vertCount;
  int vertLimit;
  GfxDebugPoly *polys;
  int polyCount;
  int polyLimit;
};

struct trDebugSphere_t
{
  vec3_t center;
  float radius;
  int sideCount;
  vec4_t color;
  int depthTest;
};

struct GfxStageStats
{
  bool used;
  GfxPrimStats prims[10];
};

struct GfxRenderTargetSurface
{
  ID3D11RenderTargetView *color;
  ID3D11DepthStencilView *depthStencil;
};

struct __declspec(align(4)) GfxRenderTarget
{
  GfxImage *image;
  GfxRenderTargetSurface surface;
  unsigned __int16 width;
  unsigned __int16 height;
  bool cleared;
};

union GfxCodeImageRenderTarget
{
  GfxCodeImageRenderTargetFields fields;
  unsigned int packed;
};

struct GfxScaledPlacement
{
  GfxPlacement base;
  float scale;
};

struct ScreenPlacement
{
  vec2_t scaleVirtualToReal;
  vec2_t scaleVirtualToFull;
  vec2_t scaleRealToVirtual;
  vec2_t virtualViewableMin;
  vec2_t virtualViewableMax;
  vec2_t virtualTweakableMin;
  vec2_t virtualTweakableMax;
  vec2_t realViewportBase;
  vec2_t realViewportSize;
  vec2_t realViewportMid;
  vec2_t realViewableMin;
  vec2_t realViewableMax;
  vec2_t realTweakableMin;
  vec2_t realTweakableMax;
  vec2_t subScreen;
  float hudSplitscreenScale;
};

struct GfxSceneDef
{
  int time;
  float floatTime;
  vec3_t viewOffset;
};

struct GfxUI3DBackend
{
  GfxViewport viewport[6];
  vec4_t uvSetup[6];
  int renderCmdCount[6];
  int renderCmdThatDrawsSomethingCount[6];
  int totalRenderCmds;
  int totalRenderCmdsThatDrawsSomething;
  float blurRadius;
};

struct FxCodeMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 argOffset;
  unsigned __int16 argCount;
  GfxLightingInfo lightingInfo;
};

struct WindState
{
  vec3_t windDirection;
  float windSpringAngle[16];
  vec3_t windRustleAngle[16];
  float speed;
};

struct GfxCmdHeader
{
  unsigned __int16 byteCount;
  unsigned __int8 id;
  unsigned __int8 ui3d;
};

class /*__cppobj*/ bdVoteRankStatsInfo : bdStatsInfo
{
public:
  unsigned __int64 m_fileOwnerID;
  char m_fileOwnerName[65];
  unsigned int m_totalVotes;
  unsigned int m_avgVoteValue;
  unsigned int m_createTime;
};

struct GfxVertexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int8 *verts;
};

struct GfxMatrix
{
  vec4_t m[4];
};

struct __declspec(align(16)) GfxViewParms
{
  GfxMatrix viewMatrix;
  GfxMatrix projectionMatrix;
  GfxMatrix viewProjectionMatrix;
  GfxMatrix inverseViewProjectionMatrix;
  vec4_t origin;
  vec3_t axis[3];
  float depthHackNearClip;
  float zNear;
  float zFar;
  int bspCellIndex;
};

struct __declspec(align(8)) GfxSunShadowPartition
{
  GfxViewParms shadowViewParms;
  int partitionIndex;
  GfxViewport viewport;
  GfxSunShadowBoundingPoly boundingPoly;
};

struct GfxIndexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

struct GfxAabbTree
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 childCount;
  unsigned __int16 surfaceCount;
  unsigned __int16 startSurfIndex;
  unsigned __int16 smodelIndexCount;
  unsigned __int16 *smodelIndexes;
  int childrenOffset;
};

struct GfxDrawPrimArgs
{
  int vertexCount;
  int triCount;
  int baseIndex;
};

struct GfxMeshData
{
  GfxMeshData *thisPtr;
  unsigned int indexCount;
  unsigned int totalIndexCount;
  ID3D11Buffer *ib;
  unsigned __int16 *indices;
  GfxVertexBufferState vb;
  unsigned int vertSize;
};

struct GfxCodeMatrices
{
  GfxMatrix matrix[32];
};

struct GfxEntity
{
  unsigned int renderFxFlags;
  float materialTime;
  float destructibleBurnAmount;
  int textureOverrideIndex;
};

struct FxMarkMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 modelIndex;
  unsigned __int8 modelTypeAndSurf;
  unsigned __int8 pad0;
};

struct GfxBackEndPrimitiveData
{
  int hasSunDirChanged;
};

struct trDebugString_t
{
  vec3_t xyz;
  vec4_t color;
  float scale;
  char text[96];
};

struct trDebugLine_t
{
  vec3_t start;
  vec3_t end;
  vec4_t color;
  int depthTest;
};

struct GfxDebugPlume
{
  vec3_t origin;
  vec4_t color;
  int score;
  int startTime;
  int duration;
};

struct DebugGlobals
{
  PolySet polySet;
  trDebugString_t *strings;
  int stringCount;
  int stringLimit;
  trDebugString_t *externStrings;
  int externStringCount;
  int externMaxStringCount;
  trDebugLine_t *lines;
  int lineCount;
  int lineLimit;
  trDebugLine_t *externLines;
  int externLineCount;
  int externMaxLineCount;
  GfxDebugPlume *plumes;
  int plumeCount;
  int plumeLimit;
  trDebugSphere_t *spheres;
  int sphereCount;
  int sphereLimit;
  trDebugSphere_t *externSpheres;
  int externSphereCount;
  int externMaxSphereCount;
};

struct GfxCmdBuf
{
  ID3D11DeviceContext *device;
  ID3D11CommandList **commandList;
  unsigned __int16 viewIndex;
  unsigned __int16 deviceIndex;
};

struct GfxWindowTarget
{
  HWND__ *hwnd;
  IDXGISwapChain *swapChain;
  ID3D11RenderTargetView *view;
  int width;
  int height;
};

struct GfxTextureOverride
{
  __int16 prev;
  unsigned __int8 type;
  unsigned int dobjModelMask;
  const Material *mat;
  union {
      struct {
          const GfxImage* img1;
          const GfxImage* img2;
      } image;
      struct {
          const Material* mat1;
          const Material* mat2;
      } material;
      struct {
          unsigned int constIdx;
          vec4_t value;
      } shaderConst;
  };
};

struct GfxParticleCloud
{
  GfxScaledPlacement placement;
  vec3_t velDirWorld;
  GfxColor color;
  vec2_t radius;
  unsigned __int16 count;
  unsigned __int16 offset;
  unsigned __int8 gaussian;
  unsigned __int8 pad[3];
};

struct GfxFog
{
  int startTime;
  int finishTime;
  vec4_t color;
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  vec4_t sunFogColor;
  vec3_t sunFogDir;
  float sunFogStartAng;
  float sunFogEndAng;
  float maxDensity;
};

struct GfxCmdArray
{
  unsigned __int8 *cmds;
  int usedTotal;
  int usedCritical;
  GfxCmdHeader *lastCmd;
  int byteSize;
  int warnSize;
  int check;
};

struct GfxPostFxInfo
{
  GfxDepthOfField dof;
  GfxFilm film;
  GfxCompositeFx flameFx;
  GfxReviveFx reviveFx;
  GfxCompositeFx waterSheetingFx;
  GfxDoubleVision doubleVision;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  GfxBloom bloom;
  float bloomExpansionXpos;
  float bloomExpansionYpos;
  float blurRadius;
  float exposureValue;
  float exposureRemap;
  bool useColorControl;
  float colorSaturation;
  float colorTemp;
  float colorHue;
  vec3_t colorScale;
};

struct GfxQuadMeshData
{
  float x;
  float y;
  float width;
  float height;
  GfxMeshData meshData;
};

struct GfxViewRenderControl
{
  unsigned __int8 mainSceneMSAA;
  unsigned __int8 mainScene;
  unsigned __int8 mainSceneFinal;
  unsigned __int8 mainSceneSaved;
  unsigned __int8 extraCamSamplerRenderTarget;
  unsigned __int8 ui3d;
  unsigned int renderingMode;
  unsigned int additionalPostFX;
};

struct GfxQRCodeBackend
{
  vec4_t scale[12];
};

struct __declspec(align(16)) GfxViewInfo
{
  GfxViewParms viewParms;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  GfxSceneDef sceneDef;
  ShadowType dynamicShadowType;
  LocalClientNum_t localClientNum;
  int viewInfoIndex;
  int isRenderingFullScreen;
  int playerTeleported;
  GfxLight visibleLights[4];
  int visibleLightCount;
  vec4_t frustumPlanes[4];
  GfxLightScale charPrimaryLightScale;
  GfxPostFxInfo *postFxInfo;
  const void *cmds;
  float sunVisibility;
  float adsZScale;
  GfxQuadMeshData *fullSceneViewMesh;
  GfxDrawSurfListInfo *drawList;
  GfxCmdBufInput *input;
  unsigned __int8 hdrRenderingMode;
  GfxViewRenderControl sceneComposition;
  GfxUI3DBackend rbUI3D;
  GfxQRCodeBackend rbQRCode;
  bool isExtraCamera;
  int noLodCullOut;
  float lodScaleRigid;
  float lodScaleSkinned;
  float postEmissiveBrightening;
  GfxViewParms weaponViewParms;
  bool sonarRenderTargetInUse;
  float sonarBlur;
  GfxViewParms sonarViewParms;
  bool sonarUseThermalMaterial;
  bool sonarOverrideBlend;
  bool drawInfrared;
  bool drawPostBlur;
  bool drawWaypointsPostBloom;
  int splitscreenBlurEdges;
  bool needResolveOpaque;
  __int16 lutScriptIndex;
  bool drawDarkness;
};

struct GfxDrawSurfListInfo
{
  const GfxDrawSurf *drawSurfs;
  unsigned int drawSurfCount;
  unsigned __int8 baseTechType;
  const GfxViewInfo *viewInfo;
  vec4_t viewOrigin;
  OcclusionReportsMode occlusionReportsMode;
  int cameraView;
  int disableAllShadowTech;
  int needResolve;
};

struct __declspec(align(16)) GfxCmdBufInput
{
  vec4_t consts[211];
  const GfxImage *codeImages[55];
  unsigned __int8 codeImageSamplerStates[55];
  const GfxBackEndData *data;
};

class jqBatchGroup
{
public:
    union {
        struct {
            int QueuedBatchCount;
            int ExecutingBatchCount;
        };
        unsigned __int64 BatchCount;
    };
};

class /*__cppobj*/ GfxWorkerData
{
public:
  int cmdBufValid[33];
  GfxCmdBuf cmdBuf[33];
  jqBatchGroup cmdBufBatchGroup[33];
};

struct GfxSunShadowProjection
{
  float viewMatrix[4][4];
  vec4_t switchPartition;
  vec4_t shadowmapScale;
};

struct GfxSunShadow
{
  GfxMatrix lookupMatrix;
  GfxSunShadowProjection sunProj;
  int sunShadowCount;
  __declspec(align(16)) GfxSunShadowPartition partition[2];
};

struct __declspec(align(16)) GfxSpotShadow
{
  GfxViewParms shadowViewParms;
  GfxMatrix lookupMatrix;
  unsigned __int8 shadowableLightIndex;
  unsigned __int8 flags;
  unsigned __int8 pad[2];
  const GfxLight *light;
  float fade;
  GfxCodeImageRenderTarget spotShadowRenderTarget;
  unsigned __int8 renderTargetId;
  GfxViewport viewport;
  GfxImage *image;
  vec4_t pixelAdjust;
  int clearScreen;
};

struct GfxFrameStats
{
  GfxStageStats stages[16];
  GfxPrimStatsStage currentStage;
  GfxPrimStatsTarget currentTarget;
  struct {
      int gfxEntCount;
      int geoIndexCount;
      int fxIndexCount;
  } counters;
};

struct GfxBackEndData
{
    unsigned __int8 surfsBuffer[262144];
    __declspec(align(128)) FxCodeMeshData codeMeshes[2048];
    __declspec(align(128)) unsigned int primDrawSurfsBuf[65536];
    unsigned __int8 lodData[4][16384];
    GfxViewParms viewParms[9];
    __declspec(align(64)) unsigned __int8 primaryLightTechType[16][2][2][256];
    vec4_t codeMeshArgs[256];
    GfxParticleCloud clouds[256];
    GfxDrawSurf drawSurfs[32768];
    __declspec(align(16)) GfxMeshData* codeMeshPtr;
    __declspec(align(16)) GfxMeshData markMesh;
    __declspec(align(16)) GfxMeshData glassMesh;
    GfxBackEndPrimitiveData prim;
    unsigned __int8 shadowableLightHasShadowMap[255];
    unsigned int frameCount;
    int drawSurfCount;
    volatile int surfPos;
    volatile int gfxEntCount;
    GfxEntity gfxEnts[256];
    volatile int shaderConstantSetCount;
    ShaderConstantSet shaderConstantSets[128];
    volatile int textureOverrideCount;
    GfxTextureOverride textureOverrides[1024];
    volatile int cloudCount;
    volatile int codeMeshCount;
    volatile int codeMeshArgsCount;
    volatile int markMeshCount;
    FxMarkMeshData markMeshes[1536];
    GfxVertexBufferState* skinnedCacheVb;
    volatile int skinnedCacheVertsAllocated;
    GfxIndexBufferState* dynamicIndexBuffer;
    GfxVertexBufferState* dynamicVertexBuffer;
    ID3D11Query* endFence;
    ID3D11Query* endFrameFence;
    unsigned __int8* tempSkinBuf;
    volatile int tempSkinPos;
    int tempSkinSize;
    int viewParmCount;
    GfxFog fogSettings;
    GfxCmdArray* commands;
    unsigned int viewInfoIndex;
    unsigned int viewInfoCount;
    GfxViewInfo* viewInfo;
    GfxWorkerData workerData[4];
    GfxUI3DBackend rbUI3D;
    GfxQRCodeBackend rbQRCode;
    const void* cmds;
    const void* compositingCmds;
    GfxLight sunLight;
    int hasApproxSunDirChanged;
    volatile int primDrawSurfPos;
    unsigned int streamerExecedFrame;
    unsigned int frameLastTransferId;
    jqBatchGroup glassGenerateVertsBatchGroup;
    DebugGlobals debugGlobals;
    unsigned int dualPlaySplitScreenOn;
    unsigned int drawType;
    float eyeOffset;
    int hideMatureContent;
    int splitscreen;
    GfxLight shadowableLights[255];
    unsigned int shadowableLightCount;
    unsigned int emissiveSpotLightIndex;
    GfxLight emissiveSpotLight;
    unsigned int emissiveSpotLightCount;
    int emissiveSpotLightShadowableLightIndex;
    GfxSunShadow sunShadow;
    unsigned int spotShadowCount;
    GfxSpotShadow spotShadows[4];
    WindState gfxWindState;
    GfxFrameStats frameStats;
};

struct GfxCmdBufSourceState
{
  GfxCodeMatrices matrices;
  GfxCmdBufInput input;
  GfxViewParms viewParms;
  GfxMatrix shadowLookupMatrix;
  unsigned __int16 constVersions[243];
  unsigned __int16 matrixVersions[8];
  __declspec(align(16)) vec4_t eyeOffset;
  unsigned int shadowableLightForShadowLookupMatrix;
  const GfxScaledPlacement *objectPlacement;
  const GfxViewParms *viewParms3D;
  unsigned int depthHackFlags;
  GfxScaledPlacement skinnedPlacement;
  int cameraView;
  GfxViewMode viewMode;
  GfxSceneDef sceneDef;
  GfxViewport sceneViewport;
  GfxViewport scissorViewport;
  float materialTime;
  float destructibleBurnAmount;
  unsigned __int8 viewportBehavior;
  int renderTargetWidth;
  int renderTargetHeight;
  bool viewportIsDirty;
  bool scissorEnabled;
  unsigned int shadowableLightIndex;
};

struct GfxLightingSH
{
  vec4_t V0;
  vec4_t V1;
  vec4_t V2;
};

struct mnode_t
{
  unsigned __int16 cellIndex;
  unsigned __int16 rightChildOffset;
};

union CullInfo
{
    struct {
        unsigned __int32 dynamicIndexBufferQwordOffset : 17;
        unsigned __int32 triCount : 15;
    } fields;
  unsigned int packed;
};

struct DxCmdBuf
{
    int isInUse[33];
    ID3D11DeviceContext* context[33];
    ID3D11CommandList* list[33];
};

struct __declspec(align(64)) DxGlobals
{
  HINSTANCE__ *hinst;
  ID3D11Device *device;
  ID3D11DeviceContext *context;
  ID3D11Buffer *constBuffer[4];
  unsigned int vendorId;
  bool adapterNativeIsValid;
  int adapterNativeWidth;
  int adapterNativeHeight;
  int adapterFullscreenWidth;
  int adapterFullscreenHeight;
  bool nvInitialized;
  bool nvStereoActivated;
  void *nvStereoHandle;
  __declspec(align(8)) TxaaCtxDX txaaCtx;
  int adapterIndex;
  bool vidRestart;
  bool needResizeBuffers;
  bool doResizeBuffers;
  bool ignoreResize;
  bool needsShaderWarming;
  int lastMaterialWarmed;
  DXGI_FORMAT depthStencilFormat;
  DxCmdBuf cmdBuf[4];
  unsigned int monitorCount;
  unsigned int displayModeCount[8];
  DXGI_MODE_DESC displayModes[8][512];
  const char *resolutionNameTable[513];
  char modeText[10240];
  const char *monitorResolutionNameTable[8][513];
  char monitorModeText[81920];
  ID3D11Query *fencePool[8];
  unsigned int nextFence;
  int gpuCount;
  void (__cdecl *resolutionCallback)(bool);
  unsigned int multiSampleType;
  unsigned int multiSampleQuality;
  unsigned __int16 sunShadowPartition;
  unsigned __int16 spotShadowPartition;
  ID3D11DepthStencilView *singleSampleDepthStencilSurface;
  int targetWindowIndex;
  int windowCount;
  GfxWindowTarget windows[1];
  IDXGISwapChain *swapChain;
  ID3D11Texture2D *backBuffer;
  ID3D11Query *flushGpuQuery;
  int linearMippedAnisotropy;
  int anisotropyFor2x;
  int anisotropyFor4x;
  int mipFilterMode;
  unsigned int mipBias;
};

struct GfxLightingSHQuantized
{
  unsigned __int16 V0[4];
  unsigned __int16 V1[4];
  unsigned __int16 V2[4];
};

struct __declspec(align(4)) GfxGlobals
{
  bool startedRenderThread;
  bool isMultiplayer;
  bool isZombie;
  volatile int endFrameFence;
  bool isRenderingRemoteUpdate;
  volatile int screenUpdateNotify;
  volatile int remoteScreenUpdateNesting;
  volatile int remoteScreenUpdateInGame;
  volatile int remoteScreenUpdateLUI;
  unsigned __int8 remoteScreenLastSceneResolveTarget;
  int backEndFrameCount;
  unsigned __int8 frameBuffer;
};

struct __declspec(align(16)) GfxCmdBufPrimState
{
    union {
        ID3D11DeviceContext* device;
        ID3D11DeviceContext* localDevice;
    };
  ID3D11Buffer *indexBuffer;
  MaterialVertexDeclType vertDeclType;
  struct {
      unsigned int strides[3];
      ID3D11Buffer* vbs[3];
      unsigned int offsets[3];
  } streams;
  ID3D11InputLayout *vertexDecl;
  __m128 constantsBuffer[262];
  char *constants[4];
  bool constantsDirty[4];
  GfxFrameStats frameStats;
};

union $C75CE187B3A6FB10EFB2D4D06A716EB7
{
  const MaterialPass *localPass;
  const MaterialPass *pass;
};

struct __declspec(align(16)) GfxCmdBufState
{
  unsigned __int8 refSamplerState[16];
  unsigned int samplerState[16];
  const GfxTexture *samplerTexture[16];
  GfxCmdBufPrimState prim;
  const Material *material;
  unsigned __int8 techType;
  const MaterialTechnique *technique;
  $C75CE187B3A6FB10EFB2D4D06A716EB7 ___u7;
  unsigned int passIndex;
  GfxDepthRangeType depthRangeType;
  float depthRangeNear;
  float depthRangeFar;
  unsigned __int64 vertexShaderConstStateBuffer[1048];
  unsigned __int64 *vertexShaderConstState[4];
  unsigned __int64 pixelShaderConstStateBuffer[1048];
  unsigned __int64 *pixelShaderConstState[4];
  unsigned __int8 alphaRef;
  ID3D11BlendState *blendState;
  ID3D11DepthStencilState *depthStencilState;
  ID3D11RasterizerState *rasterizerState;
  const MaterialPixelShader *pixelShader;
  const MaterialVertexShader *vertexShader;
  unsigned int pixPrimarySortKey;
  const Material *pixMaterial;
  const MaterialTechnique *pixTechnique;
  int pixCombine;
  GfxViewport viewport;
  GfxViewport scissor;
  int scissorEnabled;
  unsigned __int8 renderTargetId;
  int stateOverride;
  const GfxBackEndData *backEndData;
};

struct VariantWind
{
  vec3_t wind_vector;
  vec3_t rustle_angular_frequency;
  vec3_t rustle_amplitude;
  float blade_acceleration;
  float blade_velocity;
  int reset_timer;
  int gust_start;
  int gust_dur;
};

struct GrassWind
{
  vec2_t pos;
  vec2_t dir;
  float strength_skew;
  int life_span;
  int start_time;
};

struct FX_WindInfo
{
  vec3_t windVector;
  float lowWindAltitude;
  float hiWindAltitude;
  float lowWindStrengthPercent;
  float windVectorMagnitude;
};

struct __declspec(align(4)) weaponState_t
{
  const playerState_s *ps;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int time;
  int damageTime;
  float v_dmg_pitch;
  float v_dmg_roll;
  int *removeMeUnusedInt;
  vec3_t baseAngles;
  vec3_t baseOrigin;
  vec3_t recoilAngles;
  vec3_t recoilSpeed;
  vec3_t swayAngles;
  vec3_t swayOrigin;
  vec3_t swayViewAngles;
  vec3_t bobAngles;
  int shellShockStart;
  int shellShockDuration;
  int shellShockFadeTime;
  vec3_t damageKickAngles;
  bool isServer;
};

struct viewState_t
{
  playerState_s *ps;
  int damageTime;
  int time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int *removeMeUnusedInt;
};

struct WeaponComponent
{
  char name[64];
  eWeaponComponentType type;
  eAttachment attachment;
  eAttachmentPoint attachmentPoint;
};

struct WeaponAttachmentTableEntry
{
  const char *displayName;
  const char *referenceName;
  const char *pointName;
  const char *imageName;
  const char *description;
  char allocationCost;
  char count;
  char unlockLvl;
  __int8 unlockPLevel : 7;
  unsigned __int8 isElite : 1;
  int referenceHash;
};

struct WeaponComponentList
{
  int numComponents;
  int numAttachments;
  WeaponComponent components[8];
};

struct /*__cppobj*/ compare_weapon_component_sort
{
};

struct __declspec(align(8)) AttachmentTableEntry
{
  eAttachment attachmentIndex;
  eAttachmentPoint attachmentPointIndex;
  WeaponAttachmentTableEntry values;
  unsigned __int64 compatibleAttachments;
  bool isValid;
};

struct cspField_t
{
  const char *szName;
  int iOffset;
  int iFieldType;
};

struct WeaponFullDef
{
  WeaponVariantDef weapVariantDef;
  WeaponDef weapDef;
  WeaponAttachment *attachments[63];
  WeaponAttachmentUnique *attachmentUniques[95];
  XModel *gunXModel[16];
  const char *szXAnims[88];
  unsigned __int16 hideTags[32];
  unsigned __int16 notetrackSoundMapKeys[20];
  unsigned __int16 notetrackSoundMapValues[20];
  XModel *worldModel[16];
  XModel *attachViewModel[8];
  XModel *attachWorldModel[8];
  const char *attachViewModelTag[8];
  const char *attachWorldModelTag[8];
  float parallelBounce[32];
  float perpendicularBounce[32];
  float locationDamageMultipliers[21];
  char weaponCamo[64];
};

struct SurfaceTypeSoundList
{
  char *surfaceSoundBase;
  char **soundAliasList;
};

struct FxImpactEntry
{
  const FxEffectDef *nonflesh[32];
  const FxEffectDef *flesh[4];
};

struct __declspec(align(8)) WeaponStatsTable
{
  AttachmentTableEntry specificWeaponAttachments[64];
  AttachmentTableEntry *specificWeaponAttachmentPoints[6][64];
  int numSpecificWeaponAttachmentPoints[6];
  int numSpecificWeaponAttachments;
};

struct ddlRoot_t
{
  const char *name;
  ddlDef_t *ddlDef;
};

struct FxImpactTable
{
  const char *name;
  FxImpactEntry *table;
};

struct SndIndexEntry
{
  unsigned __int16 value;
  unsigned __int16 next;
};

struct SndRadverb
{
  char name[32];
  unsigned int id;
  float smoothing;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect;
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
  float returnHighpass;
};

struct SndDuck
{
  char name[32];
  unsigned int id;
  float fadeIn;
  float fadeOut;
  float startDelay;
  float distance;
  float length;
  unsigned int fadeInCurve;
  unsigned int fadeOutCurve;
  float *attenuation;
  float *filter;
  int updateWhilePaused;
};

struct SndAssetBankHeader
{
  unsigned int magic;
  unsigned int version;
  unsigned int entrySize;
  unsigned int checksumSize;
  unsigned int dependencySize;
  unsigned int entryCount;
  unsigned int dependencyCount;
  unsigned int pad32;
  __int64 fileSize;
  __int64 entryOffset;
  __int64 checksumOffset;
  unsigned __int8 checksumChecksum[16];
  char dependencies[512];
  char padding[1464];
};

struct SndRuntimeAssetBank
{
  const char *zone;
  const char *language;
  int fileHandle;
  SndAssetBankHeader header;
  unsigned int entryOffset;
  unsigned __int8 linkTimeChecksum[16];
  char filename[256];
  bool indicesLoaded;
  bool indicesAllocated;
};

struct SndAssetBankEntry
{
  unsigned int id;
  unsigned int size;
  unsigned int offset;
  unsigned int frameCount;
  unsigned __int8 frameRateIndex;
  unsigned __int8 channelCount;
  unsigned __int8 looping;
  unsigned __int8 format;
};

struct SndLoadedAssets
{
  const char *zone;
  const char *language;
  unsigned int loadedCount;
  unsigned int entryCount;
  SndAssetBankEntry *entries;
  unsigned int dataSize;
  char *data;
};

struct SndDialogScriptIdLookup
{
  unsigned int scriptId;
  unsigned int aliasId;
};

struct SndBank
{
  const char *name;
  unsigned int aliasCount;
  SndAliasList *alias;
  SndIndexEntry *aliasIndex;
  unsigned int radverbCount;
  SndRadverb *radverbs;
  unsigned int duckCount;
  SndDuck *ducks;
  SndRuntimeAssetBank streamAssetBank;
  SndRuntimeAssetBank loadAssetBank;
  SndLoadedAssets loadedAssets;
  unsigned int scriptIdLookupCount;
  SndDialogScriptIdLookup *scriptIdLookups;
  SndBankState state;
  int streamRequestId;
  bool pendingIo;
  bool ioError;
  bool runtimeAssetLoad;
};

struct SndPatch
{
  char *name;
  unsigned int elementCount;
  unsigned int *elements;
};

struct cNode_t
{
  cplane_s *plane;
  __int16 children[2];
};

struct TriggerModel
{
  int contents;
  unsigned __int16 hullCount;
  unsigned __int16 firstHull;
};

struct TriggerHull
{
  Bounds bounds;
  int contents;
  unsigned __int16 slabCount;
  unsigned __int16 firstSlab;
};

struct TriggerSlab
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

struct MapTriggers
{
  unsigned int count;
  TriggerModel *models;
  unsigned int hullCount;
  TriggerHull *hulls;
  unsigned int slabCount;
  TriggerSlab *slabs;
};

struct MapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
};

struct DynEntityPose
{
  GfxPlacement pose;
  float radius;
};

struct DynEntityClient
{
  int physObjId;
  unsigned __int16 flags;
  unsigned __int16 lightingHandle;
  int health;
  unsigned __int16 burnTime;
  unsigned __int16 fadeTime;
  int physicsStartTime;
};

struct DynEntityServer
{
  unsigned __int16 flags;
  int health;
};

struct DynEntityColl
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  vec3_t linkMins;
  vec3_t linkMaxs;
  int contents;
};

struct par_t
{
  vec3_t p;
  vec3_t p0;
  vec3_t p_prev;
  int flags;
};

struct rope_frame_verts_t
{
  int num_verts;
  vec3_t v[50];
};

struct rope_client_verts_t
{
  rope_frame_verts_t frame_verts[2];
  unsigned int frame_index;
};

class __declspec(align(4)) constraint_t
{
public:
    vec3_t p;
    rope_constraint_e type;
    int entity_index;
    int bone_name_hash;
    unsigned __int8 pi1;
    unsigned __int8 pi2;
};

class __declspec(align(4)) rope_t
{
public:
  par_t m_particles[25];
  constraint_t m_constraints[30];
  int m_entity_anchors[3];
  int m_num_particles;
  int m_num_constraints;
  int m_num_entity_anchors;
  int m_num_draw_verts;
  rope_client_verts_t m_client_verts;
  vec3_t m_min;
  vec3_t m_max;
  vec3_t m_start;
  vec3_t m_end;
  int m_in_use;
  int m_visible;
  int m_dist_constraint;
  int m_flags;
  const Material *m_material;
  float m_seglen;
  float m_length;
  float m_width;
  float m_scale;
  float m_force_scale;
  int m_health;
  int m_frame;
  int m_stable_count;
  int m_static_rope;
  unsigned __int16 m_lightingHandle;
};

struct clipMap_t
{
  const char *name;
  int isInUse;
  ClipInfo info;
  ClipInfo *pInfo;
  unsigned int numStaticModels;
  cStaticModel_s *staticModelList;
  unsigned int numNodes;
  cNode_t *nodes;
  unsigned int numLeafs;
  cLeaf_s *leafs;
  unsigned int vertCount;
  vec3_t *verts;
  int triCount;
  unsigned __int16 *triIndices;
  unsigned __int8 *triEdgeIsWalkable;
  int partitionCount;
  CollisionPartition *partitions;
  int aabbTreeCount;
  CollisionAabbTree *aabbTrees;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  int numClusters;
  int clusterBytes;
  unsigned __int8 *visibility;
  int vised;
  MapEnts *mapEnts;
  cbrush_t *box_brush;
  cmodel_t box_model;
  unsigned __int16 originalDynEntCount;
  unsigned __int16 dynEntCount[4];
  DynEntityDef *dynEntDefList[2];
  DynEntityPose *dynEntPoseList[2];
  DynEntityClient *dynEntClientList[2];
  DynEntityServer *dynEntServerList[2];
  DynEntityColl *dynEntCollList[4];
  int num_constraints;
  PhysConstraint *constraints;
  int max_ropes;
  rope_t *ropes;
  unsigned int checksum;
};

struct ComPrimaryLight
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  unsigned __int8 exponent;
  char priority;
  __int16 cullDist;
  unsigned __int8 useCookie;
  unsigned __int8 shadowmapVolume;
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  float cosHalfFovExpanded;
  float rotationLimit;
  float translationLimit;
  float mipDistance;
  float dAttenuation;
  float roundness;
  vec4_t diffuseColor;
  vec4_t falloff;
  vec4_t angle;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  const char *defName;
};

struct ComWorld
{
  const char *name;
  int isInUse;
  unsigned int primaryLightCount;
  ComPrimaryLight *primaryLights;
};

struct pathbasenode_t
{
  vec3_t vOrigin;
  unsigned int type;
};

struct pathnode_tree_nodes_t
{
  int nodeCount;
  unsigned __int16 *nodes;
};

union pathnode_tree_info_t
{
  pathnode_tree_t *child[2];
  pathnode_tree_nodes_t s;
};

struct pathnode_tree_t
{
  int axis;
  float dist;
  pathnode_tree_info_t u;
};

struct PathData
{
  unsigned int nodeCount;
  unsigned int originalNodeCount;
  pathnode_t *nodes;
  pathbasenode_t *basenodes;
  int visBytes;
  unsigned __int8 *pathVis;
  int smoothBytes;
  unsigned __int8 *smoothCache;
  int nodeTreeCount;
  pathnode_tree_t *nodeTree;
};

struct GameWorldSp
{
  const char *name;
  PathData path;
};

struct GameWorldMp
{
  const char *name;
  PathData path;
};

struct GfxStreamingAabbTree
{
  vec4_t mins;
  vec4_t maxs;
  float maxStreamingDistance;
  unsigned __int16 firstItem;
  unsigned __int16 itemCount;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
  unsigned __int16 smodelCount;
  unsigned __int16 surfaceCount;
};

struct GfxWorldStreamInfo
{
  int aabbTreeCount;
  GfxStreamingAabbTree *aabbTrees;
  int leafRefCount;
  int *leafRefs;
};

struct GfxWorldSun
{
  unsigned int control;
  vec3_t angles;
  vec4_t ambientColor;
  vec4_t sunCd;
  vec4_t sunCs;
  vec4_t skyColor;
  float exposure;
};

struct SunLightParseParams
{
  char name[64];
  GfxWorldSun initWorldSun[1];
  float fogTransitionTime;
  GfxWorldFog initWorldFog[1];
};

struct GfxLightCorona
{
  vec3_t origin;
  float radius;
  vec3_t color;
  float intensity;
};

struct GfxShadowMapVolume
{
  unsigned int control;
  unsigned int padding1;
  unsigned int padding2;
  unsigned int padding3;
};

struct GfxVolumePlane
{
  vec4_t plane;
};

struct GfxExposureVolume
{
  unsigned int control;
  float exposure;
  float luminanceIncreaseScale;
  float luminanceDecreaseScale;
  float featherRange;
  float featherAdjust;
};

struct GfxWorldFogVolume
{
  vec3_t mins;
  unsigned int control;
  vec3_t maxs;
  float fogTransitionTime;
  unsigned int controlEx;
  GfxWorldFog volumeWorldFog[1];
};

struct GfxWorldFogModifierVolume
{
  unsigned int control;
  unsigned __int16 minX;
  unsigned __int16 minY;
  unsigned __int16 minZ;
  unsigned __int16 maxX;
  unsigned __int16 maxY;
  unsigned __int16 maxZ;
  unsigned int controlEx;
  float transitionTime;
  float depthScale;
  float heightScale;
  vec4_t colorAdjust;
};

struct GfxLutVolume
{
  vec3_t mins;
  unsigned int control;
  vec3_t maxs;
  float lutTransitionTime;
  unsigned int lutIndex;
};

struct GfxSkyDynamicIntensity
{
  float angle0;
  float angle1;
  float factor0;
  float factor1;
};

struct GfxWorldDpvsPlanes
{
  int cellCount;
  cplane_s *planes;
  unsigned __int16 *nodes;
  unsigned int *sceneEntCellBits;
};

struct GfxPortalWritable
{
  bool isQueued;
  bool isAncestor;
  unsigned __int8 recursionDepth;
  unsigned __int8 hullPointCount;
  vec2_t *hullPoints;
  GfxPortal *queuedParent;
};

struct DpvsPlane
{
  vec4_t coeffs;
  unsigned __int8 side[3];
  unsigned __int8 pad;
};

struct GfxPortal
{
  GfxPortalWritable writable;
  DpvsPlane plane;
  GfxCell *cell;
  vec3_t *vertices;
  unsigned __int8 vertexCount;
  vec3_t hullAxis[2];
  vec3_t bounds[2];
};

struct GfxCell
{
  vec3_t mins;
  vec3_t maxs;
  int aabbTreeCount;
  GfxAabbTree *aabbTree;
  int portalCount;
  GfxPortal *portals;
  unsigned __int8 reflectionProbeCount;
  unsigned __int8 *reflectionProbes;
};

struct GfxReflectionProbeVolumeData
{
  vec4_t volumePlanes[6];
};

struct GfxReflectionProbe
{
  vec3_t origin;
  GfxLightingSH lightingSH;
  GfxImage *reflectionImage;
  GfxReflectionProbeVolumeData *probeVolumes;
  unsigned int probeVolumeCount;
  float mipLodBias;
};

struct GfxLightmapArray
{
  GfxImage *primary;
  GfxImage *secondary;
};

struct GfxWorldVertexData0
{
  unsigned __int8 *data;
  ID3D11Buffer *vb;
};

struct GfxWorldVertexData1
{
  unsigned __int8 *data;
  ID3D11Buffer *vb;
};

struct GfxWorldDraw
{
  unsigned int reflectionProbeCount;
  union {
      GfxReflectionProbe* localReflectionProbes;
      GfxReflectionProbe* reflectionProbes;
  };
  union {
      GfxTexture* localReflectionProbeTextures;
      GfxTexture* reflectionProbeTextures;
  };
  int lightmapCount;
  union {
      GfxLightmapArray* localLightmaps;
      GfxLightmapArray* lightmaps;
  };
  union {
      GfxTexture* localLightmapPrimaryTextures;
      GfxTexture* lightmapPrimaryTextures;
  };
  union {
      GfxTexture* localLightmapSecondaryTextures;
      GfxTexture* lightmapSecondaryTextures;
  };
  unsigned int vertexCount;
  unsigned int vertexDataSize0;
  GfxWorldVertexData0 vd0;
  unsigned int vertexDataSize1;
  GfxWorldVertexData1 vd1;
  int indexCount;
  unsigned __int16 *indices;
  ID3D11Buffer *indexBuffer;
};

struct GfxLightGridEntry
{
  unsigned __int16 colorsIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 visibility;
};

struct GfxCompressedLightGridColors
{
  unsigned __int8 rgb[56][3];
};

struct GfxCompressedLightGridCoeffs
{
  unsigned __int16 coeffs[9][3];
};

struct GfxSkyGridVolume
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 visibility;
};

struct GfxLightGrid
{
  unsigned int sunPrimaryLightIndex;
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  float offset;
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 *rowDataStart;
  unsigned int rawRowDataSize;
  unsigned __int8 *rawRowData;
  unsigned int entryCount;
  GfxLightGridEntry *entries;
  unsigned int colorCount;
  GfxCompressedLightGridColors *colors;
  unsigned int coeffCount;
  GfxCompressedLightGridCoeffs *coeffs;
  unsigned int skyGridVolumeCount;
  GfxSkyGridVolume *skyGridVolumes;
};

struct GfxBrushModelWritable
{
  vec3_t mins;
  float padding1;
  vec3_t maxs;
  float padding2;
};

struct GfxBrushModel
{
  GfxBrushModelWritable writable;
  vec3_t bounds[2];
  unsigned int surfaceCount;
  unsigned int startSurfIndex;
};

struct MaterialMemory
{
  Material *material;
  int memory;
};

struct sunflare_t
{
  bool hasValidData;
  Material *spriteMaterial;
  Material *flareMaterial;
  float spriteSize;
  float flareMinSize;
  float flareMinDot;
  float flareMaxSize;
  float flareMaxDot;
  float flareMaxAlpha;
  int flareFadeInTime;
  int flareFadeOutTime;
  float blindMinDot;
  float blindMaxDot;
  float blindMaxDarken;
  int blindFadeInTime;
  int blindFadeOutTime;
  float glareMinDot;
  float glareMaxDot;
  float glareMaxLighten;
  int glareFadeInTime;
  int glareFadeOutTime;
  vec3_t sunFxPosition;
};

union XModelDrawInfo
{
    struct {
        unsigned __int8 state;
        char lod;
        unsigned __int16 surfId;
  };
  unsigned int packed;
};

struct GfxSceneDynModel
{
  XModelDrawInfo info;
  unsigned __int16 dynEntId;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 reflectionProbeIndex;
};

struct BModelDrawInfo
{
  unsigned __int16 surfId;
};

struct GfxSceneDynBrush
{
  BModelDrawInfo info;
  unsigned __int16 dynEntId;
};

struct SSkinShaders
{
  char *pixelShaderAlign;
  char *pixelShader;
  char *vertexShader;
  int pixelShaderSize;
  int vertexShaderSize;
};

struct half
{
  unsigned __int16 v;
};

struct half4
{
    union {
        struct {
            half x;
            half y;
            half z;
            half w;
        };
        unsigned __int64 v;
    };
};

struct half2
{
    union {
        struct {
            half x;
            half y;
        };
        unsigned int v;
    };
};

struct SSkinVert
{
  half4 pos_bone;
  PackedUnitVec normal;
  half2 uv;
};

struct SSkinModel
{
  int numVerts;
  int numTris;
  SSkinVert *verts;
  unsigned __int16 *tris;
};

struct SSkinAnim
{
  int bones;
  int width;
  int frames;
  float *data;
};

struct vector3
{
    __m128 x;
    __m128 y;
    __m128 z;
};

class vector4 : vector3
{
public:
    __m128 w;
};

struct SSkinInstance
{
    union {
        vector4 mat;
        float disk_mat[16];
    };
  SSkinShaders *shaders;
  SSkinModel *model;
  SSkinAnim *anim;
  SSkinVert *instVerts;
  float frame;
  int pad1;
  int pad2;
  int pad3;
};

struct GfxShadowGeometry
{
  unsigned __int16 surfaceCount;
  unsigned __int16 smodelCount;
  unsigned __int16 *sortedSurfIndex;
  unsigned __int16 *smodelIndex;
};

struct GfxLightRegionAxis
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

struct GfxLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
  GfxLightRegionAxis *axis;
};

struct GfxLightRegion
{
  unsigned int hullCount;
  GfxLightRegionHull *hulls;
};

struct GfxStaticModelInst
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
};

struct srfTriangles_t
{
  vec3_t mins;
  int vertexDataOffset0;
  vec3_t maxs;
  int vertexDataOffset1;
  int firstVertex;
  float himipRadiusInvSq;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  int baseIndex;
};

struct GfxSurface
{
  srfTriangles_t tris;
  Material *material;
  unsigned __int8 lightmapIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 flags;
  vec3_t bounds[2];
};

struct GfxPackedPlacement
{
  vec3_t origin;
  vec3_t axis[3];
  float scale;
};

struct __declspec(align(4)) GfxStaticModelLmapVertexInfo
{
  unsigned int *lmapVertexColors;
  ID3D11Buffer *lmapVertexColorsVB;
  unsigned __int16 numLmapVertexColors;
};

struct GfxStaticModelDrawInst
{
  float cullDist;
  GfxPackedPlacement placement;
  XModel *model;
  int flags;
  float invScaleSq;
  unsigned __int16 lightingHandle;
  unsigned __int16 colorsIndex;
  GfxLightingSHQuantized lightingSH;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 visibility;
  unsigned __int8 reflectionProbeIndex;
  unsigned int smid;
  GfxStaticModelLmapVertexInfo lmapVertexInfo[4];
};

struct GfxWorldDpvsStatic
{
  unsigned int smodelCount;
  unsigned int staticSurfaceCount;
  unsigned int litSurfsBegin;
  unsigned int litSurfsEnd;
  unsigned int litTransSurfsBegin;
  unsigned int litTransSurfsEnd;
  unsigned int emissiveOpaqueSurfsBegin;
  unsigned int emissiveOpaqueSurfsEnd;
  unsigned int emissiveTransSurfsBegin;
  unsigned int emissiveTransSurfsEnd;
  unsigned int smodelVisDataCount;
  unsigned int surfaceVisDataCount;
  unsigned __int8 *smodelVisData[3];
  unsigned __int8 *surfaceVisData[3];
  unsigned __int8 *smodelVisDataCameraSaved;
  unsigned __int8 *surfaceVisDataCameraSaved;
  unsigned __int16 *sortedSurfIndex;
  GfxStaticModelInst *smodelInsts;
  GfxSurface *surfaces;
  GfxStaticModelDrawInst *smodelDrawInsts;
  GfxDrawSurf *surfaceMaterials;
  unsigned __int8 *surfaceCastsSunShadow;
  unsigned __int8 *surfaceCastsShadow;
  unsigned __int8 *smodelCastsShadow;
  volatile int usageCount;
};

struct GfxWorldDpvsDynamic
{
  unsigned int dynEntClientWordCount[2];
  unsigned int dynEntClientCount[2];
  unsigned int *dynEntCellBits[2];
  unsigned __int8 *dynEntVisData[2][3];
  volatile int usageCount;
};

struct GfxWaterBuffer
{
  unsigned int bufferSize;
  vec4_t *buffer;
};

struct Occluder
{
  unsigned int flags;
  char name[16];
  vec3_t points[4];
};

struct GfxOutdoorBounds
{
  vec3_t bounds[2];
};

struct GfxHeroLight
{
  unsigned __int8 type;
  unsigned __int8 unused[3];
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

struct GfxHeroLightTree
{
  vec3_t mins;
  vec3_t maxs;
  int leftNode;
  int rightNode;
};

struct GfxWorld
{
  const char *name;
  const char *baseName;
  int planeCount;
  int nodeCount;
  int surfaceCount;
  GfxWorldStreamInfo streamInfo;
  const char *skyBoxModel;
  SunLightParseParams sunParse;
  GfxLight *sunLight;
  unsigned int sunPrimaryLightIndex;
  unsigned int primaryLightCount;
  unsigned int coronaCount;
  GfxLightCorona *coronas;
  unsigned int shadowMapVolumeCount;
  GfxShadowMapVolume *shadowMapVolumes;
  unsigned int shadowMapVolumePlaneCount;
  GfxVolumePlane *shadowMapVolumePlanes;
  unsigned int exposureVolumeCount;
  GfxExposureVolume *exposureVolumes;
  unsigned int exposureVolumePlaneCount;
  GfxVolumePlane *exposureVolumePlanes;
  unsigned int worldFogVolumeCount;
  GfxWorldFogVolume *worldFogVolumes;
  unsigned int worldFogVolumePlaneCount;
  GfxVolumePlane *worldFogVolumePlanes;
  unsigned int worldFogModifierVolumeCount;
  GfxWorldFogModifierVolume *worldFogModifierVolumes;
  unsigned int worldFogModifierVolumePlaneCount;
  GfxVolumePlane *worldFogModifierVolumePlanes;
  unsigned int lutVolumeCount;
  GfxLutVolume *lutVolumes;
  unsigned int lutVolumePlaneCount;
  GfxVolumePlane *lutVolumePlanes;
  GfxSkyDynamicIntensity skyDynIntensity;
  GfxWorldDpvsPlanes dpvsPlanes;
  int cellBitsCount;
  GfxCell *cells;
  GfxWorldDraw draw;
  GfxLightGrid lightGrid;
  int modelCount;
  GfxBrushModel *models;
  vec3_t mins;
  vec3_t maxs;
  unsigned int checksum;
  int materialMemoryCount;
  MaterialMemory *materialMemory;
  sunflare_t sun;
  vec4_t outdoorLookupMatrix[4];
  GfxImage *outdoorImage;
  unsigned int *cellCasterBits;
  GfxSceneDynModel *sceneDynModel;
  GfxSceneDynBrush *sceneDynBrush;
  unsigned int *primaryLightEntityShadowVis;
  unsigned int *primaryLightDynEntShadowVis[2];
  unsigned int numSiegeSkinInsts;
  SSkinInstance *siegeSkinInsts;
  GfxShadowGeometry *shadowGeom;
  GfxLightRegion *lightRegion;
  GfxWorldDpvsStatic dpvs;
  GfxWorldDpvsDynamic dpvsDyn;
  float waterDirection;
  GfxWaterBuffer waterBuffers[2];
  const Material *waterMaterial;
  const Material *coronaMaterial;
  const Material *ropeMaterial;
  const Material *lutMaterial;
  unsigned int numOccluders;
  Occluder *occluders;
  unsigned int numOutdoorBounds;
  GfxOutdoorBounds *outdoorBounds;
  unsigned int heroLightCount;
  unsigned int heroLightTreeCount;
  GfxHeroLight *heroLights;
  GfxHeroLightTree *heroLightTree;
  unsigned int lightingFlags;
  int lightingQuality;
};

struct FontIconName
{
  const char *string;
  int hash;
};

struct FontIconEntry
{
  FontIconName fontIconName;
  Material *fontIconMaterialHandle;
  int fontIconSize;
  float xScale;
  float yScale;
};

struct FontIconAlias
{
  int aliasHash;
  int buttonHash;
};

struct FontIcon
{
  const char *name;
  int numEntries;
  int numAliasEntries;
  FontIconEntry *fontIconEntry;
  FontIconAlias *fontIconAlias;
};

struct MenuList
{
  const char *name;
  int menuCount;
  menuDef_t **menus;
};

struct LocalizeEntry
{
  const char *value;
  const char *name;
};

struct SndCurve
{
  char name[32];
  unsigned int id;
  vec2_t points[8];
};

struct SndPan
{
  char name[32];
  unsigned int id;
  float front;
  float back;
  float center;
  float lfe;
  float left;
  float right;
};

struct SndDuckGroup
{
  char name[32];
  unsigned int id;
};

struct SndContext
{
  unsigned int type;
  unsigned int values[8];
};

struct SndMaster
{
  char name[32];
  unsigned int id;
  int lowE;
  float lowG;
  float lowF;
  float lowQ;
  int peak1E;
  float peak1G;
  float peak1F;
  float peak1Q;
  int peak2E;
  float peak2G;
  float peak2F;
  float peak2Q;
  int hiE;
  float hiG;
  float hiF;
  float hiQ;
  float eqG;
  int compE;
  float compPG;
  float compMG;
  float compT;
  float compR;
  float compTA;
  float compTR;
  int limitE;
  float limitPG;
  float limitMG;
  float limitT;
  float limitR;
  float limitTA;
  float limitTR;
  float busReverbG;
  float busFxG;
  float busVoiceG;
  float busPfutzG;
  float busHdrfxG;
  float busUiG;
  float busMusicG;
  float busMovieG;
  float busVcsG;
  int busReverbE;
  int busFxE;
  int busVoiceE;
  int busPfutzE;
  int busHdrfxE;
  int busUiE;
  int busMusicE;
  int busMovieE;
  int hdrfxCompE;
  int voiceEqE;
  int voiceCompE;
};

struct SndSidechainDuck
{
  char name[32];
  unsigned int id;
  float g;
  float f;
  float q;
  float ta;
  float tr;
  float tf;
};

struct SndFutz
{
  char name[32];
  unsigned int id;
  float bpfF;
  float bpfQ;
  float lsG;
  float lsF;
  float lsQ;
  float dist;
  float preG;
  float postG;
  float th;
  float tg;
  float clippre;
  float clippost;
  float blend;
  unsigned int startAliasId;
  unsigned int stopAliasId;
  unsigned int loopAliasId;
};

struct SndDriverGlobals
{
  const char *name;
  unsigned int groupCount;
  SndVolumeGroup *groups;
  unsigned int curveCount;
  SndCurve *curves;
  unsigned int panCount;
  SndPan *pans;
  unsigned int duckGroupCount;
  SndDuckGroup *duckGroups;
  unsigned int contextCount;
  SndContext *contexts;
  unsigned int masterCount;
  SndMaster *masters;
  unsigned int voiceDuckCount;
  SndSidechainDuck *voiceDucks;
  unsigned int futzCount;
  SndFutz *futzes;
};

struct RawFile
{
  const char *name;
  int len;
  const char *buffer;
};

struct LbColumnDef
{
  const char *name;
  int colId;
  int dwColIndex;
  bool hidden;
  const char *statName;
  LbColType type;
  int precision;
  LbAggType agg;
  const char *localization;
  int uiCalColX;
  int uiCalColY;
};

struct LeaderboardDef
{
  const char *name;
  unsigned int id;
  int columnCount;
  int dwColumnCount;
  int xpColId;
  int prestigeColId;
  LbColumnDef *columns;
  LbUpdateType updateType;
  int trackTypes;
};

struct gump_info_t
{
  char *name;
  int size;
};

struct overlay_info_t
{
  char *name;
  int size;
};

struct XGlobals
{
  const char *name;
  int xanimStreamBufferSize;
  int cinematicMaxWidth;
  int cinematicMaxHeight;
  int extracamResolution;
  vec4_t screenClearColor;
  int bigestGumpSize;
  int gumpsCount;
  gump_info_t gumps[32];
  int bigestOverlaySize;
  int overlayCount;
  overlay_info_t overlays[32];
};

struct Glasses
{
  const char *name;
  unsigned int numGlasses;
  Glass *glasses;
  unsigned __int8 *workMemory;
  unsigned int workMemorySize;
  unsigned int smallAllocatorBlocks;
  unsigned int maxGroups;
  unsigned int maxShards;
  unsigned int maxPhysics;
  unsigned int shardMemorySize;
  unsigned int maxFreeCmd;
  unsigned int numSlots;
  unsigned int numVerts;
  unsigned int numIndices;
};

struct EmblemLayer
{
  int cost;
  int unlockLevel;
  int unlockPLevel;
};

struct EmblemCategory
{
  const char *name;
  const char *description;
};

struct EmblemIconType
{
  const char *name;
  const char *description;
};

struct EmblemBGCategory
{
  const char *name;
  const char *description;
};

struct EmblemIcon
{
  GfxImage *image;
  const char *description;
  float outlineSize;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
  int sortKey;
  unsigned __int16 iconType;
  unsigned __int16 category;
};

struct __declspec(align(4)) EmblemBackground
{
  Material *material;
  const char *description;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
  int sortKey;
  unsigned __int16 bgCategory;
};

struct EmblemSet
{
  int colorCount;
  int layerCount;
  EmblemLayer *layers;
  int categoryCount;
  EmblemCategory *categories;
  int iconTypeCount;
  EmblemIconType *iconTypes;
  int bgCategoryCount;
  EmblemBGCategory *bgCategories;
  int iconCount;
  EmblemIcon *icons;
  int backgroundCount;
  EmblemBackground *backgrounds;
  int backgroundLookupCount;
  __int16 *backgroundLookup;
};

struct ScriptParseTree
{
  const char *name;
  int len;
  unsigned __int8 *buffer;
};

struct KeyValuePair
{
  int keyHash;
  int namespaceHash;
  const char *value;
};

struct KeyValuePairs
{
  const char *name;
  int numVariables;
  KeyValuePair *keyValuePairs;
};

struct MemoryBlock
{
  const char *name;
  bool mainMem;
  bool videoMem;
  bool streamMem;
  unsigned int size;
  unsigned int alignment;
  unsigned __int8 *data;
};

struct AddonMapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
  ClipInfo *info;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  GfxBrushModel *models;
};

struct SkinnedVertsDef
{
  const char *name;
  unsigned int maxSkinnedVerts;
};

struct Qdb
{
  const char *name;
  int len;
  unsigned __int8 *buffer;
};

struct Slug
{
  const char *name;
  int len;
  unsigned __int8 *buffer;
};

struct FootstepTableDef
{
  const char *name;
  unsigned int sndAliasTable[32][7];
};

struct FootstepFXTableDef
{
  const char *name;
  const FxEffectDef *footstepFX[32];
};

struct TextureList
{
};

union XAssetHeader
{
  XModelPieces *xmodelPieces;
  PhysPreset *physPreset;
  PhysConstraints *physConstraints;
  DestructibleDef *destructibleDef;
  XAnimParts *parts;
  XModel *model;
  Material *material;
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  MaterialTechniqueSet *techniqueSet;
  GfxImage *image;
  SndBank *sound;
  SndPatch *soundPatch;
  clipMap_t *clipMap;
  ComWorld *comWorld;
  GameWorldSp *gameWorldSp;
  GameWorldMp *gameWorldMp;
  MapEnts *mapEnts;
  GfxWorld *gfxWorld;
  GfxLightDef *lightDef;
  Font_s *font;
  FontIcon *fontIcon;
  MenuList *menuList;
  menuDef_t *menu;
  LocalizeEntry *localize;
  WeaponVariantDef *weapon;
  WeaponAttachment *attachment;
  WeaponAttachmentUnique *attachmentUnique;
  WeaponCamo *weaponCamo;
  SndDriverGlobals *sndDriverGlobals;
  const FxEffectDef *fx;
  FxImpactTable *impactFx;
  RawFile *rawfile;
  StringTable *stringTable;
  LeaderboardDef *leaderboardDef;
  XGlobals *xGlobals;
  ddlRoot_t *ddlRoot;
  Glasses *glasses;
  TextureList *textureList;
  EmblemSet *emblemSet;
  ScriptParseTree *scriptParseTree;
  KeyValuePairs *keyValuePairs;
  VehicleDef *vehicleDef;
  MemoryBlock *memoryBlock;
  AddonMapEnts *addonMapEnts;
  TracerDef *tracerDef;
  SkinnedVertsDef *skinnedVertsDef;
  Qdb *qdb;
  Slug *slug;
  FootstepTableDef *footstepTableDef;
  FootstepFXTableDef *footstepFXTableDef;
  ZBarrierDef *zbarrierDef;
  void *data;
};

class /*__cppobj*/ compare_attachment_sort
{
};

struct WeaponVariantDefHash
{
  int hash;
  int weaponIndex;
};

struct __declspec(align(4)) WeaponOptionTableEntry
{
  __int16 weaponOptionIndex;
  __int16 subOtionIndex;
  eWeaponOptionGroup weaponOptionGroup;
  WeaponAttachmentTableEntry values;
  bool isValid;
};

struct BulletFireParams
{
  int weaponEntIndex;
  int ignoreEntIndex;
  float damageMultiplier;
  int methodOfDeath;
  vec3_t origStart;
  vec3_t start;
  vec3_t end;
  vec3_t dir;
};

class __declspec(align(16)) BulletTraceResults
{
public:
    trace_t trace;
    gentity_t* hitEnt;
    vec3_t hitPos;
    bool ignoreHitEnt;
    int depthSurfaceType;
};

class __declspec(align(16)) pmove_t
{
public:
  playerState_s *ps;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int tracemask;
  int numtouch;
  int touchents[32];
  int numGlassTouch;
  int touchGlasses[32];
  vec3_t mins;
  vec3_t maxs;
  float xyspeed;
  float currentPitch;
  float averagePitch;
  int nextPitch;
  float pitchHistory[30];
  int proneChange;
  float maxSprintTimeMultiplier;
  bool mantleStarted;
  vec3_t mantleEndPos;
  int mantleDuration;
  int viewChangeTime;
  float viewChange;
  vec3_t vehicleAngles;
  pmoveVehAnimState_t vehAnimState;
  unsigned __int8 handler;
  LocalClientNum_t localClientNum;
  const gjkcc_input_t *m_gjkcc_input;
  //colgeom_visitor_inlined_t<300> proximity_data;
  bool gravity;
  int gravityOverride;
};

struct vehAnimClient_t
{
  bool initialized;
  VehicleSeatPositions curSeat;
  VehicleSeatPositions prevSeat;
  bool moving;
  int animStage;
  int animIndex;
  int tagName;
};

struct VehicleHandler
{
  const VehicleDef *(__cdecl *vehicle)(LocalClientNum_t, const playerState_s *);
  int (__cdecl *wheel)(const pmove_t *, int, vec3_t *);
  colgeom_visitor_inlined_t<300> *(__cdecl *proximityCache)(LocalClientNum_t, const playerState_s *);
  const PhysGeomList *(__cdecl *collmap)(LocalClientNum_t, const int);
};

struct VehicleState
{
  int entity;
  vec3_t origin;
  vec3_t angles;
  vec3_t velocity;
  vec3_t angVelocity;
  vec3_t previousOrigin;
  vec3_t previousAngles;
  vec3_t bodyVelocity;
  vec2_t tilt;
  vec2_t tiltVelocity;
  vec3_t mins;
  vec3_t maxs;
  float targetHeightDelta;
  float lastGroundHeight;
  int clipmask;
  vec3_t groundNormal;
};

struct slide_move_params_t
{
  float deltaTime;
  vec3_t *origin;
  vec3_t *velocity;
  vec3_t *mins;
  vec3_t *maxs;
  bool gravity;
  bool hasGround;
  bool zerog;
  bool *inSolid;
  vec3_t *groundNormal;
  int passEntityNum;
  int clipMask;
  int bumpEntityNum;
  bool use_gjk;
  const gjkcc_input_t *gjkcc_input;
  gjccc_create_type_e user_data_collision_type;
  unsigned int user_id;
  colgeom_visitor_inlined_t<300> *proximity_data;
  const PhysGeomList *collmap;
  void (__cdecl *clipVelocityFunc)(const vec3_t *, const vec3_t *, vec3_t *);
};

struct __declspec(align(4)) gjk_slide_move_output_t
{
  vec3_t new_position;
  vec3_t new_velocity;
  bool expensive_push_out;
  bool expensive_push_out_failed;
};

struct __declspec(align(4)) XAnimState
{
  float currentAnimTime;
  float oldTime;
  __int16 cycleCount;
  __int16 oldCycleCount;
  float goalTime;
  float goalWeight;
  float weight;
  float rate;
  bool instantWeightChange;
};

struct __declspec(align(4)) XAnimInfo
{
  unsigned __int16 notifyChild;
  __int16 notifyIndex;
  unsigned __int16 notifyName;
  unsigned __int16 notifyType;
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned __int16 children;
  unsigned __int16 parent;
  unsigned __int16 animIndex;
  unsigned __int16 animToModel;
  union {
      XAnimParts* parts;
      XAnimParent animParent;
  };
  XAnimState state;
  XAnimParts *streamedParts;
  unsigned __int16 streamedAnimToModel;
};

struct __declspec(align(2)) gunLevelRow_t
{
  unsigned __int16 targetXP;
  unsigned __int16 rewardXP;
  unsigned __int8 attachment;
  unsigned __int8 rankID;
  unsigned __int8 itemIndex;
};

struct itemInfo_t
{
  __int16 index;
  __int16 dwIndex;
  __int16 dwBaseIndex;
  __int16 row;
  char unlockLevel;
  char unlockPLevel;
  char cost;
  unsigned __int8 isNullItem : 1;
  unsigned __int8 isPassive : 1;
  unsigned __int8 isValid : 1;
  unsigned __int8 count : 2;
  char dwCost;
  char allocationCost;
  unsigned __int8 dlcIndex;
  unsigned __int8 sortKey;
  __int16 momentumCost;
  loadoutSlot_t loadoutSlot;
  itemGroup_t group;
  gunLevelRow_t *firstGunLevelRow;
  int nameHash;
  int refHash;
  int defaultClassBits;
  unsigned __int8 numAttachments[6];
  char attachments[30];
  unsigned __int16 gunLevelIndex[30];
};

struct specialtyCollection_t
{
  int index;
  unsigned int perks[2];
};

struct unlockableItemsData
{
  int maxItem;
  int numItems;
  itemInfo_t itemTable[256];
  __int16 defaultClassLoadouts[15][44];
  itemInfo_t *itemsInSlot[256];
  int numItemsInSlot;
  int numPurchasedItemsInSlot;
  __int16 defaultItems[44];
  __int16 actualDefaultItems[44];
  int clanTagFeatureRows[256];
  int numClanTagFeatures;
  gunLevelRow_t gunLevelRows[512];
  __int16 numGunLevelRows;
  specialtyCollection_t specialtyCollection[32];
  int numSpecialtyCollection;
};

struct CACMPSHARED_WeaponData
{
  char *name;
  int numConfigurableAttachments;
};

class /*__cppobj*/ __declspec(align(8)) bdUCDAccountInfo : bdTaskResult
{
public:
  unsigned __int64 m_ucdID;
  char m_accountName[256];
  char m_firstName[256];
  char m_lastName[256];
  char m_emailAddress[128];
  bool m_marketingOptIn;
  char m_dateOfBirth[12];
  char m_countryCode[4];
  char m_zipCode[64];
  unsigned __int8 m_aesKey[24];
};

struct __declspec(align(2)) jsonWriter
{
  char *buffer;
  int bufferLength;
  char *currentPos;
  char *endPos;
  int objectCounter;
  int matchObjectLevel;
  int categoryObjectLevel;
  bool emptyObject;
  bool writeStatus;
  bool terminateStatus;
};

struct segment
{
  char *startPos;
  char *endPos;
  int numItems;
};

struct __declspec(align(8)) eventAccumulator
{
  ControllerIndex_t controllerIndex;
  jsonWriter writer;
  segment category;
  segment match;
  int numMatches;
  unsigned __int64 fileID;
  RecordEventType eventType;
};

struct queryResults_CACMPShared
{
  int itemIndex;
  loadoutSlot_t loadoutSlot;
};

struct challengeTableRow_t
{
  const char *challengeStatName;
  int statNameHash;
  unsigned int maxVal;
  unsigned __int16 index;
  unsigned __int16 row;
  unsigned __int16 rewardXP;
  unsigned __int8 unlockLevel;
  unsigned __int8 unlockItem;
  unsigned __int8 unlockPLevel : 4;
  unsigned __int8 tableNumber : 3;
  char type;
  const char *unlockImageName;
  int unlockImageHash;
  unsigned int xPGroupMask;
  unsigned __int16 prerequisite;
  char group;
  unsigned __int8 isLifeTime : 1;
  unsigned __int8 isMastery : 1;
  unsigned __int8 isMaxLevel : 1;
  unsigned __int8 isItemUnlocked : 1;
  unsigned __int8 isExpert : 1;
  unsigned __int8 resetOnPrestige : 1;
  unsigned __int8 setGlobalStat : 1;
  unsigned int excludeItemsMask[8];
};

struct param_CACMPShared
{
  cacmpshared_type_e type;
  queryResults_CACMPShared results[256];
  int numItems;
};

class /*__cppobj*/ __declspec(align(8)) bdTeamInfo : bdTaskResult
{
public:
  unsigned __int64 m_teamID;
  unsigned __int64 m_ownerUserID;
  char m_teamName[64];
  unsigned __int8 m_memberStatus;
};

class /*__cppobj*/ __declspec(align(8)) bdTeamProposal : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  unsigned __int64 m_teamID;
  char m_userName[64];
  char m_teamName[64];
  unsigned __int8 m_attachment[1024];
  unsigned int m_attachmentSize;
};

struct __declspec(align(2)) defaultClassInfo_t
{
  int defaultAttachmentBits[15];
  char defaultCount[15];
};

struct __declspec(align(2)) emblemChallengeLookup_t
{
  __int16 challengeIndex;
  unsigned __int8 itemIndex;
};

class CACRoot
{
public:
    unsigned __int8* buffer;
    ddlState_t* rootState;
};

struct /*__cppobj*/ validateCACStatus_s
{
    typedef struct loadoutSlotStatus_s {
        int value;
        bool matchSuccess;
        bool validationPerformed;
    } loadoutSlotStatus[44];
  CACRoot cacRoot;
  ControllerIndex_t localControllerIndex;
  loadoutClass_t customClass;
  bool loadoutVersionOK;
  int numAllowed_PrimaryWeaponAttachments;
  int numAllowed_SecondaryWeaponAttachments;
};

struct viewLerpWaypoint_s
{
  int iFrac;
  float fViewPercent;
};

struct __declspec(align(4)) AntilagClientStore
{
  vec3_t realClientPositions[18];
  vec3_t realClientAngles[18];
  bool clientMoved[18];
};

struct MantleAnimTransition
{
  int upAnimIndex;
  int overAnimIndex;
  float height;
};

struct MantleResults
{
  vec3_t dir;
  vec3_t startPos;
  vec3_t ledgePos;
  vec3_t endPos;
  int flags;
  int entityNum;
  int duration;
};

struct BackgroundPurchasedCount
{
  unsigned int flush;
  int count;
};

struct __declspec(align(4)) CompositeEmblemLayer
{
  __int16 icon;
  vec4_t color;
  vec2_t pos;
  vec2_t scale;
  float angle;
  bool outline;
  bool flip;
};

struct BGDefaultEmblem
{
  int minlevel;
  int maxlevel;
  CompositeEmblemLayer layers[32];
  int layerCount;
};

struct ResultCache
{
  ControllerIndex_t controllerIndex;
  unsigned int flush;
  unsigned int use;
  unsigned __int16 include;
  unsigned __int16 exclude;
  int count;
  __int16 ids[1024];
};

struct BackgroundsResultCache
{
  ControllerIndex_t controllerIndex;
  unsigned int flush;
  unsigned int use;
  unsigned __int16 include;
  int count;
  __int16 ids[580];
};

struct EmblemChallengeTable
{
  emblemChallengeLookup_t emblemChallengeLookups[1024];
  emblemChallengeLookup_t backingChallengeLookups[574];
};

struct animStringItem_t
{
  const char *string;
  int hash;
};

struct animVehicleSeats_t
{
  int seats;
};

struct animConditionTable_t
{
  animScriptConditionTypes_t type;
  animStringItem_t *values;
  int minValue;
  int maxValue;
};

struct loadAnim_t
{
  scr_anim_s anim;
  int iNameHash;
  char szAnimName[64];
};

struct controller_info_t
{
  vec3_t angles[6];
  vec3_t tag_origin_angles;
  vec3_t tag_origin_offset;
};

struct ai_animation_funcs_t
{
  void (__cdecl *pfnStart)(LocalClientNum_t, const entityState_s *, ActorAnimStates);
  void (__cdecl *pfnThink)(LocalClientNum_t, const entityState_s *);
  int (__cdecl *pfnLength)(LocalClientNum_t, const entityState_s *);
  void (__cdecl *pfnSetAtEnd)(LocalClientNum_t, const entityState_s *, actorInfo_t *);
};

struct AnimStateName
{
  unsigned __int16 *name;
  int category;
};

struct IPakPriority
{
  const char *name;
  int priority;
};

struct IPakSection
{
  unsigned int type;
  unsigned int offset;
  unsigned int size;
  unsigned int itemCount;
};

struct IPakLoadedPackfile
{
  char name[64];
  IPakSection data;
  IPakSection index;
  int fh;
  int refCount;
  int priority;
};

struct IPakHeader
{
  unsigned int magic;
  unsigned int version;
  unsigned int size;
  unsigned int sectionCount;
};

struct IPakIndexEntry
{
  unsigned __int64 key;
  unsigned int offset;
  unsigned int size;
};

struct IPakWorkData
{
  IPakLoadedPackfile *pak;
  int indexReadOffset;
  int activeBuffer;
  unsigned int currentEntry;
  unsigned __int16 imageParts[5312];
  IPakIndexEntry indexBuffer[2][4096];
  int indexBufferOffset[2];
  int indexBufferState[2];
};

struct stb_memory
{
  unsigned __int8 *data;
  unsigned int index;
  unsigned int size;
};

struct stbi_loader
{
  int (__cdecl *test_memory)(const unsigned __int8 *, int);
  unsigned __int8 *(__cdecl *load_from_memory)(const unsigned __int8 *, int, int *, int *, int *, int);
  int (__cdecl *test_file)(_iobuf *);
  unsigned __int8 *(__cdecl *load_from_file)(_iobuf *, int *, int *, int *, int);
};

struct stbi
{
  unsigned int img_x;
  unsigned int img_y;
  int img_n;
  int img_out_n;
  _iobuf *img_file;
  int buflen;
  unsigned __int8 buffer_start[128];
  int from_file;
  unsigned __int8 *img_buffer;
  unsigned __int8 *img_buffer_end;
};

struct huffman
{
  unsigned __int8 fast[512];
  unsigned __int16 code[256];
  unsigned __int8 values[256];
  unsigned __int8 size[257];
  unsigned int maxcode[18];
  int delta[17];
};

struct $686E7F163CECAA5A3924D476480D4579
{
  int id;
  int h;
  int v;
  int tq;
  int hd;
  int ha;
  int dc_pred;
  int x;
  int y;
  int w2;
  int h2;
  unsigned __int8 *data;
  void *raw_data;
  unsigned __int8 *linebuf;
};

struct jpeg
{
  stbi s;
  huffman huff_dc[4];
  huffman huff_ac[4];
  unsigned __int8 dequant[4][64];
  int img_h_max;
  int img_v_max;
  int img_mcu_x;
  int img_mcu_y;
  int img_mcu_w;
  int img_mcu_h;
  $686E7F163CECAA5A3924D476480D4579 img_comp[4];
  unsigned int code_buffer;
  int code_bits;
  unsigned __int8 marker;
  int nomore;
  int scan_n;
  int order[4];
  int restart_interval;
  int todo;
};

struct pic_packet_t
{
  unsigned __int8 size;
  unsigned __int8 type;
  unsigned __int8 channel;
};

struct stbi_gif_lzw_struct
{
  __int16 prefix;
  unsigned __int8 first;
  unsigned __int8 suffix;
};

struct chunk
{
  unsigned int length;
  unsigned int type;
};

struct stbi_gif_struct
{
  int w;
  int h;
  unsigned __int8 *out;
  int flags;
  int bgindex;
  int ratio;
  int transparent;
  int eflags;
  unsigned __int8 pal[256][4];
  unsigned __int8 lpal[256][4];
  stbi_gif_lzw_struct codes[4096];
  unsigned __int8 *color_table;
  int parse;
  int step;
  int lflags;
  int start_x;
  int start_y;
  int max_x;
  int max_y;
  int cur_x;
  int cur_y;
  int line_size;
};

struct $BC236CFBD570C18489EB46681F52D83D
{
  char *locale;
  unsigned __int16 *wlocale;
  int *refcount;
  int *wrefcount;
};

struct zhuffman
{
  unsigned __int16 fast[512];
  unsigned __int16 firstcode[16];
  int maxcode[17];
  unsigned __int16 firstsymbol[16];
  unsigned __int8 size[288];
  unsigned __int16 value[288];
};

struct zbuf
{
  unsigned __int8 *zbuffer;
  unsigned __int8 *zbuffer_end;
  int num_bits;
  unsigned int code_buffer;
  char *zout;
  char *zout_start;
  char *zout_end;
  int z_expandable;
  zhuffman z_length;
  zhuffman z_distance;
};

struct stbi_resample
{
  unsigned __int8 *(__cdecl *resample)(unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, int, int);
  unsigned __int8 *line0;
  unsigned __int8 *line1;
  int hs;
  int vs;
  int w_lores;
  int ystep;
  int ypos;
};

struct png
{
  stbi s;
  unsigned __int8 *idata;
  unsigned __int8 *expanded;
  unsigned __int8 *out;
};

struct BitField
{
  const unsigned int *array;
  unsigned int rowSize;
  unsigned int count;
  unsigned int mbits;
};

struct NetFieldList
{
  const NetField *array;
  unsigned int count;
  unsigned int bbPrintRandMax;
  unsigned int bbPrintCount;
  unsigned int bbChecksum;
  BitField bitFields;
  const char *fieldArrayName;
};

struct demoGameSettings
{
  bool onlinegame;
  bool xblive_privatematch;
  bool xblive_wagermatch;
  bool systemlink;
  bool isClientConsole;
  bool isDedicatedServer;
};

struct __declspec(align(4)) demoHeader
{
  int version;
  int maxClients;
  ClientNum_t defaultClient;
  bool isDemoClip;
  bool hasExtraNetworkProfileData;
  bool isZombie;
  demoGameSettings settings;
};

struct demoTaggedPlayers
{
  int count;
  int playerIndex[30];
};

struct __declspec(align(8)) demoDefaultMetaInfo
{
  demoTaggedPlayers taggedPlayers;
  char gameType[256];
  char mapName[256];
  char zmGameModeGroup[256];
  char zmMapStartLoc[256];
  char authorName[32];
  char name[22];
  bool isModifiedName;
  char description[64];
  bool isModifiedDescription;
  unsigned __int64 originalFileID;
  unsigned int createTime;
};

struct demoConnectedPlayers
{
  unsigned __int8 playerIndex;
  ClientNum_t clientNum;
  unsigned __int64 xuid;
  int connectTime;
  int disconnectTime;
  team_t assignedTeam;
  ffa_team_t assignedFFATeam;
  unsigned __int64 leagueTeamID;
  unsigned __int64 leagueSubdivisionID;
};

struct demoDefaultBookmark
{
  unsigned __int32 type : 7;
  unsigned __int32 entityNumber : 10;
  unsigned __int32 clientNum1 : 5;
  unsigned __int32 clientNum2 : 5;
  unsigned __int32 actorNum : 5;
  unsigned __int32 eType : 5;
  unsigned __int32 roundNumber : 8;
  unsigned __int32 overrideEntityCamera : 1;
  unsigned __int32 scoreEventPriority : 7;
  int time;
  int entBirthTime;
};

struct demoHeliPatches
{
  int brushmodel;
  vec3_t origin;
  unsigned __int16 targetname;
  bool excludeFromDemo;
  int enabled;
};

struct demoFooter
{
  int version;
  int startTime;
  int endTime;
  demoDefaultMetaInfo info;
  int numConnectedPlayers;
  demoConnectedPlayers connectedPlayers[50];
  int numDefaultBookmarks;
  demoDefaultBookmark defaultBookmarks[2500];
  int numHeliPatches;
  demoHeliPatches heliPatches[32];
};

struct __declspec(align(4)) demoKeyboardData
{
  int mode;
  const char *title;
  const char *defaultText;
  int textSize;
  int currentProcessingSegmentIndex;
  bool ignoreProfanityCheck;
};

struct demoSnapshotData
{
  int messageNum;
  int serverCommandNum;
  int deltaNum;
  int serverTime;
  int physicsTime;
  int snapFlags;
  __declspec(align(128)) MatchState matchState;
  playerState_s ps[18];
  entityState_s ent[1024];
  int entClientMask[1024][2];
  int prevNumEntities;
  clientState_s client[18];
  int prevNumClients;
  actorState_s actor[32];
  int prevNumActors;
};

struct demoMemBlock
{
  int compressedSize;
  int uncompressedSize;
  unsigned __int8 compressedMsgBuf[65536];
};

struct buttonHoldCmd
{
  bool active;
  int key;
  int activatedTime;
};

struct __declspec(align(4)) msg_bookmark_t
{
  int overflowed;
  int cursize;
  int bit;
  int lastEntityRef;
  int readcount;
  unsigned __int8 bitByte;
};

struct demoKeyFrame
{
  int keyframeBufferStart;
  int demoFileMemoryBlockStart;
  int keyframeSnapshotTime;
  int keyframeClipServerTime;
  int firstCmdSequence;
  int size;
  msg_bookmark_t msgBookmark;
};

struct demoDollyCameraMarker
{
  int time;
  unsigned __int8 glowFXValue;
  vec3_t origin;
  vec3_t forward;
  demoDollyCameraTimeScaleMode timeScaleMode;
  float timeScaleValue;
  unsigned int cameraHeadFxHandle;
  unsigned int cameraGlowFxHandle;
  demoKeyFrame keyFrame;
};

struct clipSegment
{
  char name[48];
  int clipBufferIndex;
  int size;
  demoClipTransition transition;
  int duration;
  int thumbnailImageSize;
  unsigned __int8 thumbnailImageBuf[65536];
  int highlightReelPriority;
  unsigned int bookmarks[79];
  demoTaggedPlayers taggedPlayers;
};

struct __declspec(align(4)) demoHighlightReelInformationDefine
{
  demoHighlightReelInformationType type;
  demoBookmarkType bookmarkType;
  unsigned __int16 eType;
  int secondsBefore;
  int secondsAfter;
  int thumbnailCaptureTimeDelta;
  int priorityWeightPerEvent;
  int priorityStackFactor;
  bool boostPriorityOnly;
  bool killcamAvailable;
};

struct demoHighlightReelStarLevels
{
  float starLevel;
  int minScore;
};

struct __declspec(align(4)) demoHighlightReelTimeline
{
  demoHighlightReelInformationType infoType;
  int startTime;
  int endTime;
  int thumbnailCaptureTime;
  int priority;
  unsigned int entityNumber;
  int birthTime;
  int entityLookAt;
  ClientNum_t clientNum;
  demoHighlightReelPlayerPriority playerPriority;
  unsigned int bookmarks[79];
  bool hasGameResult;
};

struct demoHighlightReelPreparingInformation
{
  bool pendingUpdate;
  demoHighlightReelTimeline currentEvent;
  int continuousOccurenceCount;
};

struct demoHighlightReelSettings
{
  demoHighlightReelPlayerFilter playerFilter;
  demoHighlightReelTransitionFilter transitionFilter;
  demoHighlightReelStylesFilter stylesFilter;
  int numberOfSegments;
  int minimumNumberofStars;
  demoHighlightReelGameResultFilter gameResultFilter;
};

struct __declspec(align(128)) demoPlayback
{
  bool overridePause;
  float timeScale;
  float fov;
  int highlightReelPriority;
  bool jumpTimeFlag;
  bool switchedPlayers;
  bool forceKeyframe;
  bool waitingForDownloadData;
  bool requestedForScreenshotCapture;
  demoInformationScreenTypes informationScreenType;
  int informationScreenActivateTime;
  bool informationScreenActive;
  buttonHoldCmd holdCmd;
  int buttonPressTime[10];
  unsigned __int8 *screenshotBuf;
  int screenshotSize;
  int thumbnailImageSize;
  unsigned __int8 thumbnailImageBuf[65536];
  unsigned __int8 thumbnailDecompressionBuffer[262144];
  demoDefaultMetaInfo screenshotInfo;
  demoMemBlock clipRecordMemBlock;
  bool displayPartyScoreboard;
  unsigned __int8 *keyframeBuf;
  demoKeyFrame keyFrame[250];
  msg_t keyframeMsg;
  int keyframeIndex;
  int keyframeBufferIndex;
  int lastProcessedCmd;
  bool keyframeGenerated;
  int lastJumpedKeyframe;
  int keyframeJumpCount;
  float actorAnimTimeAtJump[32];
  float actorCorpseAnimTimeAtJump[8];
  int actorCorpseOutOfSyncUseCount[8];
  bool completed;
  bool hideGameHud;
  bool hideDemoHud;
  demoSnapshotData prevSnapshot;
  demoCameraMode cameraMode;
  demoFreeCameraMode freeCameraMode;
  __declspec(align(16)) refdef_t refdef;
  vec3_t freeCameraOrigin;
  vec3_t freeCameraAngles;
  vec3_t freeCameraVelocity;
  int freeCameraOffsetEntity;
  vec3_t freeCameraOffsetAngles;
  vec3_t freeCameraOffsetOrigin;
  bool freeCameraEntityLockOnAllowed;
  int freeCameraLockedEntity;
  bool freeCameraLockedOnEntityActive;
  int freeCameraHighlightedEntityForLockOn;
  vec3_t initialEntityAngles;
  vec3_t dollyCameraVerts[500];
  unsigned __int8 *dollyCamKeyframeBuf;
  demoDollyCameraMarker dollyCamMarkers[50];
  unsigned int ghostDollyCameraHeadFxHandle;
  unsigned int ghostDollyCameraGlowFxHandle;
  int dollyCamMarkerCount;
  int dollyCamKeyframeBufferIndex;
  int highlightedDollyCamMarker;
  bool repositioningDollyCamMarker;
  bool cancelRepositioning;
  int gameExtraCamActiveState;
  vec3_t gameExtraCamOrigin;
  vec3_t gameExtraCamAngles;
  vec3_t clipCameraOrigin;
  vec3_t clipCameraAngles;
  vec3_t prevClipCameraOrigin;
  vec3_t prevClipCameraAngles;
  int clipHighlightReelPriority;
  bool clipPausedState;
  int clipCameraOffsetEntity;
  vec3_t clipCameraOffsetAngles;
  vec3_t clipCameraOffsetOrigin;
  vec3_t prevClipCameraOffsetAngles;
  vec3_t prevClipCameraOffsetOrigin;
  msg_t clipRecordingMsg;
  int prevClipRecordBufIndex;
  int clipRecordBufIndex;
  unsigned __int8 *mainClipRecordingBuf;
  unsigned __int8 *clipMergeBuf;
  unsigned __int8 subClipRecordingBuf[65536];
  playerState_s clipRecordPS;
  unsigned __int8 clipRecordClient;
  float clipRecordTimescale;
  float clipRecordFov;
  int clipRecordHighlightReelPriority;
  demoCameraMode clipCameraMode;
  bool clipHudHidden;
  demoDefaultMetaInfo clipRecordInfo;
  bool forceWriteClipCommands;
  demoClipState clipState;
  int clipTime;
  int clipServerTime;
  int prevClipTime;
  int originalFilmTime;
  bool clipModified;
  bool pendingSegmentSave;
  bool previewAllSegments;
  bool cancelPreview;
  bool forceTeleportClipCamera;
  clipSegment segments[20];
  int segmentCount;
  int segmentGameStateSize;
  int clipPreviewBufferIndex;
  int clipPreviewSegmentNumber;
  unsigned __int8 demoPreviewBuf[2][65536];
  demoKeyFrame demoPreview[2];
  bool demoCompleteStateForRestorationPoint[2];
  bool forceResetTimeValues;
  bool creatingHighlightReel;
  bool cancelHighlightReelCreation;
  bool errorStartingClipRecording;
  bool shownHighlightReelStartScreen;
  demoHighlightReelInformationDefine highlightReelInformationDefines[31];
  int highlightReelInformationDefineCount;
  demoHighlightReelStarLevels highlightReelStarLevels[10];
  int highlightReelNumStarLevels;
  demoHighlightReelTimeline highlightReelTimeline[50];
  demoHighlightReelPreparingInformation highlightReelPreparingInformation[21];
  demoHighlightReelSettings highlightReelSettings;
  bool preparedHighlightReelTimeline;
  int prevHighlightReelTimelineInformationCountBeforeFinalize;
  int highlightReelTimelineInformationCount;
  int highlightReelTimelineInformationAvailableCount;
  int processedHighlightReelTimelineIndex;
  bool creatingHighlightReelKillcam;
  bool setHighlightReelEventTimeScale;
};

struct __declspec(align(128)) demoMain
{
  char demoName[128];
  int demoFileHandle;
  demoState state;
  unsigned __int8 playbackMode;
  bool renderingAllocated;
  bool renderingAudioPass;
  bool renderingFirstJumpBackDone;
  bool renderingCancelled;
  msg_t msg;
  unsigned __int8 msgBuf0[65536];
  unsigned __int8 msgBuf1[65536];
  bool msgBufFlag;
  volatile int totalSize;
  int loadedTime;
  demoHeader header;
  demoFooter footer;
  demoKeyboardData keyboard;
  int demoAttachmentNum;
  bool shutdownInProgress;
  int gameStateMessageSequence;
  int lastProcessedTime;
  int lastProcessedMsgNum;
  int lastReliableCommandRecorded[18];
  bool gameStateWritten;
  demoSnapshotData snapshot;
  int prevNumParsedEntities;
  int prevNumParsedClients;
  int prevNumParsedActors;
  int playerSessionState[18];
  vec3_t intermissionPointOrigin;
  vec3_t intermissionPointAngles;
  int svTotalBytesSent;
  int svMaxBytesPerFrame;
  unsigned __int8 spawnDebugBuffer[16384];
  int spawnDebugBufferPos;
  demoMemBlock memBlock;
  demoPlayback *playback;
  bool playbackInited;
  demoStreamingThrottleState streamingThrottleState;
  int streamingThrottleTime;
  demoLagFlag_e lagFlag;
  unsigned __int64 renderMatchID;
  int renderSlot;
};

struct _BLOB
{
  unsigned int cbSize;
  unsigned __int8 *pBlobData;
};

struct demoTheaterFileInfo
{
  char name[64];
  char description[64];
  char category[32];
  int duration;
  bool isPooled;
  unsigned __int64 matchID;
  unsigned __int64 fileID;
};

struct uiInfo_s
{
  UiContext uiDC;
  int playerRefresh;
  int playerIndex;
  int timeIndex;
  int previousTimes[4];
  uiMenuCommand_t currentMenuType;
  bool allowScriptMenuResponse;
  char toastPopupTitle[256];
  char toastPopupDesc[256];
  char toastPopupIconName[256];
  int toastPopupDuration;
  int toastPopupTimeCounter;
  bool toastPopupOpened;
  int contractIndex;
};

struct qtime_s
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

struct __declspec(align(8)) jqWorkerCmd
{
  jqModule *module;
  unsigned int dataSize;
  volatile int ppu_fence;
  volatile int spu_fence;
  volatile int *spuThreadLimit;
  jqQueue *queue;
  unsigned int string_table;
};

struct PredictedVehicleDef
{
  bool fullPhysics;
  vec3_t origin;
  vec3_t angles;
  vec3_t tVel;
  vec3_t aVel;
  int serverTime;
};

struct clientHeader_t
{
  int state;
  int sendAsActive;
  int deltaMessage;
  int rateDelayed;
  int hasAckedBaselineData;
  int hugeSnapshotSent;
  netchan_t netchan;
  vec3_t predictedOrigin;
  int predictedOriginServerTime;
  int migrationState;
  PredictedVehicleDef predictedVehicle;
};

struct __declspec(align(4)) SnapshotInfo_s
{
  ClientNum_t clientNum;
  const clientHeader_t *client;
  int snapshotDeltaTime;
  bool fromBaseline;
  bool archived;
  bool packetIsDelta;
  bool entJustUnlinked;
  bool entNeverChanges;
  bool demoSnapshot;
  PacketEntityType packetEntityType;
  bool packetEntityTypeArchived;
};

struct heli_height_lock_patches_t
{
  int brushmodel;
  vec3_t origin;
  unsigned __int16 targetname;
  bool excludeFromDemo;
  int enabled;
};

struct svscmd_info_t
{
  char *cmd;
  int time;
  int type;
};

struct clientSnapshot_t
{
  playerState_s ps;
  int entityCount;
  int clientCount;
  int actorCount;
  int matchStateIndex;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int messageSent;
  int messageAcked;
  int messageSize;
  int serverTime;
  int physicsTime;
  int timeDelta;
  int baselineSnap;
};

struct /*__cppobj*/ client_t
{
  clientHeader_t header;
  const char *dropReason;
  char userinfo[1024];
  char reliableCommandBuffer[16384];
  int reliableCommandBufferNext;
  svscmd_info_t reliableCommandInfo[128];
  int reliableSequence;
  int reliableAcknowledge;
  int reliableSent;
  int messageAcknowledge;
  int gamestateMessageNum;
  int challenge;
  usercmd_s lastUsercmd;
  int lastClientCommand;
  char lastClientCommandString[1024];
  gentity_t *gentity;
  char name[32];
  char clanAbbrev[5];
  int clanAbbrev_IsEliteValidated;
  unsigned __int64 xuid;
  unsigned __int64 teamid;
  unsigned int doubleXPGroupMask;
  unsigned int availableMappackFlags;
  int nextReliableTime;
  int nextReliableCount;
  char reservedSlot;
  int lastPacketTime;
  int lastConnectTime;
  int nextSnapshotTime;
  int lastSnapshotTime;
  int timeoutCount;
  clientSnapshot_t frames[16];
  int ping;
  int pingMin;
  int pingMax;
  int unackCount;
  int rate;
  int pureAuthentic;
  int packetUploadCount;
  __declspec(align(128)) char netchanOutgoingBuffer[65536];
  char netchanIncomingBuffer[2048];
  int guid;
  unsigned __int16 scriptId;
  bool bIsSplitscreenClient;
  bool bIsSecondScreenClient;
  int bIsTestClient;
  int serverId;
  int natType;
  unsigned __int8 stats[50176];
  unsigned __int8 purchasedItems[32];
  int unlockedAttachments[64];
  unsigned __int8 bonusCardsActive[10];
  unsigned __int8 modifiedStatBytes[6272];
  int statsSentIndex;
  int statsModified;
  __int64 statPacketsReceived;
  int statsValidated;
  bool liveAuthorized;
  int liveAuthFlags;
  unsigned __int8 liveAuthFailCount;
  int liveAuthTimestamp;
  unsigned __int64 liveUserID;
  bool tempPacketDebugging;
  int snapshotHistoryTime;
  int snapshotHistoryFrames;
  int messageHistorySize;
  int demoPacketCount;
  int demoPacketSizes[8];
  int demoPacketIsFragment[8];
  int demoReliableCmdSize;
  char demoReliableCmdItemChars[16];
  int demoReliableCmdItemSize[16];
  int demoReliableCmdCount;
  unsigned int lastHashedXP;
  int lastSmallDeltaTime;
  int lastSnapSentTime;
};

struct archivedEntityShared_t
{
  int svFlags;
  vec3_t absmin;
  vec3_t absmax;
};

struct archivedEntity_s
{
  entityState_s s;
  archivedEntityShared_t r;
};

struct cachedClient_s
{
  int playerStateExists;
  clientState_s cs;
  playerState_s ps;
};

struct cachedActor_s
{
  actorState_s as;
};

struct cachedSnapshot_t
{
  int archivedFrame;
  int time;
  int physicsTime;
  int entityCount;
  int clientCount;
  int actorCount;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int matchStateIndex;
  int usesDelta;
};

struct serverStaticHeader_t
{
  client_t *clients;
  actor_t *actors;
  int time;
  int physicsTime;
  int snapFlagServerBit;
  int packetBackupCount;
  int packetBackupMask;
  svEntity_s *svEntities;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  entityState_s *noDeltaEntities;
  int nextSnapshotEntities;
  int numSnapshotEntities;
  entityState_s *snapshotEntities;
  int nextCachedSnapshotEntities;
  int numCachedSnapshotEntities;
  archivedEntity_s *cachedSnapshotEntities;
  int numSnapshotMatchStates;
  int nextSnapshotMatchStates;
  MatchState *snapshotMatchStates;
  int numCachedSnapshotMatchStates;
  int nextCachedSnapshotMatchStates;
  MatchState *cachedSnapshotMatchStates;
  int numSnapshotClients;
  int nextSnapshotClients;
  clientState_s *snapshotClients;
  int numCachedSnapshotClients;
  int nextCachedSnapshotClients;
  cachedClient_s *cachedSnapshotClients;
  int numSnapshotActors;
  int nextSnapshotActors;
  actorState_s *snapshotActors;
  int numCachedSnapshotActors;
  int nextCachedSnapshotActors;
  cachedActor_s *cachedSnapshotActors;
  vec3_t mapCenter;
  vec3_t mapCenterBoundsMin;
  vec3_t mapCenterBoundsMax;
  unsigned __int8 *archivedSnapshotBuffer;
  cachedSnapshot_t *cachedSnapshotFrames;
  int nextCachedSnapshotFrames;
  int nextArchivedSnapshotFrames;
  int archivedEntityCount;
  int num_entities;
  int maxclients;
  int fps;
  int clientArchive;
  gentity_t *gentities;
  int gentitySize;
  clientState_s *firstClientState;
  actorState_s *firstActorState;
  playerState_s *firstPlayerState;
  MatchState *matchState;
  int clientSize;
  int actorSize;
  int serverFrameMS;
  unsigned int pad[2];
};

struct serverSnapshot_t
{
  playerState_s *ps[18];
  int entityCount;
  int clientCount;
  int actorCount;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int matchStateIndex;
};

struct archivedSnapshot_s
{
  int start;
  int size;
};

struct challenge_t
{
  netadr_t adr;
  int challenge;
  int time;
  int pingTime;
  int firstTime;
  int firstPing;
  int connected;
  int guid;
};

struct tempBanSlot_t
{
  int guid;
  int banTime;
};

struct /*__cppobj*/ __declspec(align(8)) playerInfo_t
{
  bool synchronize;
  unsigned __int64 xuid;
  PartyMember pm;
  int natType;
  bool unregisterOldClientFromSession;
  netadr_t remoteAddress;
  char name[32];
};

struct rateBoostingStats_t
{
  int bytesSent;
  int serverMS;
  int clientPings;
  int clientAckFramesBehind;
  int clientUsercmdTimeDiff;
  int numClientFrames;
  int numFrames;
};

struct /*__cppobj*/ __declspec(align(64)) serverStatic_t
{
  int clientCount;
  int packetBackupCount;
  int packetBackupMask;
  entityState_s *noDeltaEntities;
  entityState_s *snapshotEntities;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  cachedSnapshot_t *cachedSnapshotFrames;
  archivedEntity_s *cachedSnapshotEntities;
  serverSnapshot_t snapshots[16];
  int serverSnapshotTimes[16];
  int nextServerSnapshotIndex;
  int baselineCreated;
  int initialized;
  int time;
  int physicsTime;
  int oldestArchiveTime;
  int snapFlagServerBit;
  client_t *clients;
  int numCachedSnapshotMatchStates;
  int numCachedSnapshotEntities;
  int numCachedSnapshotClients;
  int numCachedSnapshotActors;
  int numSnapshotMatchStates;
  int numSnapshotEntities;
  int numSnapshotClients;
  int numSnapshotActors;
  int nextSnapshotMatchStates;
  int nextSnapshotEntities;
  int nextSnapshotClients;
  int nextSnapshotActors;
  MatchState *snapshotMatchStates;
  clientState_s *snapshotClients;
  actorState_s *snapshotActors;
  int nextArchivedSnapshotFrames;
  archivedSnapshot_s *archivedSnapshotFrames;
  unsigned __int8 *archivedSnapshotBuffer;
  int nextArchivedSnapshotBuffer;
  int nextCachedSnapshotMatchStates;
  int nextCachedSnapshotEntities;
  int nextCachedSnapshotClients;
  int nextCachedSnapshotActors;
  int nextCachedSnapshotFrames;
  MatchState *cachedSnapshotMatchStates;
  cachedClient_s *cachedSnapshotClients;
  cachedActor_s *cachedSnapshotActors;
  int nextHeartbeatTime;
  int nextStatusResponseTime;
  challenge_t challenges[1024];
  netadr_t redirectAddress;
  netProfileInfo_t OOBProf;
  tempBanSlot_t tempBans[16];
  unsigned __int64 xuids[18];
  playerInfo_t playerInfos[18];
  vec3_t mapCenter;
  vec3_t mapCenterBoundsMin;
  vec3_t mapCenterBoundsMax;
  int dataSentLastSec;
  int activeEntities;
  int archivedEntityCount;
  int snapshotBoostingSuspendTimeout;
  int badServerFPSCount;
  int badServerFPSLast;
  rateBoostingStats_t rateBoostingStats;
  int rateBoostingEnabled;
};

struct WorkerCmdConditional
{
  void *address;
  unsigned int value;
};

struct __declspec(align(4)) demoSaveCmd
{
  unsigned __int8 *data;
  int size;
  bool writeFooter;
  bool gameState;
};

struct demoProfile
{
  int memUsed[8];
  int count[8];
};

struct clientLogo_t
{
  int startTime;
  int duration;
  int fadein;
  int fadeout;
  Material *material[2];
};

struct /*__cppobj*/ serverInfo_t
{
  XNADDR xnaddr;
  bdSecurityKey xnkey;
  bdSecurityID xnkid;
  int publicSlots;
  int publicSlotsUsed;
  int privateSlots;
  int privateSlotsUsed;
  unsigned __int64 nonce;
  netadr_t adr;
  unsigned __int8 allowAnonymous;
  unsigned __int8 bPassword;
  unsigned __int8 pure;
  char consoleDisabled;
  unsigned __int8 netType;
  unsigned __int8 clients;
  unsigned __int8 maxClients;
  unsigned __int8 dirty;
  char friendlyfire;
  char killcam;
  char hardcore;
  unsigned __int8 hardware;
  unsigned __int8 mod;
  unsigned __int8 voice;
  unsigned __int8 requestCount;
  __int16 minPing;
  __int16 maxPing;
  __int16 ping;
  int pingedTime;
  char hostName[32];
  char mapName[32];
  char game[24];
  char gameType[16];
  unsigned __int8 isInGame;
  unsigned __int64 friendsBits;
  unsigned __int64 bdUserID;
  int region;
  int score;
};

struct __declspec(align(4)) vidConfig_t
{
  unsigned int sceneWidth;
  unsigned int sceneHeight;
  unsigned int displayWidth;
  unsigned int displayHeight;
  unsigned __int16 outputDisplayWidth;
  unsigned __int16 outputDisplayHeight;
  unsigned int displayFrequency;
  bool isToolMode;
  int isWideScreen;
  int isHiDef;
  int isFullscreen;
  float aspectRatioWindow;
  float aspectRatioScenePixel;
  float aspectRatioDisplayPixel;
  unsigned int maxTextureSize;
  unsigned int maxTextureMaps;
  bool deviceSupportsGamma;
};

struct clientDebugStringInfo_t
{
  int max;
  int num;
  trDebugString_t *strings;
  int *durations;
};

struct clientDebugLineInfo_t
{
  int max;
  int num;
  trDebugLine_t *lines;
  int *durations;
};

struct clientDebugSphereInfo_t
{
  int max;
  int num;
  trDebugSphere_t *spheres;
  int *durations;
};

struct clientDebug_t
{
  int prevFromServer;
  int fromServer;
  clientDebugStringInfo_t clStrings;
  clientDebugStringInfo_t svStringsBuffer;
  clientDebugStringInfo_t svStrings;
  clientDebugLineInfo_t clLines;
  clientDebugLineInfo_t svLinesBuffer;
  clientDebugLineInfo_t svLines;
  clientDebugSphereInfo_t clSpheres;
  clientDebugSphereInfo_t svSpheresBuffer;
  clientDebugSphereInfo_t svSpheres;
};

struct gameState_t
{
  int stringOffsets[2806];
  unsigned int stringChecksums[2806];
  char stringData[65536];
  int dataCount;
  int stringUpdateFrameNumber;
  int matchUIVisibilityFlags;
  int scr_checksum[3];
  unsigned int clientfield_hash;
  unsigned int server_highest_clientfield_version;
};

struct /*__cppobj*/ __declspec(align(8)) clientStatic_t
{
  int hunkUsersStarted;
  char servername[256];
  XSESSION_INFO hostInfo;
  int rendererStarted;
  int soundStarted;
  int uiStarted;
  int devGuiStarted;
  int frametime;
  float frametime_base;
  int realtime;
  int realFrametime;
  bool inputUpdatedPrevFrame;
  clientLogo_t logo;
  vec3_t mapCenter;
  int numlocalservers;
  serverInfo_t localServers[128];
  int lastServerPinged;
  int pingedServerCount;
  int totalServersParsed;
  int pingUpdateSource;
  Material *whiteMaterial;
  Material *consoleMaterial;
  Material *spinnerMaterial;
  Material *loaderMaterial;
  Font_s *consoleFont;
  vidConfig_t vidConfig;
  clientDebug_t debug;
  XNADDR xnaddrs[18];
  volatile int scriptError;
  vec3_t debugRenderForward;
  vec3_t debugRenderPos;
  int serverId;
  int forceFullscreen;
  int exitForceFullscreen;
  bool inParty[18];
  clSnapshot_t noDeltaSnapshot;
  int nextNoDeltaEntity;
  entityState_s noDeltaEntities[1024];
  gameState_t gameState;
};

struct __declspec(align(4)) TrackType
{
  char *trackType;
  bool prestige;
};

struct cscr_mp_data_t
{
  int airsupport;
  int demo_jump;
  int playerSwitch;
  int killcam_begin;
  int killcam_end;
  int activateexploder;
  int deactivateexploder;
  int activatelightexploder;
  int deactivatelightexploder;
  int soundNotifyCallback;
  int chargeshotWeaponSoundNotify;
};

class Destructible_BonePose
{
public:
    int boneid;
    int pieceIndex;
    vec3_t angles_original;
    vec3_t angles_offset;
    vec3_t angles_vel;
};

class DestructiblePose
{
public:
  Destructible_BonePose bones[32];
  __int16 numBones;
  __int16 destructibleID;
};

struct scr_classStruct_t
{
  unsigned __int16 id;
  unsigned __int16 entArrayId;
  char charId;
  const char *name;
};

struct demoFileShareTaskHandler
{
  bool isAbortingFileshareTask;
  ControllerIndex_t fileshareTaskControllerIndex;
  int abortResetTime;
};

struct demoFileHandler
{
  unsigned __int8 *ptr;
  int size;
  int offset;
};

struct uploadSendInfo_t
{
  int ms;
  unsigned int size;
};

struct __declspec(align(8)) uploadStreamData_t
{
  ControllerIndex_t controllerIndex;
  unsigned __int8 buffer[524288];
  unsigned __int64 fileID;
  volatile int writer;
  volatile int reader;
  volatile bool active;
  volatile int lastWrite;
  int totalBytesUploaded;
  bool overflow;
  bool failure;
  uploadSendInfo_t sendHistory[100];
  int sendHistoryIndex;
};

struct uploadStreamDebugData_t
{
  bool isDataAdded;
  int value;
};

struct uploadStreamHistory_t
{
  uploadStreamDebugData_t history[60];
  bool changed;
  int highwater;
  int roundNumber;
  unsigned int bytesWrittenThisRound;
  unsigned int timeRoundStarted;
  unsigned int lastIntervalUpdateBytes;
  unsigned int lastIntervalUpdateTime;
};

struct /*__cppobj*/ __declspec(align(8)) demoRecordedFileUploadInfo
{
  unsigned __int64 fileID;
  unsigned __int8 metaData[255];
  bdTag tags[60];
  int numTags;
};

struct __declspec(align(4)) streamingState_s
{
  unsigned __int8 *buffer;
  int bufferSize;
  demoStreamingState phase;
  int segmentNo;
  int byteOffset;
  int totalDuration;
  bool isEnteringState;
};

struct /*__cppobj*/ __declspec(align(8)) fileshareUploadInfo_t
{
  unsigned __int8 metaData[255];
  bdTag tags[60];
  int numTags;
  char fileName[256];
  char name[22];
  char description[64];
};

struct __declspec(align(8)) streamBuffer_t
{
  unsigned __int8 *buffer;
  int bufferSize;
  volatile int writer;
  volatile int reader;
  volatile bool active;
  volatile int lastWriteTime;
  volatile int lastReadTime;
  volatile bool taskRequestPending;
  volatile bool taskRequestError;
  volatile unsigned __int64 fileID;
  ControllerIndex_t controllerIndex;
  void *userData;
  int userDataSize;
};

class bdDownloadInterceptor
{
public:
    unsigned int handleDownload(void*, unsigned int);
};

class dwFileShareReadFileTask
{
public:
    fileShareLocation location;
    unsigned __int64 fileID;
    unsigned int fileSize;
    bdFileMetaData descriptor;
    const char* menuDef;
    void* buffer;
    void* cacheBuffer;
    unsigned int bufferSize;
    unsigned int bytesDownloaded;
    bdDownloadInterceptor* downloadHandler;
    bool loadedFromCache;
    unsigned int startByte;
    unsigned int endByte;
    void(__cdecl* dataCallback)(void*, unsigned int, unsigned int, unsigned int);
    void(__cdecl* successCallback)(const ControllerIndex_t, dwFileShareReadFileTask*);
    void(__cdecl* failureCallback)(const ControllerIndex_t, dwFileShareReadFileTask*);
};

struct fileShareReadFileInfo
{
  unsigned __int64 fileID;
  unsigned int fileSize;
  fileShareLocation location;
  char *buffer;
  unsigned int bufferSize;
  bool isStreamed;
  void *cacheBuffer;
  unsigned int cacheBufferSize;
  unsigned int startByte;
  unsigned int endByte;
  void (__cdecl *dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *successCallback)(const ControllerIndex_t, dwFileShareReadFileTask *);
  void (__cdecl *failureCallback)(const ControllerIndex_t, dwFileShareReadFileTask *);
};

struct downloadStreamingInformation_t
{
  ControllerIndex_t controllerIndex;
  streamBuffer_t streamBuffer;
  fileShareReadFileInfo fileInfo;
  downloadStreamingState currentPhase;
  bool markedForRetry;
  int downloadFailedTime;
  int retryAttempts;
  char demoMode[32];
  bool readyForPlayback;
  bool active;
  int dataBlockDownloadRequestTime;
};

struct __declspec(align(8)) fileShareWriteSummaryInfo
{
  unsigned __int64 fileID;
  fileShareLocation location;
  const void *summaryData;
  unsigned int summaryDataSize;
  const void *metaData;
  unsigned int metaDataSize;
  unsigned int numTags;
  bdTag *tags;
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

struct fileShareWriteFileInfo
{
  unsigned __int16 fileSlot;
  void *fileData;
  unsigned int fileSize;
  const char *fileName;
  unsigned __int16 category;
  const void *thumbData;
  unsigned int thumbDataSize;
  unsigned int numTags;
  fileShareLocation location;
  bdTag *tags;
  const char *menuDef;
  void (__cdecl *progressCallback)(ControllerIndex_t, unsigned int *, unsigned int *);
  unsigned int (__cdecl *dataCallback)(void *, unsigned int, unsigned int);
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

struct /*__cppobj*/ __declspec(align(4)) bdYouTubeAuthorizationCode : bdTaskResult
{
  char m_userCode[33];
  char m_verificationUrl[513];
};

struct /*__cppobj*/ bdYouTubeUserToken : bdTaskResult
{
  char m_tokenType[129];
  char m_token[4097];
  char m_tokenSecret[1025];
  char m_keyIdentifier[513];
  unsigned int m_tokenTTL;
  unsigned int m_expiryTime;
};

struct Demo_SetTag_EmblemInfoParam_s
{
  unsigned __int64 fingerPrint;
  unsigned __int64 beginTimeStamp;
  unsigned __int64 numUploadsSinceTimeStamp;
};

struct bdHTTPBuffer
{
  void *m_contentReceiveBuffer;
  unsigned int m_contentReceiveBufferSize;
  const void *m_contentSendBuffer;
  unsigned int m_contentSendBufferSize;
  char m_httpCommonBuffer[1024];
  unsigned int m_httpCommonBufferSize;
  char m_responseStatusBuffer[128];
  unsigned int m_responseStatusBufferSize;
};

struct AnimSubState
{
  unsigned __int16 animIndex;
  unsigned __int16 alias;
};

struct AnimState
{
  unsigned __int16 name;
  unsigned __int16 notify;
  unsigned __int8 flags;
  unsigned __int8 size;
  AnimSubState *subStates;
};

struct AnimStateDef
{
  scr_animtree_t tree;
  unsigned __int16 name;
  unsigned __int16 size;
  AnimState *states;
};

struct AIDemoLockOnView
{
  int heightOffset;
  float pitchMin;
  float pitchMax;
};

struct AIDemoLockOnValues
{
  float highlightDistance;
  AIDemoLockOnView views[2];
};

struct __declspec(align(4)) AITypeScript
{
  int main;
  int precache;
  int spawner;
  unsigned __int8 aiTypeIndex;
  unsigned __int8 clientAiTypeIndex;
  int clientMain;
  int clientPrecache;
  FootstepTableDef *footstepTable;
  FootstepFXTableDef *footstepFXTable;
  AnimStateDef *animStateDef;
  AIDemoLockOnValues demoLockOn;
  bool bAITypeGeneratesFootstepCallback;
  bool bClientPrecacheCalled;
};

struct cg_level_locals_t
{
  int scriptPrintChannel;
  SpawnVar spawnVar;
  int triggerIndex;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int entTriggerIndex[1792];
  AITypeScript *aiTypes[255];
  ZBarrierType *zbarrierTypes[255];
  FootstepTableDef *player1stPerson;
  FootstepTableDef *player3rdPerson;
  FootstepTableDef *player1stPersonQuiet;
  FootstepTableDef *player3rdPersonQuiet;
  FootstepTableDef *player3rdPersonLoud;
  FootstepTableDef *defaultAi;
  FootstepTableDef *dogSteps;
  FootstepFXTableDef *defaultFootstepFX;
  vec2_t mapLatLong;
  vec2_t mapLatLongOrigin;
};

struct cgMedia_t
{
  Material *whiteMaterial;
  Material *teamStatusBar;
  Material *afkLightbulb;
  Material *connectionMaterial;
  Material *youInKillCamMaterial;
  TracerDef *tracerDefault;
  Material *tracerThermalOverrideMat;
  Material *redTracerMaterial;
  Material *greenTracerMaterial;
  Material *bulletMaterial;
  Material *laserMaterial;
  Material *laserViewmodelMaterial;
  Material *laserLightMaterial;
  Material *lagometerMaterial;
  Material *ropeMaterial;
  Material *fhj18hudBackground;
  Material *rangefinderHudBackground;
  Material *bcpuHudBackground;
  Material *tacticalInsertionBackground;
  Material *briefcaseBombBackground;
  Material *pdaHackerBackground;
  Material *scopeOverlayEmp;
  Material *hintMaterials[264];
  Material *objectiveMaterials[1];
  Material *friendMaterials[3];
  Material *partyMaterials[3];
  Material *damageMaterial;
  Material *mantleHint;
  Material *graphline;
  Font_s *smallDevFont;
  Font_s *bigDevFont;
  Font_s *extraBigDevFont;
  Font_s *inspectorFont;
  unsigned int grenadeExplodeSound[32];
  unsigned int rifleGrenadeSound[32];
  unsigned int rocketExplodeSound[32];
  unsigned int rocketExplodeXtremeSound[32];
  unsigned int mortarShellExplodeSound[32];
  unsigned int tankShellExplodeSound[32];
  unsigned int weaponImpactsTankArmorSound[16];
  unsigned int weaponImpactsTankTreadSound[16];
  unsigned int bulletHitSmallSound[32];
  unsigned int bulletHitLargeSound[32];
  unsigned int bulletHitAPSound[32];
  unsigned int bulletHitXTremeSound[32];
  unsigned int shotgunHitSound[32];
  unsigned int boltHitSound[32];
  unsigned int bladeHitSound[32];
  unsigned int bulletExitSmallSound[32];
  unsigned int bulletExitLargeSound[32];
  unsigned int bulletExitAPSound[32];
  unsigned int bulletExitXTremeSound[32];
  unsigned int shotgunExitSound[32];
  unsigned int boltExitSound[32];
  unsigned int mantleSound;
  unsigned int mantleSoundPlayer;
  unsigned int dtpLaunchSound;
  unsigned int dtpLaunchSoundPlayer;
  unsigned int dtpLandSound[9];
  unsigned int dtpLandSoundPlayer[9];
  char dtpSlideLoopSound[9][64];
  char dtpSlideLoopSoundPlayer[9][64];
  unsigned int dtpSlideStopSound[9];
  unsigned int dtpSlideStopSoundPlayer[9];
  unsigned int dtpCollideSound;
  unsigned int dtpCollideSoundPlayer;
  unsigned int playerSlidingStart_1p[9];
  unsigned int playerSlidingStart_3p[9];
  unsigned int playerSlidingStop_1p[9];
  unsigned int playerSlidingStop_3p[9];
  unsigned int bulletWhizby;
  unsigned int bulletCrack;
  unsigned int underwaterWhizby;
  unsigned int deathGurgle;
  unsigned int meleeHit;
  unsigned int meleeHitOther;
  unsigned int meleeKnifeHit;
  unsigned int meleeKnifeHitOther;
  unsigned int meleeDogHit;
  unsigned int meleeDogHitOther;
  unsigned int meleeKnifeHitShield;
  unsigned int nightVisionOn;
  unsigned int nightVisionOff;
  unsigned int playerSprintGasp;
  unsigned int playerHeartBeatSound;
  unsigned int playerBreathInSound;
  unsigned int playerBreathOutSound;
  unsigned int playerBreathGaspSound;
  unsigned int playerSwapOffhand;
  unsigned int rangeFinderLoopSound;
  unsigned int sensorGrenadeAlert;
  unsigned int sonarAttachmentPingSound;
  unsigned int chargeShotWeaponChargingSound;
  unsigned int chargeShotWeaponDischargeSound;
  unsigned int chargeShotWeaponBulletQueueSound[5];
  unsigned int radarSweepSound;
  unsigned int radarPingSound;
  unsigned int headshotSound;
  Material *compassping_player;
  Material *compassping_player_bracket;
  Material *compassping_playerfiring_shoutcast;
  Material *compassping_friendlyfiring;
  Material *compassping_friendlyyelling;
  Material *compassping_friendlyfakefire;
  Material *compassping_partyfiring;
  Material *compassping_partyyelling;
  Material *compassping_enemy;
  Material *compassping_enemydirectional;
  Material *compassping_enemyfiring;
  Material *compassping_enemyyelling;
  Material *compassping_enemysatellite;
  Material *compassping_grenade;
  Material *compassping_explosion;
  Material *compassping_firstplace;
  Material *compassping_generic_player_shoutcast;
  Material *compassping_generic_playerfiring_shoutcast;
  Material *compassping_generic_playerfiring;
  Material *watch_face;
  Material *watch_hour;
  Material *watch_minute;
  Material *watch_second;
  Material *acoustic_ping;
  Material *acoustic_wedge;
  Material *acoustic_grid;
  Material *compass_scrambler_large;
  Material *compass_mortar_selector;
  Material *compass_acoustic_ping;
  Material *compass_radarline;
  Material *compass_artillery_friendly;
  Material *compass_artillery_enemy;
  Material *compass_mortar_friendly;
  Material *compass_mortar_enemy;
  Material *compass_dogs_enemy;
  Material *compass_incoming_artillery;
  Material *compass_sentry_white;
  Material *compass_microwave_turret_white;
  Material *compass_supplydrop_white;
  Material *compass_supplydrop_green;
  Material *compass_supplydrop_red;
  Material *compass_guided_hellfire_missile;
  Material *compass_guided_drone_missile;
  Material *compass_tank_turret;
  Material *grenadeIconFrag;
  Material *grenadeIconFlash;
  Material *grenadeIconThrowBack;
  Material *grenadePointer;
  Material *offscreenObjectivePointer;
  Material *clientLastStandWaypoint;
  Material *clientAutoReviveWaypoint;
  Material *clientManualReviveWaypoint;
  Material *clientTeamReviveWaypoint[10];
  Material *demoTimelineFaded;
  Material *demoTimelineSolid;
  Material *demoTimelineCursor;
  Material *demoTimelineBookmark;
  Material *demoStatePaused;
  Material *demoStatePlay;
  Material *demoStateStop;
  Material *demoStateJump;
  Material *demoStateForwardFast;
  Material *demoStateForwardSlow;
  Material *demoDollycamTracerMaterial;
  FxImpactTable *fx;
  const FxEffectDef *fxNoBloodFleshHit;
  const FxEffectDef *fxKnifeBlood;
  const FxEffectDef *fxKnifeNoBlood;
  const FxEffectDef *fxDogBlood;
  const FxEffectDef *fxDogNoBlood;
  const FxEffectDef *fxNonFatalHero;
  const FxEffectDef *fxSensorGrenadeFriendlyRunner;
  const FxEffectDef *fxSensorGrenadeEnemyRunner;
  const FxEffectDef *fxSensorGrenadeTargetingBolt;
  const FxEffectDef *fxRiotShieldImpact;
  const FxEffectDef *fxBloodOnRiotshield;
  const FxEffectDef *fxLaserPoint;
  const FxEffectDef *fxLaserPointSight;
  const FxEffectDef *fxLaserPointSightThermal;
  const FxEffectDef *fxLaserPointVehicle;
  const FxEffectDef *fxDtpArmSlide1;
  const FxEffectDef *fxDtpArmSlide2;
  const FxEffectDef *fxPlayerSliding;
  const FxEffectDef *fxPuff;
  const FxEffectDef *heliDustEffect;
  const FxEffectDef *heliWaterEffect;
  const FxEffectDef *helicopterLightSmoke;
  const FxEffectDef *helicopterHeavySmoke;
  const FxEffectDef *helicopterOnFire;
  const FxEffectDef *jetAfterburner;
  Material *empFilterOverlay;
  Material *nightVisionOverlay;
  Material *hudIconNVG;
  Material *hudDpadArrow;
  Material *hudDpadCircle;
  Material *hudDpadLeftHighlight;
  Material *ammoCounterBullet;
  Material *ammoCounterBeltBullet;
  Material *ammoCounterRifleBullet;
  Material *ammoCounterRocket;
  Material *ammoCounterShotgunShell;
  Material *ammoCounterSingle;
  Material *lifeCounterAlive;
  Material *lifeCounterDead;
  Material *textDecodeCharacters;
  Material *textDecodeCharactersGlow;
  const FxEffectDef *physicsWaterEffects[8];
  const FxEffectDef *infraredHeartbeat;
  const FxEffectDef *playerLaserSightLight;
};

struct FxBeamTracerData
{
  float wiggleDist;
  float textureReps;
  float segLength;
};

struct FxBeamDemoLineData
{
  float *segmentVerts;
};

struct FxBeamLaserData
{
  float endRadius;
};

struct FxBeamFlameData
{
  float endRadius;
  float *segmentVerts;
  Material *material2;
  int perpSegmentCount;
  float animFrac;
};

struct FxBeamArcData
{
  float endRadius;
  float textureReps;
  float *segmentVerts;
};

struct FxBeam
{
  unsigned __int8 type;
  bool depthHack;
  unsigned __int8 drawSurfOverride;
  vec3_t begin;
  vec3_t end;
  GfxColor colors[5];
  float radius;
  Material *material;
  int segmentCount;
  union {
      FxBeamTracerData tracer;
      FxBeamLaserData laser;
      FxBeamFlameData flame;
      FxBeamDemoLineData demoLine;
      FxBeamArcData arc;
  };
};

struct GlassShardMeshVertex
{
  unsigned __int8 pos;
  unsigned __int8 norm;
};

struct ShardGroup
{
  unsigned int packedPos;
  const GlassDef *glassDef;
  GlassShard *head;
  vec3_t worldBBoxMin;
  vec3_t worldBBoxMax;
  vec3_t origin;
  bool inGenVertsJob;
  bool invalidBBox;
  bool visible;
  bool highLod;
  __int16 numShards;
  __int16 numIndices;
  __int16 numVerts;
  unsigned __int16 lightingHandle;
  GfxLightingInfo lightingInfo;
  FxCodeMeshData *codeMesh;
  GfxDrawSurf *drawSurf;
  unsigned __int16 vertsBaseIndex;
  GfxPackedVertex *baseVerts;
  unsigned __int16 *renderIndices;
};

struct Allocator
{
  void *buffer;
  struct Memory {
      Memory* next;
      Memory* prev;
      void* userData;
      Memory* nextFree;
      Memory* prevFree;
  } *head;
  Memory *tail;
  Memory *freeHead;
  int maxUsed;
};

template <typename Class>
class FixedSizeAllocator
{
    struct Block {
        Block* prev;
        Block* next;
        unsigned int magic;
        Class* data;
    };
public:
    Block *prev;
    Block *next;
    unsigned int magic;
    Class *data;
};

class GlassPackedOutline
{
    struct PackedVert {
        enum {
            FRAC_BITS = 0x7,
        };
        __int16 x;
        __int16 y;
    };
public:
    unsigned __int8 numVerts;
    bool onBottomEdge;
    unsigned __int16 sortKey;
    unsigned int edgeFlags;
    float edgeRatio;
    float area;
    PackedVert* verts;
};

struct ray2_t
{
    vec2_t origin;
    vec2_t dir;
    float len;
};

const class __declspec(align(2)) GlassOutline
{
    struct EdgeDistance
    {
        unsigned int edgeIndex;
        float edgeParam;
        float dist;
        vec2_t closestPoint;
    };
    struct __declspec(align(4)) Vertex
    {
        ray2_t edge;
        bool isOriginalEdge;
    };
    enum SplitFailReason
    {
        SPLIT_FAIL_START_POS = 0x0,
        SPLIT_FAIL_START_DIR = 0x1,
        SPLIT_FAIL_INIT = 0x2,
        SPLIT_FAIL_VERTS = 0x3,
        SPLIT_FAIL_AREA = 0x4,
        SPLIT_FAIL_MEMORY = 0x5,
        SPLIT_FAIL_ANGLE = 0x6,
        SPLIT_FAIL_NARROW = 0x7,
        NUM_SPLIT_FAIL_REASONS = 0x8,
    };
    enum {
        MIN_OUTLINE_VERTS = 0x3,
        MAX_OUTLINE_VERTS = 0x10,
    };
public:
    Vertex* verts;
    float length;
    float area;
    unsigned __int8 maxVerts;
    unsigned __int8 numVerts;
    bool isClosed;
};

class __declspec(align(4)) GlassShard
{
public:
    const class Triangles {
        const GlassOutline* outline;
        unsigned __int8 triangleIndices[256];
        unsigned int nIndices;
    };
    GlassShard* groupNext;
    unsigned __int8* memoryPtr;
    unsigned __int16 memorySize;
    unsigned __int16 glassIndex;
    GlassPackedOutline packedOutline;
    float thickness;
    float uvScale;
    vec2_t uvOffset;
    float binormalSign;
    struct __declspec(align(4)) Mesh {
        PackedUnitVec* normArray;
        unsigned __int8* indices;
        unsigned __int8 numNorm;
        unsigned __int8 numVerts;
        unsigned __int8 numVertsLow;
        unsigned __int8 numIndices;
        unsigned __int8 numIndicesLow;
    } mesh;
    struct __declspec(align(4)) {
        unsigned int packedPos;
        float timeUntilAction;
        vec3_t axis[3];
        vec3_t origin;
        vec3_t worldBBoxMin;
        vec3_t worldBBoxMax;
        bool inGroupChange;
    } local;
    int physObjId;
    GlassPhysics* glassPhysics;
    ShardGroup* group;
    bool remove;
    bool delayedDrop;
};

class SmallAllocator
{
public:
    void* memory;
    void* freeHead;
    unsigned int blockSize;
    unsigned int numBlocks;
    unsigned int numUsed;
    unsigned int maxUsed;
};

class GlassState
{
    enum State {
        PRISTINE = 0x0,
        CRACKED = 0x1,
        SHATTERED = 0x2,
        INVALID = 0x3,
    };
public:
    unsigned int i;
    struct {
        unsigned __int32 state : 4;
        unsigned __int32 id : 12;
    };
};

class __declspec(align(4)) GlassClient
{
    class Outlines
    {
    public:
        unsigned int numOutlines;
        unsigned __int8* buffer;
    };
public:
    const Glass* glass;
    GlassState state;
    bool shatterDelay;
    Outlines outlines;
    bool preShatterDone;
};

class GlassLock
{
public:
    volatile int lock;
};

class GlassRenderer
{
    struct Action {
        enum {
            HELD = 0x0,
            STOWED = 0x1,
            MELEE = 0x2,
        } type;
        union {
            struct {
                GlassClient* glass;
                bool gameState;
                vec3_t hitPos;
                vec3_t hitDir;
            } shatter;
            struct {
                vec3_t p0;
                vec3_t p1;
            } trace;
            struct {
                vec3_t origin;
                float damageInner;
                float damageOuter;
                float radius;
                int mod;
            } explosion;
            struct {
                vec3_t eyePos;
                vec3_t forward;
                vec3_t right;
                vec3_t up;
                float range;
            } melee;
        };
    };
    class SortedShardsList : std::list<GlassShard*, std::allocator<GlassShard*>> {};
public:
    struct {
        GlassShardMeshVertex* vertexList[22];
        vec3_t allBBoxMin;
        vec3_t allBBoxMax;
        vec3_t coordScale;
        float worldBottom;
    } local;
  GlassShard *groupChanges[2048];
  volatile int numGroupChanges;
  int maxNumGroupChanges;
  const dvar_t *cullShards;
  const dvar_t *drawDebug;
  const dvar_t *drawBBox;
  const dvar_t *drawShardOutline;
  const dvar_t *pickShards;
  const dvar_t *debugSplit;
  const dvar_t *freezeShards;
  const dvar_t *broom;
  struct {
      int numMovingShards;
      int numVisGroups;
      int numVisShards;
      int numOOMGroups;
  } stat;
  struct {
      int numMovingShards;
      int numVisGroups;
      int numVisShards;
      int numOOMGroups;
  } prevStat;
  int minFreeVertsMemory;
  int minFreeIndicesMemory;
  int minFreeShardsMemory;
  int maxCrashShards;
  unsigned int numShatters;
  unsigned __int64 shatterTimer;
  unsigned int numSplits;
  unsigned __int64 splitTimer;
  unsigned __int64 triangulateTimer;
  unsigned int genVertsCount;
  unsigned __int64 genVertsTimer;
  const dvar_t *maxShardSplit;
  const dvar_t *maxSplitSizeRatio;
  const dvar_t *defragMemory;
  const dvar_t *defragIndices;
  const dvar_t *smpGlass;
  const dvar_t *doMaintenance;
  unsigned int frame;
  int timeLastUpdate;
  float deltaTime;
  GlassLock rendererLock;
  SmallAllocator smallAllocator;
  Allocator shardMemoryAllocator;
  FixedSizeAllocator<ShardGroup> *groupsAllocator;
  FixedSizeAllocator<GlassShard> *shardsAllocator;
  FixedSizeAllocator<GlassPhysics> *physicsAllocator;
  FixedSizeAllocator<GlassShard *> *delayedPhysicsShardsList;
  GlassRenderer::SortedShardsList *colidingShards;
  GlassRenderer::SortedShardsList *tempShardsList;
  Material *usedMaterials[32];
  unsigned int numUsedMaterials;
  Action actions[200];
  volatile int actionInputIndex;
  volatile int actionOutputIndex;
};

struct GlassStreamOutline
{
  unsigned int numVerts;
  unsigned int edgeFlags;
  struct PackedVert {
      enum {
          FRAC_BITS = 0x7,
      };
      __int16 x;
      __int16 y;
  } verts[1];
};

struct GlassUpdateCmd
{
  GlassRenderer *renderer;
  struct StaticLocals {
      vec3_t gravity_dir;
      float gravity;
      float dragLinear;
      float dragAngular;
  } staticLocals;
  float deltaTime;
  GlassShard *shards[32];
  unsigned int numShards;
};

template <int SIZE>
class TempOutlineTemplate : GlassOutline
{
public:
  Vertex v[SIZE];
};

struct GlassGenVertsCmd
{
  const GlassRenderer *renderer;
  ShardGroup *groups[16];
  unsigned int numGroups;
};

struct StackAllocator
{
  unsigned __int8 *memory;
  unsigned int size;
  unsigned int pos;
};

class GlassServer
{
public:
    GlassState state;
    Glass* glass;
    int stateChangeTime;
    float health;
    float crackedDamageRate;
    vec3_t hitPos;
    vec3_t hitDir;
};

class GlassesServer
{
public:
  int nextShatterTime;
  int shatterIntervalsMS;
  bool inited;
  unsigned int numGlasses;
  GlassServer glasses[1000];
  const dvar_t *damageMultiplier;
};

struct VertUsage
{
  int index;
  VertUsage *next;
};

struct MaterialUsage
{
  int memory;
  VertUsage *verts;
  Material *material;
};

struct GfxClientFog
{
  GfxFog settings[6];
  int index;
};

struct trViewStatistics_t
{
  int c_indexes;
  int c_fxIndexes;
  int c_viewIndexes;
  int c_shadowIndexes;
  int c_vertexes;
  int c_batches;
};

struct Image_MemUsage
{
  int total;
  int lightmap;
  int minspec;
};

struct trStatistics_t
{
  trViewStatistics_t *views;
  Image_MemUsage c_imageUsage;
};

struct GfxLodRamp
{
  float scale;
  float bias;
  float appliedInvScale;
};

struct GfxLodParms
{
  vec3_t origin;
  GfxLodRamp ramp[2];
  GfxLodRamp rampExtracam[2];
  bool valid;
  ExtraCamLodInfo extracamLod;
};

struct __declspec(align(16)) r_globals_t
{
  GfxViewParms identityViewParms;
  bool inFrame;
  bool registered;
  bool forbidDelayLoadImages;
  bool ignorePrecacheErrors;
  vec3_t viewOrg;
  vec3_t viewDir;
  unsigned int frontEndFrameCount;
  int totalImageMemory;
  Material *materialHashTable[4992];
  MaterialUsage materialUsage[4992];
  GfxClientFog clientFogs[4];
  GfxColor color_axis;
  GfxColor color_allies;
  trStatistics_t *globalstats;
  trViewStatistics_t *stats;
  GfxFrameStats frameStats;
  GfxLodParms lodParms;
  GfxLodParms correctedLodParms[4];
  bool useSunLightOverride;
  bool useSunDirOverride;
  bool useSunDirLerp;
  vec3_t diffuseSunLightOverride;
  vec3_t specularSunLightOverride;
  vec3_t sunDirOverride;
  vec3_t sunDirOverrideTarget;
  int sunDirLerpBeginTime;
  int sunDirLerpEndTime;
  const GfxViewParms *debugViewParms;
  int endTime;
  bool distortion;
  bool drawWorld;
  bool drawSModels;
  bool drawXModels;
  bool drawBModels;
  const char *codeImageNames[55];
  unsigned int viewInfoCount;
  int sunShadowFull;
  float sunShadowmapScale;
  float sunShadowmapScaleNum;
  unsigned int sunShadowSize;
  float sunShadowPartitionRatio;
  int drawSunShadow;
  bool isNotRenderingFullScreen;
  bool enablePlayerShadowFlag;
  bool gammaModified;
  float gamma;
  float skinnedVertexCacheUsed[4];
};

struct r_double_index_t
{
  unsigned __int16 value[2];
};

struct GlassDefLoad
{
  char name[64];
  char baseMaterial[64];
  char crackedMaterial[64];
  char shardMaterial[64];
  char crackSound[64];
  char shatterShound[64];
  char autoShatterShound[64];
  char worldMtlType[64];
  GlassDef glassDef;
};

class TraceExtents
{
public:
    hybrid_vector start;
    hybrid_vector end;
    hybrid_vector invDelta;
};

class __declspec(align(16)) traceWork_t
{
public:
  hybrid_vector delta;
  hybrid_vector midpoint;
  hybrid_vector halfDelta;
  hybrid_vector halfDeltaAbs;
  hybrid_vector size;
  hybrid_vector bounds[2];
  hybrid_vector radiusOffset;
  TraceExtents extents;
  float deltaLen;
  float deltaLenSq;
  int contents;
  bool isPoint;
  bool axialCullOnly;
  float radius;
  float offsetZ;
  float boundingRadius;
  TraceThreadInfo threadInfo;
};

class __declspec(align(4)) GlassConfigFile
{
public:
    struct Values {
        const char* name;
        struct {
            unsigned int value;
            unsigned int glasses;
        } valueRange[4];
        unsigned int numRanges;
    } values[100];
    unsigned int numValues;
    bool verbose;
};

struct DiskGfxVertex
{
  vec3_t xyz;
  vec3_t normal;
  unsigned __int8 color[4];
  vec2_t texCoord;
  vec2_t lmapCoord;
  vec3_t tangent;
  vec3_t binormal;
};

struct SavedScreenParams
{
  float s0;
  float t0;
  float ds;
  float dt;
  int isSet;
};

struct r_global_permap_assets_t
{
  Material *flameThrowerFXMaterial;
  Material *electrifiedFXMaterial;
  Material *transportedFXMaterial;
  Material *waterSheetingFXMaterial;
};

struct __declspec(align(128)) r_global_permanent_t
{
  Material *sortedMaterials[4992];
  bool needSortMaterials;
  bool postMapFastfileLoadFinished;
  int materialCount;
  GfxImage *whiteImage;
  GfxImage *blackImage;
  GfxImage *blankImage;
  GfxImage *grayImage;
  GfxImage *linearGrayImage;
  GfxImage *lightmapIntensityImages[31];
  GfxImage *identityNormalMapImage;
  GfxImage *whiteTransparentImage;
  GfxImage *blackTransparentImage;
  GfxImage *outdoorImage;
  GfxImage *heatMapImage;
  GfxImage *qrcodeImage[12];
  GfxLightDef *dlightDef;
  GfxLightDef *flashLightDef;
  Material *defaultMaterial;
  Material *whiteMaterial;
  Material *additiveMaterial;
  Material *additiveMaterialNoDepth;
  Material *pointMaterial;
  Material *lineMaterial;
  Material *lineMaterialNoDepth;
  Material *blendMaterial;
  Material *blendMaterialNoDepth;
  Material *whiteDebugExteriorMaterial;
  Material *whiteDepthInteriorMaterial;
  Material *clearAlphaMaterial;
  Material *clearAlphaStencilMaterial;
  Material *setAlphaMaterial;
  Material *shadowClearMaterial;
  Material *shadowCasterMaterial;
  Material *shadowOverlayMaterial;
  Material *depthPrepassMaterial;
  Material *glareBlindMaterial;
  Material *lightCoronaMaterial;
  Material *stencilShadowMaterial;
  Material *stencilDisplayMaterial;
  Material *floatZDisplayMaterial;
  Material *resolveFloatZ1;
  Material *resolveFloatZ2;
  Material *resolveFloatZ4;
  Material *resolveFloatZ8;
  Material *resolveFloatZ16;
  Material *fxaaMaterial;
  Material *ssaoMaterial;
  Material *ssaoApplyMaterial;
  Material *ssaoBlurMaterial;
  Material *ssaoMinifyMaterial;
  Material *ssaoReconstructMaterial;
  Material *colorChannelMixerMaterial;
  Material *frameColorDebugMaterial;
  Material *frameAlphaDebugMaterial;
  GfxImage *rawImage;
  GfxWorld *world;
  Material *feedbackReplaceMaterial;
  Material *feedbackBlendMaterial;
  Material *feedbackFilmBlendMaterial;
  Material *dofDownsampleMaterial;
  Material *dofNearCocMaterial;
  Material *smallBlurMaterial;
  Material *postFxDofMaterial;
  Material *postFxDofMaterial2;
  Material *postFxDofColorMaterial;
  Material *dofHqDownsample;
  Material *dofHqBlurMask;
  Material *dofHqBlur;
  Material *dofHqFinal;
  Material *dofHqFinalExtra;
  Material *zombieDarkness;
  Material *redactMaterial1;
  Material *redactMaterial2;
  Material *redactMaterial3;
  Material *waterDropletMaterial;
  Material *reviveFXMaterial;
  Material *postFxColorMaterial;
  Material *postFxMaterial;
  Material *poisonFXMaterial;
  Material *anaglyphFXMaterial;
  Material *symmetricFilterMaterial[8];
  Material *shellShockBlurredMaterial;
  Material *shellShockFlashedMaterial;
  Material *ropeMaterial;
  Material *logoMaterial;
  int savedScreenTimes[4];
  SavedScreenParams savedScreenParams[4];
  Material *resampleFinal;
  Material *resampleHDR;
  Material *resampleCubicFinal;
  Material *resampleCubicFinalLeft;
  Material *resampleCubicFinalRight;
  Material *resampleShift;
  Material *resampleMatrix;
  Material *bloomDownsample;
  Material *bloomDownsampleHQ;
  Material *bloomDownsampleConvolution;
  Material *bloomDownsampleConvolutionHQ;
  Material *bloomRemap;
  Material *bloomBlurX;
  Material *bloomBlurY;
  Material *bloomCombineHiLo;
  Material *bloomApply;
  Material *bloomApplyHQ;
  Material *bloomApplyNull;
  Material *bloomApplyThermal;
  Material *debugZbuffer;
  Material *createLut2d;
  Material *createLut2dv;
  Material *applyLut3d;
  Material *dummyMaterial;
  Material *compositeResult;
  Material *infraredWhite;
  Material *sonarMaterial;
  Material *sonarAttachmentMaterial;
  Material *hudOutlineMaterial[3];
  Material *predatorMaterial;
  r_global_permap_assets_t permapAssets;
  FontIcon *fontIconHandle[4];
  int fontIconFilesCount;
};

struct DpvsGlob_sunShadow
{
  vec3_t viewDir;
  float viewDirDist;
  float sunShadowDrawDist;
  int viewDirSign[3];
};

struct PortalHeapNode
{
  GfxPortal *portal;
  float dist;
};

union GfxHullPointsPool
{
  GfxHullPointsPool *nextFree;
  vec2_t points[64];
};

struct DpvsView
{
  unsigned int renderFxFlagsCull;
  DpvsPlane frustumPlanes[14];
  int frustumPlaneCount;
};

struct DpvsCachedCell
{
  unsigned __int32 cellIndex : 10;
  unsigned __int32 planeIndex : 12;
  unsigned __int32 planeCount : 5;
  unsigned __int32 frustumPlaneCount : 5;
};

struct DpvsGlob
{
  DpvsPlane nearPlane;
  DpvsPlane farPlane;
  bool farPlaneEnabled;
  bool cacheCells;
  bool cellsCached;
  const GfxMatrix *viewProjMtx;
  const GfxMatrix *invViewProjMtx;
  const GfxMatrix *projMtx;
  vec4_t viewOrg;
  int viewOrgIsDir;
  DpvsGlob_sunShadow sunShadow;
  int queuedCount;
  PortalHeapNode *portalQueue;
  GfxHullPointsPool *nextFreeHullPoints;
  float cullDist;
  DpvsPlane childPlanes[2048];
  DpvsView views[4][3];
  DpvsPlane *sideFrustumPlanes;
  unsigned __int8 *entVis[4];
  unsigned int *cellCasterBitsForCell;
  unsigned __int8 cellVisible[256];
  unsigned __int8 cellForceInvisible[256];
  __declspec(align(16)) vec4_t occluderPlanes[325];
  int numOccluders;
  unsigned int numCachedCells;
  unsigned int numCachedPlanes;
  unsigned int cachedCellCount[3];
  unsigned int cachedCellBase[3];
  DpvsCachedCell cachedCells[512];
  const DpvsCachedCell *cellToCachedCellMap[256];
};

struct OutlineEdge
{
  int index;
  ray2_t ray;
};

struct gscProfileInfo_t
{
  unsigned int inclusive_time;
  unsigned int exclusive_time;
  unsigned int hit_count;
};

struct SCR_PROFILER_DATA
{
  gscProfileInfo_t *profileInfo[8];
  int profileInfoCount;
};

struct VariableValue
{
    union {
        unsigned __int64 v64;
        struct {
            int type;
            VariableUnion u;
        };
    };
};

struct function_stack_t
{
  unsigned __int8 *pos;
  VariableValue *top;
  unsigned int localId;
  unsigned int localVarCount;
  VariableValue *startTop;
  SCR_PROFILER_DATA profileData;
};

struct function_frame_t
{
  function_stack_t fs;
  unsigned __int8 *creationPos;
};

struct __declspec(align(8)) scrVmPub_t
{
  unsigned int *localVars;
  VariableValue *maxstack;
  int function_count;
  function_frame_t *function_frame;
  VariableValue *top;
  bool debugCode;
  bool abort_on_error;
  bool terminal_error;
  bool block_execution;
  unsigned int inparamcount;
  unsigned int outparamcount;
  unsigned int breakpointOutparamcount;
  bool showError;
  function_frame_t function_frame_start[32];
  VariableValue stack[2048];
  void (__cdecl *notifyListeners[1])(unsigned int, unsigned int);
};

struct __declspec(align(8)) PlayerInviteRecord
{
  unsigned __int64 playerInvited;
  int timeInvited;
};

struct __declspec(align(8)) RecentlyInvitedPlayers
{
  PlayerInviteRecord playerInviteRecord[20];
  int currPlayerInviteRecordListPos;
};

struct PC_AgeRestrict
{
  char *titleId;
  int age;
};

class __declspec(align(4)) winUserData_t
{
public:
  winConnectionState_e connectionState;
  bool onConnectCalled;
  int signInState;
  unsigned __int8 ticket[4096];
  unsigned int ticketSize;
  bdInetAddr authAddr;
  bdInetAddr lsgAddr;
  int errorCount;
  int backoffRecoverTime;
  bool isContentRestricted;
  bool isChatRestricted;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[21];
  bool isGuest;
  EUserTier tier;
  bool isElite;
};

class bdLinkable
{
public:
    bdLinkable* m_previous;
    bdLinkable* m_next;
    bdLinkable** m_headPtr;
};


class bdLogSubscriber : bdLinkable
{
public:
  const char *m_channels[5];
};

class InviteInfo
{
public:
  XSESSION_INFO sessionInfo;
  bool fromGameInvite;
  bool fromMPInvite;
  char inviteString[32];
  char invitePass[64];
};

class Friend
{
public:
    unsigned __int8 nameInd;
    unsigned int level;
    char clanTag[10];
    char colorMods[128];
    netadr_t currentServer;
    unsigned __int64 accountID;
    bool online;
    bool sendInvite;
    bool showInvite;
    int lastInviteTime;
    InviteInfo inviteInfo;
    bool haveInvite;
};

struct QoSStatus
{
  int startMS;
  int firstMS;
  int updateMS;
  unsigned int prevNumSuccesses;
};

class bdQoSProbeListener
{
public:
};

class bdQoSRemoteAddr
{
public:
    bdReference<bdCommonAddr> m_addr;
    bdSecurityID m_id;
    bdSecurityKey m_key;
};

const class bdQoSProbeInfo
{
public:
    bdReference<bdCommonAddr> m_addr;
    bdAddr m_realAddr;
    float m_latency;
    unsigned __int8* m_data;
    unsigned int m_dataSize;
    bool m_disabled;
    unsigned int m_bandwidthDown;
    unsigned int m_bandwidthUp;
};


class dwQoSMultiProbeListener : bdQoSProbeListener
{
public:
    bdQoSRemoteAddr m_probeAddrs[50];
    bool m_probeSucceeded[50];
    unsigned int m_numProbes;
    bdQoSProbeInfo m_successes[50];
    bdSecurityID m_successIDs[50];
    unsigned int m_numSuccesses;
    unsigned int m_numFailures;
};

class PartyInfo
{
public:
    int flags;
    XSESSION_INFO info;
    netadr_t serverAddr;
    int occupiedPublicSlots;
    int occupiedPrivateSlots;
    int numPublicSlots;
    int numPrivateSlots;
    float skill;
    int geo1;
    int geo2;
    int geo3;
    int geo4;
    int ping;
    int avgPing;
    unsigned __int64 xuid;
    int upload;
    int mapPacks;
};


class PartyProber
{
public:
    PartyInfo hosts[50];
    int hostCount;
    ProberMode mode;
    ProberState state;
    ControllerIndex_t controllerIndex;
    int partyId;
    PartyData_s* partyToNotify;
    searchSessionMode_t searchMode;
    int minPlayers;
    int mapPacks;
    int requiredFlags;
    int searchStartUTC;
    netadr_t masterAddr;
    int echoChallenge;
    PartyInfo echoHost;
    int echoHostNum;
    int clientDisagreeTime[18];
    int clientAgreeTime[18];
    int clientPacketTime;
    int clientWaitStart;
    int hostIndex;
    netadr_t hostAddr;
    unsigned int hostChallenge;
    int hostNum;
    int nextSearchTime;
    int packetStartTime;
    int packetRecvTime;
    int packetSendTime;
    int retryCount;
    char errorMessage[256];
};

class MatchMakingInfo : bdMatchMakingInfo
{
public:
    unsigned __int64 m_GAME_SECURITY_ID;
    unsigned __int8 m_GAME_SECURITY_KEY[17];
    int m_SERVER_TYPE;
    int m_SHOW_IN_MATCHMAKING;
    int m_NETCODE_VERSION;
    int m_MAP_PACKS;
    int m_PLAYLIST_VERSION;
    int m_PLAYLIST_NUMBER;
    int m_IS_EMPTY;
    int m_TEAM_SIZE_MAX;
    float m_SKILL;
    int m_GEO_1;
    int m_GEO_2;
    int m_GEO_3;
    int m_GEO_4;
    int m_dirty;
    int m_active;
    int m_timeSinceLastUpdate;
    int m_recreateSession;
};

class __declspec(align(8)) LaunchData
{
public:
  int version;
  char startupText[826];
  ControllerIndex_t activeController;
  unsigned __int64 invitedXUID;
  XSESSION_INFO inviteHostInfo;
  unsigned __int64 inviteFromXUID;
  bool skipMovies;
  bool gameInviteAccepted;
  bool isDedicated;
  bool fromGameInvite;
  bool fromMPInvite;
  bool bootableInvite;
  bool usedControllers[1];
  bool startOtherExecutableAfterInvite;
  bool mpZombieMode;
  unsigned int stackTrace[16];
};

class bdMailHeader : bdTaskResult
{
public:
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_size;
};

class bdNotification : bdTaskResult
{
public:
  bdNotificationType m_type;
  unsigned int m_timeStamp;
  unsigned __int64 m_ID;
  unsigned __int64 m_sourceUser;
  char m_sourceUserName[64];
  unsigned __int64 m_affectedUser;
  char m_affectedUserName[64];
  unsigned __int64 m_teamID;
  char m_teamName[64];
};

struct qosPayload_t
{
  int protocol;
  int isMP;
  int isMigrating;
  int numAvailableSlots;
  int maxLocalPlayersAllowed;
  int allowGuests;
  int isMatchEnding;
  int isLoading;
  int isDedicated;
  unsigned __int64 xuid;
};

class __declspec(align(8)) bdMailHeaderPriority : bdTaskResult
{
public:
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_mailPriority;
  unsigned int m_size;
};

class bdBlockedUser : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  char m_userName[64];
};

class __declspec(align(4)) FriendInfo
{
public:
  int status;
  unsigned __int64 xuid;
  char name[16];
  char presence[128];
  XSESSION_INFO sessionInfo;
  int timeInviteReceived;
  bool hasInvite;
};

struct __declspec(align(8)) XuidInfo
{
  unsigned __int64 playerXuids;
  char gamertag[32];
  int systemTime;
};

struct s_mutePlayerInfo
{
  unsigned __int64 playerXuid;
  bool muteVoice;
  s_mutePlayerInfo *next;
};

enum bdTwitterResultType
{
    BD_TWITTER_DEFAULT_RESULT = 0x0,
    BD_TWITTER_MIXED_RESULT = 0x1,
    BD_TWITTER_RECENT_RESULT = 0x2,
    BD_TWITTER_POPULAR_RESULT = 0x3,
};

class twitterFeed_t
{
public:
  int nextUpdateTime;
  bdTwitterResultType resultType;
  bdTwitterSearchResult results[1];
  int numResults;
  int totalResults;
  int page;
};

struct dwTwitterGetAccountTask
{
  bdTwitterAccount *account;
};

struct dwTwitterRegisterTask
{
  char accountName[1024];
  char password[255];
  bdTwitterAccount *account;
};

struct dwTwitterPostTask
{
  char message[560];
};

class bdTwitterUserAttribute : bdTaskResult
{
public:
    unsigned int m_name;
    char m_value[512];
};

class dwTwitterInfoTask
{
public:
  unsigned int fields;
  int numAttributes;
  bdTwitterUserAttribute userAttributes[6];
};

struct dwTwitterSearchTask
{
  char searchString[129];
  unsigned int page;
  bdTwitterSearchResult *results;
  int maxResults;
  int *numResults;
  int *totalResults;
  bdTwitterResultType resultType;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct trackerItem_s
{
  __int16 col;
  unsigned __int64 ent;
  int val;
  trackerColType_e type;
};

struct trackerQueue_s
{
  trackerItem_s items[96];
  bool dirty;
  int lastUploadTime;
};

template <int SIZE>
class __declspec(align(8)) LeaderboardRow : bdStatsInfo
{
public:
  int m_columns[SIZE];
  unsigned int m_columnsCount;
};

struct fileRetryInfo
{
  int lastAttemptTime;
  int lastAttemptInterval;
  int retryCount;
};

struct __declspec(align(4)) fileFetchData
{
  unsigned __int8 *buffer;
  int bufferSize;
  bool fetched;
};

struct __declspec(align(4)) FFOTDInfo
{
  char filename[64];
  unsigned int totalSize;
  unsigned int timestamp;
  int chunkCount;
  int chunksDownloaded;
  int bytesDownloaded;
  bool downloadComplete;
};

struct WADHeader
{
  unsigned int magic;
  unsigned int timestamp;
  unsigned int numEntries;
  unsigned int ffotdVersion;
};

struct XZoneInfo
{
  const char *name;
  int allocFlags;
  int freeFlags;
};

struct FFOTDChunkFooter
{
  char marker[4];
  unsigned int timestamp;
  unsigned int totalSize;
  unsigned __int16 chunkLength;
  unsigned __int8 chunkCount;
  unsigned __int8 chunkNumber;
};

struct fetchSignedStatsKeyUserData
{
  int keyType;
  bool (__cdecl *initKey)(const void *, int);
  unsigned __int8 fetchBuffer[65536];
};

struct persistentStats
{
  unsigned __int8 statsBuffer[50176];
  bool isChecksumValid;
  bool statsWriteNeeded;
  bool statsValidatedWithDDL;
  bool statsFetched;
  bool disableUpload;
};

struct classSets_t
{
  unsigned __int8 classSetsBuffer[14336];
  bool classSetsFetched;
  bool classSetsWriteNeeded;
};

class bdKeyValuePair : bdTaskResult
{
    enum bdArchiveUpdateType {
        BD_REPLACE = 0x0,
        BD_ADD = 0x1,
        BD_MAX = 0x2,
        BD_MIN = 0x3,
        BD_AND = 0x4,
        BD_OR = 0x5,
        BD_XOR = 0x6,
        BD_SUB_SAFE = 0x7,
    };
public:
    unsigned __int8 m_updateType;
    unsigned __int16 m_index;
    __int64 m_value;
};

class __declspec(align(8)) dwKeyArchiveReadTask
{
public:
  unsigned __int64 entityID;
  bool isDedicated;
  fileShareLocation location;
  bdKeyValuePair values[20];
  int *outRatings;
  int count;
  unsigned __int16 category;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct __declspec(align(8)) dwKeyArchiveWriteTask
{
  unsigned __int64 entityID;
  unsigned __int16 category;
  bdKeyValuePair *values;
  int count;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct dwFileShareListTask
{
  unsigned __int64 *ownerIDs;
  unsigned int numOwners;
  unsigned __int16 offset;
  unsigned __int16 category;
  unsigned __int16 maxNumResults;
  bdFileMetaData *descriptors;
  int *numDescriptors;
  int *totalDescriptors;
  bool isUserFile;
  const char *fileName;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct dwFileShareSearchTask
{
  fileShareLocation location;
  unsigned int startIndex;
  unsigned int maxNumResults;
  unsigned int numTags;
  unsigned int sortOrder;
  bool orderNewestFirst;
  bdTag *tags;
  int *resultFileCount;
  bdFileID *resultFileIDs;
  int *resultRatingCount;
  bdVoteRankStatsInfo *resultRatings;
  int *resultTotalFileCount;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct dwFileShareDescriptorsTask
{
  fileShareLocation location;
  unsigned int numFiles;
  bdFileID *fileIDs;
  int cacheLoadedFileCount;
  bdFileMetaData *descriptors;
  int *descriptorCount;
  bool shouldSort;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct dwFileShareTagTask
{
  fileShareLocation location;
  bdTag *tags;
  unsigned int numTags;
  unsigned __int64 entityID;
};

struct dwFileShareRemoveTask
{
  unsigned int fileSlot;
  void (__cdecl *successCallback)(const ControllerIndex_t, int);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct dwFileShareSummaryTask
{
  unsigned __int64 fileID;
  unsigned __int8 *summaryData;
  unsigned int summaryDataSize;
  const void *metaData;
  unsigned int metaDataSize;
  unsigned int numTags;
  bdTag *tags;
  fileShareLocation location;
  bool showSuccess;
  void (__cdecl *successCallback)(const ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

class bdFileData : bdTaskResult
{
public:
    void* m_fileData;
    unsigned int m_fileSize;
};

class bdFileID : bdTaskResult
{
public:
    unsigned __int64 m_fileID;
};

class __declspec(align(4)) dwFileTask
{
public:
    char* m_filename;
    bdFileData m_fileData;
    bdLobbyErrorCode m_error;
    unsigned __int64 m_fileID;
    unsigned int m_fileSize;
    unsigned int m_bufferSize;
    bdFileInfo m_fileInfo;
    void* m_buffer;
    bool m_optional;
};

class dwFileOperationInfo
{
public:
    dwFileTask fileTask;
    fileRetryInfo retryInfo;
    int taskType;
    bool fetchCompleted;
    bool writeCompleted;
    bool isUserFile;
    bool isCompressedFile;
    const char* menuDef;
    unsigned __int8* fileBuffer;
    int bufferSize;
    int decompressedSize;
    void(__cdecl* fileOperationSucessFunction)(const ControllerIndex_t, void*);
    taskCompleteResults(__cdecl* fileNotFoundFunction)(const ControllerIndex_t, void*);
    bool* alreadyUploaded;
    unsigned __int8* parityBits;
    void* userData;
};

class dwFileShareWriteFileTask
{
public:
    fileShareLocation location;
    unsigned __int16 fileSlot;
    const char* menuDef;
    void* fileData;
    bdUploadInterceptor* uploadHandler;
    unsigned int fileSize;
    const char* fileName;
    unsigned __int16 category;
    const void* thumbData;
    unsigned int thumbDataSize;
    unsigned int numTags;
    bdTag* tags;
    bdFileID outFileID;
    void(__cdecl* progressCallback)(ControllerIndex_t, unsigned int*, unsigned int*);
    unsigned int(__cdecl* dataCallback)(void*, unsigned int, unsigned int);
    void(__cdecl* successCallback)(ControllerIndex_t, unsigned __int64);
    void(__cdecl* failureCallback)(ControllerIndex_t);
};

class dwFileShareTransferTask
{
public:
    unsigned __int64 fileID;
    fileShareLocation location;
    unsigned __int16 fileSlot;
    char* fileName;
    unsigned __int16 category;
    unsigned __int8 metaData[255];
    unsigned int metaDataSize;
    unsigned int numTags;
    bdTag* tags;
    bdFileID outFileID;
    void(__cdecl* successCallback)(const ControllerIndex_t);
    void(__cdecl* failureCallback)(const ControllerIndex_t);
};

class __declspec(align(8)) dwFileShareGetTopRatedTask
{
public:
    unsigned __int64 startRank;
    int maxFiles;
    unsigned int leaderboardID;
    bdVoteRankStatsInfo statsInfo[10];
    int* outNumFiles;
    int* outTotalNumFiles;
    bdFileID* outFileIDs;
    void(__cdecl* successCallback)(const ControllerIndex_t);
    void(__cdecl* failureCallback)(const ControllerIndex_t);
};

class playerFileOperations
{
public:
    dwFileOperationInfo statsBackupFileInfo;
    dwFileOperationInfo readDWEmailFileInfo;
    dwFileOperationInfo saveDWEmailFileInfo;
    dwFileOperationInfo codtvMenuFileInfo;
    dwFileOperationInfo clanMOTDInfo;
    dwFileOperationInfo corruptedStatsBackupFileInfo;
    dwFileOperationInfo fetchMetPlayerListFileInfo;
    dwFileOperationInfo saveMetPlayerListFileInfo;
    dwFileOperationInfo getOtherPlayerStatsFileInfo;
    dwFileOperationInfo getPlayerStatsFileInfo;
    dwFileOperationInfo saveStatsFileInfo;
    dwFileOperationInfo contractsFileInfo;
    dwFileOperationInfo demoFileInfo;
    dwFileOperationInfo whitelistFileInfo;
    dwKeyArchiveReadTask keyArchiveReadTask;
    dwKeyArchiveWriteTask keyArchiveWriteTask;
    dwFileOperationInfo getClassSetsFileInfo;
    dwFileOperationInfo saveClassSetsFileInfo;
    dwFileShareListTask fileShareListTask;
    dwFileShareSearchTask fileShareSearchTask;
    dwFileShareDescriptorsTask fileShareDescriptorsTask;
    dwFileShareReadFileTask fileShareReadFileTask;
    dwFileShareWriteFileTask fileShareWriteFileTask;
    dwFileShareTagTask fileShareTagTask;
    dwFileShareTransferTask fileShareTransferTask;
    dwFileShareRemoveTask fileShareRemoveTask;
    dwFileShareSummaryTask fileShareSummaryTask;
    dwFileShareGetTopRatedTask fileShareGetTopRatedTask;
};

struct playerNetworkData
{
  persistentStats playerStats;
  persistentStats playerStatsBackup;
  persistentStats stableStatsBuffer;
  classSets_t classSets;
  bool fileShareFetched;
  playerFileOperations *fileOps;
  unsigned __int8 DWEmailAddress[200];
};

struct fileShareSearchInfo_t
{
  bdTag *tags;
  int numTags;
  fileShareLocation location;
  int startIndex;
  int maxFileIDs;
  bdFileID *outFileIDs;
  int *outFileCount;
  bdVoteRankStatsInfo *outRatings;
  int *outRatingCount;
  int *outTotalFileCount;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct __declspec(align(8)) fileshareListingInfo_t
{
  unsigned __int64 xuids[100];
  int numXuids;
  int category;
  unsigned __int16 offset;
  bdFileMetaData *descriptors;
  int *numDescriptors;
  int *totalDescriptors;
  int maxDescriptors;
  bool isUserFile;
  const char *fileName;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct servernetadr_t
{
  unsigned __int16 m_usConnectionPort;
  unsigned __int16 m_usQueryPort;
  unsigned int m_unIP;
};

struct __declspec(align(8)) PersonaStateChange_t
{
  unsigned __int64 m_ulSteamID;
  int m_nChangeFlags;
};

struct EncryptedAppTicketResponse_t
{
  EResult m_eResult;
};

struct GameOverlayActivated_t
{
  unsigned __int8 m_bActive;
};

struct DlcInstalled_t
{
  unsigned int m_nAppID;
};

struct $_TypeDescriptor$_extraBytes_64
{
  const void *pVFTable;
  void *spare;
  char name[64];
};

struct Achievement_t
{
  int m_eAchievementID;
  const char *m_pchAchievementID;
  char m_rgchName[128];
  char m_rgchDescription[256];
  bool m_bAchieved;
  int m_iIconImage;
};

struct __declspec(align(8)) UserStatsStored_t
{
  unsigned __int64 m_nGameID;
  EResult m_eResult;
};

struct __declspec(align(8)) UserAchievementStored_t
{
  unsigned __int64 m_nGameID;
  bool m_bGroupAchievement;
  char m_rgchAchievementName[128];
  unsigned int m_nCurProgress;
  unsigned int m_nMaxProgress;
};

struct __declspec(align(4)) P2PSessionState_t
{
  unsigned __int8 m_bConnectionActive;
  unsigned __int8 m_bConnecting;
  unsigned __int8 m_eP2PSessionError;
  unsigned __int8 m_bUsingRelay;
  int m_nBytesQueuedForSend;
  int m_nPacketsQueuedForSend;
  unsigned int m_nRemoteIP;
  unsigned __int16 m_nRemotePort;
};

struct SteamParamStringArray_t
{
  const char **m_ppStrings;
  int m_nNumStrings;
};

struct gameTypeRow_t
{
  int refHash;
  int hardcoreRefHash;
  unsigned __int32 hardcoreAllowed : 1;
  unsigned __int32 isValid : 1;
  unsigned __int32 isParty : 1;
  unsigned __int32 row : 7;
};

struct gameTypesTable_t
{
  gameTypeRow_t gameTypeRows[32];
  int numGameTypes;
};

struct statsDelta_t
{
  int minDelta;
  int maxDelta;
};

struct statsDeltaRow_t
{
  ddlState_t searchState;
  int oldValue[1];
  statsDelta_t reportDelta;
  statsDelta_t clampDelta;
  statsDelta_t dropDelta;
  bool isValid;
  bool isValueValid;
  trackerColumn_e clientTrackerCol;
  trackerColumn_e serverTrackerCol;
};

struct __declspec(align(8)) unlockedItemsData_t
{
  unsigned __int8 numRecentUnlocks[1];
  unsigned __int64 recentlyUnlockedAttachmentsBitMask[1][64];
  unsigned __int8 recentlyUnlockedItems[1][256];
  unsigned __int8 numRecentlyUnlockedItems[1];
};

struct cachedStatsMsg_t
{
  unsigned __int8 msgBuf[64];
  int bufLen;
};

struct cachedStats_t
{
  cachedStatsMsg_t cachedStatsChanges[64];
  int nextFreeCachedStat;
};

struct __declspec(align(4)) SndEntLoop
{
  unsigned int id;
  SndEntHandle handle;
  vec3_t origin;
  __int16 fade;
};

struct SndNotifyLength
{
  unsigned int lengthMs;
  unsigned int ent;
};

struct SndNotifyEntUpdate
{
  SndEntHandle handle;
};

struct SndPlayback
{
  int id;
  float attenuation;
  int lengthMs;
  int playedMs;
  unsigned int aliasId;
  SndEntHandle entHandle;
  SndPlayback *next;
};

struct SndNotifyPlaybackUpdate
{
  SndPlayback *playback;
  float attenuation;
  unsigned int lengthMs;
  unsigned int playedMs;
};

struct SndCommandSetGameState
{
  int is_paused;
  int is_mature;
  float timescale;
  unsigned int cg_time;
  unsigned int seed;
  float voiceScale;
  float musicScale;
  float sfxScale;
  float masterScale;
  float cinematicScale;
  int masterPatch;
  unsigned int hearingImpaired;
};

struct SndCommandSetPlaybackAttenuationRate
{
  int id;
  float rate;
};

struct SndCommandStopAlias
{
  SndEntHandle ent;
  unsigned int alias_name;
};

struct SndCommandSetLoopState
{
  SndEntHandle handle;
  unsigned int aliasId;
  float attenuation;
  float attenuationRate;
  float pitch;
  float pitchRate;
};

struct SndCommandSetDefaultAmbientContext
{
  unsigned int type;
  unsigned int value;
};

struct SndCommandStopEnt
{
  SndEntHandle ent;
};

struct SndCommandPlayLoops
{
  SndEntLoop loops[5];
  int count;
};

struct SndCommandPrimeAlias
{
  unsigned int scriptIdHash;
  int timeTillPlayMs;
};

struct SndCommandSetEntState
{
  SndEntHandle handle;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
};

struct SndCommandLoopAt
{
  unsigned int id;
  vec3_t origin;
};

struct SndCommandSetPlaybackPitchRate
{
  int id;
  float rate;
};

struct SndCommandDeactivateEnvironmentEffects
{
  int priority;
  int fademsec;
};

struct SndCommandPrefetchLoadedAlias
{
  unsigned int aliasId;
};

struct SndCommandSetPlaybackAttenuation
{
  int id;
  float attenuation;
};

struct SndCommandLoadBank
{
  SndBank *bank;
};

struct SndCommandSetContext
{
  unsigned int type;
  unsigned int value;
};

struct SndCommandSetFrontendMusic
{
  unsigned int musicAlias;
};

struct SndCommandDuck
{
  SndDuckCategoryType type;
  unsigned int id;
  float amount;
};

struct SndNotifyPlaybackFree
{
  SndPlayback *playback;
};

struct SndNotifySubtitle
{
  unsigned int lengthMs;
  const char *subtitle;
};

union SndNotifyContext
{
  SndNotifyEntUpdate ent_update;
  SndNotifySubtitle subtitle;
  SndNotifyLength length;
  SndNotifyPlaybackFree playback_free;
  SndNotifyPlaybackUpdate playback_update;
};

struct SndCommandStopSounds
{
  SndStopSoundFlags flags;
};

struct SndCommandCinematicStart
{
  float volume;
};

struct SndCommandSetStartPaused
{
  int id;
  int pause;
};

struct SndCommandPlay
{
  unsigned int alias;
  int fadeTimeMs;
  float attenuation;
  SndEntHandle entHandle;
  int notify;
  vec3_t position;
  vec3_t direction;
  SndPlayback *playback;
  int startPaused;
  int setEntState;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
  int setScriptValues;
  float scriptPitch;
  float scriptPitchRate;
  float scriptAttenuation;
  float scriptAttenuationRate;
};

struct SndCommandSetPlaybackPitch
{
  int id;
  float pitch;
};

struct SndCommandLineAt
{
  unsigned int id;
  vec3_t origin[2];
};

struct SndSpeakerMap
{
  int inputChannelCount;
  int outputChannelCount;
  float volumes[16];
};

struct SndCommandSetGlobalFutz
{
  unsigned int futzId;
  SndCallLocation callLocation;
};

struct SndCommandScriptTimescale
{
  float value;
};

struct SndCommandDisconnectListener
{
  LocalClientNum_t listener;
};

struct SndCommandStopPlayback
{
  int id;
};

struct SndCommandLoadGlobals
{
  SndDriverGlobals *globals;
};

struct SndLengthNotifyInfo
{
  SndLengthType id[4];
  void *data[4];
  int count;
};

struct SndCommandAliasName
{
  char name[48];
  unsigned int id;
};

struct SndCommandLoadPatch
{
  SndPatch *patch;
};

struct SndCommandSetMusicState
{
  unsigned int stateId;
};

struct SndMusicSegment
{
  unsigned int stateId;
  unsigned int segmentId;
  unsigned int aliasId;
  int playOnExit;
  int looping;
  unsigned int bpm;
  unsigned int transitionBeat;
  float fadeInTime;
  float fadeInDelay;
  int doNotFadeOut;
  float fadeOutTime;
  float fadeOutDelay;
  unsigned int stateChangeWhenDone;
  int inhibitStateChange;
};

struct SndCommandSetEnvironmentEffects
{
  int priority;
  unsigned int id;
  float drylevel;
  float wetlevel;
  int fademsec;
};

struct SndCommandSetListener
{
  LocalClientNum_t listener;
  ClientNum_t clientNum;
  team_t team;
  vec3_t origin;
  vec3_t axis[3];
};

struct SndCommandSetEntContext
{
  SndEntHandle handle;
  unsigned int type;
  unsigned int value;
};

struct SndGameState
{
  float timescale;
  unsigned int cgTime;
  unsigned int seed;
  int gamePaused;
  int mature;
  float voiceScale;
  float musicScale;
  float sfxScale;
  float masterScale;
  float cinematicScale;
  int masterPatch;
  int hearingImpaired;
};

union SndCommandContext
{
  SndCommandAliasName alias_name;
  SndCommandPlay play;
  SndCommandStopAlias stop_alias;
  SndCommandStopEnt stop_ent;
  SndCommandCinematicStart notify_cinematic_start;
  SndCommandDisconnectListener disconnect_listener;
  SndCommandSetListener set_listener;
  SndCommandStopSounds stop_sounds;
  SndCommandSetEnvironmentEffects set_environment_effects;
  SndCommandDeactivateEnvironmentEffects deactivate_environment_effects;
  SndCommandSetPlaybackAttenuation set_playback_attenuation;
  SndCommandSetPlaybackAttenuationRate set_playback_attenuation_rate;
  SndCommandSetPlaybackPitch set_playback_pitch;
  SndCommandSetPlaybackPitchRate set_playback_pitch_rate;
  SndCommandStopPlayback stop_playback;
  SndCommandSetStartPaused set_start_paused;
  SndCommandDuck duck;
  SndCommandSetEntState set_ent_state;
  SndCommandSetGameState set_game_state;
  SndCommandLoopAt loop_at;
  SndCommandLineAt line_at;
  SndCommandSetContext set_context;
  SndCommandSetEntContext set_ent_context;
  SndCommandScriptTimescale script_timescale;
  SndCommandLoadBank load_bank;
  SndCommandLoadPatch load_patch;
  SndCommandLoadGlobals load_globals;
  SndCommandPrimeAlias prime_alias;
  SndCommandSetMusicState setMusicState;
  SndCommandPrefetchLoadedAlias prefetchLoadedAlias;
  SndCommandSetGlobalFutz setGlobalFutz;
  SndCommandSetDefaultAmbientContext setDefaultAmbientContext;
  SndCommandSetFrontendMusic setFrontendMusic;
  SndCommandSetLoopState setLoopState;
  SndCommandPlayLoops playLoops;
};

struct SndCommand
{
  SndCommand *next;
  SndCommandType type;
  SndCommandContext context;
};

struct orientation_t
{
  vec3_t origin;
  vec3_t axis[3];
};

struct SndNotify
{
  SndNotify *next;
  SndNotifyType type;
  SndNotifyContext context;
};

struct SndFader
{
  float value;
  float goal;
  float rate;
};

struct __declspec(align(4)) SndVoice
{
  SndFileLoadingState loadingState;
  int assetChannelCount;
  int assetFrameRate;
  int assetEndTime;
  int assetTotalMsec;
  SndEntHandle sndEnt;
  SndEntityUpdate entity_update;
  int group;
  int startDelay;
  int startTime;
  unsigned int startFrame;
  int looptime;
  int totalMsec;
  SndPlayback *playback;
  int playbackId;
  int firstPlaybackId;
  int secondaryId;
  SndLengthNotifyInfo lengthNotifyInfo;
  const SndAlias *alias;
  vec3_t offset;
  vec3_t position;
  vec3_t velocity;
  vec3_t orientation[3];
  vec3_t direction;
  vec3_t fluxVelocity;
  float baseDistance;
  float distanceAttenuation;
  float reverbAttenuation;
  float volModSeed;
  float volModStart;
  float pitchModSeed;
  float globalPriority;
  float groupScalar;
  SndFader doppler;
  SndFader fade;
  SndFader script_fade;
  SndFader script_pitch;
  SndFader losOcclusion;
  int traceCache[5];
  int needsToStop;
  SndMenuCategory category;
  __int16 localClientGroupMask;
  __int16 localClientGroup;
  int closestListenerIndex;
  int voiceStartTime;
  float dryLevel;
  float wetLevel;
  float futzBlend;
  SndSpeakerMap pan;
  __int64 played;
  const SndDuck *duck;
  SndDuckActive *activeDuck;
  bool paused;
  bool startPaused;
  bool timescale;
  bool positionUpdated;
  bool pitchShift;
  bool aliasFadeOut;
};

struct SndDuckActive
{
  int inUse;
  SndDuckCategoryType category;
  int startTime;
  int endTime;
  int pingTime;
  vec3_t position;
  unsigned int id;
  const SndDuck *duck;
  float amount;
  float effect;
  SndVoice *voice;
  float padding[3];
};

struct SndEntState
{
  SndEntHandle handle;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
  unsigned int lastUsed;
  unsigned int hasPosition;
  SndEntState *next;
};

struct SndMusicActiveSegment
{
  SndMusicActiveSegmentState state;
  unsigned int stateName;
  SndMusicSegment *segment;
  int playback;
  int startTime;
  int stopTime;
};

struct SndEntityContextInfo
{
  unsigned int contexts[16];
};

struct SndListener
{
  orientation_t orient;
  ClientNum_t clientNum;
  bool active;
  team_t team;
};

struct SndLineEmitter
{
  unsigned int id;
  vec3_t origin[2];
  const SndAliasList *alias;
  float aliasDistanceSq;
};

struct __declspec(align(4)) SndEnvEffect
{
  unsigned int reverbId;
  float drylevel;
  float drygoal;
  float dryrate;
  float wetlevel;
  float wetgoal;
  float wetrate;
  bool active;
};

struct SndLoopEmitter
{
  unsigned int id;
  vec3_t origin;
  const SndAliasList *alias;
  float aliasDistanceSq;
};

struct SndDspMeters
{
  float p;
  float vu;
  float dyn1Gain;
  float dyn1Level;
  float dyn2Gain;
  float dyn2Level;
  float cf;
  unsigned __int8 padding[4];
};

struct SndOcclusionTrace
{
  int id;
  int voiceIndex;
  vec3_t listener;
  vec3_t playback;
  int cache[5];
  float occlusion;
  unsigned __int8 padding[8];
};

struct SndAliasPreload
{
  unsigned int aliasId;
  int playTimeCgMs;
};

struct SndLocal
{
  int magic;
  int init;
  int paused;
  float timescale;
  float scriptTimescale;
  int time;
  int looptime;
  int pausetime;
  unsigned int frame;
  SndDriverGlobals *global_constants;
  int cinematicVoicesPlaying;
  int cinematicTimestamp;
  int cinematicUpdate;
  int forcePause;
  int playbackIdCounter;
  SndFader volume;
  unsigned int defaultHash;
  const SndCurve *defaultCurve;
  unsigned int defaultPanIndex;
  unsigned int activeListenerCount;
  int curveMagnitudeIsZero[32];
  unsigned int pfutzId;
  float pfutzBlend;
  unsigned int gfutzIds[2];
  int gfutzLoopId;
  SndEnvEffect envEffects[3];
  SndEnvEffect *effect;
  unsigned int listenerSanityCount;
  unsigned int voiceGroup;
  unsigned int announcerGroup;
  __declspec(align(64)) SndListener listeners[4];
  __declspec(align(32)) SndGameState gameState;
  __declspec(align(128)) SndVoice voice[68];
  unsigned int voiceAliasHash[68];
  __declspec(align(128)) vec3_t voicePositionCache[68];
  __declspec(align(128)) SndEntState entState[272];
  __declspec(align(128)) SndEntState *entStateIndex[2048];
  unsigned int currentContexts[16];
  unsigned int currentVoiceDuck;
  SndLineEmitter lineEmitters[128];
  SndLoopEmitter loopEmitters[384];
  int pfutzLoops[8];
  unsigned int lineCount;
  unsigned int loopCount;
  __declspec(align(32)) SndDuckActive duckActive[128];
  unsigned int duckCategoryIndex[12];
  __declspec(align(128)) float duckAttenuationValue[32];
  float duckAttenuationValueLinear[32];
  float duckFilterValue[32];
  float duckAttenuationTarget[32];
  float duckFilterTarget[32];
  float duckTemp[32];
  float duckOne[32];
  float duckRate[32];
  float duckNegRate[32];
  float duckDelta[32];
  SndDspMeters meters[8];
  unsigned int logCommandCount;
  unsigned int logNotifyCount;
  unsigned int frameNotifyCount;
  unsigned int frameCommandCount;
  unsigned int updated;
  SndPlayback playbacks[272];
  SndPlayback *playbackFreeList;
  unsigned int playbacksInUse;
  int command_init;
  SndCommand commands[1024];
  SndCommand *commandFreeList;
  unsigned int commandInUse;
  unsigned int command_id_commit;
  SndCommand *command_q[1024];
  unsigned int command_q_head;
  unsigned int command_q_tail;
  bool command_process_flag;
  bool muteAllSounds;
  SndNotify notifies[512];
  SndNotify *notifyFreeList;
  unsigned int notifyInUse;
  SndNotify *notify_q[512];
  unsigned int notify_q_head;
  unsigned int notify_q_tail;
  int asyncRunning;
  unsigned int musicRequestedState;
  unsigned int musicCurrentState;
  int musicInhibitCount;
  SndMusicActiveSegment musicActiveSegments[32];
  __declspec(align(128)) SndOcclusionTrace occlusionTraces[68];
  int occlusionRunning;
  unsigned int framesSinceLastOcclusionUpdate;
  unsigned int traceSequence;
  unsigned int traceCount;
  unsigned int lastTraceSequence;
  unsigned int occlusionUsec;
  unsigned int occlusionTraceCount;
  unsigned int occlusionVoiceCount;
  unsigned int logTimestamp;
  unsigned int frameUsec;
  unsigned int updateUsec;
  unsigned int duckUsec;
  unsigned int occlusionUpdateUsec;
  unsigned int voiceUpdateUsec;
  unsigned int entStateUsec;
  unsigned int updateVoicePositionUsec;
  unsigned int updateVoiceVoiceUsec;
  unsigned int updateVoiceDriverUsec;
  unsigned int commandPumpUsec;
  unsigned int devhostEndUsec;
  unsigned int devhostBeginUsec;
  unsigned int occlusionCacheMiss;
  unsigned int occlusionCacheTotal;
  unsigned int spuUpdateUsec;
  unsigned int banksLoading;
  unsigned int stressAliasIndex;
  unsigned int stressAliasCount;
  bool bankUpdateStatus;
  unsigned int frontendMusicAlias;
  unsigned int PreviousFrontendMusicAlias;
  SndEntityContextInfo entContexts[1792];
  SndAliasPreload aliasPreload[128];
};

struct signedStatsHash_t
{
  unsigned __int8 signedHashBuffer[50];
  unsigned int signedHashLen;
};

union viewedTime_u
{
  int utctime;
  unsigned __int8 time[4];
};

struct SndDspBiquadState
{
  float y[4];
  float x[4];
};

struct __declspec(align(8)) gameBookmarks_t
{
  unsigned __int64 fildID[16];
  int lastIndex;
};

struct PlayerSkill
{
  float skill;
  float variance;
  float score;
  int contrib;
};

union ddlValue_t
{
  float fixedPointValue;
  int intValue;
  unsigned int uintValue;
  unsigned __int64 int64Value;
  float floatValue;
  const char *stringPtr;
};

class SessionData
{
public:
    SessionStaticData staticData;
    SessionDynamicData dyn;
};

struct SessionCreateData
{
  bool silentFail;
  bool active;
  SessionData *session;
};

class ThrottleData
{
public:
    int returnTimeMs;
};

struct SessionSearchPayloadData
{
  bool (__cdecl *abortCheckfunc)();
  ThrottleData *throttleData;
};

struct __declspec(align(8)) SessionJoinData
{
  bool active;
  int privateSlot;
  int slot;
  unsigned __int64 player;
  SessionData *session;
};

struct SessionTaskCheckData
{
  const TaskDefinition *sessionTaskDef;
  SessionData *session;
  TaskRecord *sessionTask;
};

struct MapnameRichPresenceInfo
{
  const char *mapname;
  int context;
  int mapPack;
  const char *locString;
};

struct GametypeRichPresenceInfo
{
  char *gametype;
  int context;
  const char *locString;
};

struct ZMLocationRichPresenceInfo
{
  char *zmLocation;
  const char *locString;
};

struct Ps3PresenceData
{
  unsigned __int8 version;
  int presence;
  int map;
  int gametype;
  int zmLocation;
};

struct GroupMembership
{
  unsigned int bits[32];
  int dirty;
  int updateTime;
};

class __declspec(align(8)) FriendsGlob
{
public:
  FriendInfo xfriends[300];
  int numFriends;
};

class __declspec(align(8)) InvitesGlob
{
public:
  FriendInfo xfriends[10];
  int numInvites;
};

struct UnifiedFriend
{
  const FriendInfo *console;
};

struct __declspec(align(4)) UnifiedFriends
{
  UnifiedFriend friends[300];
  int numFriends;
  unsigned __int8 mode;
};

struct __declspec(align(8)) PlayerIdentityData
{
  unsigned __int64 xuid;
  const char *gamertag;
  char clantag[32];
};

struct /*__cppobj*/ __declspec(align(8)) LeaderboardFileShareRow : bdStatsInfo
{
  unsigned int m_columns[4];
  unsigned __int64 m_entityID;
  char m_entityName[65];
};

struct /*__cppobj*/ searchContext_t
{
  fileShareLocation location;
  fileshareCategory_e category;
  filesharePlayerFilter_e playerFilter;
  int startIndex;
  bdTag tags[60];
  int numTags;
  int id;
  unsigned int lbID;
  ControllerIndex_t controllerIndex;
};

struct /*__cppobj*/ __declspec(align(8)) searchBook_t
{
  bdFileID fileIDs[10];
  unsigned __int64 origFileIDs[10];
  unsigned __int64 views[10];
  unsigned __int64 votes[10];
  int numFiles;
  int totalFiles;
  bool isDone;
};

struct /*__cppobj*/ __declspec(align(2)) searchPage_t
{
  bdFileMetaData descriptors[10];
  int numDescriptors;
  bool isDone;
  bool statsDone;
  bool resultsReported;
};

struct fileShareSearchBackoff_t
{
  bool isActive;
  int level;
};

struct fileshareSummary_t
{
  unsigned __int64 fileID;
  int size;
  fileShareLocation location;
  ControllerIndex_t controller;
  int nextFetchTime;
  bool isDirty;
  int (__cdecl *dataValidationCallback)(const ControllerIndex_t, unsigned __int64, unsigned __int8 *, int);
};

class __declspec(align(8)) bdStatsInfoEx : bdTaskResult
{
public:
    unsigned int m_leaderboardID;
    unsigned int m_error;
    unsigned __int64 m_entityID;
    bdStatsInfo* m_statsInfo;
};

class __declspec(align(8)) fileshareStats_t
{
public:
  LeaderboardFileShareRow ustats[800];
  bdStatsInfoEx ustatsInfo[800];
  bdStatsInfoEx *ustatsInfoPtr[800];
  int count;
};

class fileshareData_t
{
public:
  bool isDirty;
  unsigned __int64 xuid;
  int groupRow;
  fileshareState_e state;
  int retryCount;
  int nextFetchTime;
  ControllerIndex_t controller;
  bdFileMetaData descriptors[200];
  int numDescriptors;
  int fetchOffset;
  int totalDescriptors;
  int numManagedDescriptors;
  fileshareStats_t stats[2];
  int viewOffset;
  int voteOffset;
  bdFileMetaData *byTime[200];
  bdFileMetaData *byType[200];
};

class __declspec(align(8)) fileshareCopy_t
{
public:
  bdFileMetaData descriptor;
  int numDescriptors;
  fileShareLocation location;
  int slot;
  char name[22];
  bool isModifiedName;
  char description[64];
  bool isModifiedDescription;
};

struct fileshareDescriptorData_t
{
  unsigned __int64 fileID;
  unsigned __int64 originID;
  int fileSize;
  int summarySize;
  bool isSupported;
  bool isPooled;
  bool isBookmarked;
  int slot;
  fileshareCategory_e category;
  int mapID;
  const char *mapString;
  const char *mapName;
  unsigned __int64 matchID;
  int duration;
  char durationString[64];
  int createTime;
  char createTimeString[64];
  int gameType;
  const char *gameTypeString;
  const char *gameTypeName;
  const char *gameTypeImage;
  int zmMapStartLoc;
  const char *zmMapStartLocString;
  const char *zmMapStartLocName;
  unsigned __int64 authorXuid;
  char authorName[64];
  char modifiedName[64];
  char modifiedDescription[64];
  int playlistID;
  filesharePlaylistType_e playlistType;
};

class bdTeamProfile : bdTaskResult
{
public:
    unsigned __int64 m_teamID;
};

struct /*__cppobj*/ __declspec(align(2)) PublicTeamProfile : bdTeamProfile
{
  unsigned __int64 m_memberTeamID;
  unsigned __int8 m_memberemblem[16385];
  int m_membermotto_bg;
  char m_memberclantag[6];
  char m_membermotto[25];
};

struct /*__cppobj*/ PrivateTeamProfile : bdTeamProfile
{
  unsigned __int64 m_memberTeamID;
  char m_membermotd[96];
};

struct /*__cppobj*/ eliteClanData_t
{
  bdTeamInfo teamInfos[1];
  int numTotalTeams;
  bdTeamMember teamMembers[100];
  int numTotalTeamMembers;
  __declspec(align(8)) PublicTeamProfile teamPublicProfiles[1];
  int numTotalTeamPublicProfiles;
  PrivateTeamProfile teamPrivateProfile;
  bool clanAbbrev_NeedsValidating;
  bool clanAbbrev_Validated;
  int mClanXP;
  int mClanLevel;
};

struct eliteSubscriberData_t
{
  eSubLevel_e subscriberInfo;
};

struct /*__cppobj*/ dwTeamClanCreateTask
{
  char teamName[21];
  bdTeamInfo teamInfo;
};

struct dwTeamClanInviteTask
{
  unsigned __int64 teamID;
  unsigned __int64 newUserID;
};

struct dwTeamClanLeaveTask
{
  unsigned __int64 teamID;
};

struct dwTeamGetMembershipsTask
{
  unsigned __int64 userID;
  bdTeamInfo *teamInfos;
  unsigned int maxNumTeams;
};

struct dwTeamGetMembersTask
{
  unsigned __int64 teamID;
  bdTeamMember *teamMembers;
  unsigned int maxNumTeamMembers;
};

struct dwTeamGetPublicProfileTask
{
  unsigned __int64 teamId[1];
  PublicTeamProfile *teamPublicProfiles;
  unsigned int maxNumTeams;
};

struct __declspec(align(8)) dwTeamGetPrivateProfileTask
{
  unsigned __int64 teamId;
  PrivateTeamProfile *teamPrivateProfile;
};

class bdSubscriptionInfo : bdTaskResult
{
public:
    unsigned __int64 m_userID;
    unsigned int m_subscriptionType;
    unsigned int m_subscriptionLevel;
    int m_daysToExpiry;
    bool m_canExpire;
};

class __declspec(align(8)) dwLobbyGetSubscriptionFromDWTask
{
public:
  unsigned __int64 subscriptionIDs[1];
  bdSubscriptionInfo DWSubscriptionInfo[1];
  int count;
};

class dwLobbyRefreshDWSubscriptionTask
{
};

union __declspec(align(4)) jsmnVal_u
{
  char stringVal[1025];
  int intVal;
  bool boolVal;
};

struct jsmn_parser
{
  unsigned int pos;
  int toknext;
  int toksuper;
};

struct jsmntok_t
{
  jsmntype_t type;
  int start;
  int end;
  int size;
  jsmnVal_u *val;
  jsmnPrimitiveType_e primType;
};

struct sortedItemsData_t
{
  int itemIndex;
  int itemValue;
  int completedChallengeBackgrounds[3];
};

struct HashInfo
{
  challengeTest_t type;
  unsigned int start;
  unsigned int length;
  unsigned int position;
  unsigned int blockSize;
  unsigned __int64 state;
};

struct __declspec(align(8)) ChallengeProbe
{
  unsigned __int64 key;
  unsigned __int64 result;
  unsigned int index;
  unsigned int startAddress;
  unsigned int blockSize;
  void *hashHandle;
  bool started;
};

struct __declspec(align(8)) ChallengeState
{
  void *hashHandle;
  ChallengeProbe probe;
  bool mipsterRunning;
};

struct SndSpeakerPair
{
  int leftIndex;
  int rightIndex;
  float xform[4];
};

struct SndSpeakerAngle
{
  SndSpeakerFlag speaker;
  float angle;
};

struct SndSpeakerConfig
{
  const char *name;
  SndSpeakerFlag outputFormat;
  unsigned int speakerCount;
  unsigned int speakerMapCount;
  unsigned int angleCount;
  SndSpeakerAngle angles[8];
};

struct SndRvParams
{
  float frameRate;
  float smoothing;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float lateGainProx[4];
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect[4];
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
  float angle;
  unsigned int delayMatrix;
  float returnHighpass;
  unsigned __int8 padding[8];
};

struct SndRvState
{
  __m128 earlyReflectionCoefs[4];
  unsigned int earlyReflectionDelays[4][4];
  __m128 lateReflectionCoefs[4];
  unsigned int lateReflectionDelays[4][4];
  __m128 inputLpfState;
  __m128 earlyLpfState;
  __m128 lateLpfState;
  __m128 dampLpfState;
  __m128 returnHpfState1;
  __m128 returnHpfState2;
  SndRvParams params;
  unsigned int earlyReflectionDelayBase[4][4];
  unsigned int lateReflectionDelayBase[4][4];
  unsigned int delayIndex;
  unsigned int radverbTimeUsec;
  unsigned int spuCacheAccesses;
  unsigned int spuCacheMisses;
};

struct snd_occlusion_multiple
{
  SndOcclusionTrace *traces;
  unsigned int traceCount;
  unsigned int traceSequence;
  unsigned int *lastTraceSequence;
  unsigned int *occlusionTraceCount;
  unsigned int *occlusionVoiceCount;
  unsigned int *occlusionUsec;
};

struct snd_occlusion_single
{
  vec3_t listener;
  vec3_t playback;
  float *result;
  snd_occlusion_single_state *state;
};

union $3D0A540249C7DA6BDB1BCD6C06D96073
{
  snd_occlusion_multiple multiple;
  snd_occlusion_single single;
};

struct snd_occlusion_cmd
{
  snd_occlusion_query_type type;
  $3D0A540249C7DA6BDB1BCD6C06D96073 ___u1;
};

struct __declspec(align(4)) SndOcclusionStartCache
{
  vec3_t position;
  float value;
  bool valid;
};

struct SndMusicState
{
  unsigned int stateName;
  unsigned int segmentCount;
  SndMusicSegment *segments;
};

struct SndDspChamberlinState
{
  float z0;
  float z1;
};

struct SndDspSquelchState
{
  float l;
  float g;
};

struct SndDspFutzState
{
  SndDspBiquadState bpf;
  SndDspBiquadState ls;
  SndDspSquelchState squelch;
  float padding[2];
};

struct SndDspSourceState
{
  float lpfy;
  SndDspFutzState futz;
};

struct SndDspChamberlinCoef
{
  float Fc;
  float Fs;
  float Q;
};

struct SndDspSquelchParam
{
  float tg;
  float th;
};

struct SndDspFutzParam
{
  float blend;
  float bpfF;
  float bpfQ;
  float lsG;
  float lsF;
  float lsQ;
  float distortion;
  float pregain;
  float postgain;
  float preclip;
  float postclip;
  SndDspSquelchParam squelch;
  float padding[3];
};

struct SndDspSourceParams
{
  float frameRate;
  float lpfAttenuation;
  float lpfRatio;
  SndDspFutzParam futz;
};

struct SndDspVoiceFilterParam
{
  float f;
  float g;
  float q;
  float t;
  float ta;
  float tr;
};

struct SndDspDynamoParam
{
  int E;
  float PG;
  float MG;
  float TH;
  float R;
  float TA;
  float TR;
};

struct SndDspDynamoState
{
  unsigned int offset;
  float yfilter;
  float gfilter;
  float g;
  float dcx;
  float dcy;
  __declspec(align(128)) float lookahead[512];
};

struct SndDspBiQuadCoef
{
  float s[5];
};

struct SndDspVoiceFilterState
{
  float f0;
  float q;
  float g;
  float gain;
  float gfilter;
  float fadeTime;
  float f;
  SndDspBiquadState filter;
};

struct sd_decoder_pcm16
{
    unsigned int channelCount;
    unsigned int frameOffsetIntoTopBuffer;
    const __int16* buffers[2];
    unsigned int bufferFrameCount[2];
};

struct FLAC__StreamDecoder
{
  struct FLAC__StreamDecoderProtected *protected_;
  struct FLAC__StreamDecoderPrivate *private_;
};

struct sd_decoder_flac
{
  unsigned int inputOffsetIntoTopBuffer;
  const char *inputBuffers[2];
  unsigned int inputBufferSize[2];
  __int16 outputBuffer[2048];
  unsigned int outputBufferReadHead;
  unsigned int outputBufferWriteHead;
  unsigned int outputBufferCount;
  unsigned int outputFrameCount;
  unsigned int readRequest;
  unsigned int decoderInitialized;
  bool looping;
  bool resident;
  unsigned int totalFrameCount;
  unsigned int channelCount;
  unsigned int assetSize;
  unsigned int totalBytesRead;
  unsigned int frameBytesRead;
  FLAC__StreamDecoder *flacDecoder;
};

union sd_decoder_instance
{
  struct XMAPLAYBACK *xma;
  struct sd_decoder_pc_flac *pc_flac;
  struct sd_decoder_ps3_mp3 *ps3_mp3;
  sd_decoder_pcm16 *pcm16;
  struct sd_decoder_mpc *mpc;
  sd_decoder_flac *flac;
};

struct sd_loaded
{
  bool looping;
  unsigned int channelCount;
  unsigned int frameRate;
  unsigned int frameCount;
  unsigned int dataSize;
  const char *data;
};

struct sd_stream_buffer
{
  volatile int refCount;
  const char *filename;
  unsigned int filenameHash;
  unsigned int offset;
  unsigned int readSize;
  unsigned int requestLatency;
  unsigned int requestStartTime;
  unsigned int requestEndTime;
  int requestId;
  char *data;
  int valid;
  int error;
  int primed;
  int preloadExpires;
};

struct sd_stream
{
  int used;
  const char *filename;
  sd_stream_buffer primeBuffer;
  sd_stream_buffer *ioBuffer;
  sd_stream_buffer *lastBuffer;
  sd_stream_buffer *buffers[2];
  int buffersSubmitted[2];
  unsigned int readOffset;
  const char *primeData;
  unsigned int primeSize;
  const SndAssetBankEntry *entry;
  int fileHandle;
};

struct sd_source
{
  sd_loaded loaded;
  sd_stream *stream;
  unsigned int assetId;
  int primed;
  int looping;
  int error;
  int eos;
};

struct sd_decoder
{
  sd_decoder_state state;
  sd_decoder_instance instance;
  sd_source *source;
  void *lastBuffer;
  unsigned int framesDecoded;
  int eos;
  int error;
  int outputStarving;
  snd_asset_format format;
};

struct sd_decoder_interface
{
  void (__cdecl *Init)();
  void (__cdecl *Shutdown)();
  void (__cdecl *Lock)(sd_decoder *);
  void (__cdecl *Unlock)(sd_decoder *);
  unsigned int (__cdecl *QueryAvailableData)(sd_decoder *, unsigned int);
  bool (__cdecl *BufferComplete)(sd_decoder *, const void *);
  bool (__cdecl *BufferReady)(sd_decoder *);
  void (__cdecl *BufferSubmit)(sd_decoder *, const char *, unsigned int, bool);
  void (__cdecl *Consume)(sd_decoder *, unsigned int, unsigned int, __int16 *);
  sd_decoder_state (__cdecl *Free)(sd_decoder *);
  void (__cdecl *Create)(sd_decoder *, const SndAssetBankEntry *);
};

struct sd_voice_param
{
  sd_voice_param_state state;
  sd_voice_param *next;
  SndBus bus;
  SndDspSourceParams dspParams;
  float dryPan[12];
  float wetPan[12];
  float pitch;
  int paused;
  int startPaused;
  int doPitch;
  char align[56];
};

struct sd_decoder_output
{
  __int16 *data;
  unsigned int head;
  unsigned int count;
  unsigned int starving;
  int priming;
};

struct sd_voice
{
  sd_voice_state state;
  int done;
  int hasData;
  __int64 position;
  float pitchFraction;
  sd_source source;
  sd_decoder *decoder;
  sd_decoder_output decoderOutput;
  SndDspSourceState dspState[2];
  unsigned int channelCount;
  int shutdownDueToStarvation;
  unsigned int starvedThisFrame;
  float dryPanFilter[12];
  float wetPanFilter[12];
  sd_voice_param *previousParam;
  char align[4];
};

struct __declspec(align(128)) sd_mix_master_state
{
  unsigned int reverbOverwriteCheck;
  unsigned int masterTimeUsec;
  unsigned int masterTimeScale;
  unsigned int masterTimePfutz;
  unsigned int masterTimeGfutz;
  unsigned int masterTimeVoice;
  unsigned int masterTimeDyn1;
  unsigned int masterTimeEq;
  unsigned int masterTimeDyn2;
  unsigned int masterTimeMeter;
  unsigned int masterTimeRebuffer;
  SndDspDynamoState dyn1[6];
  SndDspDynamoState dyn2[6];
  SndDspBiquadState eqLow[6];
  SndDspBiquadState eqPeak1[6];
  SndDspBiquadState eqPeak2[6];
  SndDspBiquadState eqHi[6];
  SndDspVoiceFilterState voiceEqFx[6];
  SndDspVoiceFilterState voiceEqHdrfx[6];
  SndDspFutzState gfutzState[6];
  SndDspFutzState pfutzState[6];
};

struct sd_mix_bus_param
{
  float reverbG;
  float fxG;
  float voiceG;
  float pfutzG;
  float hdrfxG;
  float uiG;
  float musicG;
  float movieG;
  float vcsG;
  float referenceG;
  int reverbE;
  int fxE;
  int voiceE;
  int pfutzE;
  int hdrfxE;
  int uiE;
  int musicE;
  int movieE;
  int hdrfxCompE;
  int voiceEqE;
  int voiceCompE;
};

struct SndDspMasterEqParam
{
  int lowE;
  float lowG;
  float lowF;
  float lowQ;
  int peak1E;
  float peak1G;
  float peak1F;
  float peak1Q;
  int peak2E;
  float peak2G;
  float peak2F;
  float peak2Q;
  int hiE;
  float hiG;
  float hiF;
  float hiQ;
  float eqG;
};

struct sd_stream_preload
{
  const char *fileName;
  int fileHandle;
  unsigned int offset;
  unsigned int size;
  unsigned int latencyMs;
};

struct sd_stream_globals
{
  sd_stream streamPool[20];
  sd_stream_buffer streamBufferPool[20];
  char *streamBlob;
  volatile int streamIoActive;
  unsigned int streamBuffersUsed;
  unsigned int streamBuffersFree;
  unsigned int streamInUse;
  unsigned int streamStarvationCount;
  sd_stream_preload preloads[16];
};

struct SndStartAliasInfo
{
  const SndAlias *alias;
  SndEntHandle sndEnt;
  vec3_t org;
  vec3_t dir;
  float volModStart;
  int timeshift;
  float fadetime;
  int startDelay;
  SndOcclusionStartCache *ocache;
  SndPlayback *playback;
  int playbackId;
  int secondaryId;
  bool startPaused;
  bool setScriptValues;
  float scriptPitch;
  float scriptPitchRate;
  float scriptAttenuation;
  float scriptAttenuationRate;
};

struct SndOverlayInfo
{
  char pszSampleName[128];
  char name[64];
  char spatial[8];
  int channel;
  float fGlobalPriority;
  float fLosOcclusion;
  float fDry;
  float fWet;
  float fDistance;
  float fPitch;
  int iEntity;
  int group;
  int pan;
  __int64 played;
  int bus;
  int duckGroup;
};

struct SndCsvParseEntry
{
  const char *name;
  unsigned int offset;
  bool required;
  SndCsvParseEntryType type;
  float minimum;
  float maximum;
  unsigned int length;
  const char **enum_ids;
};

struct SndAssetToLoad
{
  int bankFileId;
  int fileOffset;
  int size;
  void *destination;
  unsigned int memoryOffset;
  SndLoadState state;
  unsigned int assetId;
  SndBank *bank;
  int streamRequestId;
  unsigned int loadId;
};

struct SndAliasLookupNode
{
  unsigned int id;
  SndAliasList *list;
};

struct SndAliasLookupCache
{
  SndAliasLookupNode cache[1024];
};

struct __declspec(align(128)) SndBankGlobals
{
  SndAssetBankEntry bankEntries[16487];
  unsigned int bankEntryMagic;
  unsigned int bankCount;
  unsigned int patchCount;
  SndBank *banks[32];
  SndPatch *patches[8];
  void *blockingEvent;
  bool blockingEventInit;
  bool blockingSuccess;
  bool loadGate;
  unsigned int assetLoadIndex;
  unsigned int assetLoadId;
  SndAssetToLoad assetLoadQueue[2048];
  SndAssetToLoad assetLoadActive[16];
  SndBank *sequentialReadInProgress;
  bool bankEntriesInUse;
  __declspec(align(64)) SndAssetBankHeader bankHeader;
  SndAliasLookupCache aliasCache;
  unsigned int missingAliasCache[1024];
  unsigned int aliasCacheHit;
  unsigned int aliasCacheMiss;
  unsigned int aliasCacheCollision;
  float assetLoadPercent;
};

struct sentient_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(sentient_t *, const sentient_fields_s *);
  void (__cdecl *getter)(sentient_t *, const sentient_fields_s *);
};

struct SentientGlobals
{
  int lastTime;
  int lastSample;
  vec3_t playerTrail[2];
  int sampleTime[2];
};

struct PathBlockPlanes
{
  vec2_t vNormal[5];
  float fDist[5];
  int iPlaneCount;
};

struct pathsort_t
{
  pathnode_t *node;
  float metric;
  float distMetric;
};

struct node_field_t
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *getter)(pathnode_t *, int);
};

struct nodespawn_t
{
  char *name;
  nodeType type;
};

struct pathstatic_t
{
  pathlink_s *pathLinks;
  unsigned __int16 *indirectNodes;
  unsigned __int8 *pathbuf;
};

struct NodeNums
{
  int array[2][8192];
};

struct sightclip_t
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t outerSize;
  vec3_t start;
  vec3_t end;
  int passEntityNum[2];
  int contentmask;
};

struct pathnode_parent_t
{
  vec3_t origin_loc;
  int entnum;
  pathnode_t *m_node;
  pathnode_parent_t *m_next;
};

struct PathLinkInfo
{
  unsigned __int16 from;
  unsigned __int16 to;
  unsigned __int16 prev;
  unsigned __int16 next;
};

struct __declspec(align(64)) pathlocal_t
{
  PathLinkInfo pathLinkInfoArray[2560];
  int pathLinkInfoArrayInited;
  unsigned int actualNodeCount;
  unsigned int extraNodes;
  unsigned int originErrors;
  struct {
      vec3_t origin;
      vec2_t enemyPos;
      int checkEnemyPos;
      float maxDist;
      float maxDistSq;
      float maxHeight;
      float maxHeightSq;
      int typeFlags;
      int spawnFlags;
      pathsort_t* nodes;
      int maxNodes;
      int nodeCount;
  } circle;
};

struct NodeTypeToName
{
  nodeType type;
  const char *name;
};

struct badplace_arc_t
{
  vec3_t origin;
  float radius;
  float halfheight;
  float angle0;
  float angle1;
};

struct scr_entref_t
{
  unsigned __int16 entnum;
  unsigned __int16 classnum;
  LocalClientNum_t client;
};

struct RadiantCommand
{
  RadiantCommandType type;
  int guid;
  char strCommand[512];
};

struct threat_bias_t
{
  unsigned __int16 groupName[16];
  int threatTable[16][16];
  int threatGroupCount;
};

struct PotentialTargetData
{
  gentity_t *entity;
  int threat;
  float distToEnt;
  vec2_t dirToEnt;
};

struct team_move_other_context_t
{
  sentient_t *other;
  vec3_t vOrgOther;
  vec2_t vVelOther;
  vec2_t vDelta;
  vec2_t vPerp;
  float fPosDeltaLengthSqrd;
  float fScale;
};

struct team_move_context_t
{
  actor_t *self;
  vec2_t vVelSelf;
  vec3_t vOrgSelf;
  vec2_t vVelDirSelf;
  float fVelSelfSqrd;
  float fDeltaCorrection;
  float fIntervalSqrd;
  float fWalkIntervalSqrd;
  float fMaxIntervalSqrd;
  int bFailedLookahead;
  float fDodgePosDeltaLengthSqrd;
  int dodgeEntities[72];
  int dodgeEntityCount;
  sentient_t *pDodgeOther;
  bool bPileUp;
  float fSlowDownPosDeltaLengthSqrd;
  sentient_t *pSlowDownOther;
  vec2_t vVelSlowDownOther;
};

struct ai_funcs_t
{
  bool (__fastcall *pfnStart)(actor_t *, ai_state_t);
  void (__fastcall *pfnFinish)(actor_t *, ai_state_t);
  void (__fastcall *pfnSuspend)(actor_t *, ai_state_t);
  bool (__fastcall *pfnResume)(actor_t *, ai_state_t);
  actor_think_result_t (__fastcall *pfnThink)(actor_t *);
  void (__fastcall *pfnTouch)(actor_t *, gentity_t *);
  void (__fastcall *pfnPain)(actor_t *, gentity_t *, int, const vec3_t *, const int, const vec3_t *, const hitLocation_t);
  void (__fastcall *pfnReact)(actor_t *, gentity_t *, const vec3_t *);
};

struct sentient_sort_t
{
  sentient_t *sentient;
  float fMetric;
  float distSqrd;
};

struct BuiltinMethodDef
{
  const char *actionString;
  unsigned int constId;
  int min_args;
  int max_args;
  void (__cdecl *actionFunc)(scr_entref_t);
  int type;
};

struct entityHandler_t
{
  void (__cdecl *think)(gentity_t *);
  void (__cdecl *reached)(gentity_t *);
  void (__cdecl *blocked)(gentity_t *, gentity_t *);
  void (__cdecl *touch)(gentity_t *, gentity_t *, int);
  void (__cdecl *use)(gentity_t *, gentity_t *, gentity_t *);
  void (__cdecl *pain)(gentity_t *, gentity_t *, int, const vec3_t *, const int, const vec3_t *, const hitLocation_t, const Weapon);
  void (__cdecl *react)(gentity_t *, gentity_t *, const vec3_t *);
  void (__cdecl *die)(gentity_t *, gentity_t *, gentity_t *, int, int, const Weapon, const vec3_t *, const hitLocation_t, int);
  void (__cdecl *entinfo)(gentity_t *, vec3_t *);
  void (__cdecl *controller)(const gentity_t *, int *);
  int methodOfDeath;
  int splashMethodOfDeath;
};

class ActorCmdHelper
{
};

struct FaceQuadrantThresholds
{
  float forwardDot;
  float sideDot;
};

struct CustomSearchInfo_FindCloseNode
{
  vec3_t goalPos;
  pathnode_t *closestNode;
  float closestDistSq;
};

struct /*__cppobj*/ CustomSearchInfo_FindPath
{
  pathnode_t *m_pNodeTo;
  vec3_t startPos;
  int randomWeightIndex;
  float randomNodeCosts[4];
  float chokePointWeights[4];
  float negotiationOverlapCost;
};

struct CustomSearchInfo_CouldAttack
{
  pathnode_t *m_pNodeTo;
  pathnode_t *attackNode;
};

struct CustomSearchInfo_FindPathWithWidth
{
  pathnode_t *m_pNodeTo;
  float width;
  vec2_t perp;
};

struct actor_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(actor_t *, const actor_fields_s *);
  void (__cdecl *getter)(actor_t *, const actor_fields_s *);
};

struct AnimScriptList
{
  scr_animscript_t combat;
  scr_animscript_t concealment_crouch;
  scr_animscript_t concealment_prone;
  scr_animscript_t concealment_stand;
  scr_animscript_t cover_arrival;
  scr_animscript_t cover_crouch;
  scr_animscript_t cover_left;
  scr_animscript_t cover_prone;
  scr_animscript_t cover_right;
  scr_animscript_t cover_stand;
  scr_animscript_t death;
  scr_animscript_t grenade_return_throw;
  scr_animscript_t init;
  scr_animscript_t pain;
  scr_animscript_t react;
  scr_animscript_t move;
  scr_animscript_t scripted;
  scr_animscript_t stop;
  scr_animscript_t grenade_cower;
  scr_animscript_t flashed;
  scr_animscript_t jump;
  scr_animscript_t turn;
  scr_animscript_t weapons[256];
};

struct AIEventListener
{
  int entIndex;
  unsigned int events;
};

struct gameTypeScript_t
{
  char pszScript[64];
  char pszName[64];
  int bTeamBased;
};

struct __declspec(align(8)) corpseInfo_t
{
  XAnimTree_s *tree;
  int entnum;
  int time;
  clientInfo_t ci;
  bool falling;
};

struct scr_data_t
{
  int level_gamemode_callback_setup;
  int levelscript;
  int scripted_init;
  int gametypescript;
  int allies;
  int axis;
  struct {
      int main;
      int startupgametype;
      int playerconnect;
      int playerdisconnect;
      int playerdamage;
      int playerkilled;
      int playermelee;
      int votecalled;
      int playervote;
      int playerrevive;
      int actordamage;
      int actorkilled;
      int vehicledamage;
      int vehicleradiusdamage;
      int playerlaststand;
      int playermigrated;
      int hostmigration;
      int hostmigration_save;
      int prehostmigration_save;
      int iNumGameTypes;
      gameTypeScript_t list[32];
  } gametype;
  int delete_;
  int initstructs;
  int createstruct;
  int findstruct;
  AnimScriptList dogAnim;
  AnimScriptList zombieAnim;
  AnimScriptList zombieDogAnim;
  corpseInfo_t playerCorpseInfo[4];
  XAnimTree_s *actorXAnimTrees[32];
  corpseInfo_t actorCorpseInfo[8];
  int destructible_callback;
  int challenge_callback;
  int gunchallenge_callback;
  int rankup_callback;
  int medal_callback;
  int onaddplayerstat_scriptedprocesscontracts_callback;
  int onaddweaponstat_scriptedprocesscontracts_callback;
  int givecontractrewards_callback;
  int updatespawnpoints;
  int glassSmash;
  int finalizeInitialization;
  int menuresponse_callback;
};

struct r_SkinConditions
{
    union {
        struct {
            unsigned __int32 outOfSkinnedCachedVerts : 1;
            unsigned __int32 almostoutOfSkinnedCachedVerts : 1;
        };
        unsigned int allbits;
  };
};

struct badplace_brush_t
{
  gentity_t *volume;
  float radius;
};

union badplace_parms_t
{
  badplace_arc_t arc;
  badplace_brush_t brush;
};

struct _pendedBadPlace
{
  badplace_parms_t params;
  unsigned int name;
  int duration;
  int teamflags;
  int type;
};

struct badplace_t
{
  int endtime;
  int pingTime;
  unsigned __int16 name;
  unsigned __int8 type;
  unsigned __int8 teamflags;
  int depth;
  badplace_parms_t parms;
};

struct weaponParms
{
  vec3_t forward;
  vec3_t right;
  vec3_t up;
  vec3_t muzzleTrace;
  vec3_t gunForward;
  Weapon weapon;
  const WeaponVariantDef *weapVariantDef;
  const WeaponDef *weapDef;
};

struct checkStopParams_t
{
  bool hadPath;
  vec3_t lastPathLookaheadDir;
  vec3_t lastPathGoal;
  const pathnode_t *node;
  const pathnode_t *prevNode;
};

struct PhysicsInputs
{
  vec3_t vVelocity;
  unsigned __int16 groundEntNum;
  int bHasGroundPlane;
  float groundplaneSlope;
  int iFootstepTimer;
};

struct ddlStackMember_t
{
  ddlMemberDef_t *ddlMember;
  int arrayIndex;
};

struct ddlStack_t
{
  ddlStackMember_t stackMember[16];
  int top;
};

struct /*__cppobj*/ DdlBinder
{
  const char *m_name;
  const char *m_ddlFile;
  const char *m_ddlPath[6];
  int m_depth;
  int m_value;
  DdlBinder *m_next;
};

struct searchState_t
{
  ddlDef_t *ddl;
  int offset;
  char path[256];
  ddlMemberDef_t *member;
};

union sval_u
{
  unsigned __int8 type;
  unsigned int stringValue;
  unsigned int idValue;
  float floatValue;
  int intValue;
  sval_u *node;
  unsigned int sourcePosValue;
  const unsigned __int8 *codePosValue;
  const char *debugString;
  scr_block_s *block;
};

struct scr_localVar_t
{
  unsigned int name;
  unsigned int sourcePos;
};

struct scr_block_s
{
  int abortLevel;
  int localVarsCreateCount;
  int localVarsPublicCount;
  int localVarsCount;
  unsigned __int8 localVarsInitBits[8];
  scr_localVar_t localVars[64];
};

struct stype_t
{
  sval_u val;
  unsigned int pos;
};

struct scrCompilePub_t
{
  int value_count;
  int far_function_count;
  unsigned int loadedscripts;
  unsigned int scriptsPos;
  unsigned int scriptsCount;
  unsigned int builtinFunc;
  unsigned int builtinMeth;
  const char *in_ptr;
  const char *parseBuf;
  bool script_loading;
  bool allowedBreakpoint;
  int developer_statement;
  unsigned __int8 *opcodePos;
  unsigned int programLen;
};

struct yy_buffer_state
{
  _iobuf *yy_input_file;
  char *yy_ch_buf;
  char *yy_buf_pos;
  unsigned int yy_buf_size;
  int yy_n_chars;
  int yy_is_our_buffer;
  int yy_is_interactive;
  int yy_at_bol;
  int yy_fill_buffer;
  int yy_buffer_status;
};

struct __declspec(align(4)) scrAnimPub_t
{
  unsigned int animtrees;
  unsigned int animtree_node;
  unsigned int animTreeNames;
  scr_animtree_t xanim_lookup[2][128];
  unsigned int xanim_num[2];
  unsigned int animTreeIndex;
  bool animtree_loading;
};

struct __declspec(align(2)) GSC_OBJ
{
  char magic[8];
  unsigned int source_crc;
  unsigned int include_offset;
  unsigned int animtree_offset;
  unsigned int cseg_offset;
  unsigned int stringtablefixup_offset;
  unsigned int exports_offset;
  unsigned int imports_offset;
  unsigned int fixup_offset;
  unsigned int profile_offset;
  unsigned int cseg_size;
  unsigned __int16 name;
  unsigned __int16 stringtablefixup_count;
  unsigned __int16 exports_count;
  unsigned __int16 imports_count;
  unsigned __int16 fixup_count;
  unsigned __int16 profile_count;
  unsigned __int8 include_count;
  unsigned __int8 animtree_count;
  unsigned __int8 flags;
};

struct GSC_OBJGDB
{
  char magic[8];
  unsigned int version;
  unsigned int source_crc;
  unsigned int lineinfo_count;
};

struct debugFileInfo_t
{
  const char *filename;
  void *startAddr;
  void *endAddr;
  unsigned __int8 **lineStartAddr;
  int lineStartAddrCount;
  char *source;
  int sourceLen;
  GSC_OBJGDB *gdb;
};

struct objFileInfo_t
{
  GSC_OBJ *activeVersion;
  GSC_OBJ *baselineVersion;
  debugFileInfo_t debugInfo;
  gscProfileInfo_t *profileInfo;
  int profileInfoCount;
};

struct debugger_sval_s
{
  debugger_sval_s *next;
};

struct ScriptExpression_t
{
  sval_u parseData;
  int breakonExpr;
  debugger_sval_s *exprHead;
};

struct __declspec(align(8)) breakpointData_t
{
  int type;
  int oldType;
  int id;
  unsigned __int8 *pos;
  unsigned __int8 op;
  int uniqueId;
  objFileInfo_t *fileInfo;
  int lineNum;
  unsigned int localId;
  const char *watch_expr_text;
  ScriptExpression_t watch_expr;
  const char *cond_expr_text;
  ScriptExpression_t cond_expr;
  unsigned int context;
  VariableValue oldValue;
  unsigned int notifyStringId;
};

struct __declspec(align(8)) scrDebuggerGlob_t
{
  breakpointData_t breakpointData[132];
  bool send_file_info;
  breakpointData_t *activeBreakpoint;
  VariableValue *activeBreakpointStack;
  unsigned int activeBreakpointLocalID;
  volatile bool atBreakpoint;
  bool debugger_inited_system;
  volatile bool abort;
  bool forceBreak;
  bool forceJump;
  unsigned __int8 *forceJumpPos;
  bool testForDataBreakpoints;
  bool testForNotifyBreakpoints;
  bool reportThreadUsage;
  const char *pendingShellCommand;
};

struct /*__cppobj*/ CodeBreakpoint
{
  char filename[64];
  int lineNum;
  unsigned __int8 *addr;
};

struct /*__cppobj*/ CodeBreakpoints
{
  CodeBreakpoint breakpoints[128];
  int num;
};

struct scrVmGlob_t
{
  VariableValue eval_stack[2];
  const char *dialog_error_message;
  int loading;
  int starttime;
  unsigned int localVarsStack[2048];
  bool recordPlace;
  const char *lastFileName;
  int lastLine;
};

struct scrVmDebugPub_t
{
  int dummy;
};

union $3588F53DFF46E736310B77DD17142039
{
  void (__cdecl *func)();
  void (__cdecl *method)(scr_entref_t);
};

struct _gscBuiltinProfileInfo_t
{
  $3588F53DFF46E736310B77DD17142039 ___u0;
  const char *name;
  gscProfileInfo_t profileInfo;
  _gscBuiltinProfileInfo_t *next;
};

struct ThreadDebugInfo
{
  unsigned __int8 *pos[32];
  int posSize;
  float varUsage;
  float endonUsage;
};

struct VariableDebugInfo
{
  unsigned __int8 *pos;
  const char *fileName;
  const char *functionName;
  int varUsage;
};

struct HashEntry
{
  unsigned int status_next;
  union {
      unsigned int prev;
      unsigned int str;
  } u;
};

struct __declspec(align(128)) scrStringGlob_t
{
  HashEntry *hashTable;
  bool inited;
  HashEntry *nextFreeEntry;
  int indentLevel;
  int stringsUsed[32];
};

struct __declspec(align(4)) SourceBufferInfo
{
  const unsigned __int8 *codePos;
  char *buf;
  const char *sourceBuf;
  int len;
  int sortedIndex;
  bool archive;
};

struct scrParserPub_t
{
  SourceBufferInfo *sourceBufferLookup;
  unsigned int sourceBufferLookupLen;
  const char *scriptfilename;
  const char *sourceBuf;
};

struct SourceLookup
{
  unsigned int sourcePos;
  int type;
};

struct SaveSourceBufferInfo
{
  char *sourceBuf;
  int len;
};

struct scrParserGlob_t
{
  SourceLookup *sourcePosLookup;
  unsigned int sourcePosLookupMaxLen;
  unsigned int sourcePosLookupLen;
  unsigned int sourceBufferLookupMaxLen;
  const unsigned __int8 *currentCodePos;
  unsigned int currentSourcePosCount;
  SaveSourceBufferInfo *saveSourceBufferLookup;
  unsigned int saveSourceBufferLookupLen;
  int delayedSourceIndex;
  int threadStartSourceIndex;
};

struct SCRIPT_PENDING_BINUPDATE
{
  bool is_pending;
  GSC_OBJ *obj;
  GSC_OBJGDB *gdb;
  int objLen;
  int gdbLen;
};

struct GSC_IMPORT_ITEM
{
  unsigned __int16 name;
  unsigned __int16 name_space;
  unsigned __int16 num_address;
  unsigned __int8 param_count;
  unsigned __int8 flags;
};

struct GSC_ANIMNODE_ITEM
{
  unsigned int name;
  unsigned int address;
};

struct GSC_STRINGTABLE_ITEM
{
  unsigned __int16 string;
  unsigned __int8 num_address;
  unsigned __int8 type;
};

struct GSC_ANIMTREE_ITEM
{
  unsigned __int16 name;
  unsigned __int16 num_tree_address;
  unsigned __int16 num_node_address;
  unsigned __int8 pad[2];
};

struct GSC_PROFILE_ITEM
{
  unsigned int name;
  unsigned int address;
};

struct GSC_EXPORT_ITEM
{
  unsigned int checksum;
  unsigned int address;
  unsigned __int16 name;
  unsigned __int8 param_count;
  unsigned __int8 flags;
};

struct GSC_FIXUP_ITEM
{
  unsigned int offset;
  unsigned int address;
};

struct MemoryNode
{
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned int padding[5];
};

struct scrMemTreeGlob_t
{
  MemoryNode *nodes;
  __declspec(align(128)) unsigned __int8 leftBits[256];
  unsigned __int8 numBits[256];
  unsigned __int8 logBits[256];
  unsigned __int16 *head;
  int totalAlloc;
  int totalAllocBuckets;
  int avgAlloc;
  int avgAllocBytes;
};

struct scrMemTreeDebugGlob_t
{
  unsigned __int8 mt_usage[65536];
  unsigned __int8 mt_usage_size[65536];
};

struct scrEvaluateGlob_t
{
  bool freezeScope;
  bool freezeObjects;
  bool objectChanged;
};

struct SortData
{
  scriptInstance_t inst;
  int parentType;
  unsigned int *names;
  unsigned int *localIds;
};

struct debuggerVarUsageData_t
{
  const char *filename;
  int funcIndex;
  int lineNum;
  int count;
  int varCount;
  int endonCount;
  unsigned int threadId;
  int index;
};

struct ENT_IDS
{
  unsigned int id;
  unsigned __int16 c;
  unsigned __int16 entnum;
};

struct _watchNode_t
{
  const char *refText;
  const char *valueText;
  unsigned int objectId;
  unsigned __int8 objectType;
  unsigned __int8 oldObjectType;
  VariableValue value;
  ScriptExpression_t expr;
  bool is_expand;
  bool is_valid_value;
  bool is_thread_list;
  bool is_endon_list;
};

struct /*__cppobj*/ DebuggerCriticalSection
{
};

struct CaseStatementInfo
{
  unsigned int name;
  unsigned __int8 *codePos;
  unsigned int sourcePos;
  CaseStatementInfo *next;
};

struct BreakStatementInfo
{
  unsigned __int8 *codePos;
  unsigned __int8 *nextCodePos;
  BreakStatementInfo *next;
};

struct ContinueStatementInfo
{
  unsigned __int8 *codePos;
  unsigned __int8 *nextCodePos;
  ContinueStatementInfo *next;
};

struct PrecacheEntry
{
  unsigned __int16 filename;
  bool include;
  unsigned int sourcePos;
};

struct __declspec(align(8)) VariableCompileValue
{
  VariableValue value;
  sval_u sourcePos;
};

struct scrCompileGlob_t
{
  unsigned __int8 *codePos;
  unsigned __int8 *prevOpcodePos;
  unsigned int filePosId;
  unsigned int fileCountId;
  int cumulOffset;
  int maxOffset;
  int maxCallOffset;
  bool bConstRefCount;
  bool in_developer_thread;
  unsigned int developer_thread_sourcePos;
  bool firstThread[2];
  CaseStatementInfo *currentCaseStatement;
  bool bCanBreak;
  BreakStatementInfo *currentBreakStatement;
  bool bCanContinue;
  ContinueStatementInfo *currentContinueStatement;
  scr_block_s **breakChildBlocks;
  int *breakChildCount;
  scr_block_s *breakBlock;
  scr_block_s **continueChildBlocks;
  int *continueChildCount;
  bool forceNotCreate;
  PrecacheEntry *precachescriptList;
  VariableCompileValue value_start[32];
};

struct scrAnimGlob_t
{
  const char *start;
  const char *pos;
  unsigned __int16 using_xanim_lookup[2][128];
  int bAnimCheck;
};

struct TreeNameMap
{
  int animIndex;
  char strName[80];
};

struct ClientTreeStorage
{
  char *strName;
  scr_animtree_t animTree;
  int numIndices;
  TreeNameMap *pTreeNameMap;
};

struct /*__cppobj*/ ScriptTokenizer
{
  scriptInstance_t inst;
  int m_iNumInStack;
  char m_stack[40][256];
};

struct ValueEntry
{
  unsigned int valueName;
  unsigned int theValue;
};

struct MD5_CTX
{
  unsigned int i[2];
  unsigned int buf[4];
  unsigned __int8 in[64];
  unsigned __int8 digest[16];
};

struct flamePhysics_t
{
  vec3_t origin;
  vec3_t newPos;
  vec3_t velocity;
  float invStartSpeed;
  float gravity;
  float rotation;
  float rotVel;
};

struct flameSize_t
{
  float current;
  float rate;
};

struct flameAge_t
{
  int lastUpdateTime;
  int startTime;
  int endTime;
};

struct flameList_t
{
  flameGeneric_s *prev;
  flameGeneric_s *next;
};

struct flameGeneric_s
{
  flamePhysics_t phys;
  flameSize_t size;
  flameAge_t age;
  flameList_t listGlobal;
  flameList_t listLocal;
  flameStream_s *stream;
  unsigned __int32 type : 3;
  unsigned __int32 delete_chunk : 1;
  unsigned __int32 id : 28;
};

struct flameStream_s
{
  flameGeneric_s gen;
  flameRenderList_s *renderList;
  flameTable *flameVars;
  flameChunk_s *chunkList;
  int lastSmokeChunkTime;
  int lastDripChunkTime;
  int entityNum;
  int damage;
  float damageDuration;
  float damageInterval;
  int isKillcamFlame;
  int firingThroughGeo;
};

struct flameRender_s
{
  char name[128];
  flameGeneric_s *fireList;
  flameGeneric_s *dripsList;
};

struct flameRenderList_s
{
  vec3_t fuelVerts[128];
  vec3_t flameVerts[128];
  flameRender_s *flameRend;
};

struct flameChunk_s
{
  flameGeneric_s gen;
  int spawnFireInterval;
  int lastSpawnFire;
  int spawnDripsInterval;
  int spawnSmokeInterval;
};

struct __declspec(align(4)) flameSource_t
{
  vec3_t origin;
  vec3_t angle;
  vec3_t entityOrigin;
  flameStream_s *currentStream;
  int lastUsedTime;
  int isKillcamFlame;
  int firingThroughGeo;
  int entityNum;
  int firstDobjHandle;
  int thirdDobjHandle;
  int lastSoundTime;
  vec3_t flameSoundPoint;
  bool bIsFiring;
  bool inUse;
  bool is_server_alloc;
  bool wasFiring;
  unsigned __int8 firstBoneIndex;
  unsigned __int8 thirdBoneIndex;
};

struct flameVarDef_t
{
  const char *dvarName;
  const char *name;
  float defaultVal;
  float minVal;
  float maxVal;
  const char *description;
};

struct flameDrips_t
{
  flameGeneric_s gen;
  flameRender_s *flameRend;
};

struct flameFire_t
{
  flameGeneric_s gen;
  flameRender_s *flameRend;
};

struct flameWeaponConfig_t
{
  bool bIsFiring;
  bool bFireWhileIdle;
  vec3_t origin;
  vec3_t angle;
  float strength;
  float thickness;
  float burnRate;
  vec3_t entityOrigin;
  flameTable *fTable;
  int damage;
  float damageDuration;
  float damageInterval;
};

struct __declspec(align(8)) renderQuad_t
{
  vec4_t pos;
  float rotation;
  float radius;
  float lifeFrac;
};

struct /*__cppobj*/ cdl_proftimer
{
  unsigned __int64 stamp;
  unsigned __int64 value;
  unsigned __int64 avr;
  unsigned __int64 tot;
  unsigned __int64 capture_count;
  unsigned __int64 calls;
  bool capture;
  unsigned __int64 mx[5];
};

struct /*__cppobj*/ Flame_SortByStream
{
};

struct flameChunkSpawnVars_t
{
  int time;
  int duration;
  vec3_t origin;
  vec3_t angle;
  float speed;
  float decel;
  float gravityStart;
  float gravityEnd;
  float sizeMax;
  float sizeStart;
  float sizeEnd;
  float sizeRate;
  float spawnFireIntervalStart;
  float spawnFireIntervalEnd;
};

struct /*__cppobj*/ cCurve
{
    struct nodeData {
        vec3_t pos;
        vec3_t vel;
        float dist;
        float totalDist;
        bool bReached;
    } mNodes[300];
    int mNotifyEntNum;
    int mCameraEntNum;
    bool mNotifyLevel;
    float mSpeed;
    int mNumNodes;
    bool mActive;
    enum eCurveType {
        CURVE_RNS = 0x0,
        CURVE_SNS = 0x1,
        CURVE_TNS = 0x2,
        CURVE_BSPLINE = 0x3,
    } mCurveType;
    float mDistance;
    bool mDraw;
    vec4_t mDrawColor;
    bool mUseColor;
    bool mPaused;
    float mCurPos;
    float mCurServerPos;
    int mLastNode;
    int mIndex;
};

class cCurveManager
{
};

struct flameSmoke_t
{
  flameGeneric_s gen;
  Material *material;
  float smokeFadein;
  float smokeFadeout;
  float smokeMaxAlpha;
  float smokeBrightness;
};

struct IKJointBones
{
  IKBoneNames twistBone;
  IKBoneNames childBone;
  IKBoneNames jointBone;
  IKBoneNames parentBone;
  IKBoneNames baseBone;
};

struct IKSystem
{
  bool bInitialized;
  char *boneStrings[24];
  IKBoneNames ikBoneParents[24];
  IKJointBones joints[4];
  int systemFrameNumber;
  unsigned __int16 *ikImportBoneStringVars;
  unsigned __int16 *ikImportMiscBoneStringVars;
  union {
      unsigned __int8* localClipMap;
      unsigned __int8* clipMap;
  };
  const dvar_t *dvars[33];
  bool inViewer;
  vec3_t leftHandOffset;
  vec3_t leftHandRotation;
  int leftHandEntnum;
  int leftHandSwitchTime;
  int numActorIKEnabled;
  int numActorIKEnabledFrameNumber;
  vec3_t leftHandIdlePos;
  vec3_t leftHandOffsetPos;
  vec3_t leftHandOffsetRot;
  vec3_t leftHandPronePos;
  vec3_t leftHandProneRot;
};

struct IKJointVars
{
  bool bValid;
  float UpperLength;
  float UpperIKc;
  float UpperIKInvc;
  float LowerLength;
  float LowerIKc;
  float LowerIKInvc;
};

struct __declspec(align(4)) ikLerpInfo_t
{
  int lastUpdateTime;
  float lerp;
  bool goalState;
};

struct /*__cppobj*/ IKCollisionCache
{
    int hitIndex;
    colgeom_visitor_inlined_t<200> proximity_data;
};


struct /*__cppobj*/ IKState
{
  int inUse;
  int entityNum;
  int isServer;
  LocalClientNum_t localClientIndex;
  union {
      unsigned __int8* model;
      unsigned __int8* localModel;
  };
  int isIKModel;
  union {
      IKSystem* localIkSystem;
      IKSystem* ikSystem;
  };
  int timeMS;
  int frameUsed;
  unsigned __int8 ikBoneToObjBone[24];
  unsigned __int8 objBoneToIKBone[160];
  int bJointVarsValid;
  IKJointVars jointVars[4];
  float footHeightFromGround;
  int animatedIKBonesBits[1];
  int objBoneCalcBits[4];
  int modifiedIKBones;
  __declspec(align(8)) vec4_t footMats[2][4];
  vec4_t handMats[2][4];
  vec4_t leftHandFromRightHandMat[4];
  vec4_t entityXform[4];
  vec4_t entityLegsXform[4];
  vec4_t (*matArrayPreIK)[4];
  vec4_t (*matArrayPostIK)[4];
  vec4_t (*matArrayXforms)[4];
  vec4_t (*matArrayCache)[4];
  vec4_t (*matArrayCachePre)[4];
  int cacheActive;
  vec3_t rootOffset;
  vec4_t rootQuat;
  vec3_t origin;
  vec3_t angles;
  float lastTerrainMappingFootOffsetZ[2];
  float lastTerrainMappingPelvisZ;
  vec3_t lastTerrainMappingOrigin;
  float lastTerrainMappingTraceZ[2];
  vec2_t lastTerrainMappingTraceFootPos[2];
  float leftHandLerp;
  float rightHandLerp;
  int terrainDisableTime;
  ikLerpInfo_t lerpInfo[25];
  int lastFrameMS[25];
  bool bHasActiveLayers;
  int lastMovedTime;
  int lastNotMovedTime;
  int lastUpdateLayerLerpsTime;
  int statusFlags;
  int lastUpdateStatusFlags;
  int lastIsIKEntityFrameNum;
  vec3_t controllers[6];
  vec3_t controller_origin_angles;
  bool hasControllers;
  DvarValue dvarValues[33];
  vec3_t velocity;
  float gunnerCrouch;
  IKCollisionCache collisionCache;
  vec3_t leftHandIdlePos;
  vec3_t leftHandOffset;
  vec3_t leftHandRotation;
  vec3_t leftHandOffsetPrev;
  vec3_t leftHandRotationPrev;
  int leftHandChangeTime;
  float leftHandLastProximityLerp;
  IKWeaponOffsetType weaponOffsetType;
  IKWeaponSpecialNames weaponSpecialCurrent;
  vec3_t lastFootTraceNormals[2];
  vec3_t lastFootTraceGoalNormals[2];
  float lastCollisionEntityZ;
  int footTraceCollisionHint[2];
  int actorLookAtIsEntity;
  int actorLookAtIsAiming;
  vec3_t actorLookAtAngles;
  vec3_t actorLookAtAnglesDelayed;
  float actorLookAtScale;
  int actorLookAtLastUpdateTime;
  bool bHasLegSolverLayer;
  bool bHasArmSolverLayer;
  float legSolverFrac;
  float armSolverFrac;
  IKWeaponClass weaponClass;
  int headClipTraceIgnoreTime;
  int nextUpdateDvarTime;
  float maxProneLerp;
};

struct TracerInfo
{
  Material *material;
  float clipDist;
  float length;
  float width;
  float screwDist;
  float screwRadius;
  float fadeTime;
  float fadeScale;
  float texRepeatRate;
  unsigned __int8 colors[5][4];
  int isClientEmitter;
};

struct localEntity_s
{
  localEntity_s *prev;
  localEntity_s *next;
  leType_t leType;
  int endTime;
  trajectory_t pos;
  GfxEntity refEntity;
  TracerInfo tracer;
};

struct MD4_CTX
{
  unsigned int state[4];
  unsigned int count[2];
  unsigned __int8 buffer[64];
};

struct Bone
{
  int parentBone;
  unsigned __int8 animBones[2];
  int rigidBody;
  float length;
  vec3_t center;
};

struct __declspec(align(4)) LerpBone
{
  int parentBone;
  unsigned __int8 animBone;
};

struct Joint
{
  int joint;
  int joint2;
};

struct BoneOrientation
{
  vec3_t origin;
  int boneFlags;
  vec4_t orientation;
};

struct RagdollBody
{
  int references;
  int ragdollDef;
  int dobj;
  DObj *obj;
  const cpose_t *pose;
  vec3_t poseOffset;
  LocalClientNum_t localClientNum;
  RagdollBodyState state;
  int stateMsec;
  int stateFrames;
  int velCaptureMsec;
  int stableTime;
  int numBones;
  Bone bones[14];
  int numLerpBones;
  LerpBone lerpBones[9];
  int numJoints;
  Joint joints[28];
  int curOrientationBuffer;
  BoneOrientation boneOrientations[2][23];
  BoneOrientation lerpBoneOffsets[9];
  int flags;
  int storedLaunchCount;
  hitLocation_t storedLaunchHitLoc[2];
  vec3_t storedLaunchForce[2];
  hitLocation_t storedAttachHitLoc;
  int storedAttachEnt;
  int storedPhysObjId;
  rigid_body_constraint_point *debug_hang_point;
  rigid_body_constraint_point *hang_point;
  int start_hang_time;
  //broad_phase_group *m_bpg;
  //broad_phase_collision_pair *m_list_bpcp;
  int rope_id;
  void *rbc_dist;
  bool gravity_override;
  int gravity;
  vec3_t mover_xform_axis[14][3];
  vec3_t mover_xform_origin[14];
  float waterHeight;
};

struct StateEnt
{
  bool (__cdecl *enterFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
  bool (__cdecl *exitFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
  void (__cdecl *updateFunc)(RagdollBody *, int);
};

struct BaseLerpBoneDef
{
  char animBoneTextName[20];
  unsigned int animBoneName;
  unsigned int parentBoneIndex;
  int lerpTime;
};

struct BoneDef
{
  char animBoneTextNames[2][20];
  unsigned int animBoneNames[2];
  float radius;
  bool mirror;
  float percent;
  float mass;
  float friction;
  float buoyancy;
  int parentBone;
  PhysicsGeomType geomType;
};

struct SelfPairDef
{
  unsigned __int8 bones[2];
};

struct JointDef
{
  unsigned __int8 bone;
  JointType type;
  int numLimitAxes;
  vec3_t limitAxes[3];
  float minAngles[3];
  float maxAngles[3];
  float axisFriction[3];
};

struct __declspec(align(4)) RagdollDef
{
  bool inUse;
  bool bound;
  int numBones;
  BoneDef boneDefs[14];
  int numBaseLerpBones;
  BaseLerpBoneDef baseLerpBoneDefs[9];
  int numJoints;
  JointDef jointDefs[28];
  int numSelfPairs;
  SelfPairDef selfPairDefs[33];
};

struct XDollBone
{
  unsigned __int8 index;
  unsigned __int8 flags;
  unsigned int name_hash;
  int rigidBody;
  PhysPreset *physPreset;
};

struct XDollBoneOrientation
{
  vec3_t origin;
  int boneFlags;
  vec4_t orientation;
};

struct rigid_body_constraint
{
    rigid_body* b1;
    rigid_body* b2;
    rigid_body_constraint* m_next;
};

struct XDoll_ConstraintInfo
{
  int type;
  int timer;
  union {
      rigid_body_constraint* constraint;
      rigid_body_constraint_ragdoll* ragdoll_constraint;
      rigid_body_constraint_point* point_constraint;
      rigid_body_constraint_hinge* hinge_constraint;
      rigid_body_constraint_angular_actuator* actuator_constraint;
  };
};

struct XDollBody
{
  int references;
  int entity_index;
  LocalClientNum_t client_index;
  int piece_index;
  unsigned int attach_bone_hash;
  PhysConstraints *constraintsDef;
  int numBones;
  XDollBone bones[4];
  XDollBoneOrientation boneOrientations[4];
  XDoll_ConstraintInfo constraintInfos[4];
  int userBody;
  unsigned int userBodyBoneHash;
  int stableTime;
};

struct contact_t
{
  vec3_t point;
  vec3_t normal;
  int particle_index;
};

struct __declspec(align(16)) RopeUpdateCmdData
{
  vec3_t viewOrg;
  int ropeCount;
  vec4_t screenMtx[4];
  rope_t *ropes;
};

struct __declspec(align(4)) VisualRope
{
  float beginRadius;
  float endRadius;
  const Material *material;
  int segmentCount;
  float *segmentVerts;
  GfxDrawSurf *drawSurf;
  unsigned __int16 *lightingHandle;
  GfxLightingInfo lightingInfo;
  unsigned __int8 visibilityFlags;
};

struct PhysPresetInfo
{
  float mass;
  float bounce;
  float friction;
  int isFrictionInfinity;
  float bulletForceScale;
  float explosiveForceScale;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  int canFloat;
  float gravityScale;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
};

struct leaves_t
{
  int count;
  int max_count;
  int *list;
};

struct leafList_s
{
  int count;
  int maxcount;
  int overflowed;
  unsigned __int16 *list;
  vec3_t bounds[2];
  int lastLeaf;
};

struct GfxVertex
{
  vec4_t xyzw;
  GfxColor color;
  vec2_t texCoord;
  PackedUnitVec normal;
};

struct materialCommands_t
{
  GfxVertex verts[5450];
  unsigned __int16 indices[1048576];
  MaterialVertexDeclType vertDeclType;
  unsigned int vertexSize;
  int indexCount;
  int vertexCount;
  int firstVertex;
  int lastVertex;
  bool finishedFilling;
  TessPrimType primType;
};

struct debug_brush_t
{
  const cbrush_t *brush;
  unsigned int first_vertex_index;
  unsigned int first_winding_index;
  unsigned __int16 num_indices;
  unsigned __int16 num_windings;
};

struct debug_brush_info_t
{
  debug_brush_t brushes[5000];
  unsigned __int8 windings[50000];
  unsigned __int8 indices[360000];
  int num_brushes;
  int num_windings;
  int num_indices;
};

struct __declspec(align(4)) debug_patch_t
{
  const CollisionAabbTree *tree;
  unsigned int first_vertex_index;
  unsigned __int16 num_indices;
};

struct debug_patch_info_t
{
  debug_patch_t patches[5000];
  unsigned int indices[100000];
  unsigned int num_patches;
  unsigned int num_indices;
};

class phys_vec3
{
public:
    float x;
    float y;
    float z;
    float w;
};

struct chull_t
{
  unsigned int key;
  int nverts;
  phys_vec3 *verts;
  int ninds;
  unsigned __int16 *inds;
  chull_t *next;
  int touched;
  chull_t *next_list;
};

struct GfxPointVertex
{
  vec3_t xyz;
  unsigned __int8 color[4];
};

struct vehicle_avoidnode_t
{
  vec3_t origin;
  float radius;
  float height;
};

struct smodel_debug_info_t
{
  cStaticModel_s *smodel;
  float dist2;
};

struct PhysImpulse
{
  int id;
  vec3_t hitp;
  vec3_t hitd;
};

struct BodyState
{
  vec3_t position;
  vec3_t rotation[3];
  vec3_t velocity;
  vec3_t angVelocity;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
  float mass;
  float friction;
  float bounce;
  int timeLastAsleep;
  int id;
  int buoyancy;
  int underwater;
  int owner;
  PhysicsOwnerType owner_type;
};

struct dent_info_t
{
  unsigned __int16 id;
  float dist2;
};

struct DynEntityProps
{
  const char *name;
  bool clientOnly;
  bool clipMove;
  bool usePhysics;
  bool destroyable;
};

struct DynEntityAreaParms
{
  const vec3_t *mins;
  const vec3_t *maxs;
  int contentMask;
  unsigned __int16 *list;
  unsigned __int16 maxCount;
  unsigned __int16 count;
};

struct dynent_hit
{
  unsigned __int16 absId;
};

struct destructible_hit
{
  int entNum;
};

struct destructible_event_t
{
  int type;
  union {
      struct {
          centity_t* self;
          const centity_t* attacker;
          vec3_t dir;
          vec3_t point;
          int damage;
          int mod;
          unsigned int modelIndex;
          unsigned int partName;
      } ed;
      struct {
          centity_t* self;
          vec3_t point;
          float damgeInner;
          float damgeOuter;
          float radius;
          int mod;
      } erd;
      struct {
          LocalClientNum_t localClientNum;
          int event;
          const entityState_s* es;
      } ehe;
  };
};

struct destructible_gamestate
{
  unsigned __int8 localClientNum;
  unsigned __int8 numPieces;
  __int16 entityNum;
  __int16 health[32];
};

struct DObjTrace_s
{
  float fraction;
  int sflags;
  vec3_t normal;
  unsigned __int16 modelIndex;
  unsigned __int16 partName;
  unsigned __int16 partGroup;
  int localBoneIndex;
};

struct collision_material_t
{
  char name[64];
  int cflags;
  int sflags;
};

struct adjacencyWinding_t
{
  int numsides;
  int sides[12];
};

struct SimplePlaneIntersection
{
  vec3_t xyz;
  int planeIndex[3];
};

struct XVertexInfo_s
{
  vec3_t normal;
  unsigned __int8 color[4];
  vec3_t binormal;
  float texCoordX;
  vec3_t tangent;
  float texCoordY;
  vec3_t offset;
  unsigned __int8 numWeights;
  unsigned __int8 pad;
  __int16 boneOffset;
};

struct ExtentBounds
{
  vec3_t mins;
  vec3_t maxs;
};

struct XModelConfigEntry
{
  char filename[1024];
  float dist;
  float distMP;
};

struct XModelConfig
{
  XModelConfigEntry entries[4];
  float mins[3];
  float maxs[3];
  int collLod;
  unsigned int flags;
  char physicsPresetFilename[1024];
  char physicsConstraintsFilename[1024];
  char collMapFilename[1024];
  float bakeLightmapSampleSize;
  float lightingOriginOffsetX;
  float lightingOriginOffsetY;
  float lightingOriginOffsetZ;
  float lightingOriginRange;
};

struct XBlendLoadInfo
{
  unsigned __int16 boneOffset;
  unsigned __int16 boneWeight;
};

struct Sphere
{
  vec3_t origin;
  float radius;
  float radiusSq;
};

struct XModelSurfs
{
  XSurface *surfs;
  int partBits[5];
};

struct BuildBounds
{
  vec3_t mins;
  vec3_t maxs;
};

struct XVertexBuffer
{
  XVertexInfo_s v;
  XBlendLoadInfo w[1];
};

struct XModelPartsLoad
{
  unsigned __int8 numBones;
  unsigned __int8 numRootBones;
  unsigned __int16 *boneNames;
  unsigned __int8 *parentList;
  __int16 *quats;
  float *trans;
  unsigned __int8 *partClassification;
  DObjAnimMat *baseMat;
};

struct XModelDefault
{
  unsigned __int16 boneNames[1];
  unsigned __int8 parentList[1];
  XModelPartsLoad modelParts;
  XBoneInfo boneInfo;
  unsigned __int8 partClassification[1];
  unsigned __int16 surfNames[1];
};

struct QueueElement
{
  unsigned int beginIndex;
  unsigned int count;
};

struct XSurfaceGetTriCandidatesLocals
{
  int mins[3];
  int maxs[3];
  const XSurfaceCollisionTree *tree;
  const unsigned __int16 *inIndices;
  const unsigned __int8 *inVertices0;
  const unsigned __int8 *inVertices1;
  bool (__cdecl *visitorFunc)(void *, const unsigned __int8 **, const unsigned __int8 **);
  void *visitorContext;
  unsigned __int16 vertexSize0;
  unsigned __int16 surfaceFlags;
  unsigned int nodeQueueBegin;
  unsigned int nodeQueueEnd;
  unsigned int leafQueueBegin;
  unsigned int leafQueueEnd;
  unsigned int triangleQueueBegin;
  unsigned int triangleQueueEnd;
  unsigned int vertexQueueBegin;
  unsigned int vertexQueueEnd;
  QueueElement nodeQueue[64];
  QueueElement leafQueue[4];
  QueueElement triangleQueue[4];
  unsigned __int16 vertexQueue[4][3];
};

union XAnimPartQuatFrames
{
  __int16 (*frames)[4];
  __int16 (*frames2)[2];
};

struct __declspec(align(4)) XAnimPartQuatDataFrames
{
  XAnimPartQuatFrames u;
  XAnimDynamicIndices indices;
};

union XAnimPartQuatData
{
  XAnimPartQuatDataFrames frames;
  __int16 frame0[4];
  __int16 frame02[2];
};

struct XAnimPartQuat
{
  unsigned __int16 size;
  XAnimPartQuatData u;
};

struct __declspec(align(4)) XAnimPartQuatPtr
{
  XAnimPartQuat *quat;
  unsigned __int8 partIndex;
};

struct __declspec(align(4)) XAnimPartTransPtr
{
  XAnimPartTrans *trans;
  unsigned __int8 partIndex;
};

struct ClientNotifyData
{
  unsigned int notetrackName;
  unsigned int notifyType;
  unsigned int notifyName;
  float timeFrac;
};

struct XAnimFrameData
{
  void *frames[160];
  __m128 fromVecs[160];
  __m128 toVecs[160];
  float keyFrameLerpFracs[160];
  bool calcParts[160];
};

struct XAnimTime
{
  float time;
  float frameFrac;
  int frameIndex;
};

struct /*__cppobj*/ __declspec(align(8)) XAnimCalcAnimInfo
{
  DObjAnimMat rotTransArray[960];
  bitarray<160> animPartBits;
  bitarray<160> ignorePartBits;
  bool bLeftHandGripIKActive;
};

struct /*__cppobj*/ __declspec(align(4)) XAnimToXModel
{
  bitarray<160> partBits;
  unsigned __int8 boneCount;
  unsigned __int8 boneIndex[160];
};

struct XAnimServerNotify
{
  unsigned __int16 entNum;
  unsigned __int16 notifyName;
  unsigned __int16 notetrackName;
  float fPercentTime;
};

struct XAnimServerNotifyList
{
  XAnimServerNotify *pList;
  int iNumElements;
  int iCurrentElement;
};

struct XModelNameMap
{
  unsigned __int16 name;
  unsigned __int16 index;
};

struct XAnimRotPos
{
  vec4_t rot;
  float posWeight;
  vec3_t pos;
};

struct devhostXAnimNode
{
  int depth;
  float goalWeight;
  float weight;
  float rate;
  float time;
};

struct XAnimDeltaInfo
{
  bool bClear;
  bool bNormQuat;
  bool bAbs;
  bool bUseGoalWeight;
};

struct XAnimRootAdjustMat
{
  unsigned int modelIndex;
  vec4_t quat;
  vec3_t trans;
};

struct SavedDObjModel
{
  unsigned __int16 boneName;
};

struct SavedDObj
{
  SavedDObjModel dobjModels[32];
  XModel **models;
  unsigned int ignoreCollision;
  unsigned __int16 numModels;
  unsigned __int16 entnum;
  unsigned __int8 flags;
  char localClientNum;
  XAnimTree_s *tree;
  unsigned int hidePartBits[5];
  int numRootAdjustMats;
  XAnimRootAdjustMat *rootAdjustMats;
};

struct search_node_s
{
  const SimplePlaneIntersection *edge;
  int plane;
  int depth;
  search_node_s *prevNode;
};

struct physBatch
{
  jqModule *Module;
  void *Input;
  void *Output;
};

struct WaveInLineInfo
{
  int isValid;
  unsigned int mixerID;
  unsigned int dstWaveInLineID;
  int oldRecLevel;
  int oldMuteState;
};

struct WinConData
{
  HWND__ *hWnd;
  HWND__ *hwndBuffer;
  HWND__ *codLogo;
  HFONT__ *hfBufferFont;
  HWND__ *hwndInputLine;
  char errorString[512];
  char consoleText[512];
  char returnedText[512];
  int windowWidth;
  int windowHeight;
  int (__stdcall *SysInputLineWndProc)(HWND__ *, unsigned int, unsigned int, int);
};

class CPing
{
};

class CPingThread
{
public:
  unsigned int m_dwID;
  void *m_hThread;
  void *m_hKillEvent;
  void *m_hSignalEvent;
  CPing m_ping;
  char m_host[256];
  HWND__ *m_hWnd;
  unsigned int m_nRetries;
  void (__cdecl *m_callback)();
};

class __declspec(align(4)) miniDumper
{
public:
  _EXCEPTION_POINTERS *m_pExceptionInfo;
  char m_szMiniDumpPath[260];
  char m_szMiniDumpDir[260];
  char m_szAppPath[260];
  char m_szAppBaseName[260];
  bool m_bPromptUserForMiniDump;
};

struct __declspec(align(8)) SysInfo
{
  long double cpuGHz;
  long double configureGHz;
  int logicalCpuCount;
  int physicalCpuCount;
  int sysMB;
  char gpuDescription[512];
  char cpuVendor[13];
  char cpuName[49];
};

struct sysEvent_t
{
  int evTime;
  sysEventType_t evType;
  int evValue;
  int evValue2;
  int evPtrLength;
  void *evPtr;
};

struct cmdlineArg_t
{
  char key[64];
  char val[128];
  bool optional;
  IdentityParam id;
};

struct $8CB265A9D3778DFC1F2AA7A5F0192391
{
  char *language;
  char *strings;
};

struct __declspec(align(4)) WinMouseVars_t
{
  int oldButtonState;
  tagPOINT oldPos;
  bool mouseActive;
  bool mouseInitialized;
};

struct ButtonToCodeMap_t
{
  GamePadButton padButton;
  int code;
};

struct StickToCodeMap_t
{
  GamePadStick padStick;
  GamePadStickDir padStickDir;
  int code;
};

struct GamePad
{
  bool enabled;
  bool keyboardEnabled;
  __int16 digitals;
  __int16 lastDigitals;
  float analogs[2];
  float lastAnalogs[2];
  float sticks[4];
  float lastSticks[4];
  bool stickDown[4][2];
  bool stickDownLast[4][2];
  float lowRumble;
  float highRumble;
  struct {
      _XINPUT_VIBRATION Rumble;
  } feedback;
  _XINPUT_CAPABILITIES caps;
  _XINPUT_CAPABILITIES keyboardCaps;
};

struct infoParm_t
{
  const char *name;
  int clearSolid;
  int surfaceFlags;
  int contents;
  int toolFlags;
};

struct reliableMsg
{
  bool active;
  unsigned __int8 sequenceNum;
  msg_t msg;
  netsrc_t fromLocalNetID;
};

struct reliableClient
{
  netadr_t addr;
  int lastSendTime;
  int firstSendTime;
  unsigned __int8 nextSequence;
  int bufferUsed;
  int bytesAckd;
  unsigned __int8 reliableBuf[1000];
  reliableMsg msgs[20];
};

struct RedBlackTreeNode
{
  unsigned __int64 key;
  unsigned int color;
  RedBlackTreeNode *parent;
  RedBlackTreeNode *child[2];
};

struct __declspec(align(8)) RedBlackTree
{
  RedBlackTreeNode null;
  RedBlackTreeNode root;
  RedBlackTreeNode *(__cdecl *AllocNodeCallback)();
};

struct __declspec(align(8)) RedBlackCacheNode
{
  RedBlackTreeNode rbNode;
  unsigned int timeStamp;
};

struct __declspec(align(8)) RedBlackCache
{
  RedBlackTree rbTree;
  RedBlackCacheNode *firstNode;
  unsigned int sizeofNode;
  unsigned int nodeCount;
  unsigned int minTimeToFree;
  unsigned int allocCount;
  unsigned int freeWalk;
  unsigned int timeStamp;
  bool isNewNode;
  void (__cdecl *FreeCallback)(RedBlackCacheNode *);
};

struct va_info_t
{
  char va_string[4][1024];
  int index;
};

struct parseInfo_t
{
  char token[1024];
  ParseTokenType tokenType;
  int lines;
  bool ungetToken;
  bool spaceDelimited;
  bool keepStringQuotes;
  bool csv;
  bool negativeNumbers;
  bool numbers;
  const char *extraWordCharacters;
  const char *errorPrefix;
  const char *warningPrefix;
  int backup_lines;
  const char *backup_text;
  const char *parseFile;
};

struct ParseThreadInfo
{
  parseInfo_t parseInfo[16];
  int parseInfoNum;
  const char *tokenPos;
  const char *prevTokenPos;
  char line[1024];
};

struct profilemem_t
{
  profilemem_t *child;
  profilemem_t *parent;
  profilemem_t *nextSibling;
  profilemem_t *prevSibling;
  unsigned int startSize;
  unsigned int totalSize;
  unsigned int hits;
  const char *name;
};

struct ProfileMemTree
{
  profilemem_t *currentNode;
  profilemem_t nodePool[256];
  unsigned int treeSize;
};

struct profMemTreeIter_t
{
  profilemem_t *node;
  int nesting;
};

struct pooldata_t
{
  void *firstFree;
  int activeCount;
};

struct freenode
{
  freenode *next;
};

struct PhysicalMemoryAllocation
{
  const char *name;
  unsigned int pos;
};

struct PhysicalMemoryPrim
{
  const char *allocName;
  unsigned int allocListCount;
  unsigned int pos;
  PhysicalMemoryAllocation allocList[80];
  EMemTrack memTrack;
};

struct PhysicalMemory
{
  const char *name;
  unsigned char* buf;
  PhysicalMemoryPrim prim[2];
  unsigned int size;
};

struct /*__cppobj*/ tlFixedString
{
  unsigned int hash;
  char str[28];
};

struct ALLOCATION_SCHEME_FUNCTIONS
{
  HunkUser *(*Init)(void *, int, HU_ALLOCATION_SCHEME, unsigned int, void *, const char *, int);
  void (*Reset)(HunkUser *);
  void (*Destroy)(HunkUser *);
  void *(*Alloc)(HunkUser *, int, int, const char *);
  void (*Free)(HunkUser *, void *);
};

struct __declspec(align(4)) HunkUserDefault
{
  HunkUser hunkUser;
  HunkUserDefault *current;
  HunkUserDefault *next;
  int maxSize;
  int end;
  int pos;
  int locked;
  unsigned __int8 buf[1];
};

struct HunkUserNull
{
  HunkUser hunkUser;
  int size;
  int alignment;
};

struct HunkUserDebug
{
  HunkUser hunkUser;
  HunkUser *firstFit;
};

typedef struct _firstfit_heapnode
{
    _firstfit_heapnode* next;
    int size;
} FIRSTFIT_HEAPNODE;

struct _fixed_heapnode
{
  _fixed_heapnode *next;
};

struct FIXED_HUNKUSER
{
  HunkUser hunkUser;
  int base_size;
  int block_size;
  _fixed_heapnode *free_blocks;
  FastCriticalSection criticalSection;
};

struct USERHEAP_FIXED_SCHEME_SPECIFIC
{
  int block_size;
};

struct FIRSTFIT_HUNKUSER
{
  HunkUser hunkUser;
  int base_size;
  _firstfit_heapnode *free_blocks;
  int watermarkId;
  unsigned int hunkUser_memAllocated;
  FastCriticalSection criticalSection;
};

struct EvalValue
{
  EvalValueType type;
  union {
      long double d;
      int i;
      char* s;
  } u;
};

struct __declspec(align(4)) Eval
{
  EvalOperatorType opStack[1024];
  EvalValue valStack[1024];
  int opStackPos;
  int valStackPos;
  int parenCount;
  bool pushedOp;
};

struct dvarCallBack_t
{
  bool needsCallback;
  void (__cdecl *callback)(const dvar_t *);
  const dvar_t *dvar;
};

struct CURVESORTARGS
{
  bool increasing_sort_order;
  vec3_t p;
};

struct TaskRecordHistory
{
  const TaskDefinition *definition;
  unsigned int id;
  int startMS;
};

struct coreStringTableAsset_t
{
  int nameHash;
  int hitCount;
};

struct stringTableCacheEntry_t
{
  int nameHash;
  char fileName[256];
  const StringTable *asset;
  int hitCount;
};

struct stringTableCache_t
{
  stringTableCacheEntry_t cacheEntries[16];
  stringTableCacheEntry_t *cacheEntryList[16];
};

union PackedLmapCoords
{
  unsigned int packed;
};

struct __declspec(align(4)) fileData_s
{
  void *data;
  fileData_s *next;
  unsigned __int8 type;
  char name[1];
};

struct hunkUsed_t
{
  int permanent;
  int temp;
};

struct hunkHeader_t
{
  unsigned int magic;
  int size;
  const char *name;
  int dummy;
};

struct mem_track_t
{
  char name[128];
  const char *filename;
  int size[2];
  int pos;
  unsigned __int8 type;
  unsigned __int8 usageType;
  int count;
};

struct mem_track_node_s
{
  mem_track_t data;
  int project;
  mem_track_node_s *prev;
  mem_track_node_s *next;
};

struct AssetList
{
  int assetCount;
  int maxCount;
  XAssetHeader *assets;
};

union qfile_gus
{
  _iobuf *o;
  unsigned __int8 *z;
};

struct qfile_us
{
  qfile_gus file;
  int iwdIsClone;
};

struct fileInIwd_s
{
  unsigned int pos;
  char *name;
  fileInIwd_s *next;
};

struct iwd_t
{
  char iwdFilename[256];
  char iwdBasename[256];
  char iwdGamename[256];
  unsigned __int8 *handle;
  int checksum;
  int pure_checksum;
  volatile long hasOpenFile;
  int numFiles;
  unsigned __int8 referenced;
  unsigned int hashSize;
  fileInIwd_s **hashTable;
  fileInIwd_s *buildBuffer;
};

struct fileHandleData_t
{
  qfile_us handleFiles;
  int handleSync;
  int fileSize;
  int zipFilePos;
  iwd_t *zipFile;
  int streamed;
  char name[256];
};

struct AddonMapDef
{
  const char *prefix;
  unsigned int prefixLen;
  int optionalBaseMap;
};

struct iwd_pure_check_s
{
  iwd_pure_check_s *next;
  int checksum;
  char iwdBasename[256];
  char iwdGamename[256];
};

struct searchpath_s
{
  searchpath_s *next;
  iwd_t *iwd;
  directory_t *dir;
  int bLocalized;
  int ignore;
  int ignorePureCheck;
  int language;
};

struct directory_t
{
  char path[256];
  char gamedir[256];
};

struct OperandList
{
  Operand operands[10];
  int operandCount;
};

struct OperandStack
{
  OperandList stack[60];
  int numOperandLists;
};

struct rpnStaticFunction_t
{
  int arguments;
  void (__cdecl *cmd)(const LocalClientNum_t, itemDef_s *, OperandStack *);
};

union entryInternalData
{
  expOperationEnum op;
  Operand operand;
};

struct pc_token_s
{
  int type;
  int subtype;
  int intvalue;
  float floatvalue;
  char string[1024];
};

struct expressionEntry
{
  int type;
  entryInternalData data;
  expressionEntry *next;
};

struct ExpressionAllocState
{
  int size;
  void *buffer;
};

struct bb_msg_t
{
  unsigned __int8 *data;
  int maxsize;
  int cursize;
  bool overflow;
  unsigned __int8 *pppHashTable;
  unsigned __int8 pppBits;
  unsigned int pppHash;
  int pppBitOffset;
  int pppBitCount;
};

struct DefinitionMap
{
  unsigned int nameHash;
  unsigned int formatHash;
  int parameterCount;
  int definitionId;
  unsigned __int8 parameters[64];
};

struct BBMsgHeader
{
  char ident[8];
  int magic;
  unsigned int createTime;
  unsigned int sendTime;
  unsigned int flags;
};

struct BBThrottle
{
  unsigned int name;
  int throttleMS;
  int lastMS;
};

struct bb_highwater_t
{
  const char *name;
  unsigned int current_value;
  unsigned int sent_value;
};

struct GenericAabbTree
{
  int firstItem;
  int itemCount;
  int firstChild;
  int childCount;
};

struct GenericAabbTreeOptions
{
  void *items;
  int itemCount;
  int itemSize;
  int maintainValidBounds;
  vec3_t *mins;
  vec3_t *maxs;
  GenericAabbTree *treeNodePool;
  int treeNodeLimit;
  int minItemsPerLeaf;
  int maxItemsPerLeaf;
};

struct stringDef_s
{
  stringDef_s *next;
  const char *str;
};

struct conditionStackMember_t
{
  ExpressionStatement condition;
  bool fireOnTrue;
  int level;
  int blockID;
  int constructID;
  int type;
};

struct conditionStack_t
{
  conditionStackMember_t members[64];
  int size;
};

struct nestingCounts_t
{
  int bracketNestingLevel;
  int ifNestingLevel;
};

struct loadAssets_t
{
  float fadeClamp;
  int fadeCycle;
  float fadeAmount;
  float fadeInAmount;
};

struct $EC6D9D49AE1AE051040D2991E6BE87F3
{
  loadAssets_t loadAssets;
  MenuList menuList;
  itemDef_s *items[512];
  animParamsDef_t *animStates[256];
  menuDef_t *menus[512];
};

struct commandDef_t
{
  const char *name;
  void (__cdecl *handler)(LocalClientNum_t, UiContext *, itemDef_s *, const char **);
};

struct scrollInfo_s
{
  int nextScrollTime;
  int nextAdjustTime;
  int adjustValue;
  int scrollKey;
  float xStart;
  float yStart;
  itemDef_s *item;
  int scrollDir;
};

struct /*__cppobj*/ ScreenPlacementStack
{
  ScreenPlacement stack[2];
  int size;
  UIContextIndex_t contextIndex;
};

struct __declspec(align(4)) nestingStackElem_t
{
  int constructID;
  int blockID;
  bool outcome;
};

struct GfxUI3DStack
{
  int stack[2];
  int size;
};

struct nestingStack_t
{
  int top;
  nestingStackElem_t members[64];
};

struct GfxQuad
{
  vec3_t xyz[4];
  vec2_t st[4];
  GfxColor color;
};

struct playlistEntry
{
  const char *mapname;
  const char *gametype;
  const char *startloc;
  int fullWeight;
  int remainingWeight;
  int ignore;
};

struct playlistInfo
{
  const char *name;
  const char *description;
  const char *lockdescription;
  const char *iconName;
  const char *rules;
  int category;
  int baseEntry;
  int numEntries;
  int unlockXp;
  int unlockPLevel;
  int gametypeBan;
  int maxPartySize;
  int minPartySize;
  unsigned int requiredDLCMask;
  bool ranked;
  bool finishedSoloRequired;
  int wagerBet;
  int wagerEntry;
  int maxLocalPlayers;
  bool disableGuests;
  bool hideifmissingdlc;
  bool visible_profilevar;
  profile_setting visProfileVar;
  bool buyable_dvar;
  const dvar_t *buyDvar;
  int leagueID;
  int parkingPlaylist;
};

struct categoryInfo
{
  const char *internalName;
  const char *filter;
  const char *localizedName;
  const char *description;
  const char *lockdescription;
  const char *iconName;
  const char *dlcRequiredPopupTitle;
  const char *dlcRequiredPopupDesc;
  int unlockXp;
  int unlockPLevel;
  bool finishedSoloRequired;
  int playlistCount;
  const char *rules;
  bool hideifmissingdlc;
  bool directtostoreifmissingdlc;
  bool visible_profilevar;
  profile_setting visProfileVar;
  int supercategory;
  unsigned int requiredDLCMask;
  EUserTier minUserTier;
};

struct playlistMapList
{
  const char *name;
  int base;
  int count;
};

struct playlistGametype
{
  const char *scriptName;
  const char *internalName;
  const char *localizedName;
  const char *rules;
};

struct motdKeyHandler_t
{
  const char *key;
  bool (__cdecl *handler)();
};

struct __declspec(align(2)) motd_t
{
  int version;
  bool singleView;
  int expiration;
  unsigned __int16 imageCategory;
  char title[65];
  char message[1025];
  char image[33];
  char action[32];
  char actionContext[65];
  char actionString[65];
  char bannerTitle[65];
  char bannerMessage[129];
  char bannerImage[33];
  char bannerAction[32];
  char bannerActionContext[65];
  char bannerActionString[65];
  char eliteImage[33];
  char founderImage[33];
  bool isValid;
};

struct GeoPoint
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 count;
};

struct __declspec(align(4)) uiClientState_s
{
  connstate_t connState;
  int connectPacketCount;
  char servername[1024];
  char messageString[1024];
  bool areTexturesLoaded;
  bool waitForMovie;
};

struct GfxQuadVertex
{
  vec2_t xy;
  vec2_t st;
  GfxColor color;
};

struct __declspec(align(4)) keyBoardUtitlity
{
  bool keyboardActive;
  int keyboardType;
  int cursorPos;
  int maxChar;
  bool overstrikeMode;
};

struct votingHandler_t
{
  const char *key;
  bool (__cdecl *handler)();
};

struct __declspec(align(4)) votingItem_t
{
  int index;
  char imageName[64];
  bool isLocalImage;
  char counterName[64];
  char votingItemPosition[8];
  char votingItemString[256];
};

struct __declspec(align(4)) voting_t
{
  int votingVersion;
  int expiration;
  int votingInterval;
  int imageCategory;
  int viewCount;
  char title[256];
  char subtitle[512];
  char voteforstring[256];
  votingItem_t votingItems[4];
  bool isValid;
};

struct EmblemFilterState
{
  const char *loc;
  unsigned __int16 include;
  unsigned __int16 exclude;
};

struct __declspec(align(8)) emblemDownloadData_t
{
  unsigned __int8 buffer[1408];
  unsigned __int64 fileID;
  int timestamp;
};

struct codtvDWContent_t
{
  fileShareLocation source;
  fileshareCategory_e category;
  filesharePlayerFilter_e playerFilter;
  fileshareDataFilter_e dataFilter;
};

struct codtvVideoContent_t
{
  char url[128];
  char name[64];
};

union codtvContent_u
{
  codtvDWContent_t *dwContent;
  codtvVideoContent_t *videoContent;
};

struct codtvFolder_t
{
  int index;
  int parentIndex;
  char ref[16];
  char name[64];
  char customAction[32];
  codtvType_e type;
  char imageName[32];
  codtvImageCategory_e imageCategory;
  codtvContent_u content[32];
  int contentCount;
  unsigned __int64 userData;
};

struct codtvTypeMapping_t
{
  const char *typeString;
  codtvType_e type;
};

struct codtvDWCategoryMapping_t
{
  const char *dwString;
  fileshareCategory_e category;
};

struct codtvImageCategoryMapping_t
{
  const char *imageCategoryName;
  codtvImageCategory_e imageCategory;
};

struct codtvDWSourceMapping_t
{
  const char *dwString;
  fileShareLocation source;
};

struct codtvFilterMapping_t
{
  const char *filterName;
  void (__cdecl *filterCallback)(codtvDWContent_t *);
};

struct /*__cppobj*/ LocalizeName
{
};

struct /*__cppobj*/ mapStringEntriesName_t : LocalizeName
{
};

struct /*__cppobj*/ LocalizeStringVectorName : LocalizeName
{
};

struct /*__cppobj*/ LocalizeStringName : LocalizeName
{
};

struct /*__cppobj*/ mapFlagMasksName_t : LocalizeName
{
};

struct /*__cppobj*/ LocalizeStringSetName : LocalizeName
{
};

struct languageInfo_t
{
  const char *pszName;
  const char *pszNameAbbr;
  int bPresent;
};

struct sightpointtrace_t
{
  vec3_t start;
  vec3_t end;
  int passEntityNum[2];
  int contentmask;
  int locational;
  unsigned __int8 *priorityMap;
};

struct ClientSnapshotData
{
  int snapshotSize[16];
  int compressedSize[16];
  int index;
};

struct statmonitor_s
{
  int endtime;
  Material *material;
};

struct snapshotEntityNumbers_t
{
  int numSnapshotEntities;
  int snapshotEntities[1024];
};

struct MigrationClient
{
  MigrationClientState state;
  int attempts;
  int msgTimeout;
  int rating;
  int nextSendTime;
};

struct Block
{
  int num;
  int size;
  int timeout;
};

struct MigrationGlobals
{
  MigrationState state;
  MigrationClient clients[18];
  Block window[32];
  ClientNum_t newHost;
  int totalSize;
  int block;
  unsigned int windowIndex;
  bool active;
  int blocksPerFrame;
  int migrationCount;
  int migrationTime;
  char reason[64];
  int giveUpTime;
  int startTime;
};

struct MigrationMessage
{
  const char *string;
  void (__cdecl *func)(const LocalClientNum_t, netadr_t, msg_t *);
};

struct SaveHeader
{
  int saveVersion;
  int gameCheckSum;
  int saveCheckSum;
  int saveId;
  bool demoPlayback;
  bool splitscreen;
  int scrCheckSum[3];
  char mapName[256];
  char buildNumber[128];
  char gametype[256];
  char buildVersionSuffix[16];
  unsigned int networkProtocol;
  char screenShotName[64];
  char description[256];
  char filename[64];
  SaveType saveType;
  qtime_s time;
  int bodySize;
  unsigned int pad[8];
};

struct __declspec(align(128)) SaveGame
{
  SaveHeader header;
  MemoryFile memFile;
};

struct reservedslot_t
{
  char pass[24];
  bool inUse;
};

struct perfVal_t
{
  unsigned int min;
  unsigned int max;
  unsigned int avg;
  unsigned int count;
  unsigned int total;
};

struct __declspec(align(8)) ClientRecord
{
  unsigned __int64 xuid;
  unsigned int addr;
};

struct Sample
{
  int timestamp;
  unsigned __int16 avgPing;
  unsigned __int16 minPing;
  unsigned __int16 maxPing;
  unsigned __int8 unackCount;
  unsigned __int8 clientIndex;
};

struct ConnectionLog
{
  unsigned __int64 magic;
  unsigned __int64 matchID;
  int numClients;
  int numSamples;
  unsigned int hostAddr;
  ClientRecord clients[128];
  Sample samples[1024];
};

struct ucmd_t
{
  char *name;
  void (__cdecl *func)(client_t *);
  int allowFromOldServer;
};

struct WINTRUST_BLOB_INFO_
{
  unsigned int cbStruct;
  _GUID gSubject;
  const wchar_t *pcwszDisplayName;
  unsigned int cbMemObject;
  unsigned __int8 *pbMemObject;
  unsigned int cbMemSignedMsg;
  unsigned __int8 *pbMemSignedMsg;
};

struct WINTRUST_FILE_INFO_
{
  unsigned int cbStruct;
  const wchar_t *pcwszFilePath;
  void *hFile;
  _GUID *pgKnownSubject;
};

struct __declspec(align(4)) _jqWorker
{
public:
  jqWorkerType Type;
  void *Thread;
  unsigned int ThreadId;
  bool Idle;
};

class jqWorker : public _jqWorker
{
public:
  jqWorker *ThisPtr;
  int Processor;
  int WorkerID;
  int NumQueues;
  jqQueue WorkerSpecific;
  jqQueue *Queues[8];
  unsigned __int64 WorkTime;
};

struct BitFieldGenerateRow
{
  unsigned int bits[8];
  int count;
  int timestamp;
};

struct BitFieldGenerateTable
{
  int rowCount;
  unsigned int rowSize;
  BitFieldGenerateRow table[4096];
  unsigned int totalUsage;
  unsigned int huffData[256];
};

struct nodetype
{
  nodetype *left;
  nodetype *right;
  nodetype *parent;
  int weight;
  int symbol;
};

struct huff_t
{
  int blocNode;
  int blocPtrs;
  nodetype *tree;
  nodetype *loc[257];
  nodetype **freelist;
  nodetype nodeList[768];
  nodetype *nodePtrs[768];
};

struct huffman_t
{
  huff_t compressDecompress;
};

struct streamInfo
{
  int id;
  int file;
  unsigned int start_offset;
  unsigned int buffer_size;
  unsigned int bytes_read;
  unsigned __int8 *destination;
  int estMsToFinish;
  int startDeadline;
  union {
      void(__cdecl* genericCallback)(int, void*, int);
      void(__cdecl* callback)(int, stream_status, unsigned int, void*);
  };
  void* callbackUser;
  stream_status status;
  bool callbackOnly;
  streamInfo *nextInQueue;
  streamInfo *prevInQueue;
};

struct ClumpFile
{
  unsigned int name;
  unsigned int fileSectorOffset;
  unsigned __int64 fileSize;
};

struct PathItem
{
  char name[64];
  PathItem *parent;
  PathItem *next;
};

struct PathRoot
{
  PathItem *rootItem;
  PathItem *leafs;
  PathItem *branches;
};

struct stream_fh
{
  char name[256];
  void *h;
  bool inUse;
  bool shouldOpen;
  bool shouldClose;
  bool error;
  int flags;
  int extAsInt;
  unsigned int readOffset;
  unsigned int easyOffset;
  __int64 fileSize;
};

struct InternalSync
{
  bool finished;
  stream_status result;
  unsigned int numBytesRead;
};

struct callbackInfo
{
  void (__cdecl *callback)(int, stream_status, unsigned int, void *);
  int id;
  stream_status reason;
  unsigned int bytes;
  void *user;
};

struct cscr_data_t
{
  int delete_;
  int initstructs;
  int createstruct;
  int findstruct;
  int levelscript;
  int clientsysstatechange;
  int maprestart;
  int localclientconnect;
  int localclientdisconnect;
  int entityspawned;
  int scriptmodelspawned;
  int dogSoundNotify;
  int clientFlagCB;
  int clientFlagAsValCB;
  int corpse_callback;
  int playerJump;
  int playerLand;
  int playerFoliage;
  int playerspawned;
  int airsupport;
  int entityshutdownCB;
  int localClientChangedCB;
  int argusnotify;
  int suimessage;
  int glassSmash;
  int zombieEyes;
  int gibEvent;
  int playAiFootstep;
  int soundsetambientstate;
  int soundsetaiambientstate;
  int soundplayuidecodeloop;
  struct {
      int main;
      int startupgametype;
      int precachegametype;
  } gametype;
  int finalizeInitialization;
  int hostMigration;
};

struct mapping_data_t
{
  int guid;
  GUIDType type;
  void *data;
};

struct RadiantCommandProcessor
{
  void (__cdecl *processorFunc)(const RadiantCommand *, SpawnVar *);
  void (__cdecl *clearSelectionFunc)();
  bool (__cdecl *conditionFunc)(const SpawnVar *);
  const char *classname;
};

struct PacketQueueBlock
{
  PacketQueueBlock *next;
  int readOffset;
  int writeOffset;
  unsigned __int8 data[16384];
};

struct PacketQueue
{
  PacketQueueBlock *head;
  PacketQueueBlock *tail;
  int queuedPackets;
  int queuedBytes;
  bool packetLost;
  bool packetReordered;
  int bucketBits;
  int bucketUpdateMS;
  const char *name;
  PacketQueue *nextQueue;
  bool emulation;
  int queuedBytesLimit;
  int queuedPacketsLimit;
  int latencyMS;
  int latencyJitterMS;
  int packetLossPercent;
  int packetLossRepeatPercent;
  int packetReorderPercent;
  int packetReorderRepeatPercent;
  int packetDuplicationPercent;
  int bucketBitsPerMS;
  int bucketBitsLimit;
};

struct PacketQueueEntry
{
  netsrc_t sock;
  netadr_t addr;
  int length;
  unsigned int flags;
  unsigned __int8 *payload;
  int totalSize;
  int dequeueTime;
};

struct netFieldOrderInfo_t
{
  int entState[79];
  int arcEnt[10];
  int arcEntState[2];
  int matchState[29];
  int clientState[67];
  int playerState[223];
  int actorState[98];
  int objective[15];
  int hudElem[46];
};

struct msg_patch_t
{
  int cursize;
  int bit;
  int patchBits;
};

struct MigrationGlob
{
  unsigned __int8 *buffer;
  int size;
};

struct meminfo_t
{
  int total[2];
  int nonSwapTotal;
  int nonSwapMinSpecTotal;
  int typeTotal[58][2];
};

struct TempMemInfo
{
  int permanent;
  int high;
  int highExtra;
  int hunkSize;
  int low;
  mem_track_t data;
};

struct GlobalUsage
{
  int level_fastfile;
  int common_fastfile;
};

struct __declspec(align(4)) gdt_remote_cmd_handler
{
  const char *assetType;
  bool (__cdecl *action)(const char *);
  bool printSuccessMessage;
};

union GfxEntCellRefInfo
{
  float radius;
  GfxBrushModel *bmodel;
};

struct GfxSkinnedXModelSurfs
{
  void *firstSurf;
};

struct __declspec(align(4)) GfxSceneModel
{
  XModelDrawInfo info;
  const XModel *model;
  const DObj *obj;
  const cpose_t *pose;
  GfxScaledPlacement placement;
  float lightingOriginToleranceSq;
  float invScaleSq;
  float radius;
  vec3_t lightingOrigin;
  unsigned __int16 *cachedLightingHandle;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 entnum;
  unsigned __int8 modelShaderConstantSetIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 useHeroLighting;
  unsigned __int8 noLodCullOut;
};

struct GfxSceneDpvs
{
  LocalClientNum_t localClientNum;
  unsigned __int8 *entVisData[7];
  unsigned __int16 *sceneXModelIndex;
  unsigned __int16 *sceneDObjIndex;
  GfxEntCellRefInfo *entInfo[4];
};

struct GfxSceneEntityCull
{
  volatile unsigned int state;
  vec3_t mins;
  vec3_t maxs;
  char lods[32];
  GfxSkinnedXModelSurfs skinnedSurfs;
};

union GfxSceneEntityInfo
{
  const cpose_t *pose;
};

struct __declspec(align(2)) GfxSceneEntity
{
  vec3_t lightingOrigin;
  GfxScaledPlacement placement;
  float radius;
  GfxSceneEntityCull cull;
  const DObj *obj;
  GfxSceneEntityInfo info;
  float lightingOriginToleranceSq;
  float invScaleSq;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 gfxEntIndex2;
  unsigned __int16 entnum;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 altXModelIndex;
  unsigned __int8 entShaderConstantSetIndex;
  unsigned __int8 useHeroLighting;
};

struct __declspec(align(4)) GfxSceneBrush
{
  BModelDrawInfo info;
  unsigned __int16 entnum;
  const GfxBrushModel *bmodel;
  GfxPlacement placement;
  const ShaderConstantSet *brushConstantSet;
  unsigned __int8 reflectionProbeIndex;
};

struct __declspec(align(2)) GfxSceneGlassBrush
{
  GfxPlacement placement;
  const GfxBrushModel *bmodel;
  Material *altStreamingMaterial;
  BModelDrawInfo info;
  unsigned __int8 reflectionProbeIndex;
};

struct SceneModelBatchCmd
{
  int nModels;
  GfxSceneModel *models[8];
};

struct __declspec(align(64)) GfxScene
{
  GfxDrawSurf bspDrawSurfs[4608];
  GfxDrawSurf smodelDrawSurfsLight[4608];
  GfxDrawSurf entDrawSurfsLight[4608];
  GfxDrawSurf smodelDrawSurfsLightMapOpaque[3584];
  GfxDrawSurf bspDrawSurfsLightMap[3584];
  GfxDrawSurf entDrawSurfsLightMapOpaque[3584];
  GfxDrawSurf depthHackCameraDrawSurfs[512];
  GfxDrawSurf codemeshDrawSurfsLight[1024];
  GfxDrawSurf entDrawSurfsSonar[512];
  GfxDrawSurf bspDrawSurfsLitTrans[512];
  GfxDrawSurf smodelDrawSurfsLitTrans[512];
  GfxDrawSurf entDrawSurfsLitTrans[1024];
  GfxDrawSurf smodelDrawSurfsLitQuasiOpaque[2048];
  GfxDrawSurf entDrawSurfsLitQuasiOpaque[512];
  GfxDrawSurf bspDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf smodelDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf entDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf bspDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf smodelDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf entDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf fxDrawSurfsEmissive[8192];
  GfxDrawSurf fxDrawSurfsEmissiveAuto[8192];
  GfxDrawSurf fxDrawSurfsEmissiveDecal[8192];
  GfxDrawSurf fxDrawSurfsEmissiveViewmodel[512];
  GfxDrawSurf fxDrawSurfsEmissiveSuperflare[64];
  GfxDrawSurf smodelDrawSurfsEmissiveFX[512];
  GfxDrawSurf entDrawSurfsEmissiveFX[512];
  GfxDrawSurf bspSunShadowDrawSurfs0[4096];
  GfxDrawSurf smodelSunShadowDrawSurfs0[4096];
  GfxDrawSurf entSunShadowDrawSurfs0[4096];
  GfxDrawSurf codemeshSunShadowDrawSurfs0[512];
  GfxDrawSurf bspSunShadowDrawSurfs1[8192];
  GfxDrawSurf smodelSunShadowDrawSurfs1[8192];
  GfxDrawSurf entSunShadowDrawSurfs1[8192];
  GfxDrawSurf codemeshSunShadowDrawSurfs1[512];
  GfxDrawSurf bspSpotShadowDrawSurfs0[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs0[1024];
  GfxDrawSurf entSpotShadowDrawSurfs0[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs1[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs1[1024];
  GfxDrawSurf entSpotShadowDrawSurfs1[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs2[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs2[1024];
  GfxDrawSurf entSpotShadowDrawSurfs2[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs3[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs3[1024];
  GfxDrawSurf entSpotShadowDrawSurfs3[1024];
  unsigned __int8 shadowableLightIsUsed[255];
  __declspec(align(2)) unsigned __int8 cachedShadowableLightIsUsed[4][255];
  bool invalidateShadowableLightCache;
  GfxLight cachedVisibleLights[4][4];
  int cachedVisibleLightCounts[4];
  int maxDrawSurfCount[50];
  volatile int drawSurfCount[50];
  GfxDrawSurf *drawSurfs[50];
  GfxDrawSurf fxDrawSurfsLight[8192];
  GfxDrawSurf fxDrawSurfsLightAuto[8192];
  GfxDrawSurf fxDrawSurfsLightDecal[8192];
  GfxSceneDef def;
  volatile int addedLightCount;
  GfxLight addedLight[32];
  bool isAddedLightCulled[32];
  float dynamicSpotLightNearPlaneOffset;
  vec4_t dynamicSpotLightPlanes[6];
  volatile int sceneDObjCount;
  GfxSceneEntity sceneDObj[1024];
  unsigned __int8 sceneDObjVisData[7][1024];
  int sceneDObjViewmodelIndex;
  volatile int sceneModelCount;
  GfxSceneModel sceneModel[1024];
  unsigned __int8 sceneModelVisData[7][1024];
  volatile int sceneBrushCount;
  GfxSceneBrush sceneBrush[1024];
  unsigned __int8 sceneBrushVisData[3][1024];
  volatile int glassBrushCount;
  GfxSceneGlassBrush glassBrush[1024];
  unsigned __int8 glassBrushVisData[1024];
  unsigned int sceneDynModelCount;
  unsigned int sceneDynBrushCount;
  DpvsPlane shadowFarPlane[2];
  DpvsPlane shadowNearPlane[2];
  GfxSceneDpvs dpvs;
  SceneModelBatchCmd modelSkelCmd;
};

struct DvarDumpInfo
{
  int count;
  int channel;
  const char *match;
};

struct DvarSetConfigInfo
{
  int start;
  int max;
  int bit;
};

struct __declspec(align(4)) KnownContentPackData
{
  char contentName[128];
  const char *pakName;
  int contentPack;
  int contentMask;
  bool loadFastfileLoaded;
};

struct SearchSessionMapPackCombinationData
{
  char contentName[128];
  int contentPackFlags;
};

struct MINIZPNGAllocData
{
  unsigned __int8 *allocBuffer;
  unsigned int bytesUsed;
  unsigned int maxBytes;
};

struct GamePadCheat
{
  GamePadButton codeButtons[10];
  GamePadButton holdButtons[2];
  void (__cdecl *unlockFunc)();
  const char *unlockCmd;
  const char *menu;
  const char *sound;
  int buttonTimer;
  int codeIndex;
};

struct SlowMotionCommon
{
  bool enable;
  int type;
  int delayMsec;
  float startTimescale;
  float endTimescale;
  int startMsec;
  int endMsec;
  float viewTimescale;
  bool viewEnable;
  int viewType;
  float viewStartTimescale;
  float viewEndTimescale;
  int viewStartMsec;
  int viewEndMsec;
};

struct CIN_CALLBACK_INFO
{
  CIN_CALLBACK_TYPE type;
  void (__cdecl *callback)(int);
  int user;
};

struct tdefl_sym_freq
{
  unsigned __int16 m_key;
  unsigned __int16 m_sym_index;
};

struct mz_stream_s
{
  const unsigned __int8 *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  unsigned __int8 *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  struct mz_internal_state *state;
  void *(__cdecl *zalloc)(void *, unsigned int, unsigned int);
  void (__cdecl *zfree)(void *, void *);
  void *opaque;
  int data_type;
  unsigned int adler;
  unsigned int reserved;
};

struct MINIZPNGAllocSegmentHeader
{
  unsigned int safety;
  unsigned int length;
};

struct MINIZAllocData
{
  unsigned __int8 *allocBuffer;
  unsigned int bytesUsed;
};

struct mz_zip_archive_file_stat
{
  unsigned int m_file_index;
  unsigned int m_central_dir_ofs;
  unsigned __int16 m_version_made_by;
  unsigned __int16 m_version_needed;
  unsigned __int16 m_bit_flag;
  unsigned __int16 m_method;
  unsigned int m_crc32;
  unsigned __int64 m_comp_size;
  unsigned __int64 m_uncomp_size;
  unsigned __int16 m_internal_attr;
  unsigned int m_external_attr;
  unsigned __int64 m_local_header_ofs;
  unsigned int m_comment_size;
  char m_filename[260];
  char m_comment[256];
};

struct tinfl_huff_table
{
  unsigned __int8 m_code_size[288];
  __int16 m_look_up[1024];
  __int16 m_tree[576];
};

struct __declspec(align(4)) tinfl_decompressor_tag
{
  unsigned int m_state;
  unsigned int m_num_bits;
  unsigned int m_zhdr0;
  unsigned int m_zhdr1;
  unsigned int m_z_adler32;
  unsigned int m_final;
  unsigned int m_type;
  unsigned int m_check_adler32;
  unsigned int m_dist;
  unsigned int m_counter;
  unsigned int m_num_extra;
  unsigned int m_table_sizes[3];
  unsigned int m_bit_buf;
  unsigned int m_dist_from_out_buf_start;
  tinfl_huff_table m_tables[3];
  unsigned __int8 m_raw_header[4];
  unsigned __int8 m_len_codes[457];
};

struct __declspec(align(4)) tdefl_compressor
{
  int (__cdecl *m_pPut_buf_func)(const void *, int, void *);
  void *m_pPut_buf_user;
  unsigned int m_flags;
  unsigned int m_max_probes[2];
  int m_greedy_parsing;
  unsigned int m_adler32;
  unsigned int m_lookahead_pos;
  unsigned int m_lookahead_size;
  unsigned int m_dict_size;
  unsigned __int8 *m_pLZ_code_buf;
  unsigned __int8 *m_pLZ_flags;
  unsigned __int8 *m_pOutput_buf;
  unsigned __int8 *m_pOutput_buf_end;
  unsigned int m_num_flags_left;
  unsigned int m_total_lz_bytes;
  unsigned int m_lz_code_buf_dict_pos;
  unsigned int m_bits_in;
  unsigned int m_bit_buffer;
  unsigned int m_saved_match_dist;
  unsigned int m_saved_match_len;
  unsigned int m_saved_lit;
  unsigned int m_output_flush_ofs;
  unsigned int m_output_flush_remaining;
  unsigned int m_finished;
  unsigned int m_block_index;
  unsigned int m_wants_to_finish;
  tdefl_status m_prev_return_status;
  const void *m_pIn_buf;
  void *m_pOut_buf;
  unsigned int *m_pIn_buf_size;
  unsigned int *m_pOut_buf_size;
  tdefl_flush m_flush;
  const unsigned __int8 *m_pSrc;
  unsigned int m_src_buf_left;
  unsigned int m_out_buf_ofs;
  unsigned __int8 m_dict[33025];
  unsigned __int16 m_huff_count[3][288];
  unsigned __int16 m_huff_codes[3][288];
  unsigned __int8 m_huff_code_sizes[3][288];
  unsigned __int8 m_lz_code_buf[65536];
  unsigned __int16 m_next[32768];
  unsigned __int16 m_hash[32768];
  unsigned __int8 m_output_buf[85196];
};

struct mz_zip_array
{
  void *m_p;
  unsigned int m_size;
  unsigned int m_capacity;
  unsigned int m_element_size;
};

struct mz_zip_internal_state_tag
{
  mz_zip_array m_central_dir;
  mz_zip_array m_central_dir_offsets;
  mz_zip_array m_sorted_central_dir_offsets;
  void **m_pFile;
  void *m_pMem;
  unsigned int m_mem_size;
  unsigned int m_mem_capacity;
};

struct tdefl_output_buffer
{
  unsigned int m_size;
  unsigned int m_capacity;
  unsigned __int8 *m_pBuf;
  int m_expandable;
};

struct field_t
{
  int cursor;
  int scroll;
  int drawWidth;
  int widthInPixels;
  float charHeight;
  int fixedSize;
  char buffer[256];
};

struct __declspec(align(8)) mz_zip_archive
{
  unsigned __int64 m_archive_size;
  unsigned __int64 m_central_directory_file_ofs;
  unsigned int m_total_files;
  mz_zip_mode m_zip_mode;
  unsigned int m_file_offset_alignment;
  void *(__cdecl *m_pAlloc)(void *, unsigned int, unsigned int);
  void (__cdecl *m_pFree)(void *, void *);
  void *(__cdecl *m_pRealloc)(void *, void *, unsigned int, unsigned int);
  void *m_pAlloc_opaque;
  unsigned int (__cdecl *m_pRead)(void *, unsigned __int64, void *, unsigned int);
  unsigned int (__cdecl *m_pWrite)(void *, unsigned __int64, const void *, unsigned int);
  void *m_pIO_opaque;
  mz_zip_internal_state_tag *m_pState;
};

struct MapProfileElement
{
    unsigned __int64 ticksStart;
    unsigned __int64 ticksTotal;
    unsigned __int64 ticksSelf;
};

struct MapProfileEntry
{
  const char *label;
  int accessCount;
  unsigned __int64 ticksStart;
  unsigned __int64 ticksTotal;
  unsigned __int64 ticksSelf;
  int indent;
  MapProfileEntry *parent;
  MapProfileElement elements[3];
};

struct mapLoadProfile_t
{
  bool isLoading;
  int profileEntryCount;
  MapProfileEntry profileEntries[384];
  MapProfileEntry *currentEntry;
  unsigned __int64 ticksStart;
  unsigned __int64 ticksFinish;
  unsigned __int64 ticksProfiled;
  int elementAccessCount[3];
  MapProfileElement elements[3];
};

struct MapProfileHotSpot
{
  const char *label;
  int accessCount;
  __int64 ticksSelf;
  __int64 ticksFile;
};

struct ClientGameState
{
  int flags;
  LocalClientNum_t localClientNum;
  ControllerIndex_t controllerIndex;
  UIContextIndex_t uiContextIndex;
  netsrc_t networkID;
  LastInput_t lastInput;
};

struct BspChunk
{
  LumpType type;
  unsigned int length;
};

struct BspHeader
{
  unsigned int ident;
  unsigned int version;
  unsigned int chunkCount;
  BspChunk chunks[100];
};

struct $34BF69D47D0637A5DE20041AEDE9AF24
{
  char name[64];
  BspHeader *header;
  unsigned int fileSize;
  unsigned int checksum;
  LumpType loadedLumpType;
  const void *loadedLumpData;
};

struct DiskPrimaryLight_Version55
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  __int16 cullDist;
  char priority;
  unsigned __int8 useCookie;
  unsigned __int8 shadowmapVolume;
  unsigned __int8 _pad[1];
  vec3_t dir;
  vec3_t origin;
  vec3_t color;
  vec3_t specularcolor;
  vec3_t bouncecolor;
  vec3_t angle;
  float intensity;
  float dAttenuation;
  float cutOn;
  float nearEdge;
  float farEdge;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  float rotationLimit;
  float translationLimit;
  float roundness;
  float mipDistance;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  char defName[64];
};

struct BspLump
{
  unsigned int length;
  unsigned int offset;
};

struct OldBspHeader
{
  unsigned int ident;
  unsigned int version;
  BspLump lumps[47];
};

struct DiskPrimaryLight
{
  unsigned __int8 type;
  unsigned __int8 canUseShadowMap;
  __int16 cullDist;
  char priority;
  unsigned __int8 useCookie;
  unsigned __int8 shadowmapVolume;
  unsigned __int8 _pad;
  vec3_t dir;
  vec3_t origin;
  vec3_t color;
  vec3_t bouncecolor;
  vec3_t angle;
  float intensity;
  float dAttenuation;
  float cutOn;
  float nearEdge;
  float farEdge;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  float rotationLimit;
  float translationLimit;
  float roundness;
  float mipDistance;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  char defName[64];
};

struct CmdText
{
  unsigned __int8 *data;
  int maxsize;
  int cmdsize;
};

struct worldContents_s
{
  int contentsStaticModels;
  int contentsEntities;
  unsigned __int16 entities;
  unsigned __int16 staticModels;
};

struct worldTree_s
{
  float dist;
  unsigned __int16 axis;
  union {
      unsigned __int16 parent;
      unsigned __int16 nextFree;
  } u;
  unsigned __int16 child[2];
};

struct worldSector_s
{
  worldContents_s contents;
  worldTree_s tree;
};

struct cm_world_t
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  worldSector_s sectors[1024];
};

struct areaParms_t
{
  const vec3_t *mins;
  const vec3_t *maxs;
  int *list;
  int count;
  int maxcount;
  int contentmask;
};

struct leafList2_t
{
  unsigned int count;
  unsigned int maxcount;
  unsigned __int16 *list;
  vec3_t origin;
  float radius;
};

struct winding_t
{
  int numpoints;
  vec3_t p[4];
};

struct __declspec(align(4)) ShowCollisionBrushPt
{
  vec3_t xyz;
  __int16 sideIndex[3];
};

struct LayeredTechniqueSetName
{
  const char *inputName;
  const char *namePrefixRegister;
  const char *nameChunk;
};

struct dbrush_t
{
  __int16 numSides;
  __int16 materialNum;
};

struct DiskBrushModel
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 firstTriSoup;
  unsigned __int16 triSoupCount;
  int firstSurface;
  int numSurfaces;
  int firstBrush;
  int numBrushes;
};

struct DiskCollAabbTree
{
  vec3_t origin;
  vec3_t halfSize;
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  union {
      int firstChildIndex;
      int partitionIndex;
  } u;
};

struct dplane_t
{
  float normal[3];
  float dist;
};

struct dnode_t
{
  int planeNum;
  int children[2];
  int mins[3];
  int maxs[3];
};

struct dmaterial_t
{
  char material[64];
  int surfaceFlags;
  int contentFlags;
};

struct dbrushside_t
{
    union {
        int planeNum;
        float bound;
    } u;
  int materialNum;
};

struct DiskLeaf_Version14
{
  int cluster;
  int unused0;
  int firstCollAabbIndex;
  int collAabbCount;
  int firstLeafBrush;
  int numLeafBrushes;
  int cellNum;
  int unused1;
  int unused2;
};

struct DiskCollPartition
{
  unsigned __int16 checkStamp;
  unsigned __int8 triCount;
  int firstTriIndex;
  int nuinds;
  int fuind;
};

struct DiskLeaf
{
  int cluster;
  int firstCollAabbIndex;
  int collAabbCount;
  int firstLeafBrush;
  int numLeafBrushes;
  int cellNum;
};

struct EdgeInfo
{
  vec3_t v_v;
  float discNormalDist;
  float discriminant;
  vec3_t discEdgeAxis;
  vec3_t midpoint;
  vec3_t start_v;
  vec3_t discNormalAxis;
};

struct $8C32E5D3ED1763EA38B94549972C5F20
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

union $C15724553D3662C2F696851934B02BE8
{
  unsigned int Flags;
  $8C32E5D3ED1763EA38B94549972C5F20 s;
};

struct __declspec(align(4)) png_unknown_chunk_t
{
  unsigned __int8 name[5];
  unsigned __int8 *data;
  unsigned int size;
  unsigned __int8 location;
};

struct png_color_16_struct
{
  unsigned __int8 index;
  unsigned __int16 red;
  unsigned __int16 green;
  unsigned __int16 blue;
  unsigned __int16 gray;
};

struct png_color_8_struct
{
  unsigned __int8 red;
  unsigned __int8 green;
  unsigned __int8 blue;
  unsigned __int8 gray;
  unsigned __int8 alpha;
};

struct png_struct_def
{
  int longjmp_buffer[16];
  void (__cdecl *longjmp_fn)(int *, int);
  void (__cdecl *error_fn)(png_struct_def *, const char *);
  void (__cdecl *warning_fn)(png_struct_def *, const char *);
  void *error_ptr;
  void (__cdecl *write_data_fn)(png_struct_def *, unsigned __int8 *, unsigned int);
  void (__cdecl *read_data_fn)(png_struct_def *, unsigned __int8 *, unsigned int);
  void *io_ptr;
  void (__cdecl *read_user_transform_fn)(png_struct_def *, png_row_info_struct *, unsigned __int8 *);
  void (__cdecl *write_user_transform_fn)(png_struct_def *, png_row_info_struct *, unsigned __int8 *);
  void *user_transform_ptr;
  unsigned __int8 user_transform_depth;
  unsigned __int8 user_transform_channels;
  unsigned int mode;
  unsigned int flags;
  unsigned int transformations;
  z_stream_s zstream;
  unsigned __int8 *zbuf;
  unsigned int zbuf_size;
  unsigned int zlib_state;
  int zlib_level;
  int zlib_method;
  int zlib_window_bits;
  int zlib_mem_level;
  int zlib_strategy;
  int zlib_text_level;
  int zlib_text_method;
  int zlib_text_window_bits;
  int zlib_text_mem_level;
  int zlib_text_strategy;
  unsigned int width;
  unsigned int height;
  unsigned int num_rows;
  unsigned int usr_width;
  unsigned int rowbytes;
  unsigned int iwidth;
  unsigned int row_number;
  unsigned int chunk_name;
  unsigned __int8 *prev_row;
  unsigned __int8 *row_buf;
  unsigned __int8 *sub_row;
  unsigned __int8 *up_row;
  unsigned __int8 *avg_row;
  unsigned __int8 *paeth_row;
  unsigned int info_rowbytes;
  unsigned int idat_size;
  unsigned int crc;
  png_color_struct *palette;
  unsigned __int16 num_palette;
  int num_palette_max;
  unsigned __int16 num_trans;
  unsigned __int8 compression;
  unsigned __int8 filter;
  unsigned __int8 interlaced;
  unsigned __int8 pass;
  unsigned __int8 do_filter;
  unsigned __int8 color_type;
  unsigned __int8 bit_depth;
  unsigned __int8 usr_bit_depth;
  unsigned __int8 pixel_depth;
  unsigned __int8 channels;
  unsigned __int8 usr_channels;
  unsigned __int8 sig_bytes;
  unsigned __int8 maximum_pixel_depth;
  unsigned __int8 transformed_pixel_depth;
  unsigned __int8 io_chunk_string[5];
  unsigned __int16 filler;
  unsigned __int8 background_gamma_type;
  int background_gamma;
  png_color_16_struct background;
  png_color_16_struct background_1;
  void (__cdecl *output_flush_fn)(png_struct_def *);
  unsigned int flush_dist;
  unsigned int flush_rows;
  int gamma_shift;
  int gamma;
  int screen_gamma;
  unsigned __int8 *gamma_table;
  unsigned __int16 **gamma_16_table;
  unsigned __int8 *gamma_from_1;
  unsigned __int8 *gamma_to_1;
  unsigned __int16 **gamma_16_from_1;
  unsigned __int16 **gamma_16_to_1;
  png_color_8_struct sig_bit;
  png_color_8_struct shift;
  unsigned __int8 *trans_alpha;
  png_color_16_struct trans_color;
  void (__cdecl *read_row_fn)(png_struct_def *, unsigned int, int);
  void (__cdecl *write_row_fn)(png_struct_def *, unsigned int, int);
  void (__cdecl *info_fn)(png_struct_def *, png_info_def *);
  void (__cdecl *row_fn)(png_struct_def *, unsigned __int8 *, unsigned int, int);
  void (__cdecl *end_fn)(png_struct_def *, png_info_def *);
  unsigned __int8 *save_buffer_ptr;
  unsigned __int8 *save_buffer;
  unsigned __int8 *current_buffer_ptr;
  unsigned __int8 *current_buffer;
  unsigned int push_length;
  unsigned int skip_length;
  unsigned int save_buffer_size;
  unsigned int save_buffer_max;
  unsigned int buffer_size;
  unsigned int current_buffer_size;
  int process_mode;
  int cur_palette;
  unsigned __int8 *palette_lookup;
  unsigned __int8 *quantize_index;
  unsigned __int16 *hist;
  unsigned __int8 heuristic_method;
  unsigned __int8 num_prev_filters;
  unsigned __int8 *prev_filters;
  unsigned __int16 *filter_weights;
  unsigned __int16 *inv_filter_weights;
  unsigned __int16 *filter_costs;
  unsigned __int16 *inv_filter_costs;
  char time_buffer[29];
  unsigned int free_me;
  void *user_chunk_ptr;
  int (__cdecl *read_user_chunk_fn)(png_struct_def *, png_unknown_chunk_t *);
  int num_chunk_list;
  unsigned __int8 *chunk_list;
  unsigned __int8 is_sRGB;
  unsigned __int8 rgb_to_gray_status;
  unsigned __int8 rgb_to_gray_coefficients_set;
  unsigned __int16 rgb_to_gray_red_coeff;
  unsigned __int16 rgb_to_gray_green_coeff;
  unsigned int mng_features_permitted;
  unsigned __int8 filter_type;
  void *mem_ptr;
  void *(__cdecl *malloc_fn)(png_struct_def *, unsigned int);
  void (__cdecl *free_fn)(png_struct_def *, void *);
  unsigned __int8 *big_row_buf;
  unsigned __int8 *quantize_sort;
  unsigned __int8 *index_to_palette;
  unsigned __int8 *palette_to_index;
  unsigned __int8 compression_type;
  unsigned int user_width_max;
  unsigned int user_height_max;
  unsigned int user_chunk_cache_max;
  unsigned int user_chunk_malloc_max;
  png_unknown_chunk_t unknown_chunk;
  unsigned int old_big_row_buf_size;
  char *chunkdata;
  unsigned int io_state;
  unsigned __int8 *big_prev_row;
  void (__cdecl *read_filter[4])(png_row_info_struct *, unsigned __int8 *, const unsigned __int8 *);
};

struct png_row_info_struct
{
  unsigned int width;
  unsigned int rowbytes;
  unsigned __int8 color_type;
  unsigned __int8 bit_depth;
  unsigned __int8 channels;
  unsigned __int8 pixel_depth;
};

struct png_color_struct
{
  unsigned __int8 red;
  unsigned __int8 green;
  unsigned __int8 blue;
};

struct png_text_struct
{
  int compression;
  char *key;
  char *text;
  unsigned int text_length;
  unsigned int itxt_length;
  char *lang;
  char *lang_key;
};

struct __declspec(align(2)) png_time_struct
{
  unsigned __int16 year;
  unsigned __int8 month;
  unsigned __int8 day;
  unsigned __int8 hour;
  unsigned __int8 minute;
  unsigned __int8 second;
};

struct png_sPLT_entry_struct
{
  unsigned __int16 red;
  unsigned __int16 green;
  unsigned __int16 blue;
  unsigned __int16 alpha;
  unsigned __int16 frequency;
};

struct png_sPLT_struct
{
  char *name;
  unsigned __int8 depth;
  png_sPLT_entry_struct *entries;
  int nentries;
};

struct png_info_def
{
  unsigned int width;
  unsigned int height;
  unsigned int valid;
  unsigned int rowbytes;
  png_color_struct *palette;
  unsigned __int16 num_palette;
  unsigned __int16 num_trans;
  unsigned __int8 bit_depth;
  unsigned __int8 color_type;
  unsigned __int8 compression_type;
  unsigned __int8 filter_type;
  unsigned __int8 interlace_type;
  unsigned __int8 channels;
  unsigned __int8 pixel_depth;
  unsigned __int8 spare_byte;
  unsigned __int8 signature[8];
  int gamma;
  unsigned __int8 srgb_intent;
  int num_text;
  int max_text;
  png_text_struct *text;
  png_time_struct mod_time;
  png_color_8_struct sig_bit;
  unsigned __int8 *trans_alpha;
  png_color_16_struct trans_color;
  png_color_16_struct background;
  int x_offset;
  int y_offset;
  unsigned __int8 offset_unit_type;
  unsigned int x_pixels_per_unit;
  unsigned int y_pixels_per_unit;
  unsigned __int8 phys_unit_type;
  unsigned __int16 *hist;
  int x_white;
  int y_white;
  int x_red;
  int y_red;
  int x_green;
  int y_green;
  int x_blue;
  int y_blue;
  char *pcal_purpose;
  int pcal_X0;
  int pcal_X1;
  char *pcal_units;
  char **pcal_params;
  unsigned __int8 pcal_type;
  unsigned __int8 pcal_nparams;
  unsigned int free_me;
  png_unknown_chunk_t *unknown_chunks;
  int unknown_chunks_num;
  char *iccp_name;
  unsigned __int8 *iccp_profile;
  unsigned int iccp_proflen;
  unsigned __int8 iccp_compression;
  png_sPLT_struct *splt_palettes;
  unsigned int splt_palettes_num;
  unsigned __int8 scal_unit;
  char *scal_s_width;
  char *scal_s_height;
  unsigned __int8 **row_pointers;
};

struct compression_state
{
  const unsigned __int8 *input;
  unsigned int input_len;
  int num_output_ptr;
  int max_output_ptr;
  unsigned __int8 **output_ptr;
};

struct png_xy
{
  int redx;
  int redy;
  int greenx;
  int greeny;
  int bluex;
  int bluey;
  int whitex;
  int whitey;
};

struct png_XYZ
{
  int redX;
  int redY;
  int redZ;
  int greenX;
  int greenY;
  int greenZ;
  int blueX;
  int blueY;
  int blueZ;
};

struct __declspec(align(4)) png_dsort_struct
{
  png_dsort_struct *next;
  unsigned __int8 left;
  unsigned __int8 right;
};

struct __declspec(align(8)) dwYouTubeUploadTask_t
{
  unsigned __int64 fileID;
  bool isPrivate;
};

struct dwYouTubeRegistrationTask_t
{
  bdYouTubeAuthorizationCode *authCode;
};

struct dwYouTubeGetTokenTask_t
{
  bdYouTubeUserToken *userToken;
};

struct ytDWKeys_t
{
  char devKey[257];
  char devSecret[65];
  char consumerKey[257];
  char consumerSecret[65];
};

struct liveVote_t
{
  ControllerIndex_t requestController;
  ControllerIndex_t ownerController;
  unsigned __int64 entities[575];
  unsigned __int8 votes[575];
  int numVotes;
  unsigned __int64 recentlyLikedEntities[25];
  unsigned __int8 recentlyLikedCategories[25];
  int numRecentlyLiked;
  int offset;
  int isReady;
  int lastFullFetchTime;
  int nextPageFetchTime;
};

struct __declspec(align(8)) dwVoteSubmitTask_t
{
  dwVoteCategory_e category;
  unsigned __int64 entity;
  dwVote_e vote;
};

class __declspec(align(8)) bdRatingInfo : bdTaskResult
{
    unsigned __int64 m_entityID;
    unsigned __int8 m_rating;
};

class __declspec(align(8)) bdCategorizedRatingInfo : public bdRatingInfo
{
    unsigned __int16 m_category;
};

struct dwVoteHistoryTask_t
{
  int offset;
  int maxResults;
  bdCategorizedRatingInfo *outVotes;
};

struct __declspec(align(8)) liveVoteTasks_t
{
  dwVoteSubmitTask_t submitTask;
  dwVoteHistoryTask_t historyTask;
};

struct __declspec(align(8)) voteSortItem_t
{
  unsigned __int64 entity;
  unsigned __int8 vote;
};

class __declspec(align(4)) bdTwitchUserInfo : bdTaskResult
{
public:
    char m_token[1025];
    char m_username[257];
};


struct dwTwitchGetAccountTask
{
  bdTwitchUserInfo *account;
};

struct dwTwitchRegisterTask
{
  char accountName[256];
  char authToken[1024];
};

struct __declspec(align(8)) hostDelegate_t
{
  unsigned __int64 playerXuid;
  netadr_t playerAddr;
};

struct hostDelegateDetails_t
{
  int delegateIdx;
  int delegateTime;
  int lastDelegateSendTime;
};

struct __declspec(align(8)) MetPlayerInfo
{
  unsigned __int8 version;
  XuidInfo playersXuidInfo[50];
  unsigned __int8 metPlayerCount;
};

struct LeagueFriendInfo
{
  unsigned __int64 xuid;
  char gamertag[32];
};

class LeagueFriendsInfo
{
public:
  int friendCount;
  int lastDownloadTime;
  LeagueFriendInfo friendInfo[50];
};

class __declspec(align(8)) bdLeagueSubdivisionResult : bdTaskResult
{
public:
    unsigned __int64 m_teamID;
    unsigned __int64 m_leagueID;
    unsigned __int64 m_subdivisionID;
    unsigned __int8 m_metadata[64];
    unsigned int m_metadataLength;
};

class LeagueTeamSubdivisionInfo
{
public:
  unsigned __int64 teamID;
  bdLeagueSubdivisionResult subdivisionInfo[8];
  bool isSolo;
  int lastUpdated;
};

class __declspec(align(8)) bdLeagueTeamInfo : bdTaskResult
{
public:
    unsigned __int64 m_teamID;
    unsigned int m_createdTime;
    char m_name[65];
    unsigned __int8 m_icon[1024];
    unsigned int m_iconLength;
};

class bdGenericLeagueID : bdTaskResult
{
public:
    unsigned __int64 m_ID;
};

class __declspec(align(8)) LeagueTeamsData
{
public:
  bool isUpdating;
  int numResults;
  int numResultsToFetch;
  int currLeagueID;
  int currTeamsListOffset;
  int numResultsToFetchForLeague;
  bdLeagueUserTeamResult teams[12];
  LeagueTeamSubdivisionInfo teamSubdivisionInfos[12];
  bdLeagueTeamMemberInfo teamMemberInfos[12];
  bdLeagueTeamInfo teamInfos[12];
  bdGenericLeagueID soloTeamID;
  unsigned __int64 currPlayerXuid;
  bool fetchAllInfoForTeamInLeague;
};

class TeamLookup
{
public:
  int memberCount;
  int lru;
  unsigned __int64 members[6];
  bdGenericLeagueID teamID;
};

class __declspec(align(4)) bdLeagueStatsInfo : bdTaskResult
{
public:
  unsigned __int64 m_teamID;
  unsigned __int64 m_subdivisionID;
  unsigned __int8 m_writeType;
  __int64 m_rating;
  int m_integers[8];
  float m_floats[3];
  unsigned int m_rank;
  unsigned int m_secondsSinceUpdate;
  char m_name[65];
};

class __declspec(align(8)) LeagueLbData
{
public:
  bool isUpdating;
  int numResults;
  int totalResults;
  int offset;
  unsigned __int64 currTeamID;
  unsigned __int64 currSubdivisionID;
  unsigned __int64 pivotEntity;
  bdLeagueStatsInfo lbRows[500];
  bdLeagueTeamMemberInfo teamMemberInfo;
  int lastUpdated;
};

class bdLeagueSubdivisionHistoryResult : bdTaskResult
{
    unsigned __int64 m_seasonID;
    unsigned __int64 m_subdivisionID;
};

class __declspec(align(8)) LeagueSeasonHistory
{
public:
  bdLeagueSubdivisionHistoryResult seasonHistoryInfo[16];
  int numResults;
};

struct /*__cppobj*/ LeagueHistoryData
{
  LeagueSeasonHistory leagueSeasonHistory[8];
  bdLeagueSubdivisionInfo subdivisionInfos[128];
  int numSubdivisionInfos;
  unsigned __int64 currTeamID;
  __int16 currLeagueIndex;
  int lastUpdated;
};

struct /*__cppobj*/ __declspec(align(4)) StatsLookup
{
  StatsState state;
  int workCount;
  int workTime;
  int backoffCount;
  unsigned __int64 leagueID;
  int divisionID;
  bool isSolo;
  int nameID;
  unsigned __int64 teamID;
  int memberCount;
  char teamName[65];
  bool isPreSeason;
  bdLeagueSubdivisionResult subdivision;
  bdLeagueStatsInfo stats;
  LeagueTeamsData teamsData;
  LeagueHistoryData historyData;
  bool haveOutcomes;
  LeagueOutcomes outcomes;
  int matchDelta;
  int bonusDelta;
  LeagueOutcome matchOutcome;
  unsigned __int64 previousSubdivisionID;
  int previousDivisionID;
  bool refreshRequested;
};

struct LeagueSeason
{
  int id;
  const char *name;
  int startUTC;
  int endUTC;
};

struct League
{
  int id;
  const char *name;
  const char *description;
  const char *icon;
  const char *news;
  bool teamsAllowed;
  bool randomsAllowed;
  int teamSize;
  int placementGames;
  float placementWindow;
  int bonusPool;
  int bonusPerWin;
  int bonusTimeUTC;
  int bonusDays;
  bool bonusCumulative;
  float eloMean;
  float eloScale;
  float eloK;
  float eloN;
  int eloAwards[20];
  int numSeasons;
  LeagueSeason seasons[16];
};

struct LeagueDivisionIcon
{
  int rankPosition;
  const char *smallIcon;
  const char *largeIcon;
};

struct LeagueDivision
{
  int id;
  const char *name;
  const char *description;
  float minSkill;
  float maxSkill;
  float avgSkill;
  int subdivisionSize;
  bool canPlace;
  bool tweakSkill;
  int numIcons;
  LeagueDivisionIcon icons[6];
};

struct LeagueTeam
{
  LeagueStats baseStats;
  unsigned __int64 teamID;
  LeagueDivision *division;
  int memberCount;
  int input;
  float workingSkill;
  float workingVariance;
  LeagueStats newStats;
};

struct /*__cppobj*/ Leaderboard
{
  LeaderboardDef *lbDefs[5];
  LeaderboardRow<10> ustats[305];
  LeaderboardRow<10> cstats[1][50];
  int offset;
  int curIdx;
  int numResults;
  int totalResults;
  int filter;
  bool isUpdating;
  bool notSameFilter;
  unsigned __int64 pivotEntity;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct /*__cppobj*/ __declspec(align(8)) LbGlob
{
  LeaderboardDef *writeLeaderboards[32];
  int writeCount;
  Leaderboard leaderboard;
  char feederText[32];
  bool isWritingInUse;
};

struct CacheLbTaskData
{
  const LeaderboardDef *lbDef[10];
  int trackType[10];
  unsigned int lbReadIDs[10];
  int lbReadCount;
  LeaderboardRow<10> *lbRows[10];
  bdStatsInfoEx *statsInfoPtr[10];
};

struct __declspec(align(4)) lbTaskContext_t
{
  ControllerIndex_t controllerIndex;
  int filter;
  int offset;
  int kickoffTime;
  bool needsProcessing;
};

struct __declspec(align(8)) clientstats_t
{
  unsigned __int64 clientXUID;
  unsigned int statscolumns[10];
  typeEnumLB type;
};

struct lbdef_t
{
  char stat[10][64];
  char gametype[8];
  int lbid_daily;
  int lbid_weekly;
};

struct doubleXPRow_t
{
  int row;
  int nameHash;
  int contentMask;
};

struct doubleXPData_t
{
  doubleXPRow_t groups[32];
  bool isInitialized;
  const StringTable *groupsTable;
  unsigned int controllerGroups[1];
  int controllerValues[1][20];
  bool contentPacksChecked[1];
  unsigned int serverXPGroupMask;
  unsigned int serverGunXPGroupMask;
};

struct /*__cppobj*/ __declspec(align(8)) dediUserData_t
{
  dediConnectionState_e connectionState;
  bool onConnectCalled;
  int signInState;
  bdInetAddr authAddr;
  bdInetAddr lsgAddr;
  int errorCount;
  int backoffRecoverTime;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[21];
  EUserTier tier;
  bool isReadyToParty;
  bool isPartyInitialized;
  bool isPartyReady;
  bool isInParty;
  bool isInLocalParty;
};

struct audioSample_t
{
  unsigned __int8 *buffer;
  int lengthInBytes;
  int lengthInSamples;
  int bytesPerSample;
  int frequency;
  bool stereo;
  int channels;
  int sampleOffset;
};

struct SpeexMode
{
  const void *mode;
  int (__cdecl *query)(const void *, int, void *);
  const char *modeName;
  int modeID;
  int bitstream_version;
  void *(__cdecl *enc_init)(const SpeexMode *);
  void (__cdecl *enc_destroy)(void *);
  int (__cdecl *enc)(void *, void *, SpeexBits *);
  void *(__cdecl *dec_init)(const SpeexMode *);
  void (__cdecl *dec_destroy)(void *);
  int (__cdecl *dec)(void *, SpeexBits *, void *);
  int (__cdecl *enc_ctl)(void *, int, void *);
  int (__cdecl *dec_ctl)(void *, int, void *);
};

struct SpeexBits
{
  char *chars;
  int nbBits;
  int charPtr;
  int bitPtr;
  int owner;
  int overflow;
  int buf_size;
  int reserved1;
  void *reserved2;
};

struct target_t
{
  gentity_t *ent;
  vec3_t offset;
  int materialIndex;
  int offscreenMaterialIndex;
  int flags;
};

struct notebonemap_t
{
  unsigned __int16 note;
  unsigned __int16 bone;
};

struct SaveMemoryGlob
{
  SaveGame migration;
};

struct useList_t
{
  gentity_t *ent;
  float score;
};

struct GamerProfileBuffer
{
  unsigned __int8 exeSettings[1000];
  unsigned __int8 commonSettings[1000];
  bool isInitialized;
  bool isLoggedIn;
  bool errorOnRead;
};

struct __declspec(align(4)) GamerProfileGlobals
{
  GamerProfileBuffer profiles[1];
  ddlDef_t *commonProfileDef;
  ddlState_t commonProfileRootState;
  ddlDef_t *exeProfileDef;
  ddlState_t exeProfileRootState;
  ddlState_t exeProfileCACState;
  bool isMatureContentEnabled;
  bool showBlood;
  int quickLaunchMode;
  int exeSettingsSize;
  int commonSettingsSize;
  bool is3DEnabled;
};

union intsAreFloatsHack
{
  int i;
  float f;
};

struct antilagActorStore_t
{
  vec3_t position[32];
  vec3_t angles[32];
  unsigned __int8 actorMoved[32];
};

struct antilagVehicleStore_t
{
  vec3_t position[16];
  vec3_t angles[16];
  unsigned __int8 vehicleMoved[16];
};

struct __declspec(align(4)) vn_field_t
{
  char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  bool writable;
};

struct vehicle_path_node_link_t
{
  __int16 nextIdx;
  float length;
  vec3_t dir;
};

struct SortedPointArray
{
  int spawnPointsByIndex[200];
  int count;
  int sortTime;
};

struct SpawnPoint
{
  vec3_t origin;
  float weight[9];
  float baseWeight[9];
  int entNum;
  int teamMask;
  float yaw;
  int id;
  int orderNum;
  int dangerous;
  int dangerTimestamp[9];
  int scoreCullTime[9];
  vec3_t losCheckPos;
};

struct SpawnInfluencerPreset
{
  char description[32];
  int index;
  eInfluencerType type;
  eInfluencerShape shape;
  float radius;
  float originalLength;
  float score;
  eInfluencerScoreCurve score_curve;
  int markDangerous;
};

struct SpawnInfluencer
{
  bool used;
  bool active;
  bool archived;
  int influencerInstanceId;
  int debugEntityNum;
  int expireTime;
  int disableTime;
  int teamMask;
  EntHandle entity;
  SpawnInfluencerPreset *preset;
  float boundingRadius;
  vec2_t bounds;
  float length;
  vec3_t origin;
  vec3_t forward;
  vec3_t up;
  vec4_t quat;
  vec4_t worldQuat;
  vec3_t midPoint;
  int lastUpdateTime;
  float lastScore;
};

struct __declspec(align(4)) SpawnClientData
{
  int lastSpawnInstanceId;
  int lastSpawnId;
  int lastSpawnTime;
  int flags;
  int pointTeam;
  int influencerTeam;
  int numInfluencers;
  int numPresets;
  int numSpawnPoints;
  int numClients;
  bool clientPosDataArchived;
};

struct SpawnClientPosData
{
  bool active;
  vec3_t origin;
  float yaw;
  int team;
};

struct SpawnSystem_t
{
  SortedPointArray sortedTeamSpawnPoints[9];
  SpawnPoint spawnPoints[200];
  int spawnPointCount;
  bool spawnPointsArchived;
  int influencerPresetCount;
  SpawnInfluencerPreset influencerPresets[256];
  SpawnInfluencer influencers[272];
  SpawnInfluencer *sortedInfluencers[272];
  int sortedInfluencerCount;
  int lastInfluencerSortTime;
  eSpawnSystemDebugMode debugMode;
  int debugHighlightedSpawnPoint;
  int spawnInstanceCount;
  int influencerInstanceCount;
  SpawnClientData clientData[18];
  SpawnClientPosData clientsPosArchive[18][18];
  unsigned __int8 demoClientBuffer[18][10000];
  int demoClientBufferPos[18];
  bool demoRecordingEnabled;
  int demoBytesWritten;
  int lastSpawnPointId;
  int spawnPointIdShift;
};

struct DEMO_SpawnInfluencerPreset
{
  unsigned __int16 index;
  unsigned __int8 type;
  unsigned __int8 shape;
  int radius;
  int originalLength;
  unsigned __int16 scoreCurve;
  int score;
  char description[32];
};

struct __declspec(align(2)) DEMO_SpawnPoint
{
  unsigned __int16 index;
  __int16 yaw;
  __int16 origin[3];
  __int16 baseWeight[3];
  __int16 weight;
  __int16 orderNum;
  unsigned __int8 dangerous;
};

struct DEMO_SpawnInfluencerInstance
{
  unsigned __int16 index;
  unsigned __int16 presetIndex;
  __int16 entityNum;
  __int16 origin[3];
  __int16 angles[3];
  unsigned __int16 length;
  __int16 score;
};

struct /*__cppobj*/ compare_spawnpoint_sort
{
};

struct /*__cppobj*/ compare_spawninfluencer_sort
{
};

struct __declspec(align(2)) DEMO_SpawnBadSpawn
{
  __int16 playerEntityNum;
  __int16 enemyEntityNum;
  unsigned __int8 playerTeam;
  unsigned __int8 pointTeam;
  unsigned __int8 influencerTeam;
};

struct game_hudelem_s
{
  hudelem_s elem;
  ClientNum_t clientNum;
  int team;
  int archived;
};

struct ent_field_t
{
  const char *name;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *callback)(gentity_t *, int);
};

struct SpawnFuncEntry
{
  const char *classname;
  void (__cdecl *callback)(gentity_t *, SpawnVar *);
};

struct BuiltinFunctionDef
{
  const char *actionString;
  unsigned int constId;
  int min_args;
  int max_args;
  void (__cdecl *actionFunc)();
  int type;
};

union statValue_t
{
  int integer;
  unsigned int unsignedInt;
  __int64 integer64;
  unsigned __int64 unsignedInt64;
  float value;
};

struct scoreInfo_t
{
  int nameHash;
  float value;
  unsigned __int32 addPlayerStat : 1;
  unsigned __int32 isMedal : 1;
  unsigned __int32 isDoubleXP : 1;
  unsigned __int32 isGunXP : 1;
  unsigned __int32 demoBookmarkPriority : 7;
  unsigned __int32 tableIndex : 9;
};

struct scoreInfoTable_t
{
  scoreInfo_t scoreInfos[512];
  int numScoreInfos;
};

struct __declspec(align(8)) statAddValue_t
{
  statValue_t originalValue;
  statValue_t currentValue;
  ddlPrimitiveTypes_e varType;
};

struct Scr_ArraySortEntity
{
  int entNum;
  float distSq;
};

struct saveField_t
{
  int ofs;
  saveFieldtype_t type;
};

struct AttractorRepulsor_t
{
  bool inUse;
  bool isAttractor;
  int entnum;
  vec3_t origin;
  float strength;
  float maxDist;
};

struct $A46A2970FC35F683F2E7A2D53379998C
{
  AttractorRepulsor_t attractors[32];
};

struct TIMED_RADIUS_DAMAGE
{
  vec3_t pos;
  int life;
  float radius;
  float radiusSqr;
  int damage;
  int rate;
  int mod;
  Weapon weapon;
  int fireStarterClientNum;
};

struct game_hudelem_field_t
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size;
  fieldtype_t type;
  int mask;
  int shift;
  void (__cdecl *setter)(game_hudelem_s *, int);
  void (__cdecl *getter)(game_hudelem_s *, int);
};

struct DebugDrawBrushInfo
{
  int depthTest;
  int duration;
  vec3_t transform[4];
};

struct bot_threat_t
{
  gentity_t *ent;
  float dot;
  float distSq;
};

struct client_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *setter)(gclient_t *, const client_fields_s *);
  void (__cdecl *getter)(gclient_t *, const client_fields_s *);
};

struct vehicle_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *setter)(gentity_t *, const vehicle_fields_s *);
  void (__cdecl *getter)(gentity_t *, const vehicle_fields_s *);
};

struct EntHandleInfo
{
  void *handle;
  unsigned __int16 next;
  unsigned __int16 prev;
};

struct EntHandleList
{
  unsigned __int16 infoIndex;
};

struct __declspec(align(4)) BBBulletInfo
{
  int hitpos[2];
  __int16 hitcount;
};

struct Avoid
{
  vec3_t pos;
  float radius;
  float maxSpeed;
  float timeHorizon;
  vec2_t vel;
  vec2_t prefVel;
  int priority;
  int entnum;
  int flags;
};

struct OrcaPlane
{
  vec2_t p;
  vec2_t n;
};

struct FxCurve
{
  int dimensionCount;
  int keyCount;
  float keys[1];
};

struct FxCurveIterator
{
  const FxCurve *master;
  int currentKeyIndex;
};

struct FxCamera
{
  vec3_t origin;
  volatile int isValid;
  vec4_t frustum[6];
  vec3_t axis[3];
  unsigned int frustumPlaneCount;
  unsigned int pad[2];
};

struct FxDrawSurfInfo
{
  r_double_index_t *indices;
  unsigned int indexCount;
  Material *material;
  const char *name;
  bool enableDepthHack;
  bool superflare;
  unsigned int pad[3];
};

struct FxSpatialFrame
{
  vec4_t quat;
  vec3_t origin;
};

struct $F9B2685F9B0482D71FF488E299B5B86D
{
  unsigned __int32 sortOrder : 8;
  unsigned __int32 type : 2;
  unsigned __int32 dobjHandle : 11;
  unsigned __int32 temporalBits : 1;
  unsigned __int32 boneIndex : 9;
};

struct $569DBA5C0C8D57F19E06A53D790E3F4B
{
  unsigned __int32 _sortOrder : 8;
  unsigned __int32 _type : 2;
  unsigned __int32 absDynEntId : 21;
};

union FxBoltAndSortOrder
{
  $F9B2685F9B0482D71FF488E299B5B86D __s0;
  $569DBA5C0C8D57F19E06A53D790E3F4B __s1;
};

union $80E152BBE5589C9FD82B51E0E28F7B38
{
  const FxEffectDef *def;
  const FxEffectDef *localDef;
};

struct FxEffect
{
  orientation_t boneOffset;
  FxSpatialFrame frameAtSpawn;
  FxSpatialFrame frameNow;
  FxSpatialFrame framePrev;
  FxSpatialFrame effectToGroundEntAtSpawn;
  $80E152BBE5589C9FD82B51E0E28F7B38 ___u5;
  unsigned __int16 firstElemHandle[3];
  unsigned __int16 firstSortedElemHandle;
  unsigned __int16 firstTrailHandle;
  unsigned __int16 randomSeed;
  unsigned int ownerEffect;
  FxBoltAndSortOrder boltAndSortOrder;
  volatile int frameCount;
  int msecBegin;
  int msecLastUpdate;
  float distanceTraveled;
  volatile int elemCount[3];
  unsigned int uniqueHandle;
  float occlusionVisibility;
  vec4_t lightGridColor;
  float primaryLightFraction;
  int lightingOriginOffset;
  unsigned __int16 occlusionQueryHandle;
  __int16 groundEntityNum;
  __int16 occlusionRefCount;
  unsigned __int8 flags;
  unsigned __int8 culled;
};

struct FxEffectAtomics
{
  volatile int status;
  volatile int status2;
};

struct __declspec(align(16)) FxEffectContainer
{
  FxEffect effect;
  FxEffectAtomics atomics;
};

struct FxElem
{
  unsigned __int8 defIndex;
  unsigned __int8 sequence;
  unsigned __int8 atRestFraction;
  unsigned __int8 emitResidual;
  int msecBegin;
  vec3_t baseVel;
  union {
      int physObjId;
      vec3_t origin;
  };
  union {
      float trailTexCoord;
      struct {
          unsigned __int16 lightingHandle;
          struct {
              unsigned __int8 fadeAlpha;
              unsigned __int8 fadeAlphaPerSec;
          } fade;
      } s;
  };
  unsigned int attachedEffectHandle;
  unsigned __int8 windInterp;
  unsigned __int8 elemSpawnVisBits;
  unsigned __int8 pad[2];
};

struct FxElemShared
{
  unsigned __int16 nextElemHandleInEffect;
  unsigned __int16 prevElemHandleInEffect;
};

struct FxElemContainer
{
  FxElem elem;
  FxElemShared shared;
};

template <typename T>
struct FxPool
{
    union {
        int nextFree;
        T item;
  };
};

struct FxTrail
{
  unsigned __int16 nextTrailHandle;
  unsigned __int16 firstElemHandle;
  unsigned __int16 lastElemHandle;
  char defIndex;
  char sequence;
};

struct FxTrailElem
{
  vec3_t origin;
  float spawnDist;
  int msecBegin;
  unsigned __int16 nextTrailElemHandle;
  __int16 baseVelZ;
  char basis[2][3];
  unsigned __int8 sequence;
  unsigned __int8 unused;
};

struct FxVisBlocker
{
  vec3_t origin;
  unsigned __int16 radius;
  unsigned __int16 visibility;
};

struct FxVisState
{
  FxVisBlocker blocker[256];
  volatile int blockerCount;
  unsigned int pad[3];
};

struct FxUniqueHandleDb
{
    struct Node {
        int nextNode;
        unsigned int handle;
        unsigned __int16 effect;
        unsigned __int16 pad[3];
    } nodes[1024];
    int firstFreeNode;
    int numNodesInUse;
    int pad[2];
};

struct FxPlaySoundAction
{
  vec3_t spawnOrigin;
  const char *soundName;
};

union FxPPUAction
{
  FxPlaySoundAction playSoundAction;
};

union TaggedIndex
{
  unsigned int asUInt32;
  struct {
      unsigned __int16 tag;
      __int16 index;
  };
};

struct FxPriorityInfo
{
  volatile int warningHigh[2];
  volatile int readIndex;
  int pad[1];
};

struct __declspec(align(16)) FxSystemShared
{
  TaggedIndex firstFreeElem;
  TaggedIndex firstFreeTrailElem;
  TaggedIndex firstFreeTrail;
  volatile int activeElemCount;
  volatile int activeTrailElemCount;
  volatile int activeTrailCount;
  volatile int firstActiveEffect;
  volatile int firstNewEffect;
  volatile int firstFreeEffect;
  unsigned __int16 activeSpotLightEffectHandle;
  unsigned __int16 activeSpotLightElemHandle;
  volatile int activeSpotLightEffectCount;
  volatile int activeSpotLightElemCount;
  unsigned __int16 allEffectHandles[1024];
  volatile int iteratorCount;
  volatile int firstActiveActionPPU;
  volatile int firstNewActionPPU;
  volatile int firstFreeActionPPU;
  FxPriorityInfo priorityInfo;
  volatile int needsGarbageCollection;
};

struct FxPlayEffectAction
{
};

struct __declspec(align(16)) FxSystem
{
  FxCamera camera;
  FxCamera cameraPrev;
  FxCamera extraCamera;
  FxCamera extraCameraPre;
  FxDrawSurfInfo drawsurfInfo;
  FxEffectContainer *effects;
  FxPool<FxElemContainer> *elems;
  FxPool<FxTrail> *trails;
  FxPool<FxTrailElem> *trailElems;
  int gfxCloudCount;
  FxVisState *visState;
  const FxVisState *visStateBufferRead;
  FxVisState *visStateBufferWrite;
  __int16 activeSpotLightBoltDobj;
  unsigned __int8 hideDistortionFX;
  int msecNow;
  int msecDelta;
  volatile int msecDraw;
  int frameCount;
  bool isInitialized;
  bool isArchiving;
  unsigned __int8 localClientNum;
  unsigned int restartList[32];
  FxUniqueHandleDb *uniqueHandleDb;
  FxPlayEffectAction *actions;
  unsigned __int8 *ppuActionTypes;
  FxPPUAction *ppuActions;
  bool disableOcclusionSprites;
  int fxSpawnWorkersOnHold;
  FxSystemShared *shared;
};

struct FxSystemContainer
{
  FxSystem system;
  FxSystemShared shared;
};

struct FxMarkPoint
{
  vec3_t xyz;
  vec2_t lmapCoord;
  vec3_t normal;
};

struct FxPointGroup
{
  FxMarkPoint points[2];
  int next;
};

union FxPointGroupPool
{
  FxPointGroupPool *nextFreePointGroup;
  FxPointGroup pointGroup;
};

struct FxMarksGridCell
{
  __int16 x;
  __int16 y;
  __int16 z;
};

struct FxMarksHashEntry
{
  FxMarksHashEntry *next;
  FxMarksGridCell cell;
  unsigned __int16 numMarks;
};

struct FxMarkAlphaFade
{
  int ageLimitMsec;
  int fadeStartAgeMsec;
};

struct __declspec(align(4)) FxMark
{
  unsigned __int16 prevMark;
  unsigned __int16 nextMark;
  int frameCountDrawn;
  int frameCountAlloced;
  int ageMsec;
  vec3_t origin;
  float radius;
  vec3_t texCoordAxis;
  unsigned __int8 nativeColor[4];
  Material *material;
  int tris;
  int points;
  FxMarkAlphaFade alphaFade;
  GfxMarkContext context;
  unsigned __int16 pointCount;
  unsigned __int8 triCount;
};

struct FxTriGroup
{
    unsigned __int16 indices[2][3];
    GfxMarkContext context;
    unsigned __int8 triCount;
    unsigned __int8 unused[1];
    int next;
};

union FxTriGroupPool
{
  FxTriGroupPool *nextFreeTriGroup;
  FxTriGroup triGroup;
};

struct FxMarksSystem
{
  FxMarksHashEntry gridHashTableEntries[256];
  FxMarksHashEntry *gridHashTable[256];
  FxMark marks[256];
  FxTriGroupPool triGroups[1024];
  FxPointGroupPool pointGroups[1536];
  unsigned __int16 entFirstMarkHandles[1792];
  int frameCount;
  unsigned __int16 firstFreeMarkHandle;
  unsigned __int16 firstActiveWorldMarkHandle;
  unsigned __int16 firstViewmodelMarkHandle;
  unsigned int numViewmodelMarks;
  FxTriGroupPool *firstFreeTriGroup;
  FxPointGroupPool *firstFreePointGroup;
  bool noMarks;
  bool hasCarryIndex;
  unsigned __int16 carryIndex;
  unsigned int allocedMarkCount;
  unsigned int freedMarkCount;
  int frameTime;
  int gridHashTableNumUsedEntries;
  int timeSinceLastGridUpdate;
};

struct FxCameraUpdate
{
  vec3_t vieworg;
  vec3_t viewaxis[3];
  float tanHalfFovX;
  float tanHalfFovY;
  float zfar;
};

struct FxSpawnEffectCmd
{
  vec4_t spawnAxis;
  vec3_t spawnPos;
  unsigned int newEffectUniqueHandle;
  const FxEffectDef *effectDef;
  int msecBegin;
  unsigned int ownerEffect;
  int dobjHandle;
  int boneIndex;
  int markEntnum;
  __int16 groundEntityNum;
  unsigned __int8 runnerSortOrder;
  unsigned __int8 localClientNum;
};

struct __declspec(align(4)) FxCmd
{
  FxSystem *system;
  float elemRemoveChance;
  const GfxLight *visibleLights;
  int visibleLightCount;
  int updateEffectBegin;
  int updateEffectEnd;
  LocalClientNum_t localClientNum;
  unsigned __int8 updateCameraType;
  bool isInfraredDraw;
};

struct FxSystemBuffers
{
  FxEffectContainer effects[1024];
  FxPool<FxElemContainer> elems[2048];
  FxPool<FxTrail> trails[128];
  FxPool<FxTrailElem> trailElems[2048];
  FxVisState visState[2];
  FxUniqueHandleDb uniqueHandleDb;
  unsigned __int8 ppuActionTypes[128];
  FxPPUAction ppuActions[128];
  unsigned __int8 padBuffer[80];
};

struct FxSprite
{
  Material *material;
  vec3_t pos;
  unsigned __int8 rgbaColor[4];
  float radius;
  float minScreenRadius;
  int flags;
};

struct FxSpriteInfo
{
  int spriteCount;
  int pad[3];
  FxSprite sprites[950];
};

struct FxBeamInfo
{
  FxBeam beams[96];
  volatile int beamCount;
};

struct FxPostLight
{
  vec3_t begin;
  vec3_t end;
  float radius;
  GfxColor color;
  Material *material;
};

struct FxPostLightInfo
{
  FxPostLight postLights[96];
  int postLightCount;
};

struct FxElemBits
{
  volatile int bits[64];
};

struct EffectElemCountInfo
{
  int effectHandleIndex;
  unsigned int numCloudElemsToDraw;
  unsigned int numSpriteElemsToDraw;
  unsigned int pad;
};

struct EffectElementDraw
{
  FxEffect *effect;
  r_double_index_t *firstIndex;
  unsigned __int16 firstParticleCloudIndex;
  unsigned __int16 firstVertex;
  unsigned __int16 numParticleCloudAlloc;
  unsigned __int16 numCodeMeshAlloc;
};

struct FxElemPreVisualState
{
  float sampleLerp;
  float sampleLerpInv;
  const FxElemVisStateSample *refStateMain;
  const FxElemVisStateSample *refState;
  int randomSeed;
  float distanceFade;
  float occlusionFade;
};

struct FxElemRenderVisualState
{
  vec2_t size;
};

struct FxColor4b
{
  unsigned __int8 color[4];
};

struct __declspec(align(16)) FxElemRenderState
{
  orientation_t orient;
  FxElemPreVisualState preVisState;
  vec3_t posWorld;
  FxElemRenderVisualState visState;
  int randomSeed;
  float msecLifeSpan;
  float msecElapsed;
  float normTimeUpdateEnd;
  FxColor4b baseColor;
};

struct FxDrawTrailResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
  unsigned __int16 pad;
};

struct __declspec(align(4)) FxTrailDrawState
{
  int exactSegmentCount;
  unsigned __int16 lastRandomSeed;
};

class FxDrawTrailResourceRequired
{
public:
    int numCodeMeshVerts;
    int numIndices;
};

class __declspec(align(16)) FxSmpDrawBuffer
{
public:
    FxElemBits elemDrawBits;
    EffectElemCountInfo effectCountInfo[1024];
    EffectElementDraw effectElementDraw[1024];
    FxElemRenderState elemRenderState[2048];
    FxDrawTrailResourceRequired resReqArray[1024];
    FxDrawTrailResource resArray[1024];
    FxTrailDrawState trailDrawState[128];
    unsigned __int16 resReqTrailEffects[1024];
    volatile int effectCountInfoIndex;
    volatile int numTrailEffectsAlloced;
};

struct FxGenerateVertsCmd
{
  FxSystem *system;
  FxBeamInfo *beamInfo;
  FxPostLightInfo *postLightInfo;
  FxSpriteInfo *spriteInfo;
  LocalClientNum_t localClientNum;
  vec3_t vieworg;
  vec3_t viewaxis[3];
  unsigned __int8 genVertsCameraType;
  int drawTime;
  FxSmpDrawBuffer *smpDrawBuffer;
};

struct __declspec(align(4)) FxInsertSortElem
{
  int defSortOrder;
  float distToCamSq;
  int msecBegin;
  int defIndex;
  unsigned __int8 elemType;
};

struct FxProfileEntry
{
  const FxEffectDef *effectDef;
  int effectCount;
  int activeElemCount;
  int pendingElemCount;
  int trailCount;
  int activeTrailElemCount;
  int pendingTrailElemCount;
};

struct OccQueryDebugEntry
{
  const FxEffectDef *def;
  int count;
};

struct PriorityDebugEntry
{
  const FxEffectDef *def;
  int count;
};

struct GfxConfiguration
{
  unsigned int maxClientViews;
  unsigned int entCount;
  unsigned int entnumNone;
  unsigned int entnumOrdinaryEnd;
  int threadContextCount;
  int critSectCount;
};

struct GfxWorldVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  vec2_t texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  vec2_t lmapCoord;
};

struct FxMarkTri
{
  unsigned __int16 indices[3];
  GfxMarkContext context;
};

struct __declspec(align(4)) MarkInfoCollidedBModel
{
  GfxBrushModel *brushModel;
  cpose_t *pose;
  unsigned __int16 entnum;
};

struct FxAddMarkCmd
{
  LocalClientNum_t localClientNum;
  const FxElemDef *elemDef;
  FxSpatialFrame spatialFrame;
  int randomSeed;
  unsigned int markEntnum;
  bool markViewmodel;
  vec3_t viewOffset;
};

struct __declspec(align(4)) MarkInfoCollidedDObj
{
  DObj *dObj;
  cpose_t *pose;
  unsigned __int16 entnum;
};

struct MarkGenContext
{
  LocalClientNum_t localClientNum;
  Material *material;
  float radius;
  const unsigned __int8 *nativeColor;
  const FxMarkAlphaFade *markAlpha;
};

struct MarkClipPlaneSet
{
  vec4_t planes[11];
  int planeCount;
};

struct MarkInfo
{
  vec3_t origin;
  vec3_t localOrigin;
  vec3_t localTexCoordAxis;
  vec3_t axis[3];
  float radius;
  Material *material;
  int maxTris;
  FxMarkTri *tris;
  int maxPoints;
  FxMarkPoint *points;
  vec3_t mins;
  vec3_t maxs;
  MarkClipPlaneSet clipPlanes;
  vec3_t viewOffset;
  bool markHasLightmap;
  bool markHasReflection;
  MarkFragmentsAgainstEnum markAgainst;
  unsigned __int16 smodelsCollided[32];
  int smodelCollidedCount;
  MarkInfoCollidedDObj sceneDObjsCollided[32];
  int sceneDObjCollidedCount;
  MarkInfoCollidedBModel sceneBModelsCollided[32];
  int sceneBModelCollidedCount;
  MarkInfoCollidedDObj viewmodelDObjsCollided[1];
  int viewmodelDObjsCollidedCount;
  int usedTriCount;
  int usedPointCount;
  void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, const vec3_t *, const vec3_t *);
  void *callbackContext;
};

struct FxActiveMarkSurf
{
  Material *material;
  GfxMarkContext context;
  int indexCount;
  unsigned __int16 *indices;
  unsigned int visLightsMask;
};

struct FxMarkDObjUpdateContext
{
  XModel *models[32];
  const char *modelParentBones[32];
  int modelCount;
  bool isBrush;
  unsigned __int16 brushIndex;
};

struct FxEditorElemAtlas
{
  int behavior;
  int index;
  int fps;
  int loopCount;
  int indexRange;
  int colIndexBits;
  int rowIndexBits;
  int entryCount;
};

struct FxEditorTrailDef
{
  FxTrailVertex verts[64];
  int vertCount;
  unsigned __int16 inds[128];
  int indCount;
};

union $CE382E0EDD6E14D9768219063ECA85E1
{
  FxElemVisuals visuals[32];
  FxElemMarkVisuals markVisuals[16];
};

struct FxEditorElemDef
{
  char name[256];
  int editorFlags;
  int flags;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxSpawnDefLooping spawnLooping;
  FxSpawnDefOneShot spawnOneShot;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  vec4_t rotationAxis;
  FxFloatRange gravity;
  FxFloatRange elasticity;
  FxEditorElemAtlas atlas;
  float timeScale;
  float windInfluence;
  vec3_t velScale[2];
  const FxCurve *velShape[2][3][2];
  float rotationScale;
  const FxCurve *rotationShape[2];
  float sizeScale[2];
  const FxCurve *sizeShape[2][2];
  float scaleScale;
  const FxCurve *scaleShape[2];
  const FxCurve *color[2];
  const FxCurve *alpha[2];
  float lightingFrac;
  vec3_t collOffset;
  float collRadius;
  const FxEffectDef *effectOnImpact;
  const FxEffectDef *effectOnDeath;
  int sortOrder;
  const FxEffectDef *emission;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  const FxEffectDef *attachment;
  unsigned __int8 elemType;
  int visualCount;
  $CE382E0EDD6E14D9768219063ECA85E1 ___u45;
  int trailSplitDist;
  int trailRepeatDist;
  float trailScrollTime;
  FxEditorTrailDef trailDef;
  int alphaFadeTimeMsec;
  int maxWindMagnitude;
  int spawnIntervalAtMaxWind;
  int lifespanAtMaxWind;
  float billboardTopWidth;
  float billboardBottomWidth;
  FxElemSpawnSound spawnSound;
  FxIntRange cloudDensityRange;
  vec2_t billboardPivot;
  float spotLightFovInnerFraction;
  float spotLightStartRadius;
  float spotLightEndRadius;
};

struct FxElemField
{
  const char *keyName;
  bool (__cdecl *handler)(const char **, FxEditorElemDef *);
};

struct FxFlagDef
{
  const char *name;
  int flagType;
  int mask;
  int value;
};

struct FxEditorEffectDef
{
  char name[64];
  int elemCount;
  unsigned __int16 flags;
  unsigned __int8 editorFlags;
  unsigned __int8 edPriority;
  vec3_t boundMin;
  vec3_t boundMax;
  vec3_t boundCenter;
  vec3_t boundSize;
  float occlusionQueryDepthBias;
  int occlusionQueryFadeIn;
  int occlusionQueryFadeOut;
  FxFloatRange occlusionQueryScaleRange;
  FxEditorElemDef elems[32];
};

struct FxEffectField
{
  const char *keyName;
  bool (__cdecl *handler)(const char **, FxEditorEffectDef *);
};

struct $ED1327B9CC7CA931BCBE1A0A7F13195A
{
  int effectDefCount;
  const FxEffectDef *effectDefs[512];
  unsigned __int8 effectStatus[512];
  const FxEffectDef *defaultEffect;
};

struct FxFlagOutputSet
{
  int *flags[4];
};

struct FxGraph3D
{
  int intervalCount;
  union {
      vec3_t constantValue;
      vec3_t* sampleValue;
  } u;
};

struct FxGraph1D
{
  int intervalCount;
  union {
      float constantValue;
      float* sampleValue;
  } u;
};

struct __declspec(align(4)) FxSpriteElemDrawResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
};

struct FxCloudElemDrawResource
{
  unsigned int gfxParticleCloudIndex;
};

struct FxTrailElemDrawResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
  unsigned int vertexCapacity;
  unsigned int indicesCapacity;
  unsigned int numUsedVertex;
  unsigned int numUsedIndices;
};

union FxElemDrawSource
{
  FxSpriteElemDrawResource sprite;
  FxCloudElemDrawResource cloud;
  FxTrailElemDrawResource trail;
};

struct __declspec(align(4)) FxDrawState
{
  vec3_t rotationAxis[3];
  LocalClientNum_t localClientNum;
  const FxEffect *effect;
  const FxElem *elem;
  const FxElemDef *elemDef;
  unsigned int region;
  const FxCamera *camera;
  int msecDraw;
  unsigned int superFlareIndex;
  unsigned int usePreAllocatedResource;
  FxElemDrawSource elemResource_u;
  bool isInfraredDraw;
};

struct FxElemSetupCmd
{
  FxSystem *system;
  int effectStart;
  int effectLast;
  FxElemBits *elemDrawBits;
  FxElemRenderState *elemRenderStates;
  int drawTime;
  unsigned int cameraType;
  EffectElemCountInfo *effectElemCountInfo;
  volatile int *effectElemCountInfoIndex;
};

struct FxDrawSpriteGeoCmd
{
  EffectElementDraw *effectElemDrawFirst;
  EffectElementDraw *effectElemDrawLast;
  FxElemBits *elemDrawBits;
  FxSystem *system;
  int drawTime;
  FxElemRenderState *elemRenderStates;
  int cameraType;
};

struct FxDrawTrailGeoCmd
{
  int trailEffectFirst;
  int trailEffectLast;
  const unsigned __int16 *effectHandles;
  const FxDrawTrailResourceRequired *resourceRequiredArray;
  const FxDrawTrailResource *resourceArray;
  FxSystem *system;
  int drawTime;
  unsigned int cameraType;
};

struct FxTrailSegmentDrawState
{
  FxTrailDef *trailDef;
  vec3_t posWorld;
  vec3_t basis[2];
  float rotation;
  float size[2];
  float uCoord;
  unsigned __int8 color[4];
};

struct __declspec(align(4)) FxMarksCmd
{
  FxSystem *system;
  const GfxLight *visibleLights;
  int visibleLightCount;
  LocalClientNum_t localClientNum;
  unsigned __int8 updateCameraType;
};

struct FxEffectDefTableEntry
{
  unsigned int key;
  const FxEffectDef *effectDef;
};

struct FxEffectDefTable
{
  int count;
  FxEffectDefTableEntry entries[1024];
};

struct __declspec(align(4)) DynEntSortStruct
{
  float distSq;
  unsigned __int16 id;
};

struct DynEntityCollTree
{
  float dist;
  unsigned __int16 axis;
  union {
      unsigned __int16 parent;
      unsigned __int16 nextFree;
  } u;
  unsigned __int16 child[2];
};

struct __declspec(align(4)) DynEntityCollSector
{
  DynEntityCollTree tree;
  int contents;
  unsigned __int16 entListHead;
};

struct __declspec(align(2)) BreakablePiece
{
  const XModel *model;
  int physObjId;
  unsigned __int16 lightingHandle;
  bool active;
};

struct node_params_t
{
  char classname[64];
  char targetname[64];
  unsigned __int16 targetname_hash;
  char target[64];
  char target2[64];
  vec3_t origin;
  vec3_t angles;
  int used;
};

struct __declspec(align(4)) DynEntityCreateParams
{
  char typeName[64];
  char modelName[64];
  char physModelName[64];
  char destroyFxFile[64];
  char destroySound[64];
  char destroyPiecesFile[64];
  char physPresetFile[64];
  char targetname[64];
  char target[64];
  char destroyedModelName[64];
  vec3_t origin;
  vec3_t angles;
  int health;
  float mass;
  float bounce;
  float friction;
  vec3_t centerOfMass;
  bool startInPhysics;
  bool autoActivate;
  bool noBulletDamage;
  bool noExplosiveDamage;
  bool alwaysFloats;
};

struct DynEntityConstraintCreateParams
{
  char classname[64];
  char targetname[64];
  char target[64];
  char target2[64];
  vec3_t origin;
  vec3_t origin2;
  vec3_t angles;
  int health;
  float minAngle;
  float maxAngle;
  float damp;
  float distance;
  float scale;
  float force_scale;
  float width;
  int spawnflags;
  float timeout;
  char materialname[64];
};

struct DynEntityCollWorld
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  DynEntityCollSector sectors[1024];
};

struct DynEnt_FadeData
{
  unsigned __int16 id;
  int startTime;
};

struct DynEnt_BurnData
{
  unsigned __int16 id;
  unsigned int fx;
};

class bdProfileInfo : bdTaskResult
{
public:
    unsigned __int64 m_entityID;
};


class __declspec(align(4)) PublicProfileInfo : bdProfileInfo
{
  int m_memberVERSION;
  unsigned __int8 m_memberddl[1025];
};

struct matchSummaryWeaponStatHash_t
{
  int statNameHash;
  int limit;
  char statName[16];
};

struct zombieWeaponStatHashMap_t
{
  int weaponNameHash;
  int weaponStatIndex;
};

struct dwUCDGetUserDetailsTask
{
  bdUCDAccountInfo *ucdAccountInfo;
  const char *accountName;
  const char *password;
};

class bdUCDAccountStatus : bdTaskResult
{
    enum bdMarketingOptInStatus
    {
        BD_MARKETING_OPT_IN_FALSE = 0x0,
        BD_MARKETING_OPT_IN_TRUE = 0x1,
    };
    enum bdElitePaidStatus
    {
        BD_ELITE_PAID_UNKNOWN = 0xFFFFFFFF,
        BD_ELITE_PAID_FALSE = 0x0,
        BD_ELITE_PAID_TRUE = 0x1,
    };
public:
    bool m_hasUCDAccount;
    bool m_marketingOptIn;
    bool m_emailVerified;
    bool m_isEliteMember;
    bool m_isEliteFounder;
    int m_isElitePaid;
};

struct dwGetUCDRegistrationTask
{
  bdUCDAccountStatus *ucdAccountStatus;
};

class bdUserInfo : bdTaskResult
{
public:
    unsigned __int64 m_userID;
    char m_userName[64];
};

struct dwGetUserInfoTask
{
  unsigned __int64 *userIDs;
  int numUserIDs;
  bdUserInfo *outUserInfos;
  void (__cdecl *successCallback)(const ControllerIndex_t);
  void (__cdecl *failureCallback)(const ControllerIndex_t);
};

struct __declspec(align(8)) PlayerRank
{
  unsigned __int64 xuid;
  int rank;
};

class __declspec(align(2)) bdPS3AuthInfo : bdReferencable
{
  char m_region[4];
  char m_domain[4];
  bool m_AVChatAvailability;
  bool m_ContentRatingEnabled;
  unsigned __int8 m_age;
};

struct DevGuiInput
{
  ControllerIndex_t selectedGamePadIndex;
  ControllerIndex_t gamePadIndex;
  float mousePos[2];
  bool buttonDown[13];
  bool prevButtonDown[13];
  float scrollScale;
  DevGuiInputState digitalStates[2];
  float digitalAxis[2];
  float digitalTimes[2];
  DevGuiInputState analogStates[2];
  float analogAxis[2];
  float analogTimes[2];
  __int16 menuScroll[2];
  float menuScrollTime[2];
  float digitalSliderTime;
  float analogSliderTime;
  float sliderScrollTime;
  float sliderScrollMaxTimeStep;
};

union DevMenuChild
{
  const char *command;
  const dvar_t *dvar;
  DevGraph *graph;
  unsigned __int16 menu;
};

struct DevMenuItem
{
  char label[26];
  unsigned __int8 childType;
  unsigned __int8 childMenuMemory;
  __int16 sortKey;
  unsigned __int16 nextSibling;
  unsigned __int16 prevSibling;
  unsigned __int16 parent;
  DevMenuChild child;
};

struct devguiGlob_t
{
  DevMenuItem menus[2048];
  DevMenuItem *nextFreeMenu;
  DevMenuItem topmostMenu;
  bool bindNextKey;
  bool isActive;
  bool isInitialized;
  bool editingMenuItem;
  unsigned __int16 selectedMenu;
  int selRow;
  bool editingKnot;
  int top;
  int bottom;
  int left;
  int right;
  int sliderWidth;
  int textLabelWidth;
};

struct ECRYPT_ctx
{
  unsigned int input[16];
  unsigned __int8 output[64];
  unsigned int cont;
};

struct ScriptStringList
{
  int count;
  const char **strings;
};

template <typename ASSET>
union XAssetPoolEntry
{
    ASSET entry;
    XAssetPoolEntry<ASSET> *next;
};

template <typename ASSET, int COUNT>
struct XAssetPool
{
    XAssetPoolEntry<ASSET> *freeHead;
    XAssetPoolEntry<ASSET> entries[COUNT];
};

struct XAsset
{
  XAssetType type;
  XAssetHeader header;
};

struct XAssetList
{
  ScriptStringList stringList;
  int dependCount;
  const char **depends;
  int assetCount;
  XAsset *assets;
};

struct StreamDelayInfo
{
  const void *ptr;
  int size;
};

struct XBlock
{
  unsigned __int8 *data;
  unsigned int size;
};

struct StreamPosInfo
{
  unsigned __int8 *pos;
  unsigned int index;
};

struct XAssetEntry
{
  XAsset asset;
  unsigned __int8 zoneIndex;
  bool inuse;
  unsigned __int16 nextHash;
  unsigned __int16 nextOverride;
  unsigned __int16 usageFrame;
};

union XAssetEntryPoolEntry
{
  XAssetEntry entry;
  XAssetEntryPoolEntry *next;
};

struct XZoneName
{
  char name[64];
  int flags;
  int fileSize;
  XZoneState state;
};

struct XZone
{
  unsigned __int16 index;
  int flags;
  XBlock blocks[8];
};

struct XZoneInfoInternal
{
  char name[64];
  int flags;
};

struct DBReorderAssetEntry
{
  unsigned int sequence;
  int type;
  const char *typeString;
  const char *assetName;
};

struct $55F4715761F64B5FDFD0A6B830B3B37D
{
  FastCriticalSection critSect;
  char zoneName[256];
  bool alreadyFinished;
  bool loadedSound;
  bool loadedLocalization;
  DBReorderAssetEntry *lastEntry;
  unsigned int sequence;
  unsigned int sequenceForIncludes;
  unsigned int entryCount;
  DBReorderAssetEntry entries[38400];
};

struct ZONE_PATCH_VERSION
{
  const char *name;
  int version;
};

struct ShaderStats
{
  unsigned __int8 cost;
  unsigned __int8 ALU;
  unsigned __int8 vertex;
  unsigned __int8 texture;
  unsigned __int8 sequencer;
  unsigned __int8 interpolator;
  unsigned __int8 GPR;
  unsigned __int8 threads;
};

struct GfxPackedVertexQuant
{
  __int16 xyz[3];
  __int16 binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

struct GfxPosColorVertex
{
  vec3_t xyz;
  GfxColor color;
};

struct GfxPosFP16TexVertex
{
  vec3_t xyz;
  PackedTexCoords texCoord;
};

struct CollisionBorder
{
  vec3_t distEq;
  float zBase;
  float zSlope;
  float start;
  float length;
};

struct ClientTriggerAabbNode
{
  Bounds bounds;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
};

struct FxInt16Range
{
  __int16 base;
  __int16 amplitude;
};

struct FxInt8Range
{
  char base;
  char amplitude;
};

struct ClientTriggers
{
  MapTriggers trigger;
  unsigned __int16 numClientTriggerNodes;
  ClientTriggerAabbNode *clientTriggerAabbTree;
  unsigned int triggerStringLength;
  char *triggerString;
  unsigned __int16 *triggerStringOffsets;
  unsigned __int8 *triggerType;
  vec3_t *origins;
  float *scriptDelay;
  __int16 *audioTriggers;
};

struct GfxReflectionProbeStreamPart
{
  vec3_t mins;
  float himipRadiusInvSq;
  vec3_t maxs;
};

struct ColVert
{
  vec3_t xyz;
  float unused;
};

struct XSurfaceSection
{
  unsigned __int16 minVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  unsigned __int16 triCountNoCull;
};

struct GfxPosTexVertex
{
  vec3_t xyz;
  vec2_t texCoord;
};

union PackedLightingCoords
{
  unsigned int packed;
  unsigned __int8 array[4];
};

struct __declspec(align(128)) DB_LOAD_STREAM
{
  unsigned __int8 decompressedData[32768];
  unsigned __int8 checksum[32];
  unsigned __int8 *compressedData;
  int compressedDataAvail;
  int decompressedDataAvail;
  int decompressedDataOffset;
  bool busy;
};

struct DBDecompressCmd_t
{
  int which;
  DB_LOAD_STREAM *stream;
  unsigned __int8 *ioBuffer;
  unsigned __int8 iv[8];
};

struct __declspec(align(128)) DB_LoadData
{
  int f;
  const char *filename;
  XBlock *blocks;
  int flags;
  void (__cdecl *interrupt)();
  int allocType;
  unsigned __int64 readOffset;
  unsigned __int64 endOffset;
  unsigned __int8 *ioBuffer;
  int ioBufferOffset;
  unsigned __int8 *compressData;
  int tail;
  int head;
  DBDecompressCmd_t cmd[4];
  DB_LOAD_STREAM stream[4];
  int next_buffer;
  int locks[4];
  bool loadPending[4];
  bool abort;
  int requiredVersion;
  int lastError;
  int startTime;
};

struct XFile
{
  unsigned int size;
  unsigned int externalSize;
  unsigned int blockSize[8];
};

struct __declspec(align(4)) tsVote_t
{
  SubpartyInfo *party;
  int bid;
  bool valid;
};

struct tsTeam_t
{
  int id;
  int partyCount;
  float skill;
  SubpartyInfo *parties[18];
  tsVote_t vote;
};

struct ErrorMap
{
  const char *partyMessage;
  const char *errorMessage;
};

struct __declspec(align(4)) PartyMessages
{
  const char *string;
  void (__cdecl *func)(PartyData_s *, ControllerIndex_t, netadr_t, msg_t *);
  bool verbose;
};

struct peerResults_t
{
  unsigned int receivedPacketCount;
  unsigned int totalLatencyMS;
  float m;
  float s;
};

struct migrateClientData_t
{
  peerResults_t peerResults[18];
  unsigned __int64 nominees[18];
  migrateClientState_t clientState;
  unsigned int sentPacketCount;
  int lastPacketSendMs;
  int currentNominee;
  int migrateStartMs;
  int lasthostTimeMS;
  int hostStartMS;
  int lastCalcTime;
  int nextTestPacketSendMS;
  unsigned __int64 peerXor;
};

struct migrateHostData_t
{
  unsigned __int64 nominees[18];
  peerResults_t peerResults[18];
  ClientNum_t tokenHolder;
  unsigned int missingPeerLimit;
};

struct tempHostResults_t
{
  peerResults_t peerResults;
  ClientNum_t clientnum;
  connectionType_e connectionType;
};

struct __declspec(align(4)) Assignment
{
  float fitness;
  unsigned __int8 team[18];
};

struct JoinPartyResponse
{
  const char *failureReason;
  unsigned int challenge;
};

struct PotentialTeam
{
  int parties[18];
  int partyCount;
  int playerCount;
  int totalSkill;
};

struct s_mutePlyerData
{
  s_mutePlayerInfo player[64];
  int numOfExistingPlayers;
  s_mutePlayerInfo *head;
};

struct PartyField
{
  int bits;
  int offset;
  int size;
  const char *name;
};

struct PrintChannel
{
  char name[32];
  bool allowScript;
};

struct PrintChannelGlob
{
  PrintChannel openChannels[256];
  unsigned int filters[7][8];
};

struct R_AddDrawCallsCmd
{
  GfxBackEndData *data;
};

struct __declspec(align(4)) rankTierData_t
{
  int tierStep0Limits[8];
  float tierSkillLimits[8][16];
  int topTier;
  int topRank;
  bool isValid;
};

struct __declspec(align(4)) rankData_t
{
  int minxp[96];
  int maxxp[96];
  int rankId[96];
  unsigned __int8 unlocks[96][20];
  int topRow;
  bool isValid;
};

struct hashName_t
{
  int hash;
  const char *name;
};

struct challengeHashLookup_t
{
  const char **baseStatNames;
  int baseStatNameCount;
  int *baseStatNameHash;
  const char **challengeStatNames;
  int challengeStatCount;
};

struct challengeTableInfo_t
{
  challengeTableRow_t challengeTable[1024];
  __int16 startIndices[5][20];
  __int16 numEntries[5][20];
  __int16 challengeRowIndices[1024];
  __int16 uniqueChallengeIndices[1024];
  unsigned int challengeCount;
  unsigned int uniqueChallengeCount;
  hashName_t itemHashNames[1536];
  hashName_t attachmentHashNames[180];
  hashName_t groupHashNames[120];
  hashName_t gametypeHashNames[640];
  int weaponStatHash[11];
  int gametypeStatHash[18];
  challengeHashLookup_t weaponChallengeHashLookup;
  challengeHashLookup_t gametypeChallengeHashLookup;
};

struct ClientPing
{
  bool active;
  int ping;
  int nextPingTime;
};

struct /*__cppobj*/ serverStatusInfoResponse_t
{
  char string[20480];
  netadr_t address;
  int time;
  int startTime;
  int pending;
  int print;
  int retrieved;
  bdSecurityID secId;
};

struct ping_t
{
  netadr_t adr;
  int start;
  int time;
  char info[1024];
};

struct csinfo_t
{
  int start;
  int end;
  char *label;
};

struct keyNumToNameMapping_t
{
  int keynum;
  const char *buttonName;
};

struct KeyState
{
  int down;
  int repeats;
  Bind_t binding[2];
  const char *bindingCheat;
};

struct PlayerKeyState
{
  field_t chatField;
  int chat_team;
  int overstrikeMode;
  int anyKeyDown;
  KeyState keys[256];
  LocSelInputState locSelInputState;
};

struct BindPair_s
{
  Bind_t vehicle;
  Bind_t primary;
};

struct GamepadVirtualAxisMapping
{
  GamepadPhysicalAxis physicalAxis;
  GamepadMapping mapType;
};

struct GpadAxesGlob
{
  int axesValues[6];
  GamepadVirtualAxisMapping virtualAxes[6];
};

struct StickToCodeMap
{
  GamepadPhysicalAxis physicalAxis;
  int posCode;
  int negCode;
};

struct $20789B61726917DE7F9EB30009E28F80
{
  bool inited;
  bool requiresCreation;
  int mapDirCount;
  char mapDirs[8][64];
  const char **mapNames[8];
  const dvar_t *mapEnumDvar[8];
};

struct ConDrawInputGlob
{
  char autoCompleteChoice[64];
  int matchIndex;
  int matchCount;
  const char *inputText;
  int inputTextLen;
  bool hasExactMatch;
  bool mayAutoComplete;
  float x;
  float y;
  float leftX;
  float fontHeight;
};

struct MessageLine
{
  int messageIndex;
  int textBufPos;
  int textBufSize;
  int typingStartTime;
  int lastTypingSoundTime;
  int flags;
};

struct Message
{
  int startTime;
  int endTime;
};

struct MessageWindow
{
  MessageLine *lines;
  Message *messages;
  char *circularTextBuffer;
  int textBufSize;
  int lineCount;
  int padding;
  int scrollTime;
  int fadeIn;
  int fadeOut;
  int textBufPos;
  int firstLineIndex;
  int activeLineCount;
  int messageIndex;
};

struct MessageBuffer
{
  char gamemsgText[4][2048];
  MessageWindow gamemsgWindows[4];
  MessageLine gamemsgLines[4][12];
  Message gamemsgMessages[4][12];
  char miniconText[4096];
  MessageWindow miniconWindow;
  MessageLine miniconLines[100];
  Message miniconMessages[100];
  char errorText[1024];
  MessageWindow errorWindow;
  MessageLine errorLines[5];
  Message errorMessages[5];
};

struct Console
{
  int initialized;
  MessageWindow consoleWindow;
  MessageLine consoleLines[1024];
  Message consoleMessages[1024];
  char consoleText[32768];
  char textTempLine[512];
  unsigned int lineOffset;
  int displayLineOffset;
  int prevChannel;
  bool outputVisible;
  int fontHeight;
  int visibleLineCount;
  int visiblePixelWidth;
  vec2_t screenMin;
  vec2_t screenMax;
  MessageBuffer messageBuffer[1];
  vec4_t color;
};

struct __declspec(align(4)) CompositeJob
{
  CompositeState state;
  CompositeType type;
  int id;
  int layerCount;
  CompositeEmblemLayer layers[32];
  GfxImage *renderImage;
  GfxImage *resultImage;
  bool cancel;
};

struct __declspec(align(4)) TempImage
{
  GfxImage *image;
  bool used;
};

struct ClientViewParams
{
  float x;
  float y;
  float width;
  float height;
  ClientViewViewportSize viewportSize;
};

struct GfxExtraCamParms
{
  unsigned int multiExtraCamIndex;
  enum eExtraCamRenderMode {
      EXTRA_CAM_NONE = 0x0,
      EXTRA_CAM_SINGLE = 0x1,
      EXTRA_CAM_MULTI = 0x2,
  } renderMode;
};

struct clientMouse_t
{
  int mouseDx[2];
  int mouseDy[2];
  int mouseIndex;
};

struct kbutton_t
{
  int down[2];
  unsigned int downtime;
  unsigned int msec;
  bool active;
  bool wasPressed;
  float val;
};

struct __declspec(align(2)) AimOutput
{
  float pitch;
  float yaw;
  float meleeChargeYaw;
  unsigned __int16 meleeChargeEnt;
  unsigned __int8 meleeChargeDist;
};

struct CEntityAreaParms
{
  vec3_t mins;
  vec3_t maxs;
  int contentMask;
  int *list;
  int maxCount;
  int count;
};

struct AnimRateOffset
{
  int fromWeaponDef;
  int fromWeaponVariantDef;
  int (__cdecl *animTime)(const Weapon);
};

struct snd_weapon_shot
{
  LocalClientNum_t localClientNum;
  SndEntHandle shooter;
  Weapon weapon;
  vec3_t origin;
  vec3_t direction;
  unsigned int tagName;
  unsigned int burstCount;
  bool shooterIsPlayer;
  bool shooterIsLocalPlayer;
  bool leftGun;
  bool isLastShotInClip;
  bool isTurret;
  bool doubleTap;
  bool fakeFire;
  bool firstShotOfBurst;
};

struct snd_autosim_play
{
  unsigned int frame;
  snd_weapon_shot shot;
};

struct snd_autosim
{
  snd_weapon_shot shot;
  unsigned int lastPing;
  unsigned int lastShot;
  unsigned int fireTime;
  unsigned __int16 shotCount;
  unsigned __int16 eventCount;
  int used;
  int isNew;
};

struct ClientPlayerAttachmentInfo
{
  const char *translatedDisplayName;
};

struct WeaponOptions
{
    struct  __declspec(align(4)) CamoLookup {
        int index;
        bool isMaterialCamo;
    } camoLookupTable[128];
  WeaponCamo *meleeCamo;
  struct Reticle {
      const Material* reticleMaterial;
      const Material* lensMaterial;
  } reticles[7][64];
  const GfxImage *emblemClearTexture;
};

struct OverheadFade
{
  int nextCheckTime;
  int lastTime;
  int startTime;
  bool visible;
  float alphaScale;
};

struct visField_t
{
  const char *name;
  int offset;
  int fieldType;
};

struct TestEffect
{
  char name[64];
  vec3_t pos;
  int time;
  int respawnTime;
};

class ExtraCamClientStateRestore
{
public:
  unsigned __int8 m_buffer[864];
  vec3_t m_vieworg;
  vec3_t m_refdefViewAngles;
  vec3_t m_viewaxis[3];
  LocalClientNum_t m_localClientNum;
};

struct cent_field_t
{
  const char *name;
  int ofs;
  fieldtype_t type;
};

struct CgSoundPlaybackTrackingInfo
{
  int entitynum;
  vec3_t origin;
  unsigned int aliasname;
  int wasInKillcam;
};

struct snd_fire_manager
{
  int active;
  vec3_t location;
  float level;
  int id;
};

struct __declspec(align(4)) zombieBoxWeapon_t
{
  unsigned __int16 weaponNameIndex;
  const WeaponVariantDef *pWeapDef;
  bool bIsDualWield;
};

struct dynent_field_s
{
  const char *name;
  int ofs;
  fieldtype_t type;
  dynEntFieldType_t dynEntStruct;
  void (__cdecl *setter)(unsigned __int16, const dynent_field_s *);
  void (__cdecl *getter)(unsigned __int16, const dynent_field_s *);
};

struct cent_field_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(centity_t *, const cent_field_s *);
  void (__cdecl *getter)(centity_t *, const cent_field_s *);
};

struct soundRandom_t
{
  unsigned int soundAlias;
  const char *soundName;
  vec3_t pos;
  unsigned int minWait;
  unsigned int maxWait;
  int nextPlayTime;
  soundRandom_t *next;
};

union _lightLogicParam_t
{
  int i;
  float f;
  unsigned int s;
};

struct lightLogicParams_t
{
  _lightLogicParam_t p[16];
  vec4_t v[2];
};

struct _lightParams_t
{
  bool bPaused;
  vec4_t color;
  float intensity;
  float radius;
  float fovInner;
  float fovOuter;
  void (__cdecl *pLightLogic)(_mixerLight_t *, _lightParams_t *, const cg_t *, bool);
  lightLogicParams_t params;
  __int16 state;
  __int16 nextState;
  _mixerLight_t *pMixer;
};

struct _lightModel_t
{
  __int16 state;
  __int16 onModelIndex;
  __int16 offModelIndex;
  unsigned int tagName;
  const FxEffectDef *fxDef;
  centity_t *pParentEnt;
  centity_t *modelEntity[1];
  int fxId[1];
};

struct _mixerLight_t
{
  centity_t *pLight[1];
  _lightParams_t lightChannel[2];
  float ltrRampTime;
  float rtlRampTime;
  bool bActive;
  int startCrossfadeTime;
  unsigned __int8 mixPos;
  float mixVal;
  void (__cdecl *pMixerLogic)(_mixerLight_t *, const cg_t *);
  float rotateTime;
  int nextRotateEndTime;
  _lightLogicParam_t p[4];
  __int16 state;
  _lightModel_t spinnerModels;
  _lightModel_t lightModels;
  int exploderID;
  unsigned __int32 bHasExploder : 1;
};

struct listColumnInfo_t
{
  listColumnTypes_t type;
  float fWidth;
  const char *pszName;
  int iAlignment;
  scoreboardColumnType_t sbColumnType;
};

struct __declspec(align(4)) matchClientScoreData_t
{
  unsigned __int64 xuid;
  unsigned __int64 leagueTeamID;
  int rank;
  int prestige;
  ClientNum_t clientNum;
  Material *hRankIcon;
  char name[32];
  char clanAbbrev[8];
  score_s score;
  team_t team;
  bool isInfoValid;
  bool clanAbbrevEV;
};

struct __declspec(align(8)) matchScoreBoardData_t
{
  matchClientScoreData_t matchClientScoreData[18];
  scoreboardColumnType_t scoreboardColumnTypes[5];
  listColumnInfo_t inGameScoreboardColumnInfo[12];
  int numClients;
  int numAllies;
  int numInGameScoreboardColumns;
  unsigned __int64 leagueTeamIDs[10];
  int teamScores[10];
  int sortByNameIndexes[18];
  int sortByClientNumIndexes[18];
  char mapName[64];
  char gameType[32];
  bool isPlayerlistDirty;
  int numTeams;
  float xpScale;
};

struct scoreboardSortByClientNum_t
{
  int matchClientScoreDataIndex;
  ClientNum_t clientNum;
};

struct __declspec(align(4)) scoreboardSortByName_t
{
  const char *name;
  const char *clanAbbrev;
  int matchClientScoreDataIndex;
  ClientNum_t clientNum;
  bool clanAbbrevEV;
};

struct RumbleDevguiGraphInfo
{
  RumbleInfo *rumbleInfo;
  RumbleGraph *rumbleGraph;
};

struct RumbleGraph
{
  char graphName[64];
  vec2_t knots[16];
  int knotCount;
  DevGraph devguiGraph;
  RumbleDevguiGraphInfo devguiGraphInfo;
};

struct RumbleInfo
{
  int rumbleNameIndex;
  float duration;
  float range;
  RumbleGraph *highRumbleGraph;
  RumbleGraph *lowRumbleGraph;
  int fadeWithDistance;
  int broadcast;
  const dvar_t *durationDvar;
  const dvar_t *loopDvar;
};

struct ActiveRumble
{
  const RumbleInfo *rumbleInfo;
  int startTime;
  bool loop;
  RumbleSourceType sourceType;
  union {
      int entityNum;
      vec3_t pos;
  } source;
};

struct RumbleGlobals
{
  RumbleGraph graphs[96];
  RumbleInfo infos[48];
  ActiveRumble activeRumbles[32];
  vec3_t receiverPos;
  int receiverEntNum;
};

struct CG_PerfData
{
  int history[32];
  int count;
  int index;
  int instant;
  int total;
  float average;
  float variance;
  int min;
  int max;
};

struct CG_PerfInfo
{
  bool initialized;
  CG_PerfData frame;
  CG_PerfData script;
  CG_PerfData script_devblocks;
  CG_PerfData cscript;
  CG_PerfData server;
  CG_PerfData script_opcodes;
  CG_PerfData script_threads;
  CG_PerfData cscript_opcodes;
  CG_PerfData cscript_threads;
  CG_PerfData renderExec;
  CG_PerfData renderSwap;
};

struct TargetHighlightParam
{
  bool rangeFinderEnabled;
  float highlightSize;
  float maxHighlightSize;
  float activeHalfWidth;
  float activeHalfHeight;
};

struct BattleChatterParams
{
  unsigned __int8 WhichSoundIsPlaying;
  unsigned int SecondAlias;
  int EntityNum;
  LocalClientNum_t LocalClientNum;
  int CurrentPlayingSound;
  vec3_t SndOrigin;
};

struct __declspec(align(2)) RBWaypoint
{
  vec3_t pos;
  Material *material;
  GfxColor color;
  float radius;
  bool fixedSize;
  bool alignBottom;
  bool forceNear;
};

struct cg_hudelem_t
{
  float x;
  float y;
  float rotation;
  float width;
  float height;
  char hudElemLabel[256];
  float labelWidth;
  char hudElemText[256];
  float textWidth;
  Font_s *font;
  float fontScale;
  float fontHeight;
  vec4_t color;
  int timeNow;
};

struct DelayListInfo
{
  centity_t *head;
  centity_t *latest;
  int size;
};

struct EffectFile
{
  const char *nonflesh[21][32];
  const char *flesh[21][4];
};

struct cg_vertex_t
{
  vec2_t position;
  vec4_t color;
  vec2_t texCoord;
};

struct lagometer_t
{
  int frameSamples[128];
  int frameCount;
  int snapshotFlags[128];
  int snapshotSamples[128];
  int entitySamples[128];
  int changedEntitySamples[128];
  int archivedEntitySamples[128];
  int serverBandwidth[128];
  int killcamTimes[128];
  int snapshotCount;
};

struct PlayerDetails
{
  char fullDisplayName[38];
  char clanDisplayName[7];
  char gamerTag[32];
  unsigned int fullDisplayNameLength;
  unsigned int clanDisplayLength;
  unsigned int gamerTagDisplayLength;
  bool inView;
  int inViewStartTime;
  int inViewLastTime;
};

struct DrawNameEntity
{
  int entnum;
  float alpha;
  team_indicator teamIndicator;
  float dist;
};

struct CenterPrint
{
  int time;
  char text[1024];
  int priority;
};

struct ScreenBlur
{
  BlurPriority priority;
  BlurTime time;
  int timeStart;
  int timeEnd;
  float start;
  float end;
  float radius;
};

struct ScreenBurn
{
  int startTime;
  int endTime;
  LocalClientNum_t localClientNum;
};

struct RopeRenderInfo
{
  VisualRope ropes[96];
  int ropeCount;
};

struct RopeGenerateVertsCmd
{
  RopeRenderInfo *ropeInfo;
  LocalClientNum_t localClientNum;
  vec3_t vieworg;
  vec3_t viewaxis[3];
};

struct HudGrenade
{
  vec3_t origin;
  float predicted_dmg_ratio;
  float predicted_time_ratio;
  Material *material;
};

struct CompassActor
{
  int lastUpdate;
  vec2_t lastPos;
  vec2_t lastEnemyPos;
  vec2_t satelliteEnemyPos;
  float lastYaw;
  float sattelitePingYaw;
  int pingTime;
  int beginFadeTime;
  int beginShoutCasterFadeTime;
  int beginRadarFadeTime;
  int beginSatelliteFadeTime;
  int beginStaticImageFadeTime;
  int beginVoiceFadeTime;
  unsigned int perks[2];
  unsigned __int8 needsRevive : 1;
  unsigned __int8 gpsJammerActive : 1;
  unsigned __int8 inVehicle : 1;
  unsigned __int8 enemy : 1;
  int sensorGrenadePingTime;
  float currentFadeTimeAmount;
};

struct __declspec(align(4)) CompassFakeFire
{
  vec2_t pos;
  float yaw;
  int entityNum;
  int beginFadeTime;
  bool enemy;
  bool satellite;
};

struct CompassVehicle
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  float turretYaw;
  team_t team;
  int ownerIndex;
};

struct __declspec(align(4)) CompassDogs
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
};

struct __declspec(align(4)) CompassTurrets
{
  int entityNum;
  int lastUpdate;
  int beginFadeTime;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
  bool firing;
};

struct CompassArtillery
{
  vec2_t pos;
  vec2_t realPos;
  int fireTime;
};

struct CompassHelicopter
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
};

struct CompassGuidedMissile
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  bool isDrone;
  team_t team;
  int ownerIndex;
};

struct CompassObituary
{
  vec2_t pos;
  int updateTime;
};

struct __declspec(align(4)) CompassZombie
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
};

struct cgCloudLayer_t
{
  XModel *model;
  float cloudCover;
  float minHeight;
  float maxHeight;
  float minSpeed;
  float maxSpeed;
  float radius;
};

struct cgCloud_t
{
  vec3_t pos;
  float speed;
  float qsin;
  float qcos;
  cgCloudLayer_t *layer;
};

struct CameraShake
{
  int time;
  float scale;
  float length;
  float radius;
  vec3_t src;
  float size;
  float rumbleScale;
};

struct CameraShakeSet
{
  CameraShake shakes[4];
  float phase;
};

struct ExtraCamDebugOrientation
{
  vec3_t pos;
  vec3_t viewAngles;
};

struct punctuation_s
{
  char *p;
  int n;
  punctuation_s *next;
};

struct __declspec(align(8)) token_s
{
  char string[1024];
  int type;
  int subtype;
  unsigned int intvalue;
  long double floatvalue;
  char *whitespace_p;
  char *endwhitespace_p;
  int line;
  int linescrossed;
  token_s *next;
};

struct __declspec(align(8)) script_s
{
  char filename[64];
  char *buffer;
  char *script_p;
  char *end_p;
  char *lastscript_p;
  char *whitespace_p;
  char *endwhitespace_p;
  int length;
  int line;
  int lastline;
  int tokenavailable;
  int flags;
  punctuation_s *punctuations;
  punctuation_s **punctuationtable;
  token_s token;
  script_s *next;
};

struct define_s
{
  char *name;
  int flags;
  int builtin;
  int numparms;
  token_s *parms;
  token_s *tokens;
  define_s *next;
  define_s *hashnext;
};

struct indent_s
{
  int type;
  parseSkip_t skip;
  script_s *script;
  indent_s *next;
};

struct source_s
{
  char filename[64];
  char includepath[64];
  punctuation_s *punctuations;
  script_s *scriptstack;
  token_s *tokens;
  define_s *defines;
  define_s **definehash;
  indent_s *indentstack;
  int skip;
  token_s token;
};

struct directive_s
{
  char *name;
  int (__cdecl *func)(source_s *);
};

struct __declspec(align(8)) value_s
{
  int intvalue;
  long double floatvalue;
  int parentheses;
  value_s *prev;
  value_s *next;
};

struct operator_s
{
  int op;
  int priority;
  int parentheses;
  operator_s *prev;
  operator_s *next;
};

struct unlockMapping_t
{
  const char *name;
  const char *stringRef;
};

struct unlockableItemsDataShared
{
  unlockMapping_t unlockMappings[20];
  int itemGroupToUnlock[20];
  int itemGroupCount[20];
};

struct __declspec(align(4)) FactionData
{
  vec3_t factionColor[10];
  bool initialized;
};

struct WeaponAttachmentUniqueFull
{
  WeaponAttachmentUnique attachment;
  const char *szXAnims[88];
  unsigned __int16 hideTags[32];
  float locationDamageMultipliers[21];
};

struct AnimStateDefProperty
{
  const char *name;
  int flag;
  void (__cdecl *simpleCallback)(AnimState *, int);
  void (__cdecl *tokenizeCallback)(AnimState *, const char **, char *, const char *);
};

struct AimTarget
{
  int entIndex;
  float worldDistSqr;
  vec3_t mins;
  vec3_t maxs;
  vec3_t velocity;
};

struct AimTargetGlob
{
  AimTarget targets[64];
  int targetCount;
};

struct __declspec(align(8)) AimAssistPlayerState
{
  vec3_t origin;
  vec3_t viewangles;
  vec3_t velocity;
  vec3_t linkAngles;
  int eFlags;
  int linkFlags;
  int pm_flags;
  int pm_type;
  __int64 weapFlags;
  int weaponstate;
  int speed;
  float fWeaponPosFrac;
  float viewHeightCurrent;
  Weapon weapon;
  Weapon meleeWeapon;
  bool hasAmmo;
  bool isDualWielding;
  bool targetAssistDisabled;
  bool onMovingPlatform;
};

struct AimTweakables
{
  float slowdownRegionWidth;
  float slowdownRegionHeight;
  float autoAimRegionWidth;
  float autoAimRegionHeight;
  float autoMeleeRegionWidth;
  float autoMeleeRegionHeight;
  float lockOnRegionWidth;
  float lockOnRegionHeight;
};

struct __declspec(align(4)) AimScreenTarget
{
  int entIndex;
  vec2_t clipMins;
  vec2_t clipMaxs;
  vec3_t aimPos;
  vec3_t velocity;
  vec3_t origin;
  float distSqr;
  float crosshairDistSqr;
  bool aimPosValid;
};

struct /*__cppobj*/ AimAssistGlobals
{
  AimAssistPlayerState ps;
  LocalClientNum_t localClientNum;
  bool initialized;
  AimTweakables tweakables;
  vec3_t viewOrigin;
  vec3_t viewAngles;
  vec3_t viewAxis[3];
  float fovTurnRateScale;
  float fovScaleInv;
  float adsLerp;
  float pitchDelta;
  float yawDelta;
  float screenWidth;
  float screenHeight;
  __declspec(align(16)) vec4_t screenMtx[4];
  vec4_t invScreenMtx[4];
  AimScreenTarget screenTargets[64];
  int screenTargetCount;
  int autoAimTargetEnt;
  bool autoAimPressed;
  bool autoAimActive;
  float autoAimPitch;
  float autoAimPitchTarget;
  float autoAimYaw;
  float autoAimYawTarget;
  bool autoAimJustGotTarget;
  bool autoAimHasRealTarget;
  bool aimSlowdownActive;
  int aimSlowdownTargetEnt;
  int autoMeleeTargetEnt;
  eAutoMeleeState autoMeleeState;
  float autoMeleePitch;
  float autoMeleePitchTarget;
  float autoMeleeYaw;
  float autoMeleeYawTarget;
  int lockOnTargetEnt;
  bitarray<64> prev_button_bits;
  bool overrideSnapWidthAndLerp;
  float overrideAutoaimLerpValue;
  float overrideAutoaimWidthValue;
  float inputIdleTime;
};

struct /*__cppobj*/ tlPcQPF
{
};

struct jqProfEvent
{
  unsigned __int64 ThreadId;
  unsigned __int64 Tick;
  unsigned int Color;
  unsigned int Pad[3];
  char Description[96];
};

struct jqProfThread
{
  unsigned __int64 ThreadId;
  char Name[120];
  int StackLevel;
  jqProfEvent *Stack[31];
};

struct jqProfInfo
{
  jqProfEvent *EventBuffer;
  jqProfEvent **EventCurPtr;
  int BufferSize;
  unsigned int Pad[1];
};


struct /*__cppobj*/ jqProfNamedEventMarker
{
};

struct broad_phase_prolog_task_input
{
  phys_vec3 *m_aabb_min;
  phys_vec3 *m_aabb_max;
};

struct /*__cppobj*/ gjk_sep_dir
{
};

volatile struct tagged_void_pointer_t
{
  void *m_ptr;
  unsigned int m_tag;
};

class bdChunk
{
public:
    struct bdChunkData
    {
        unsigned __int8 m_type;
        unsigned __int8 m_flags;
        unsigned __int16 m_length;
    };
};

class bdSequenceNumber
{
public:
  int m_seqNum;
};

template <typename T>
class bdFastArray
{
public:
  T* m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

class __declspec(align(4)) bdBitBuffer : bdReferencable
{
public:
  bdFastArray<unsigned char> m_data;
  unsigned int m_writePosition;
  unsigned int m_maxWritePosition;
  unsigned int m_readPosition;
  bool m_failedRead;
  bool m_typeChecked;
};

class bdMessage : bdReferencable
{
public:
  unsigned __int8 m_type;
  bdReference<bdBitBuffer> m_payload;
  bool m_payloadTypeChecked;
  bdReference<bdByteBuffer> m_unencPayload;
};

class bdDataChunk : bdChunk
{
public:
  bdReference<bdMessage> m_message;
  unsigned __int8 m_flags;
  unsigned __int16 m_seqNum;
};

template <typename T>
class bdLinkedList
{
    class Node {
        T m_data;
        Node* m_next;
        Node* m_prev;
    };
public:
    Node* m_head;
    Node* m_tail;
    unsigned int m_size;
};

class bdSAckChunk : bdChunk
{
    class bdGapAckBlock {
        unsigned int m_start;
        unsigned int m_end;
    };
public:
  enum bdSAckFlags {
    BD_SC_NO_FLAGS = 0x0,
  } m_flags;
  unsigned __int16 m_cumulativeAck;
  bdLinkedList<bdGapAckBlock> m_gaps;
  int m_windowCredit;
};

class bdReliableReceiveWindow
{
public:
  bdSequenceNumber m_newest;
  bdSequenceNumber m_lastCumulative;
  bdSequenceNumber m_lastDispatched;
  bdReference<bdDataChunk> m_frame[128];
  bool m_shouldAck;
  int m_recvWindowCredit;
  int m_recvWindowUsedCredit;
  bdReference<bdSAckChunk> m_sack;
};

class bdStopwatch
{
    unsigned __int64 m_start;
};

class bdReliableSendWindow
{
    class bdMessageFrame {
        bdReference<bdDataChunk> m_chunk;
        bdStopwatch m_timer;
        unsigned __int8 m_sendCount;
        unsigned __int8 m_missingCount;
        bool m_gapAcked;
    };
public:
  bdSequenceNumber m_lastAcked;
  bdSequenceNumber m_nextFree;
  float m_timeoutPeriod;
  unsigned __int8 m_retransmitCountThreshold;
  bdMessageFrame m_frame[128];
  int m_remoteReceiveWindowCredit;
  int m_flightSize;
  int m_partialBytesAcked;
  int m_slowStartThresh;
  int m_congestionWindow;
  bdStopwatch m_lastSent;
};

class bdMallocMemory
{
    struct bdMemoryChainElement {
        unsigned __int16 m_magic;
        unsigned int m_size;
        bool m_aligned;
        bdMemoryChainElement* m_prev;
        bdMemoryChainElement* m_next;
    };
};

struct /*__cppobj*/ bdCommerceItem : bdTaskResult
{
  unsigned __int64 m_inventoryItemId;
  unsigned __int64 m_ownerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_expiry;
  unsigned __int8 m_metaData[255];
  unsigned int m_metaDataSize;
};

struct /*__cppobj*/ __declspec(align(8)) bdCommerceGiftItem : bdTaskResult
{
  unsigned int m_giftId;
  unsigned __int64 m_recipientId;
  unsigned __int64 m_ownerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_expiry;
  unsigned __int8 m_metaData[255];
};

struct /*__cppobj*/ __declspec(align(8)) bdCommerceWriter : bdTaskResult
{
  unsigned __int64 m_writerID;
  unsigned int m_modDateTime;
  char m_writerName[256];
};

struct /*__cppobj*/ __declspec(align(8)) bdFacebookProfilePicture : bdTaskResult
{
  unsigned __int64 m_accountID;
  unsigned int m_pictureDataLength;
  unsigned __int8 m_pictureData[16384];
};

struct /*__cppobj*/ bdFacebookUserAttribute : bdTaskResult
{
  unsigned int m_name;
  char m_value[512];
};

struct /*__cppobj*/ bdFacebookAccount : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

struct /*__cppobj*/ bdFacebookAttachmentProperty : bdTaskResult
{
  char m_name[50];
  char m_value[70];
  char m_href[1024];
};

struct /*__cppobj*/ __declspec(align(8)) bdLink : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned int m_category;
  char m_linkCode[64];
};

struct bdAuthMigrateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

struct bdAuthChangeUserKeyCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

struct bdAuthChangeUserKeyPlainText
{
  unsigned __int64 m_userID;
};

struct bdAuthHostToServicePlainText
{
  unsigned __int64 m_licenseID;
};

struct bdAuthMigrateAccountCypherText
{
  unsigned int m_magicNumber;
  unsigned int m_oldTitleID;
  unsigned __int64 m_oldLicenseID;
};

struct bdAuthResetAccountCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

struct bdAuthCreateAccountCypherText
{
  unsigned int m_magicNumber;
  char m_username[64];
  char m_userKey[24];
};

struct bdAuthGetUsernamesForLicensePlainText
{
  unsigned __int64 m_licenseID;
};

struct bdAuthResetAccountPlainText
{
  unsigned __int64 m_userID;
};

struct bdAuthDeleteAccountCypherText
{
  unsigned int m_magicNumber;
};

struct bdAuthUserToServicePlainText
{
  unsigned __int64 m_userID;
};

struct bdAuthDeleteAccountPlainText
{
  unsigned __int64 m_userID;
};

struct bdAuthUserToHostPlainText
{
  unsigned __int64 m_userID;
  unsigned __int64 m_hostLicenseID;
};

struct bdAuthCreateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

class bdMarketplaceCurrency : bdTaskResult
{
public:
    unsigned __int8 m_currencyId;
    unsigned int m_value;
};

class bdMarketplaceSku : bdTaskResult
{
public:
  unsigned int m_skuId;
  unsigned int m_productId;
  unsigned __int8 m_isEnabled;
  unsigned __int8 m_skuData[64];
  unsigned __int8 m_skuDataSize;
  unsigned __int8 m_ignoreEntitlements;
  unsigned int m_saleStartDateTime;
  unsigned int m_saleEndDateTime;
  unsigned int m_rentalDuration;
  unsigned __int8 m_promotionalText[135];
  unsigned __int8 m_promotionalTextSize;
  unsigned int m_origSkuId;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  unsigned __int8 m_numPrices;
  bdMarketplaceCurrency m_skuPrices[10];
};

class bdMarketplaceProductItem : bdTaskResult
{
public:
    unsigned int m_itemId;
    unsigned int m_itemQuantity;
};

class bdMarketplaceProduct : bdTaskResult
{
public:
  unsigned int m_productId;
  unsigned __int8 m_productName[135];
  unsigned __int8 m_productNameSize;
  unsigned __int8 m_description[240];
  unsigned __int8 m_descriptionSize;
  unsigned __int8 m_productData[64];
  unsigned __int8 m_productDataSize;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  unsigned __int8 m_numItems;
  bdMarketplaceProductItem m_productItems[10];
  unsigned __int8 m_numEntitlements;
  unsigned int m_productEntitlements[4];
};

class __declspec(align(8)) bdMarketplaceEntitlement : bdTaskResult
{
public:
  unsigned __int64 m_playerId;
  unsigned __int16 m_numPlayerEntitlements;
  unsigned int m_playerEntitlements[1000];
};

class bdRichPresenceInfo : public bdTaskResult
{
public:
    bool m_online;
    unsigned char m_richPresence[32];
    unsigned int m_count;
};

class __declspec(align(8)) bdUserGroupList : bdTaskResult
{
public:
  unsigned __int64 m_userID;
  unsigned __int64 m_groupList[32];
  unsigned int m_groupCount;
};

class bdUserGroupInfo : bdTaskResult
{
public:
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
};

class __declspec(align(8)) bdUserGroupMembershipInfo : bdTaskResult
{
public:
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
  unsigned __int64 m_userID;
  __int16 m_userGroupMemberType;
};

class __declspec(align(4)) bdDTLSHeader
{
public:
    unsigned __int8 m_type;
    unsigned __int8 m_version;
    unsigned __int16 m_vtag;
    unsigned __int16 m_counter;
};

class bdDTLSCookieAck : bdDTLSHeader
{
public:
  unsigned __int8 m_ECCKey[100];
  bdSecurityID m_secID;
};

struct GfxDrawSurfList
{
  GfxDrawSurf *current;
  GfxDrawSurf *end;
};

struct GfxDelayedCmdBuf
{
  int primDrawSurfPos;
  unsigned int primDrawSurfSize;
  GfxDrawSurf drawSurfKey;
};

struct GfxBspDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

struct __declspec(align(4)) BspSurfRegion
{
  unsigned __int16 triSurfList[128];
  GfxBspDrawSurfData surfData;
  unsigned int triSurfCount;
  GfxDrawSurf prevDrawSurf;
  unsigned int sceneDrawSurfStage;
  bool isUsed;
};

struct BspSurfRegionSetupInfo
{
  eBspSurfRegionType bspRegionType;
  unsigned int sceneDrawSurfStage;
  unsigned int sceneDrawSurfMaxCount;
};

struct BspSurfRegions
{
  BspSurfRegion region[2];
};

struct __declspec(align(4)) GfxDrawMethod
{
  GfxDrawSceneMethod drawScene;
  unsigned __int8 baseTechType;
  unsigned __int8 emissiveTechType;
  unsigned __int8 litTechType[16][11];
};

struct GfxSModelDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

struct GfxSModelDrawSurfLightingData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurf[10];
};

struct GfxStaticModelId
{
  unsigned __int16 surfType;
  unsigned __int16 objectId;
};

struct GfxDrawConsts
{
  vec4_t outdoorLookupMatrix[4];
  GfxScaledPlacement identityPlacement;
};

struct mnode_load_t
{
  int cellIndex;
  int planeIndex;
  unsigned int children[2];
};

struct r_lightmapMerge_t
{
  unsigned __int8 index;
  vec2_t shift;
  vec2_t scale;
};

struct GfxBspLoad
{
  unsigned int bspVersion;
  const dmaterial_t *diskMaterials;
  unsigned int materialCount;
  vec3_t outdoorMins;
  vec3_t outdoorMaxs;
  r_lightmapMerge_t lmapMergeInfo[32];
};

struct GfxStaticModelSortModel
{
  const XModel *model;
};

struct r_globals_load_t
{
  int *cullGroupIndices;
  vec3_t *portalVerts;
  GfxAabbTree *aabbTrees;
  int aabbTreeCount;
  int nodeCount;
  mnode_load_t *nodes;
  int reflectionProbesLoaded;
  int staticModelReflectionProbesLoaded;
  GfxBspLoad load;
  GfxStaticModelSortModel *sortModels;
};

struct DiskSmodelLightmapVCInst
{
  int modelId;
  int colIndex;
  int colCount;
  unsigned int smid;
};

struct DiskSmodelLightmapVColor
{
  unsigned __int8 r;
  unsigned __int8 g;
  unsigned __int8 b;
  unsigned __int8 a;
};

struct DiskGfxSkyGridVolume
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 visibility;
};

struct GfxStaticModelCombinedInst
{
  GfxStaticModelDrawInst smodelDrawInst;
  GfxStaticModelInst smodelInst;
};

struct DiskGfxCell_Version21
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 aabbTreeIndex[2];
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
};

struct GfxPackedWorldVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedLmapCoords lmapCoord;
};

struct DiskGfxAabbTree
{
  unsigned int firstSurface;
  unsigned int surfaceCount;
  unsigned int childCount;
};

struct DiskGfxDummyReflectionProbe
{
  vec3_t origin;
  unsigned __int8 pixels[288];
};

struct DiskGfxCell_Version14
{
  vec3_t mins;
  vec3_t maxs;
  int aabbTreeIndex;
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
  int unused0;
  int unused1;
};

struct DiskGfxOutdoorBounds
{
  vec3_t bounds[2];
};

struct DiskLightingInfo
{
  unsigned int lightingFlags;
  int lightingQuality;
};

struct DiskTriangleSoup_Version8
{
  unsigned __int16 materialIndex;
  unsigned __int8 lightmapIndex;
  unsigned __int8 reflectionProbeIndex;
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

struct DiskGfxWorldFogVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  float fogTransitionTime;
  float baseDist;
  float halfDist;
  float baseHeight;
  float halfHeight;
  float sunFogPitch;
  float sunFogYaw;
  float sunFogInner;
  float sunFogOuter;
  vec3_t fogColor;
  float fogOpacity;
  vec3_t sunFogColor;
  float sunFogOpacity;
  unsigned int controlEx;
  unsigned int priority;
  vec3_t source;
  float inner;
  vec3_t direction;
  float outer;
  float fovInner;
  float fovOuter;
};

struct DiskGfxReflectionProbeVolumeData
{
  vec4_t volumePlanes[6];
};

struct DiskGfxReflectionProbe
{
  vec3_t origin;
  unsigned __int8 pixels[131232];
  DiskGfxReflectionProbeVolumeData probeVolumes[16];
  unsigned int probeVolumeCount;
  vec3_t lightingSH[9];
  char name[64];
};

struct DiskHeroOnlyLight
{
  unsigned __int8 type;
  unsigned __int8 unused[3];
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

struct DiskGfxOccluder
{
  char name[16];
  vec3_t pts[4];
};

struct DiskLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
};

struct DiskTriangleSoup
{
  unsigned __int16 materialIndex;
  unsigned __int8 lightmapIndex;
  unsigned __int8 reflectionProbeIndex;
  unsigned __int8 primaryLightIndex;
  bool hasPrimaryLightConflict;
  bool castsSunShadow;
  __int16 _unused;
  int vertexLayerData;
  unsigned int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

struct DiskGfxVolumePlane
{
  vec4_t plane;
};

struct DiskGfxLightCorona
{
  vec3_t origin;
  float radius;
  vec3_t color;
  float intensity;
};

struct DiskGfxWorldFogModifierVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  float transitionTime;
  float depthScale;
  float heightScale;
  vec4_t colorAdjust;
  unsigned int priority;
};

struct r_lightmapGroup_t
{
  int wideCount;
  int highCount;
};

struct GfxLightGridHeader
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 rowDataStart[8192];
};

struct DiskGfxPortal
{
  int planeIndex;
  int cellIndex;
  int firstPortalVertex;
  int portalVertexCount;
};

struct DiskGfxExposureVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  float exposure;
  float luminanceIncreaseScale;
  float luminanceDecreaseScale;
  float featherRange;
  float featherAdjust;
  vec4_t boundingSphere;
  unsigned int controlEx;
  unsigned int priority;
  vec3_t source;
  float inner;
  vec3_t direction;
  float outer;
  float fovInner;
  float fovOuter;
};

struct DiskLightRegion
{
  unsigned __int8 hullCount;
};

struct DiskLightRegionAxis
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

struct DiskGfxLutVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  int lutIndex;
  float lutTransitionTime;
  unsigned int priority;
};

struct DiskGfxShadowMapVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  unsigned int primaryLightTarget;
  unsigned int paddingforlater[2];
  unsigned int priority;
};

struct DiskTriangleSoup_Version12
{
  unsigned __int16 materialIndex;
  unsigned __int8 lightmapIndex;
  unsigned __int8 reflectionProbeIndex;
  int vertexLayerData;
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

struct __declspec(align(4)) DiskGfxStaticModelData
{
  unsigned int smid;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  unsigned __int8 primaryLightIndex;
  unsigned __int8 visibility;
  unsigned __int16 lightmapUVIndex;
};

struct GfxLightGridRow
{
  unsigned __int16 colStart;
  unsigned __int16 colCount;
  unsigned __int16 zStart;
  unsigned __int16 zCount;
  unsigned int firstEntry;
};

struct __declspec(align(4)) DiskGfxCell
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 aabbTreeIndex;
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
  unsigned __int8 reflectionProbeCount;
  unsigned __int8 reflectionProbes[64];
};

struct GfxBuffers
{
  GfxIndexBufferState dynamicIndexBufferPool[2];
  GfxVertexBufferState skinnedCacheVbPool[2];
  unsigned __int8 *skinnedCacheLockAddr;
  GfxVertexBufferState dynamicVertexBufferPool[2];
  ID3D11Buffer *particleCloudVertexBuffer;
  ID3D11Buffer *particleCloudIndexBuffer;
  int dynamicBufferFrame;
};

struct GfxParticleCloudVertex
{
  __int16 xyz[3];
  __int16 corner;
};

struct GfxDynamicIndices
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

struct CinematicFlagsFields
{
  unsigned __int16 initialized : 1;
  unsigned __int16 usingAlpha : 1;
  unsigned __int16 openPending : 1;
  unsigned __int16 opened : 1;
  unsigned __int16 isPreloading : 1;
  unsigned __int16 underrun : 1;
  unsigned __int16 active : 1;
  unsigned __int16 finishedNaturally : 1;
  unsigned __int16 pathInitialized : 1;
  unsigned __int16 padding : 9;
};

union CinematicFlags
{
  CinematicFlagsFields fields;
  unsigned __int16 packed;
};

struct MoviePlayerFunctions
{
  void (__cdecl *InitMemory)(void *, unsigned int, void *, unsigned int, unsigned int);
  void (__cdecl *UpdateMoviesAndImages)(bool);
  void (__cdecl *ForceRelinquishIO)();
  void (__cdecl *Destroy)();
  void *(__cdecl *OpenPath)(const char *, unsigned int);
  void *(__cdecl *OpenFromFastfile)(const char *, unsigned int);
  void (__cdecl *StartPlayback)(void *, unsigned int);
  void (__cdecl *StopPlayback)(void *);
  void (__cdecl *SetPaused)(void *, bool, bool);
  float (__cdecl *GetTimeRemaining)(void *);
  float (__cdecl *GetTimeElapsed)(void *);
  void (__cdecl *SetMovieClock)(void *, float);
  void (__cdecl *SetVolume)(void *, float);
  bool (__cdecl *IsUnderrun)(void *);
  bool (__cdecl *IsReadyToStart)(void *);
  unsigned int (__cdecl *GetMaxTextureBytesNeeded)();
  unsigned int (__cdecl *GetMainBytesNeeded)(unsigned int);
  const char *(__cdecl *GetLastError)();
};

struct CinematicInfo
{
  int id;
  void *movieHandle;
  char name[512];
  float playbackVolume;
  CIN_CALLBACK_INFO callbackInfo;
  unsigned int playbackFlags;
  CinematicFlags commonflags;
  unsigned int currentPaused;
  unsigned int targetPaused;
  int soundId;
  int nextSoundId;
  bool checkForNextSound;
  char soundAlias[256];
  MoviePlayerFunctions *moviePlayer;
  int getPathStreamId;
};

struct AsyncOpenData
{
  char localCinematicName[512];
  unsigned int localFlags;
  bool isNextBink;
  void *outMovieHandle;
};

struct CinematicGlob
{
  CinematicInfo current;
  CinematicInfo queue[6];
  int numQueued;
  int nextReservedId;
  int nextNormalId;
  int openRequestId;
  int nextOpenRequestId;
  int framesStopped;
  void *memPool;
  void *ds;
  AsyncOpenData asyncOpenData;
  int lastTime;
  int gap[8];
  int gptr;
  int soundEndTimeMs;
  int soundTimeMs;
  int movieTimeMs;
  int timeCalcTimeMs;
  void *masterBufferBase;
  unsigned int bytesAllocated;
  void *activeMovie;
  void *nextSeamlessMovie;
};

struct RCinematicsBinkDuck
{
  unsigned int start;
  unsigned int end;
};

struct BINKRECT
{
  int Left;
  int Top;
  int Width;
  int Height;
};

struct BINKPLANE
{
  int Allocate;
  void *Buffer;
  unsigned int BufferPitch;
};

struct BINKFRAMEPLANESET
{
  BINKPLANE YPlane;
  BINKPLANE cRPlane;
  BINKPLANE cBPlane;
  BINKPLANE APlane;
};

struct BINKFRAMEBUFFERS
{
  int TotalFrames;
  unsigned int YABufferWidth;
  unsigned int YABufferHeight;
  unsigned int cRcBBufferWidth;
  unsigned int cRcBBufferHeight;
  unsigned int FrameNum;
  BINKFRAMEPLANESET Frames[2];
};

struct BUNDLEPOINTERS
{
  void *typeptr;
  void *type16ptr;
  void *colorptr;
  void *bits2ptr;
  void *motionXptr;
  void *motionYptr;
  void *dctptr;
  void *mdctptr;
  void *patptr;
};

struct BINKIO
{
  unsigned int (__stdcall *ReadHeader)(BINKIO *, int, void *, unsigned int);
  unsigned int (__stdcall *ReadFrame)(BINKIO *, unsigned int, int, void *, unsigned int);
  unsigned int (__stdcall *GetBufferSize)(BINKIO *, unsigned int);
  void (__stdcall *SetInfo)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
  unsigned int (__stdcall *Idle)(BINKIO *);
  void (__stdcall *Close)(BINKIO *);
  int (__stdcall *BGControl)(BINKIO *, unsigned int);
  BINK *bink;
  void (__stdcall *suspend_callback)(BINKIO *);
  int (__stdcall *try_suspend_callback)(BINKIO *);
  void (__stdcall *resume_callback)(BINKIO *);
  void (__stdcall *idle_on_callback)(BINKIO *);
  void (__stdcall *simulate_callback)(BINKIO *, unsigned int, unsigned int);
  unsigned int (__stdcall *timer_callback)();
  void (__stdcall *flipendian_callback)(void *, unsigned int);
  unsigned int (__stdcall *lockedadd_callback)(volatile unsigned int *, int);
  volatile unsigned int ReadError;
  volatile unsigned int DoingARead;
  volatile unsigned int BytesRead;
  volatile unsigned int Working;
  volatile unsigned int TotalTime;
  volatile unsigned int ForegroundTime;
  volatile unsigned int IdleTime;
  volatile unsigned int ThreadTime;
  volatile unsigned int BufSize;
  volatile unsigned int BufHighUsed;
  volatile unsigned int CurBufSize;
  volatile unsigned int CurBufUsed;
  volatile unsigned int Suspended;
  unsigned int align[3];
  volatile unsigned __int8 iodata[160];
};

struct __declspec(align(8)) BINK
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Frames;
  unsigned int FrameNum;
  unsigned int LastFrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int ReadError;
  unsigned int OpenFlags;
  unsigned int BinkType;
  unsigned int Size;
  unsigned int FrameSize;
  unsigned int SndSize;
  unsigned int FrameChangePercent;
  int NumTracks;
  int NumRects;
  BINKRECT FrameRects[8];
  unsigned __int64 FileOffset;
  unsigned int Highest1SecRate;
  unsigned int Highest1SecFrame;
  BINKFRAMEBUFFERS *FrameBuffers;
  void *MaskPlane;
  void *AsyncMaskPlane;
  void *InUseMaskPlane;
  void *LastMaskPlane;
  BINK *next_bink;
  void *compframe;
  int *trackindexes;
  unsigned int MaskPitch;
  unsigned int MaskLength;
  unsigned int LargestFrameSize;
  unsigned int InternalFrames;
  int async_in_progress[2];
  int Paused;
  unsigned int skippedlastblit;
  unsigned int soundon;
  unsigned int videoon;
  unsigned int needio;
  unsigned int compframesize;
  unsigned int compframekey;
  unsigned int playingtracks;
  unsigned int changepercent;
  int closing;
  BUNDLEPOINTERS bunp;
  BINKSND *bsnd;
  unsigned int *frameoffsets;
  void *binkaudiomem;
  unsigned int bink_unique;
  int in_bink_list;
  unsigned int decompwidth;
  unsigned int decompheight;
  unsigned int *tracksizes;
  unsigned int *tracktypes;
  int *trackIDs;
  void *preloadptr;
  int simulate;
  int adjustsim;
  unsigned int compframeoffset;
  unsigned int compframenum;
  BINKIO bio;
  unsigned __int8 pri_io_mutex[128];
  unsigned __int8 io_mutex[128];
  unsigned __int8 snd_mutex[128];
  unsigned __int8 *ioptr;
  unsigned int *rtframetimes;
  unsigned int *rtadecomptimes;
  unsigned int *rtvdecomptimes;
  unsigned int *rtblittimes;
  unsigned int *rtreadtimes;
  unsigned int *rtidlereadtimes;
  unsigned int *rtthreadreadtimes;
  unsigned int runtimeframes;
  int rtindex;
  unsigned int iosize;
  unsigned int numrects;
  unsigned int playedframes;
  unsigned int firstframetime;
  unsigned int totalmem;
  unsigned int soundskips;
  unsigned int startblittime;
  unsigned int startsynctime;
  unsigned int startsyncframe;
  unsigned int twoframestime;
  unsigned int slowestframetime;
  unsigned int slowestframe;
  unsigned int slowest2frametime;
  unsigned int slowest2frame;
  unsigned int timevdecomp;
  unsigned int timeadecomp;
  unsigned int timeblit;
  unsigned int timeopen;
  unsigned int fileframerate;
  unsigned int fileframeratediv;
  unsigned int lastblitflags;
  unsigned int lastdecompframe;
  unsigned int lastfinisheddoframe;
  unsigned int lastresynctime;
  unsigned int doresync;
  unsigned int skipped_status_this_frame;
  unsigned int very_delayed;
  unsigned int skippedblits;
  unsigned int skipped_in_a_row;
  unsigned int paused_sync_diff;
  unsigned int last_time_almost_empty;
  int allkeys;
  unsigned int lastfileread;
  unsigned int marker;
  void *alloccompframe;
  BINKFRAMEBUFFERS *allocatedframebuffers;
  unsigned int limit_speakers;
};

struct BINKSND
{
  unsigned __int8 *sndwritepos;
  unsigned int audiodecompsize;
  unsigned int sndbufsize;
  unsigned __int8 *sndbuf;
  unsigned __int8 *sndend;
  unsigned int sndcomp;
  unsigned __int8 *sndreadpos;
  unsigned int orig_freq;
  unsigned int freq;
  int bits;
  int chans;
  int BestSizeIn16;
  unsigned int BestSizeMask;
  int OnOff;
  unsigned int Latency;
  unsigned int VideoScale;
  unsigned int sndendframe;
  unsigned int sndpad;
  int sndprime;
  int ThreadServiceType;
  unsigned int SoundDroppedOut;
  unsigned int sndconvert8;
  unsigned __int8 snddata[256];
  unsigned int align;
  int (__stdcall *Ready)(BINKSND *);
  int (__stdcall *Lock)(BINKSND *, unsigned __int8 **, unsigned int *);
  int (__stdcall *Unlock)(BINKSND *, unsigned int);
  void (__stdcall *Volume)(BINKSND *, int);
  void (__stdcall *Pan)(BINKSND *, int);
  int (__stdcall *Pause)(BINKSND *, int);
  int (__stdcall *SetOnOff)(BINKSND *, int);
  void (__stdcall *Close)(BINKSND *);
  void (__stdcall *SpeakerVols)(BINKSND *, float *, unsigned int);
};

struct __declspec(align(2)) MovieSpecificInfo
{
  BINK *bink;
  unsigned int binkIOSize;
  unsigned int playbackFlags;
  float playbackVolume;
  bool started;
  bool paused;
  bool useAltBinkHunk;
};

struct BINKFRAMETEXTURES
{
  unsigned int Ysize;
  unsigned int cRsize;
  unsigned int cBsize;
  unsigned int Asize;
  ID3D11Texture2D *Ytexture;
  ID3D11Texture2D *cRtexture;
  ID3D11Texture2D *cBtexture;
  ID3D11Texture2D *Atexture;
};

struct BINKTEXTURESET
{
  BINKFRAMEBUFFERS bink_buffers;
  BINKFRAMETEXTURES textures[2];
  BINKFRAMETEXTURES tex_draw;
  ID3D11Buffer *vert_buf;
  ID3D11Buffer *const_buf;
  ID3D11ShaderResourceView *Yview;
  ID3D11ShaderResourceView *cBview;
  ID3D11ShaderResourceView *cRview;
  ID3D11ShaderResourceView *Aview;
};

struct CinematicTextureSet
{
  GfxImage drawImageY;
  GfxImage drawImageCr;
  GfxImage drawImageCb;
  GfxImage drawImageA;
};

struct __declspec(align(4)) CinematicHunk
{
  void *base;
  void *atFront;
  void *atBack;
  void *end;
  void *lastAllocPtr;
  bool fragmented;
};

struct __declspec(align(16)) CinematicGlob_Bink
{
  int readRequestId;
  MovieSpecificInfo current;
  MovieSpecificInfo next;
  __declspec(align(8)) BINKTEXTURESET binkTextureSet;
  CinematicTextureSet textureSet;
  int activeImageFrame;
  CinematicHunk masterHunk;
  CinematicHunk binkHunk;
  CinematicHunk altBinkHunk;
  bool altBinkHunkAlloced;
  bool nextBinkShouldUseAlt;
  int asyncThreadIndex;
  float framesPerMs;
  float timeInMsec;
  int lastUnpauseMovieTime;
  int lastUnpauseSysTime;
  float lastSeamlessBinkTimeMs;
};

struct BINKREALTIME
{
  unsigned int FrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int Frames;
  unsigned int FramesTime;
  unsigned int FramesVideoDecompTime;
  unsigned int FramesAudioDecompTime;
  unsigned int FramesReadTime;
  unsigned int FramesIdleReadTime;
  unsigned int FramesThreadReadTime;
  unsigned int FramesBlitTime;
  unsigned int ReadBufferSize;
  unsigned int ReadBufferUsed;
  unsigned int FramesDataRate;
};

struct GfxCachedShaderText
{
  const char *name;
  const char *text;
  int textSize;
};

struct GfxAssembledShaderTextFile
{
  unsigned int srcLine;
  unsigned int destLine;
  char fileName[256];
};

struct GfxAssembledShaderText
{
    char* string;
    unsigned int used;
    unsigned int total;
    unsigned int currentDestLine;
    bool overflowed;
    unsigned int fileCount;
    GfxAssembledShaderTextFile files[192];
};

struct __declspec(align(8)) SkinXModelCmd
{
  void *modelSurfs;
  const DObjAnimMat *mat;
  int surfacePartBits[5];
  vec3_t viewoffset;
  unsigned __int16 surfCount;
};

struct GfxModelRigidSurfacePiece
{
  GfxScaledPlacement placement;
  unsigned __int16 baseIndex;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 firstVertex;
};

struct __declspec(align(2)) GfxModelSurfaceInfo
{
    union {
        const DObjAnimMat* baseMat;
        const DObjAnimMat* baseMat_local;
    };
  unsigned __int8 boneIndex;
  unsigned __int8 boneCount;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 lightingHandle;
  unsigned __int8 dobjModelIndex;
};

struct GfxModelSkinnedSurface
{
  int skinnedCachedOffset;
  XSurface *xsurf;
  GfxModelSurfaceInfo info;
  GfxPackedVertex *skinnedVert;
};

struct GfxModelRigidSurface
{
  GfxModelSkinnedSurface surf;
  GfxModelRigidSurfacePiece pieces[1];
};

struct XModelRigidCullInfoContext
{
  int cullInfoPos;
  unsigned int cullInfoBufSize;
  unsigned __int8 cullFlags;
  unsigned int size;
};

struct DpvsDynamicCellCmd_Individual
{
  const DpvsPlane *planes;
  unsigned int cellIndex;
  unsigned __int16 viewIndex;
  unsigned __int8 planeCount;
  unsigned __int8 frustumPlaneCount;
};

struct DpvsDynamicCellCmd
{
  unsigned int numBatches;
  DpvsDynamicCellCmd_Individual batches[6];
};

struct BModelSurface
{
  GfxScaledPlacement *placement;
  GfxSurface *surf;
  ShaderConstantSet *shaderConstSet;
};

struct DpvsCellCmd
{
  unsigned __int8 type;
  unsigned __int8 viewIndex;
  unsigned __int8 planeCount;
  unsigned __int8 frustumPlaneCount;
  const DpvsPlane *planes;
  union {
      const GfxCell* cell;
      const GfxCell* cell_local;
      unsigned int cellIndex;
  };
  unsigned __int16 cachedCellIndex;
  unsigned __int16 cachedCellCount;
};

struct FilterEntInfo
{
  LocalClientNum_t localClientNum;
  unsigned int entnum;
  GfxEntCellRefInfo info;
  unsigned int cellOffset;
};

struct __declspec(align(2)) AddSceneEntSurfsCmd
{
  const GfxLight *visibleLights;
  int visibleLightCount;
  vec4_t *dynamicSpotLightPlanes;
  const GfxViewParms *viewParms;
  GfxDrawSurf **drawSurfs;
  GfxDrawSurf **lastDrawSurfs;
  void *sceneEnts;
  unsigned __int8 *sceneEntVisData;
  unsigned __int8 *sceneEntVisDataSunShadow0;
  unsigned __int8 *sceneEntVisDataSunShadow1;
  unsigned int sceneEntStart;
  unsigned int sceneEntCount;
  bool isExtraCamera;
  bool sonarUseThermalMaterial;
  bool lightmapOnlyEntSurfs;
};

struct DpvsPlanes
{
  const DpvsPlane *planes;
  int count;
};

struct DpvsClipPlanes
{
  DpvsPlane planes[16];
  unsigned int count;
};

struct GfxCmdBufContext
{
    union {
        struct {
            GfxCmdBufSourceState* source;
            GfxCmdBufState* state;
        };
        struct {
            GfxCmdBufSourceState* source;
            GfxCmdBufState* state;
        } local;
    };
};

struct BspTriangleBatch_t
{
  unsigned __int16 triCount;
  unsigned __int16 vertexCount;
  int baseIndex;
  int vertexDataOffset0;
};

struct GfxTrianglesDrawStream
{
  const unsigned int *primDrawSurfPos;
  unsigned int surfCount;
  const unsigned __int16 *surfList;
  const GfxTexture *reflectionProbeTexture;
  const GfxTexture *lightmapSecondaryTexture;
  unsigned int customSamplerFlags;
  GfxTexture *whiteTexture;
  GfxCmdBufContext context;
  GfxSurface *surfaces;
};

struct DrawLitWorkerCmd
{
  const GfxBackEndData *data;
  GfxWorkerData *workerData;
  GfxViewInfo *viewInfo;
  const GfxDrawSurfListInfo *drawList;
  unsigned __int8 cmdBufPartitionIndex;
  unsigned __int8 cmdBufPartitionCount;
  unsigned __int8 cmdBufType;
  unsigned __int8 drawListType;
};

struct SunShadowMapUserData
{
  const GfxSunShadowPartition *partition;
  const GfxDrawSurfListInfo *drawList;
};

struct /*__cppobj*/ GfxSortDrawSurfsInterface
{
};

struct /*__cppobj*/ GfxReverseSortDrawSurfsInterface
{
};

struct GPUTimeStamp
{
  ID3D11Query *disjoint;
  ID3D11Query *beginQuery;
  ID3D11Query *endQuery;
  GPUTimeStamp *next;
};

struct PerfTimerStyle
{
  Font_s *font;
  float fontWidth;
  float fontHeight;
  PerfTimerDisplayMode displayMode;
  PerfTimerDisplayType displayType;
  float (__cdecl *convertTime)(unsigned int);
  unsigned int timerCount;
  unsigned int timerNameCharCount;
  const char **timerNames;
  const GfxColor *timerColors;
  float totalBarY;
  float budgetMs;
  float budgetPixels;
  unsigned int bucketCount;
  const char **bucketNames;
};

struct PerfTimer
{
  unsigned int beginTime;
  unsigned int totalTime;
  PerfTimer *parent;
  PerfTimer *nextSibling;
  bool hasChild;
  bool isActive;
  bool hide;
  unsigned __int8 bucket;
};

struct PerfTimerFrame
{
  unsigned int beginTime;
  unsigned int totalTime;
  PerfTimer *timers[80];
};

struct PerfTimerFrameHistory
{
  unsigned int currentFrame;
  unsigned int frameCount;
  PerfTimerFrame frames[64];
};

class GPUTimer : public PerfTimer
{
public:
    GPUTimeStamp* firstTimeStamp;
    GPUTimeStamp* currentTimeStamp;
    int adjustTime;
};

struct GPUTimerFrame
{
  unsigned int frameIndex;
  unsigned int beginTime;
  unsigned int totalTime;
  bool isCurrent;
  GPUTimer timers[40];
};

struct ImageList
{
  unsigned int count;
  GfxImage *image[5312];
};

struct BuiltinImageConstructorTable
{
  const char *name;
  void (__cdecl *LoadCallback)(GfxImage *);
};

struct GfxImageFileHeader
{
  char tag[3];
  unsigned __int8 version;
  unsigned __int8 format;
  unsigned __int8 flags;
  __int16 dimensions[3];
  float gamma;
  unsigned __int8 maxGlossForMip[16];
  int fileSizeForPicmip[8];
};

struct GfxRawPixel
{
  unsigned __int8 r;
  unsigned __int8 g;
  unsigned __int8 b;
  unsigned __int8 a;
};

struct GfxRawImage
{
  char name[64];
  bool hasAlpha;
  int width;
  int height;
  float gamma;
  unsigned __int8 flags;
  GfxRawPixel *pixels;
};

union ddscolor_t
{
    struct {
        unsigned __int16 b : 5;
        unsigned __int16 g : 6;
        unsigned __int16 r : 5;
    } c;
    unsigned __int16 rgb;
};

struct DdsBlock_Dxt1_t
{
    ddscolor_t color0;
    ddscolor_t color1;
    unsigned __int8 bits[4];
};

struct DdsBlock_Dxt3_t
{
    unsigned __int8 alpha[8];
    DdsBlock_Dxt1_t color;
};

struct DdsBlock_Dxt5_t
{
  unsigned __int8 alpha0;
  unsigned __int8 alpha1;
  unsigned __int8 alpha[6];
  DdsBlock_Dxt1_t color;
};

struct GfxMetrics
{
  unsigned __int16 cubemapShotRes;
  unsigned __int16 cubemapShotPixelBorder;
};

struct GfxAssets
{
  ID3D11Query *pixelCountQuery[4];
};

struct GfxWindowParms
{
  HWND__ *hwnd;
  int hz;
  bool fullscreen;
  int x;
  int y;
  int sceneWidth;
  int sceneHeight;
  int displayWidth;
  int displayHeight;
};

struct GfxGammaRamp
{
  unsigned __int16 entries[256];
};

struct LightGlobals
{
  int defCount;
  GfxLightDef *defs[64];
};

struct LightDefCopyConfig
{
  unsigned __int8 *dest;
  unsigned int zoom;
};

struct FxWorldMarkPoint
{
  vec3_t xyz;
  vec3_t vertWeights;
};

struct MarkModelCoreContext
{
  MarkInfo *markInfo;
  GfxMarkContext *markContext;
  vec3_t markOrigin;
  vec3_t markDir;
  const MarkClipPlaneSet *clipPlanes;
  const vec3_t *transformMatrix;
  const vec3_t *transformNormalMatrix;
};

struct FxModelMarkPoint
{
  vec3_t xyz;
  vec3_t vertWeights;
};

struct __declspec(align(4)) stream_dest_info_t
{
  const char *Usage;
  unsigned __int8 UsageIndex;
};

struct BuiltInMaterialTable
{
  const char *name;
  Material **material;
};

struct PerMapMaterialTable
{
  const char *name;
  Material **material;
};

struct $47CB43946259A206E475A5658CF0668D
{
  int techniqueSetCount;
  MaterialTechniqueSet *techniqueSetHashTable[2048];
};

struct stream_source_info_t
{
  unsigned __int8 Stream;
  unsigned __int8 Offset;
  unsigned __int8 Type;
};

struct MaterialList
{
  unsigned int count;
  MaterialMemory sorted[4992];
};

struct GfxShaderConstantBlock
{
  unsigned int count;
  unsigned __int16 dest[32];
  const float *value[32];
};

struct CodeSamplerSource
{
  const char *name;
  MaterialTextureSource source;
  const CodeSamplerSource *subtable;
  int arrayCount;
  int arrayStride;
};

struct CodeConstantSource
{
  const char *name;
  unsigned __int8 source;
  const CodeConstantSource *subtable;
  int arrayCount;
  int arrayStride;
};

struct ScriptableConstant
{
  unsigned __int8 source;
  const char *sourceName;
  unsigned int sourceNameHash;
};

struct MtlStateMapBitName
{
  const char *name;
  int bits;
};

struct MtlStateMapBitGroup
{
  const char *name;
  const MtlStateMapBitName *bitNames;
  int stateBitsMask[2];
};

struct CustomCodeConstantMapping
{
  unsigned __int16 cbuffer;
  unsigned __int16 dest;
  MaterialArgumentCodeConst codeConst;
};

struct MaterialString
{
  const char *string;
  unsigned int hash;
};

struct MaterialStateMapRule
{
  unsigned int stateBitsMask[2];
  unsigned int stateBitsValue[2];
  unsigned int stateBitsSet[2];
  unsigned int stateBitsClear[2];
};

struct MaterialStateMapRuleSet
{
  int ruleCount;
  MaterialStateMapRule rules[1];
};

struct MaterialStateMap
{
  const char *name;
  MaterialStateMapRuleSet *ruleSet[10];
};

struct MaterialTypeInfo
{
  const char *prefix;
  const char *techniqueSetPrefix;
  unsigned int prefixLen;
};

struct __declspec(align(4)) ShaderIndexRange
{
  unsigned int first;
  unsigned int count;
  bool isImplicit;
};

struct ShaderArgumentDest
{
  ShaderIndexRange indexRange;
  const char *paramName;
};

struct __declspec(align(4)) TechniqueNameControl
{
  const char *name;
  unsigned __int8 type;
  bool inUse;
};

struct __declspec(align(4)) ShaderUniformDef
{
    ShaderParamType type;
    const char* name;
    unsigned __int16 index;
    union {
        unsigned __int16 offset;
        struct {
            unsigned __int8 textureIndex;
            unsigned __int8 samplerIndex;
        };
    } resourceLocation;
    unsigned __int16 resourceSize;
    unsigned __int16 resourceBuffer;
    bool isTransposed;
    bool isAssigned;
};

struct ShaderVaryingDef
{
  const char *name;
  unsigned __int8 streamDest;
  unsigned __int8 resourceDest;
  bool isAssigned;
  bool isSpecialFragmentRegister;
};

struct ShaderParameterSet
{
  ShaderUniformDef uniformInputs[512];
  ShaderVaryingDef varyingInputs[512];
  ShaderVaryingDef outputs[16];
  unsigned int uniformInputCount;
  unsigned int varyingInputCount;
  unsigned int outputCount;
};

struct ShaderArgumentSource
{
  ShaderIndexRange indexRange;
  unsigned __int16 type;
  union {
      const float* literalConst;
      unsigned __int16 codeIndex;
      const char* name;
  } u;
};

struct VertexConstantMapping
{
  unsigned __int16 type;
  unsigned __int16 dest;
  MaterialArgumentCodeConst codeConst;
};

struct VertexConstantMappingEntry
{
  unsigned __int8 value;
  unsigned __int8 materialType;
  VertexConstantMapping *mappingArray;
  unsigned int mappingCount;
};

struct GfxMeshGlobals
{
  GfxQuadMeshData fullSceneViewMesh[4];
};

struct ModelList
{
  int count;
  XModel *sorted[2048];
};

struct GfxLightingSHAndVis
{
  GfxLightingSH sh;
  float vis;
};

struct GfxModelLightGlob
{
  float invImageHeight;
  unsigned int baseIndex;
  unsigned int totalEntryLimit;
  unsigned int entryBitsY;
  unsigned int imageHeight;
  const GfxEntity *entities;
  unsigned int modFrameCount;
  GfxImage *image;
  unsigned int xmodelEntryLimit;
  GfxLightingInfo *lightingInfo;
  vec3_t *lightingOrigins;
  GfxLightingSHAndVis *lightingSHAndVis;
  int allocModelFail;
  unsigned int *pixelFreeBits[4];
  unsigned int *prevPrevPixelFreeBits;
  unsigned int *prevPixelFreeBits;
  unsigned int *currPixelFreeBits;
  unsigned int pixelFreeBitsSize;
  unsigned int pixelFreeBitsWordCount;
  unsigned int pixelFreeRover;
  unsigned __int8 *buffer;
  int currentImage;
  ID3D11Texture3D *stagingImages[2];
  D3D11_MAPPED_SUBRESOURCE lockedBox;
};

struct GfxSmodelLightGlob
{
  unsigned __int16 freeableHandles[7680];
  unsigned int lightingBits[512];
  struct {
      unsigned __int16 smodelIndex[7680];
      unsigned int usedFrameCount[7680];
      unsigned int entryLimit;
      unsigned int assignedCount;
      unsigned int freeableCount;
      unsigned int frameCount;
      int anyNewLighting;
      unsigned int pad[27];
  } local;
};

struct /*__cppobj*/ Sse_SkinVertex_0
{
};

struct SseMatrix
{
  __m128 col0;
  __m128 col1;
  __m128 col2;
  __m128 col3;
};

struct /*__cppobj*/ Sse_SkinVertex_1
{
};

struct /*__cppobj*/ Sse_SkinVertex_2
{
};

struct GfxPackedVertexNormal
{
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

struct /*__cppobj*/ Sse_SkinVertex_3
{
};

struct OutdoorGlob
{
  vec3_t bbox[2];
  vec3_t scale;
  vec3_t invScale;
  vec3_t add;
  unsigned __int8 *pic;
};

struct GfxDecodedLightGridColors
{
  vec4_t rgb[56];
};

struct GfxShadowedLightEntry
{
  unsigned __int8 shadowableLightIndex;
  bool isFadingOut;
  float fade;
};

struct GfxShadowedLightHistory
{
  GfxShadowedLightEntry entries[4];
  unsigned int entryCount;
  unsigned int lastUpdateTime;
};

struct GfxCandidateShadowedLight
{
  unsigned int shadowableLightIndex;
  float score;
};

struct GfxCmdSaveScreen
{
  GfxCmdHeader header;
  int screenTimerId;
};

struct GfxCmdStretchPicRotateXY
{
  GfxCmdHeader header;
  const Material *material;
  float x;
  float y;
  float w0;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
  float rotation;
};

struct GfxCmdDrawUIQuadsReplaceImage
{
  GfxCmdHeader header;
  const Material *material;
  const Material *replacement;
  __int16 quadCount;
  unsigned __int8 stencilValue;
  struct {
      unsigned __int8 stencilWrite : 1;
      unsigned __int8 noclip : 1;
  } bits;
};

struct GfxCmdSaveScreenSection
{
  GfxCmdHeader header;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

struct GfxCmdSetViewport
{
  GfxCmdHeader header;
  GfxViewport viewport;
};

struct GfxCmdDrawFramed2D
{
  GfxCmdHeader header;
  float x;
  float y;
  float w;
  float h;
  float thicknessW;
  float thicknessH;
  float thicknessTex;
  int sides;
  GfxColor color;
  const Material *material;
};

struct GfxCmdResolveComposite
{
  GfxCmdHeader header;
  void (__cdecl *callback)(GfxImage *);
};

struct GfxCmdDrawText3D
{
  GfxCmdHeader header;
  vec3_t org;
  Font_s *font;
  vec3_t xPixelStep;
  vec3_t yPixelStep;
  GfxColor color;
  char text[4];
};

struct __declspec(align(2)) GfxCmdDrawText2D
{
  GfxCmdHeader header;
  int type;
  float x;
  float y;
  float w;
  float h;
  float rotation;
  Font_s *font;
  float xScale;
  float yScale;
  GfxColor color;
  int maxChars;
  int renderFlags;
  int cursorPos;
  char cursorLetter;
  GfxColor glowForceColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int fxRedactDecayStartTime;
  int fxRedactDecayDuration;
  const Material *fxMaterial;
  const Material *fxMaterialGlow;
  float padding;
  char text[3];
};

struct GfxCmdDrawQuadPic
{
  GfxCmdHeader header;
  const Material *material;
  vec2_t verts[4];
  float w;
  GfxColor color;
};

struct GfxCmdDrawEmblemLayer
{
  GfxCmdHeader header;
  const Material *material;
  const GfxImage *image;
  float outlineSize;
  float smoothSize;
  unsigned __int8 stencilValue;
  struct {
      unsigned __int8 stencilWrite : 1;
      unsigned __int8 noclip : 1;
  } bits;
  GfxQuad quad;
};

struct GfxCmdClearScreen
{
  GfxCmdHeader header;
  unsigned __int8 whichToClear;
  unsigned __int8 stencil;
  float depth;
  vec4_t color;
};

struct GfxCmdDrawPoints
{
  GfxCmdHeader header;
  __int16 pointCount;
  unsigned __int8 size;
  unsigned __int8 dimensions;
  GfxPointVertex verts[1];
};

struct GfxCmdSetMaterialColor
{
  GfxCmdHeader header;
  vec4_t color;
};

struct GfxCmdConstantSet
{
  GfxCmdHeader header;
  ShaderConstantSet scs;
};

struct __declspec(align(4)) GfxCmdDrawTriangles
{
  GfxCmdHeader header;
  const Material *material;
  unsigned __int8 techType;
  __int16 indexCount;
  __int16 vertexCount;
  const vec4_t xyzw;
  const vec3_t normal;
  const GfxColor color;
  const vec2_t st;
};

struct GfxCmdSetCustomConstant
{
  GfxCmdHeader header;
  unsigned int type;
  vec4_t vec;
};

struct GfxCmdDrawUITriangles
{
  GfxCmdHeader header;
  const Material *material;
  __int16 triCount;
  unsigned __int8 stencilValue;
  struct {
      unsigned __int8 stencilWrite : 1;
      unsigned __int8 noclip : 1;
  } bits;
};

struct GfxCmdSetScissor
{
  GfxCmdHeader header;
  int enabled;
  GfxViewport scissor;
};

struct __declspec(align(4)) GfxCmdStretchComposite
{
  GfxCmdHeader header;
  const GfxImage *image;
  GfxQuad quad;
  unsigned __int8 stencilValue;
  struct {
      unsigned __int8 stencilWrite : 1;
      unsigned __int8 noclip : 1;
  } bits;
};

struct GfxCmdDrawLines
{
  GfxCmdHeader header;
  __int16 lineCount;
  unsigned __int8 width;
  unsigned __int8 dimensions;
  GfxPointVertex verts[2];
};

struct GfxCmdStretchPic
{
  GfxCmdHeader header;
  const Material *material;
  float x;
  float y;
  float w0;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

struct GfxCmdDrawQuadList2D
{
  GfxCmdHeader header;
  const Material *material;
  int quadCount;
  // not in the original but fuck it.
  GfxQuadVertex** verts;
};

struct GfxCmdStretchPicRotateST
{
  GfxCmdHeader header;
  const Material *material;
  float x;
  float y;
  float w;
  float h;
  float centerS;
  float centerT;
  float radiusST;
  float scaleFinalS;
  float scaleFinalT;
  GfxColor color;
  float rotation;
};

struct GfxCmdBlendSavedScreenFlashed
{
  GfxCmdHeader header;
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
};

struct GfxCmdDrawUIQuads
{
  GfxCmdHeader header;
  const Material *material;
  __int16 quadCount;
  unsigned __int8 stencilValue;
  struct {
      unsigned __int8 stencilWrite : 1;
      unsigned __int8 noclip : 1;
  } bits;
};

struct GfxCmdPCCopyImageGenMIP
{
  GfxCmdHeader header;
  void (__cdecl *callback)(void *);
  GfxImage *image;
  void *job;
};

struct GfxCmdBlendSavedScreenBlurred
{
  GfxCmdHeader header;
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

struct GfxCmdProjectionSet
{
  GfxCmdHeader header;
  GfxProjectionTypes projection;
};

struct GfxCmdDrawFullScreenColoredQuad
{
  GfxCmdHeader header;
  const Material *material;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

struct GfxCmdBeginView
{
  GfxCmdHeader header;
  GfxSceneDef sceneDef;
  const GfxViewParms *viewParms;
};

struct ExtraCamSettings
{
  bool enabled;
  int width;
  int height;
  int multiExtraCamWidth;
  int multiExtraCamHeight;
  int location;
};

struct /*__cppobj*/ GfxRenderTargetTexture
{
};

struct DrawSurfListInfoSetup
{
  int drawlist;
  int baseTechType;
  int cameraView;
  int depthHackList;
  OcclusionReportsMode occlusionReportsMode;
};

struct GfxDrawRecord
{
  GfxViewInfo *viewInfo;
  GfxBackEndData *data;
  unsigned int viewInfoIndex;
};

struct GfxDrawRecordGlob
{
  GfxDrawRecord records[4];
  unsigned int count;
  unsigned int frame;
};

struct __declspec(align(4)) DrawDepthWorkerCmd
{
  const GfxBackEndData *data;
  GfxWorkerData *workerData;
  GfxViewInfo *viewInfo;
  unsigned __int8 cmdBufType;
};

struct __declspec(align(4)) SceneEntCmd
{
  const GfxViewInfo *viewInfo;
  const GfxSunShadow *sunShadow;
  int sceneStage;
  bool sceneCalculatedSunShadow;
};

struct GfxSceneParms
{
  LocalClientNum_t localClientNum;
  float blurRadius;
  float adsZScale;
  float sunVisibility;
  float rimIntensity;
  vec4_t genericSceneVector0;
  vec4_t genericSceneVector1;
  vec4_t genericSceneVector2;
  vec4_t genericSceneVector3;
  vec4_t cameraVelocity;
  GfxDepthOfField dof;
  GfxLightScale charPrimaryLightScale;
  GfxFilm film;
  GfxBloom bloom;
  GfxCompositeFx flameFx;
  GfxReviveFx reviveFx;
  GfxCompositeFx waterSheetingFx;
  GfxDoubleVision doubleVision;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  bool isRenderingFullScreen;
  bool playerTeleported;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  const GfxLight *primaryLights;
  float sceneX;
  float sceneY;
  float sceneW;
  float sceneH;
};

struct $069481853E63AB7B456FCC17924CBF75
{
  unsigned __int8 *pixels[6];
  float *pixelsHDR[6];
  float *pixelsHDRcorrected[6];
};

union GfxShaderConstantState
{
    struct {
        MaterialArgumentCodeConst codeConst;
        unsigned int version;
    } fields;
    unsigned __int64 packed;
};

union DepthStencilBitsMask
{
    struct {
        unsigned int stateBits1;
        unsigned __int8 mask;
    };
    unsigned __int64 u;
};

struct IPakDataChunkHeader
{
  unsigned int countAndOffset;
  unsigned int commands[31];
};

struct StreamTempImage
{
  GfxImage *image;
  int allocID;
  int state;
};

struct StreamAllocGlob
{
  StreamTempImage tempImages[32];
};

struct ShadowGlobals
{
  const MaterialTechnique *defaultShadowCasterTechnique;
};

struct Ui3dTextureWindow
{
  GfxViewport vp;
  ScreenPlacement scrPlace;
  float normX;
  float normY;
  float normW;
  float normH;
  int numRenderCmds;
  int numRenderCmdsThatDrawsSomething;
};

struct XVertexInfo0
{
  unsigned __int16 boneOffset;
};

struct XVertexInfo3
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[3];
};

struct XVertexInfo2
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[2];
};

struct XVertexInfo1
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[1];
};

struct GfxDrawSurfListArgs
{
  GfxCmdBufContext context;
  unsigned int firstDrawSurfIndex;
  GfxDrawSurfListInfo *info;
};

struct GfxRenderCommandExecState
{
  const void *cmd;
};

struct r_backEndGlobals_t
{
  int glowCount;
  GfxImage *glowImage;
  GfxImage *godRaysImage;
  Font_s *debugFont;
  GfxFrameStats frameStatsMax;
};

struct Corona
{
  bool inUse;
  GfxLightCorona *info;
  int timeSinceSpawned;
  float currentVisibility;
  float targetVisibility;
  int hitNum;
  bool wasEverVisible;
  bool queryIssued[5];
  ID3D11Query *query[5];
  ID3D11Query *queryMax[5];
};

struct CoronaState
{
  unsigned int numActive;
  unsigned int numPending;
  Corona active[16];
  Corona pending[16];
};

struct DrawEmissiveFXCallbacUserData
{
  unsigned __int8 targetId;
  unsigned int drawListIndex;
};

struct __declspec(align(4)) GfxImageFilterPass
{
  const Material *material;
  float srcWidth;
  float srcHeight;
  int dstWidth;
  int dstHeight;
  int tapHalfCount;
  vec4_t tapOffsetsAndWeights[8];
  unsigned __int8 src;
  unsigned __int8 dst;
};

struct __declspec(align(4)) GfxImageFilter
{
  int passCount;
  GfxImageFilterPass passes[32];
  GfxImage *sourceImage;
  unsigned __int8 finalTarget;
};

struct OcclusionQuery
{
  bool enabled;
  bool error;
  bool isWorldPos;
  bool isValidPos;
  vec3_t position;
  float depthBias;
  float lastVisibility;
  int localClientNum;
  int hitNum;
  bool issued[2];
  ID3D11Query *query[2];
};

struct SpotShadowMapUserData
{
  const GfxSpotShadow *spotShadow;
  const GfxDrawSurfListInfo *drawList;
};

struct box
{
  int c0min;
  int c0max;
  int c1min;
  int c1max;
  int c2min;
  int c2max;
  int volume;
  int colorcount;
};

struct _HeapManager
{
  void *(__cdecl *pOpNew)(unsigned int);
  void (__cdecl *pOpDelete)(void *);
  _HeapManager::Block *head;
  _HeapManager::Block *tail;
  unsigned int blockLeft;
};

class AimInput
{
public:
    float deltaTime;
    float pitch;
    float pitchAxis;
    float pitchMax;
    float yaw;
    float yawAxis;
    float yawMax;
    float forwardAxis;
    float rightAxis;
    bitarray<64> button_bits;
    LocalClientNum_t localClientNum;
    const playerState_s* ps;
    float adsFrac;
};

const class cached_simplex_info
{
public:
    phys_vec3 m_indices[3];
};

class phys_mat44
{
public:
    phys_vec3 x;
    phys_vec3 y;
    phys_vec3 z;
    phys_vec3 w;
};

const class phys_gjk_geom
{
public:
    void set_simplex(const phys_vec3* simplex_inds, const int w_set, const phys_vec3* normal, cached_simplex_info* cache_info);
    double get_geom_radius();
    BOOL ray_cast(const phys_vec3* ray_pos, const phys_vec3* ray_dir, const float t_input, float* t_output, phys_vec3* hitn);
    const phys_vec3* support_only(const phys_vec3* xform, const phys_mat44* v);
};

class gjk_base_t : public phys_gjk_geom
{
public:
    __declspec(align(16)) phys_vec3 m_aabb_mn_loc;
    phys_vec3 m_aabb_mx_loc;
    unsigned int m_gjk_geom_id;
    const phys_mat44* m_xform_;
    gjk_base_t* m_next_geom;
    unsigned int m_flags;
    int stype;
    int m_contents;
};

class __declspec(align(8)) gjk_polygon_cylinder_t : public gjk_base_t
{
public:
    struct poly_verts
    {
        enum
        {
            NUM_QUAD_VERTS = 4
        };
        enum
        {
            NUM_VERTS_ = 12
        };
        float m_co[4];
        float m_si[4];
        int support(const phys_vec3* v);
        void get_co_si(const int i, float* co_, float* si_);
    };
    phys_vec3 m_center;
    float m_polygon_cylinder_radius;
    float m_capsule_radius;
    float m_half_height;
    float m_geom_radius;
    float m_head_offset;
    float m_foot_offset;
    int m_mode;
};

class gjk_collision_visitor
{
public:
    void get_local_query_aabb(vec3_t*, vec3_t*);
};

class phys_gjk_collision_info
{
public:
    phys_vec3 m_p1;
    phys_vec3 m_p2;
    phys_vec3 m_n;
};

class phys_gjk_info
{
    enum gjk_flags_e
    {
        FLAG_EXIT_ON_SEP_THRESH = 0x1,
        INTERSECTION_TEST_ONLY = 0x2,
        FLAG_TEST_CONVERGENCE = 0x4,
        CONTINUOUS_COLLISION = 0x8,
        FLAG_TEST_UD_LT_SP = 0x10,
        FLAG_IS_SEPARATED = 0x20,
        FLAG_GI_DANGEROUS = 0x40,
    };
    enum gjk_retval_e
    {
        GJK_SEPARATED = 0x0,
        GJK_VALID = 0x1,
        GJK_PENETRATING = 0x2,
        GJK_INVALID = 0x3,
    };
public:
    phys_mat44 cg2_to_cg1_xform;
    phys_vec3 m_cg1_relative_translation_loc;
    float m_continuous_collision_lambda;
    __declspec(align(16)) phys_gjk_collision_info cg1_cinfo_loc;
    phys_vec3 m_gjk_origin;
    phys_vec3 m_w_verts[4];
    phys_vec3 m_a_verts[4];
    phys_vec3 m_b_verts[4];
    phys_vec3 m_a_inds[4];
    phys_vec3 m_b_inds[4];
    phys_vec3 m_support_dir;
    float m_geom_radii_sum;
    int m_cc_reset_iter;
    int m_flags;
    int m_w_set;
    int m_last_w_set;
    int m_gjk_iter;
    float m_gjk_sep_thresh;
    float m_gjk_pen_thresh_sq;
    float m_upper_dist_sq;
    float m_lower_dist_sq;
    float m_dot_ij[4][4];
    struct phys_gjk_set_info {
        float m_lamda[4];
        int m_candidate;
    } m_set_list[16];
};

class phys_gjk_geom_id_pair_key
{
public:
    unsigned int m_id1;
    unsigned int m_id2;
};

class phys_gjk_cache_info
{
public:
    phys_vec3 m_support_dir;
    cached_simplex_info m_support_a;
    cached_simplex_info m_support_b;
    int m_support_count;
    phys_gjk_geom_id_pair_key m_key;
    unsigned int m_flags;
};

class __declspec(align(8)) phys_gjk_input
{
public:
    phys_vec3 m_cg1_translation;
    phys_vec3 m_cg2_translation;
    float m_start_time;
    float m_end_time;
    const phys_gjk_geom* gjk_cg1;
    const phys_gjk_geom* gjk_cg2;
    const phys_mat44* cg1_to_world_xform;
    const phys_mat44* cg2_to_world_xform;
    phys_gjk_cache_info* gjk_ci;
    float cg1_radius;
    float cg2_radius;
    float m_sep_thresh;
    bool m_intersection_test_only;
    bool m_continuous_collision;
};

class __declspec(align(8)) gjk_entity_info_t
{
public:
    phys_mat44 m_mat;
    enum ENTITY_TYPE {
        ET_GENT = 0x0,
        ET_CENT = 0x1,
        ET_DENT = 0x2,
        ET_GLASS = 0x3,
        ET_NONE = 0x4,
    } m_ent_type;
    const void* m_ent;
    int m_query_visitor_count;
};

class __declspec(align(16)) gjk_geom_info_t
{
public:
    phys_vec3 m_aabb_min;
    phys_vec3 m_aabb_max;
    gjk_base_t* m_cg;
    gjk_entity_info_t* m_ent_info;
    int m_query_visitor_count;
    float m_hit_time;
    gjk_geom_info_t* m_next_link;
    gjk_geom_info_t* m_total_next_link;
};

class __declspec(align(16)) gjk_trace_output_t
{
public:
    phys_vec3 m_hit_normal;
    phys_vec3 m_hit_point;
    phys_vec3 m_arm;
    float m_hit_time;
    float m_hit_dist;
    bool m_is_foot;
    gjk_geom_info_t* m_gi;
    gjk_trace_output_t* m_next_link;
};

template <typename T>
class phys_simple_allocator
{
    int m_count;
};

template <typename T>
class phys_inplace_avl_tree_node
{
    T* m_left;
    T* m_right;
    int m_balance;
};

template <typename T, typename TT, typename TTT>
class phys_inplace_avl_tree
{
    TTT* m_tree_root;
};

class phys_heap_gjk_cache_system_avl_tree
{
    class phys_gjk_cache_info_internal {
    public:
        struct avl_tree_accessor {
        };
        phys_inplace_avl_tree_node<phys_gjk_cache_info_internal> m_avl_tree_node;
        phys_gjk_cache_info_internal* m_next_gjk_ci;
    };
    phys_simple_allocator<phys_gjk_cache_info_internal> m_list_phys_gjk_cache_info_internal;
    phys_inplace_avl_tree<phys_gjk_geom_id_pair_key, phys_gjk_cache_info_internal, phys_gjk_cache_info_internal::avl_tree_accessor> m_search_tree;
    int m_max_num_gjk_ci;
    phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_list_head;
};

template <typename T>
class phys_link_list
{
public:
    T* m_first;
    T** m_last_next_ptr;
};

const class __declspec(align(16)) gjk_query_input
{
public:
    phys_vec3 m_cg_aabb_min;
    phys_vec3 m_cg_aabb_max;
    phys_vec3 m_cg_position;
    phys_vec3 m_cg_translation;
    phys_vec3 m_ac_eps_vec;
    int m_contents;
    int m_pass_entity_num;
    int m_pass_owner_num;
    bool m_is_server_thread;
    colgeom_visitor_inlined_t<300>* m_proximity_data;
    int m_proximity_mask;
    unsigned int m_gjk_query_flags;
    phys_link_list<gjk_geom_info_t> m_geom_skip_list;
};

class minspec_mutex
{
public:
    volatile unsigned int m_token;
    minspec_mutex();
    void Lock();
    void Unlock();
};

class minspec_read_write_mutex
{
public:
    volatile unsigned int m_count;
    minspec_read_write_mutex();
    void ReadLock();
    void ReadUnlock();
    void WriteLock();
    void WriteUnlock();
};

class bpei_database_id
{
public:
    unsigned int m_id1;
    unsigned int m_id2;
};

class broad_phase_environment_info
{
public:
    void* m_data;
    minspec_mutex m_mutex;
    unsigned int m_gjk_geom_id;
    broad_phase_environment_info* m_next_bpei;
    phys_inplace_avl_tree_node<broad_phase_environment_info> m_avl_tree_node;
    bpei_database_id m_database_id;
    struct avl_tree_accessor
    {
    };
};

class bpei_database_t
{
public:
    phys_inplace_avl_tree<bpei_database_id, broad_phase_environment_info, broad_phase_environment_info::avl_tree_accessor> m_bpei_map;
    phys_simple_allocator<broad_phase_environment_info> m_bpei_allocator;
    broad_phase_environment_info* m_bpei_list;
    minspec_read_write_mutex m_mutex;
};

class phys_transient_allocator
{
public:
    struct block_header
    {
        unsigned int m_block_size;
        unsigned int m_block_alignment;
        struct block_header* m_next_block;
    };
    block_header* m_first_block;
    char* m_cur;
    char* m_end;
    unsigned int m_total_memory_allocated;
    struct minspec_read_write_mutex m_mutex;
    void* m_slot_pool;
    enum
    {
        BLOCK_SIZE = 16384,
        BLOCK_ALIGNMENT = 4
    };
    void resize();
    void* mt_allocate_internal(const int size, const int alignment);
    phys_transient_allocator();
    ~phys_transient_allocator();
    void* allocate(const int size, const int alignment, const int no_error, char* error_msg);
    void* mt_allocate(const int size, const int alignment, const int no_error, char* error_msg);
    void  reset();
    struct allocator_state
    {
        struct phys_transient_allocator::block_header* m_first_block;
        char* m_cur;
        char* m_end;
        unsigned int m_total_memory_allocated;
    };
    const allocator_state capture_state();
    void reset_to_state(allocator_state* as);
};

struct cached_query_info_t
{
    phys_vec3 m_query_aabb_min;
    phys_vec3 m_query_aabb_max;
    int m_query_contents;
    unsigned int m_query_flags;
    void add_query(phys_vec3* query_aabb_min, phys_vec3* query_aabb_max, phys_vec3* extra, const int query_content, const unsigned int query_flags);
    bool is_subset(phys_vec3* query_aabb_min, phys_vec3* query_aabb_max, const int query_content, const unsigned int query_flags);
};

class gjk_query_output : public gjk_collision_visitor
{
public:
    __declspec(align(16)) phys_vec3 m_query_aabb_min;
    phys_vec3 m_query_aabb_max;
    phys_vec3 m_local_query_aabb_min;
    phys_vec3 m_local_query_aabb_max;
    const gjk_query_input* m_local_query_input;
    bpei_database_id m_local_database_id;
    broad_phase_environment_info* m_local_bpei;
    gjk_entity_info_t* m_local_ent_info;
    bpei_database_t m_bpei_database;
    phys_transient_allocator m_allocator;
    phys_transient_allocator::allocator_state m_allocator_state;
    int m_ent_count;
    int m_geom_count;
    gjk_geom_info_t* m_total_list_geom_info;
    phys_link_list<gjk_geom_info_t> m_list_geom_info;
    int m_query_visitor_count;
    int m_gent_query_visitor_count;
    int m_cent_query_visitor_count;
    int m_dent_query_visitor_count;
    cached_query_info_t m_cached_query_info;
    phys_vec3 m_accum_start_origin;
    cached_query_info_t m_accum_query_info;
    int m_total_query_count;
    int m_total_cached_query_count;
};

class __declspec(align(16)) gjkcc_info
{
public:
    phys_mat44 m_cg_to_world_xform;
    phys_vec3 m_cg_aabb_min;
    phys_vec3 m_cg_aabb_max;
    vec3_t m_mins;
    vec3_t m_maxs;
    phys_heap_gjk_cache_system_avl_tree m_gjk_cache;
    gjk_query_output m_gjk_query_output;
    int m_active;
    bool m_is_server_thread;
    gjk_base_t* m_cg_;
    vec3_t m_last_origin;

    void update_cg(int mins, const vec3_t* maxs, const vec3_t* force);
};

class __declspec(align(4)) gjkcc_info_database_t
{
    phys_inplace_avl_tree<unsigned int, generic_avl_map_node_t, generic_avl_map_node_t> m_map;
    int m_token;
    int m_gcci_count;
    bool m_is_server_thread;

    gjkcc_info* create_gjkcc_info(const gjkcc_input_t* gjkcc_in, const bool is_server_thread, const vec3_t* origin);
};

class __declspec(align(16)) gjk_trace_input_t
{
public:
    const gjk_base_t* m_cg;
    float m_gjk_ac_eps;
    bool m_keep_all_collisions;
    bool m_exit_on_penetration;
    float m_extra_time;
    float m_skip_sentients;
    phys_heap_gjk_cache_system_avl_tree* m_gjk_cache;
    gjk_query_output* m_query_output;
    gjkcc_info* m_gcci;
    gjk_query_input m_query_input;
    phys_transient_allocator* m_allocator;
};

class pml_t
{
public:
    vec3_t forward;
    vec3_t right;
    vec3_t up;
    float frametime;
    int msec;
    int walking;
    int groundPlane;
    int almostGroundPlane;
    trace_t groundTrace;
    float impactSpeed;
    vec3_t previous_origin;
    vec3_t previous_velocity;
    unsigned int holdrand;
};

class __declspec(align(4)) gjk_slide_move_input_t
{
public:
    const vec3_t* position;
    const vec3_t* velocity;
    int gravity;
    int has_gravity;
    const vec3_t* mins;
    const vec3_t* maxs;
    int tracemask;
    int clientnum;
    float frametime;
    bool do_step_down;
};

class veh_gjk_slide_move_input_t : gjk_slide_move_input_t
{
public:
    slide_move_params_t* m_params;
};

class ai_gjk_slide_move_input_t : gjk_slide_move_input_t
{
public:
    actor_physics_t* m_pPhys;
};

class player_gjk_slide_move_input_t : gjk_slide_move_input_t
{
public:
    pmove_t* pm;
};

class list_gjk_trace_output
{
public:
    phys_link_list<gjk_trace_output_t> m_list;
    gjk_trace_output_t* m_first_hit;
};

class __declspec(align(16)) GroundTrace
{
public:
    trace_t trace;
    vec3_t location;
    int onGround;
    int hasGround;
    int validGroundNormal;
};

class __declspec(align(4)) SunFlareDynamic
{
public:
    float flareIntensity;
    float sunVisibilityAdjust;
    float currentBlind;
    float currentGlare;
    int lastTime;
    float lastVisibility;
    float lastDot;
    unsigned __int16 occlusionQueryHandle;
};

class laser_cache_t
{
public:
    int valid;
    int entnum;
    int lastUsed;
    trace_t trace;
};

class pointtrace_t
{
public:
    TraceExtents extents;
    const IgnoreEntParams* ignoreEntParams;
    int contentmask;
    int bLocational;
    unsigned __int8* priorityMap;
};

class moveclip_t
{
public:
    vec3_t mins;
    vec3_t maxs;
    vec3_t outerSize;
    TraceExtents extents;
    int passEntityNum;
    int passOwnerNum;
    int contentmask;
    int(__cdecl* collide_entity_func)(int);
};

class XAnimClientNotify
{
public:
    const char* name;
    unsigned int notetrackName;
    unsigned int notifyType;
    unsigned int notifyName;
    float timeFrac;
};

class XAnimClientNotifyList
{
public:
    unsigned __int8 m_clientNotifyMemory[1280];
    int m_numNotifies;
};

struct __declspec(align(4)) RefString
{
    union
    {
        struct
        {
            unsigned __int32 refCount : 16;
            unsigned __int32 user : 8;
            unsigned __int32 byteLen : 8;
        };
        volatile long data;
    };
    char str[1];
};

class _jqBatch {};

class __declspec(align(8)) jqModule
{
    const char* Name;
    jqWorkerType Type;
    int(__cdecl* Code)(jqBatch*);
    jqBatchGroup Group;
    unsigned __int64 Ticks;
    unsigned __int16 Calls;
    unsigned __int16 Requeues;
};

class __declspec(align(4)) jqBatch
{
public:
    void* p3x_info;
    void* Input;
    void* Output;
    jqModule* Module;
    jqBatchGroup* GroupID;
    void* ConditionalAddress;
    unsigned int ConditionalValue;
    unsigned int ParamData[55];
    _jqBatch _Batch;
};

struct __declspec(align(4)) ddlBufferHeader_t
{
    unsigned int checksum;
    int version;
    unsigned __int8 flags;
    unsigned __int16 codeVersion;
    unsigned __int16 magicMarker;
    char reservedBuffer[31];
};

class __declspec(align(4)) bdCommonAddr : bdReferencable
{
public:
    bdArray<bdAddr> m_localAddrs;
    bdAddr m_publicAddr;
    bdNATType m_natType;
    unsigned int m_hash;
    bool m_isLoopback;
};

class CommonAddrGroup
{
public:
    bdSecurityID securityID;
    bool active;
    unsigned int useCount;
};

class CommonAddr
{
public:
    int groupIndex;
    unsigned int useCount;
    bdReference<bdCommonAddr> addr;
};

class bdEndpoint
{
public:
    bdReference<bdCommonAddr> m_ca;
    bdSecurityID m_secID;
};

class bdTaskResultProcessor
{
};

class bdRemoteTask : public bdReferencable
{
public:
    bdStopwatch m_timer;
    float m_timeout;
    enum bdStatus {
        BD_EMPTY = 0x0,
        BD_PENDING = 0x1,
        BD_DONE = 0x2,
        BD_FAILED = 0x3,
        BD_TIMED_OUT = 0x4,
        BD_CANCELLED = 0x5,
        BD_MAX_STATUS = 0x6,
    } m_status;
    bdReference<bdByteBuffer> m_byteResults;
    bdTaskResult* m_taskResult;
    bdTaskResult** m_taskResultList;
    unsigned int m_numResults;
    unsigned int m_maxNumResults;
    unsigned int m_totalNumResults;
    unsigned __int64 m_transactionID;
    bdLobbyErrorCode m_errorCode;
    bdTaskResultProcessor* m_taskResultProcessor;
};

class __declspec(align(8)) dwFileMetadata
{
public:
    char* fileName;
    bdFileInfo fileInfo;
    bool isUserFile;
};

class dwTeamSetPublicProfileTask
{
public:
    unsigned __int64 teamID;
    PublicTeamProfile teamPublicProfile;
};

class bdLobbyConnectionListener
{

};

template <typename T, typename TT, typename TTT>
class bdHashMap
{
public:
    struct Node {
        TT m_data;
        T m_key;
        Node* m_next;
    };
    unsigned int m_size;
    unsigned int m_capacity;
    float m_loadFactor;
    unsigned int m_threshold;
    Node** m_map;
    TTT m_hashClass;
};

class bdHashingClass 
{
};

class bdTaskByteBuffer : bdByteBuffer
{
public:
    unsigned __int8* m_taskData;
    unsigned int m_taskDataSize;
    unsigned int m_validHeaderSize;
    unsigned int m_paddingSize;
};

class bdPendingBufferTransfer : bdReferencable
{
public:
    bdReference<bdByteBuffer> m_buffer;
    unsigned __int8* m_txPtr;
    unsigned int m_txAvail;
};

template <typename T>
class bdQueue
{
public:
    bdLinkedList<T> m_list;
};

class bdStreamSocket
{
public:
    int m_handle;
};

class bdCypher
{
    virtual BOOL init(const unsigned __int8* key, unsigned int keySize);
    virtual BOOL encrypt(const unsigned __int8* iv, const unsigned __int8* ct, unsigned __int8* pt, unsigned int size);
    virtual BOOL decrypt(const unsigned __int8* iv, const unsigned __int8* ct, unsigned __int8* pt, unsigned int size);
};

class bdCypher3Des : bdCypher
{
public:
    symmetric_CBC m_cbc;
    bdCypher3Des();
    ~bdCypher3Des();
    BOOL init(const unsigned __int8* key, unsigned int keySize);
    BOOL encrypt(const unsigned __int8* iv, const unsigned __int8* pt, unsigned __int8* ct, unsigned int size);
    BOOL decrypt(const unsigned __int8* iv, const unsigned __int8* ct, unsigned __int8* pt, unsigned int size);
};

class bdLobbyConnection : bdReferencable
{
public:
    bdReference<bdCommonAddr> m_addr;
    unsigned int m_maxSendMessageSize;
    unsigned int m_maxRecvMessageSize;
    RecvState m_recvState;
    unsigned __int8 m_msgSizeBuffer[4];
    unsigned int m_recvCount;
    unsigned __int8 m_recvEncryptType;
    unsigned int m_messageSize;
    bdReference<bdTaskByteBuffer> m_recvMessage;
    bdReference<bdPendingBufferTransfer> m_recvTransfer;
    bdQueue<bdPendingBufferTransfer> m_outgoingBuffers;
    bdStreamSocket m_socket;
    bdLobbyErrorCode m_status;
    bdLobbyConnectionListener* m_connectionListener;
    bdCypher3Des m_cypher;
    unsigned __int8 m_sessionKey[24];
    unsigned int m_messageCount;
    bdStopwatch m_keepAliveTimer;
    bdStopwatch m_lastReceivedTimer;
    bdStopwatch m_asyncConnectTimer;
};

class bdRemoteTaskManager
{
    __declspec(align(8)) bdLinkedList<bdReference<bdRemoteTask> > m_tasks;
    bdHashMap<unsigned __int64, bdReference<bdRemoteTask>,bdHashingClass> m_asyncTasks;
    bdHashMap<unsigned __int64, bdReference<bdByteBuffer>,bdHashingClass> m_asyncResults;
    bdReference<bdLobbyConnection> m_lobbyConnection;
    bool m_encryptedConnection;
    unsigned __int64 m_connectionID;
};

class bdProfiles
{
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdMailInboxInfo : public bdTaskResult
{
public:
    bdMailInboxInfo(bdMailInboxInfo*);
    bdMailInboxInfo();
    ~bdMailInboxInfo();
    bool deserialize(bdReference<bdByteBuffer>);
    unsigned int sizeOf();
    unsigned int m_priority;
    unsigned int m_count;
};

class bdMailBody : public bdTaskResult
{
public:
    void* m_mailBody;
    unsigned int m_size;
    unsigned __int64 m_mailID;
};

class bdChannelInfo : bdTaskResult
{
public:
    unsigned __int64 m_channelID;
    unsigned int m_numSubscribers;
    unsigned int m_maxSubscribers;
    unsigned __int64 m_adminID;
    bool m_isPasswordRequired;
    bool m_isPublicChannel;
    unsigned int m_dataVersion;
};

class bdMessagingGroup : bdTaskResult
{
public:
    unsigned __int8 m_category;
    unsigned __int64 m_groupID;
};

class __declspec(align(4)) bdMsgGroupSubscriptionFailure : bdTaskResult
{
public:
    bdLobbyErrorCode m_errorCode;
    unsigned __int8 m_category;
};

class __declspec(align(8)) bdMessagingGroupInfo : bdTaskResult
{
public:
    unsigned __int8 m_category;
    unsigned __int64 m_groupID;
    unsigned int m_estimatedSubscriberCount;
};

class bdMessaging
{
public:
    enum bdBlockLevel
    {
        BD_NOT_BLOCKED = 0,
        BD_BLOCKED = 1
    };
    ~bdMessaging();
    bdReference<bdRemoteTask> getNumMails(bdMailInboxInfo*, const unsigned int);
    bdReference<bdRemoteTask> getMailHeaders(bdMailHeader*, const unsigned int, const unsigned int, const bool);
    bdReference<bdRemoteTask> getMailHeadersWithPriority(bdMailHeaderPriority*, const unsigned int, const unsigned int, unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> getMails(unsigned int*, const unsigned int, bdMailBody*, const bool);
    bdReference<bdRemoteTask> deleteMail(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> sendMail(const void*, const unsigned int, unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> sendMailWithPriority(const void*, const unsigned int, unsigned int*, const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> getTeamMailHeaders(const unsigned int, bdMailHeader*, const unsigned int, const unsigned int, const bool);
    bdReference<bdRemoteTask> getTeamMails(const unsigned int, unsigned int*, const unsigned int, bdMailBody*, const bool);
    bdReference<bdRemoteTask> deleteTeamMail(const unsigned int, unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> sendTeamMail(const void*, const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> getNotifications(bdNotification*, const unsigned int, const unsigned int, const bool);
    bdReference<bdRemoteTask> deleteNotifications(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> createChatChannel(const bdChannelInfo*);
    bdReference<bdRemoteTask> subscribeToChannel(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> subscribeToChannel(const unsigned int);
    bdReference<bdRemoteTask> unsubscribeFromChannel(const unsigned int);
    bdReference<bdRemoteTask> getChannelList(bdChannelInfo*, const unsigned int);
    bdReference<bdRemoteTask> getChannelsInfo(const unsigned int, unsigned int*, bdChannelInfo*);
    bdReference<bdRemoteTask> promoteToChannelAdmin(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> kickFromChannel(const unsigned int, const unsigned int, unsigned int, bool);
    bdReference<bdRemoteTask> setChannelPassword(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> clearChannelPassword(const unsigned int);
    bdReference<bdRemoteTask> sendToChannel(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> whisperToChannelMember(const unsigned int, const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> getChannelMembers(const unsigned int, bdChannelMember*, const unsigned int);
    bdReference<bdRemoteTask> setBlockStatus(const unsigned int, const bool);
    bdReference<bdRemoteTask> getBlockedList(bdBlockedUser*, const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> sendGlobalInstantMessage(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> sendGlobalInstantMessages(unsigned int*, unsigned int, void*, unsigned int);
    bdReference<bdRemoteTask> manageMsgGroupsSubscriptions(bdMessagingGroup*, unsigned int, bdMessagingGroup*, unsigned int, bdMsgGroupSubscriptionFailure*, const unsigned int);
    bdReference<bdRemoteTask> unsubscribeMsgGroupsByCategory(unsigned int*, unsigned int);
    bdReference<bdRemoteTask> unsubscribeAllMsgGroups();
    bdReference<bdRemoteTask> listMsgGroupSubscriptions(bdMessagingGroup*, const unsigned int);
    bdReference<bdRemoteTask> queryMsgGroupInfo(bdMessagingGroup*, const unsigned int, bdMessagingGroupInfo*);
    bdReference<bdRemoteTask> postToMsgGroup(const bdMessagingGroup, void*, unsigned int);
    bdReference<bdRemoteTask> broadcastMessage(void*, unsigned int);
protected:
    bdMessaging(bdRemoteTaskManager*);
    void setRemoteTaskManager(const bdRemoteTaskManager*);
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdSessionID : bdTaskResult
{
public:
    bdSessionID(bdSessionID*);
    bdSessionID();
    bool deserialize(bdReference<bdByteBuffer>);
    void serialize(bdByteBuffer*);
    int sizeOf();
    bdSecurityID m_sessionID;
    ~bdSessionID();
};

class bdSessionParams
{
public:
    bdSessionParams(bdSessionParams*);
    bdSessionParams();
    ~bdSessionParams();
    void serialize(bdByteBuffer*);
    unsigned int sizeOf();
};

class bdPagingToken : public bdTaskResultProcessor
{
public:
    enum bdStatus
    {
        BD_NOT_STARTED = 0,
        BD_IN_PROGRESS = 1,
        BD_FINISHED = 2
    };
    bdPagingToken(bdPagingToken*);
    bdPagingToken(unsigned int);
     ~bdPagingToken();
    bdStatus getStatus();
    unsigned int getNumResultsPerPage();
    bdSecurityID* getSessionID();
protected:
    bool processResult(bdTaskResult*, unsigned int);
    bdStatus m_status;
    bdSecurityID m_sessionID;
    unsigned int m_numResultsPerPage;
};

class bdPerformanceValue : public bdTaskResult
{
public:
    bdPerformanceValue(class bdPerformanceValue*);
    bdPerformanceValue();
    ~bdPerformanceValue();
    void serialize(bdByteBuffer*);
    bool deserialize(bdReference<bdByteBuffer>);
    unsigned int sizeOf();
    unsigned int m_entityID;
    int m_performanceValue;
};

class bdSessionInvite : public bdTaskResult
{
public:
    bdSessionInvite(bdSessionInvite*);
    bdSessionInvite();
    ~bdSessionInvite();
    bool deserialize(class bdReference<bdByteBuffer>);
    unsigned int sizeOf();
    unsigned int m_senderID;
    __int8 m_senderName[64];
    bdSessionID m_sessionID;
    unsigned int m_attachment[1024];
    unsigned int m_attachmentSize;
};

class bdMatchMaking
{
public:
    ~bdMatchMaking();
    bdReference<bdRemoteTask> createSession(bdMatchMakingInfo*, const bdSessionID*);
    bdReference<bdRemoteTask> updateSession(bdSessionID*, const bdMatchMakingInfo*);
    bdReference<bdRemoteTask> updateSessionPlayers(bdSessionID*, const bdMatchMakingInfo*, unsigned int);
    bdReference<bdRemoteTask> deleteSession(bdSessionID*);
    bdReference<bdRemoteTask> findSessionFromID(bdSessionID*, const bdMatchMakingInfo*);
    bdReference<bdRemoteTask> findSessionsFromIDs(const bdSessionID*, const unsigned int, bdMatchMakingInfo*);
    bdReference<bdRemoteTask> findSessions(const unsigned int, const unsigned int, const unsigned int, bdSessionParams*, bdMatchMakingInfo*);
    bdReference<bdRemoteTask> findSessionsPaged(const unsigned int, bdSessionParams*, bdPagingToken*, bdMatchMakingInfo*);
    bdReference<bdRemoteTask> findSessionsByEntityIDs(const unsigned int*, const unsigned int, bdMatchMakingInfo*);
    bdReference<bdRemoteTask> inviteToSession(bdSessionID*, unsigned int*, const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> notifyJoin(bdSessionID*, const unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> notifyLeave(bdSessionID*, const unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> submitPerformance(const unsigned int, bdPerformanceValue**, const unsigned int);
    bdReference<bdRemoteTask> submitPerformance(const unsigned int, bdPerformanceValue*, const unsigned int);
    bdReference<bdRemoteTask> getPerformanceValues(const unsigned int*, const unsigned int, const unsigned int, bdPerformanceValue*);
    bdReference<bdRemoteTask> getSessionInvites(const unsigned int, const unsigned int, bdSessionInvite*);
    bdMatchMaking(const bdRemoteTaskManager*);
    bdReference<bdRemoteTask> startNotifyTask(bdSessionID*, unsigned int*, const unsigned int, const unsigned int);
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdFriends
{
public:
    bdReference<bdRemoteTask> proposeFriendship(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> proposeTypeFriendship(const unsigned int, int, const void*, const unsigned int);
    bdReference<bdRemoteTask> proposeFriendships(class bdFriendProposal*, const unsigned int, int);
    bdReference<bdRemoteTask> withdrawProposal(const unsigned int);
    bdReference<bdRemoteTask> withdrawProposals(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> getOutgoingProposals(class bdFriendProposal*, const unsigned int, int);
    bdReference<bdRemoteTask> getIncomingProposals(class bdFriendProposal*, const unsigned int, int);
    bdReference<bdRemoteTask> acceptProposal(const unsigned int);
    bdReference<bdRemoteTask> acceptProposals(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> rejectProposal(const unsigned int);
    bdReference<bdRemoteTask> rejectProposals(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> removeFriend(const unsigned int);
    bdReference<bdRemoteTask> removeFriends(unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> removeAllFriends();
    bdReference<bdRemoteTask> getFriends(class bdFriendInfo*, const unsigned int, int);
    bdReference<bdRemoteTask> setFriendGroup(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> setGroupName(class bdGroupInfo*);
    bdReference<bdRemoteTask> getGroupNames(class bdGroupInfo*, const unsigned int);
    bdReference<bdRemoteTask> deleteGroupName(const unsigned int);
    bdReference<bdRemoteTask> sendInstantMessage(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> sendInstantMessages(unsigned int*, const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> setRichPresence(const void*, const unsigned int);
    bdReference<bdRemoteTask> getRichPresence(const unsigned int, class bdRichPresence*);
    bdReference<bdRemoteTask> setFriendType(unsigned int, int);
    bdReference<bdRemoteTask> getFriendsAndRichPresence(class bdFriendAndRichPresence*, const unsigned int, int);
    bdReference<bdRemoteTask> addFriendsToGroup(const unsigned int, unsigned int*, const unsigned int);
    bdFriends(const bdRemoteTaskManager*);
    ~bdFriends();
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdTeamMemberProfile : public bdProfileInfo
{

};

class bdTeamProfileSearchParams : public bdTaskResult
{

};

class bdTeams
{
public:
    bdReference<bdRemoteTask> createTeam(const char*, const bdTeamInfo*);
    bdReference<bdRemoteTask> getTeamInfo(const char*, const bdTeamInfo*);
    bdReference<bdRemoteTask> updateTeamName(const unsigned int, const char*);
    bdReference<bdRemoteTask> promoteMember(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> promoteMemberToOwner(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> demoteMember(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> kickMember(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> leaveTeam(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> proposeMembership(const unsigned int, const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> withdrawProposal(const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> rejectMembership(const unsigned int);
    bdReference<bdRemoteTask> acceptMembership(const unsigned int);
    bdReference<bdRemoteTask> getOutgoingProposals(bdTeamProposal*, const unsigned int);
    bdReference<bdRemoteTask> getIncomingProposals(bdTeamProposal*, const unsigned int);
    bdReference<bdRemoteTask> getPublicProfiles(unsigned int*, bdTeamProfile*, const unsigned int);
    bdReference<bdRemoteTask> getPrivateProfile(const unsigned int, const bdTeamProfile*);
    bdReference<bdRemoteTask> setPublicProfile(const unsigned int, bdTeamProfile*);
    bdReference<bdRemoteTask> setPrivateProfile(const unsigned int, bdTeamProfile*);
    bdReference<bdRemoteTask> getPublicMemberProfiles(const unsigned int, bdTeamMemberProfile*, const unsigned int);
    bdReference<bdRemoteTask> getPrivateMemberProfiles(const unsigned int, bdTeamMemberProfile*, const unsigned int);
    bdReference<bdRemoteTask> setPublicMemberProfile(const unsigned int, bdTeamMemberProfile*);
    bdReference<bdRemoteTask> setPrivateMemberProfile(const unsigned int, bdTeamMemberProfile*);
    bdReference<bdRemoteTask> getMemberships(bdTeamInfo*, const unsigned int);
    bdReference<bdRemoteTask> getMembershipsUser(const unsigned int, bdTeamInfo*, const unsigned int);
    bdReference<bdRemoteTask> getMembers(const unsigned int, bdTeamMember*, const unsigned int);
    bdReference<bdRemoteTask> sendInstantMessage(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> setRichPresence(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> sendInstantMessageToTeam(const unsigned int, const void*, const unsigned int);
    bdReference<bdRemoteTask> searchPublicTeamProfiles(const unsigned int, const unsigned int, const bdTeamProfileSearchParams*, bdTeamProfile*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdGetFilesResult : public bdTaskResult
{
public:
    void setFileData(void*, unsigned int);
    unsigned __int64 m_ID;
    bdFileData m_data;
};

class bdStorage
{
public:
    bdReference<bdRemoteTask> uploadFile(const char*, const void*, const unsigned int, const bdFileInfo::bdVisibility, const unsigned int, const bdFileInfo*);
    bdReference<bdRemoteTask> uploadFileAndDeleteMail(unsigned int*, const unsigned int, const char*, const void*, const unsigned int, const bdFileInfo::bdVisibility, const unsigned int, const bdFileInfo*);
    bdReference<bdRemoteTask> removeFile(const char*, const unsigned int);
    bdReference<bdRemoteTask> getFile(const char*, const bdFileData*, const unsigned int);
    bdReference<bdRemoteTask> getFileByID(const unsigned int, const bdFileData*);
    bdReference<bdRemoteTask> getFilesByID(const unsigned int, unsigned int*, bdGetFilesResult*);
    bdReference<bdRemoteTask> listFilesByOwner(const unsigned int, const unsigned int, bdFileInfo*, const unsigned int, const unsigned int, const char*);
    bdReference<bdRemoteTask> listAllPublisherFiles(const unsigned int, bdFileInfo*, const unsigned int, const unsigned int, const char*);
    bdReference<bdRemoteTask> updateFile(const unsigned int, void*, unsigned int);
    bdReference<bdRemoteTask> getPublisherFile(const char*, const bdFileData*);
protected:
    bdStorage(const bdRemoteTaskManager*);
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdUnlockContentInfo : public bdTaskResult
{
public:
    unsigned int m_contentKey;
    unsigned __int64 m_hardwareID;
};

class bdUnlockContentInfoWithSubtype : public bdTaskResult
{
public:
    unsigned int m_contentKey;
    unsigned int m_contentKeySubtype;
    unsigned __int64 m_hardwareID;
};

enum bdContentStatusCode
{
    BD_INVALID_KEY = 0x0,
    BD_CONTENT_UNLOCKABLE = 0x1,
    BD_CONTENT_UNLOCKED_TO_OTHER_USER = 0x2,
    BD_CONTENT_UNLOCKED_TO_THIS_USER = 0x3,
    BD_MAX_CONTENT_STATUS_CODE = 0x4,
};

class bdContentStatus : bdTaskResult
{
public:
    unsigned __int64 m_unlockKey;
    bdContentStatusCode m_status;
};

class bdNumContentUpdated : bdTaskResult
{
public:
    unsigned int m_numUpdated;
};

class bdTransferrableUnlockedContent : bdTaskResult
{
public:
    unsigned int m_numTransferrableToSharedUnlock;
    unsigned int m_numTransferrableToRegularUnlock;
};

class bdContentUnlock
{
public:
    bdReference<bdRemoteTask> listContentByLicenseCode(char*, bdUnlockContentInfo*);
    bdReference<bdRemoteTask> listContentByLicenseCodeWithSubtype(char*, bdUnlockContentInfoWithSubtype*);
    bdReference<bdRemoteTask> listContent(const unsigned int, bdUnlockContentInfo*);
    bdReference<bdRemoteTask> listContentWithSubtype(const unsigned int, bdUnlockContentInfoWithSubtype*);
    bdReference<bdRemoteTask> unlockContentByLicenseCode(char*, bdUnlockContentInfo*, const unsigned int);
    bdReference<bdRemoteTask> unlockContentByLicenseCodeWithSubtype(char*, bdUnlockContentInfoWithSubtype*, const unsigned int);
    bdReference<bdRemoteTask> unlockSharedContentByLicenseCode(char*, bdUnlockContentInfo*, const unsigned int);
    bdReference<bdRemoteTask> unlockSharedContentByLicenseCodeWithSubtype(char*, bdUnlockContentInfoWithSubtype*, const unsigned int);
    bdReference<bdRemoteTask> unlockContent(const unsigned int, bdUnlockContentInfo*, const unsigned int);
    bdReference<bdRemoteTask> unlockContentWithSubtype(const unsigned int, bdUnlockContentInfoWithSubtype*, const unsigned int);
    bdReference<bdRemoteTask> unlockSharedContent(const unsigned int, bdUnlockContentInfo*, const unsigned int);
    bdReference<bdRemoteTask> unlockSharedContentWithSubtype(const unsigned int, bdUnlockContentInfoWithSubtype*, const unsigned int);
    bdReference<bdRemoteTask> listUnlockedContent(bdUnlockContentInfo*, unsigned int);
    bdReference<bdRemoteTask> listUnlockedContentWithSubtype(bdUnlockContentInfoWithSubtype*, unsigned int);
    bdReference<bdRemoteTask> listUnlockedSharedContent(bdUnlockContentInfo*, unsigned int);
    bdReference<bdRemoteTask> listUnlockedSharedContentWithSubtype(bdUnlockContentInfoWithSubtype*, unsigned int);
    bdReference<bdRemoteTask> checkContentStatusByLicenseCodes(char**, const unsigned int, bdContentStatus*);
    bdReference<bdRemoteTask> takeOwnershipOfUsersSharedContent(const unsigned int, const unsigned int, bdNumContentUpdated*);
    bdReference<bdRemoteTask> synchronizeUnlockedContent(const unsigned int, const unsigned int, const unsigned int, const bool, bdTransferrableUnlockedContent*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdVerifyString : public bdTaskResult
{
public:
    bool m_verified;
};

class bdTitleStats : public bdTaskResult
{
public:
    unsigned int m_numOnlineSessions;
    unsigned int m_numTotalUsers;
    unsigned int m_numOnlineUsers;
};

class bdOnlineUserInfo : public bdTaskResult
{
public:
    unsigned __int64 m_userID;
    bool m_isOnline;
};

class bdTimeStamp : public bdTaskResult
{
public:
    unsigned int m_timeStamp;
};

class bdMessageSigning : public bdTaskResult
{
public:
    unsigned int m_timeStamp;
    unsigned __int8 m_messageAuthenticationCode[44];
    unsigned __int8 m_macPiggyback[512];
};

class bdEventInfo : public bdTaskResult
{
public:
    bool m_isBinary;
    unsigned int m_category;
    unsigned int m_length;
    unsigned char* m_eventDesc;
};

class bdEventLogID : public bdTaskResult
{
public:
    unsigned __int64 m_eventLogID;
};

class bdEventLog
{
public:
    bdReference<bdRemoteTask> recordEventsMixed(bdEventInfo*, unsigned int, bdEventLogID*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdTitleUtilities
{
public:
    bdReference<bdRemoteTask> verifyString(const char*, const unsigned int, bdVerifyString*);
    bdReference<bdRemoteTask> getTitleStats(bdTitleStats*);
    bdReference<bdRemoteTask> areUsersOnline(bdOnlineUserInfo*, const unsigned int);
    bdReference<bdRemoteTask> getServerTime(bdTimeStamp*);
    bdReference<bdRemoteTask> sendOwnedContent(const void*, const unsigned int);
    bdReference<bdRemoteTask> getMAC(const void*, const unsigned int, bdMessageSigning*);
    bdReference<bdRemoteTask> getUserNames(unsigned long long*, const unsigned int, bdUserInfo*);
    bdReference<bdRemoteTask> getUserIDs(char**, const unsigned int, bdUserInfo*);
    void setEventLog(bdEventLog*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
    bdEventLog* m_eventLog;
};

class bdEntityIDKeyArchiveMap : public bdTaskResult
{
public:
    unsigned __int64 m_entityID;
    unsigned short m_numMatchingKeys;
    bdArray<bdKeyValuePair> m_keyValuePairs;
};

class bdKeyArchive
{
    enum bdReservedCategory
    {
        USERS = 0,
        TEAMS = 1
    };
    bdReference<bdRemoteTask> write(const unsigned long long, const unsigned short, bdKeyValuePair*, const unsigned int);
    bdReference<bdRemoteTask> read(const unsigned long long, const unsigned short, const bool, bdKeyValuePair*, const unsigned int);
    bdReference<bdRemoteTask> readAll(const unsigned long long, const unsigned short, const bool, bdKeyValuePair*, const unsigned int);
    bdReference<bdRemoteTask> readMultipleEntityIDs(unsigned long long*, const unsigned int, const unsigned short, const bool, unsigned short*, const unsigned int, bdEntityIDKeyArchiveMap**);
protected:
     bdRemoteTaskManager* m_remoteTaskManager;
};

class bdCounterValue : public bdTaskResult
{
public:
    unsigned int m_counterID;
    __int64 m_counterValue;
};

class bdCounter
{
public:
    bdReference<bdRemoteTask> incrementCounters(const bdCounterValue*, const unsigned int);
    bdReference<bdRemoteTask> getCounterTotals(bdCounterValue*, const unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdGroupID : public bdTaskResult
{
public:
    unsigned int m_groupID;
};

class bdGroupCount : public bdTaskResult
{
public:
    unsigned int m_groupID;
    unsigned int m_groupCount;
};

class bdGroup
{
public:
    bdReference<bdRemoteTask> setGroups(const unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> setGroupsForEntity(const unsigned long long, const unsigned int*, const unsigned int);
    bdReference<bdRemoteTask> getEntityGroups(const unsigned long long, bdGroupID*, const unsigned int);
    bdReference<bdRemoteTask> getGroupCounts(const unsigned int*, const unsigned int, bdGroupCount*, const unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdQuotaUsage : public bdTaskResult
{
public:
    unsigned int m_usedStorageSpace;
    unsigned int m_usedNumFiles;
    unsigned int m_usedDailyUploadBW;
    unsigned int m_usedDailyDownloadBW;
    unsigned int m_maxStorageSpace;
    unsigned int m_maxNumFiles;
    unsigned int m_maxDailyUploadBW;
    unsigned int m_maxDailyDownloadBW;
};

class bdURL : public bdTaskResult
{
public:
    char m_url[384];
    unsigned short m_serverType;
    char m_serverIndex[128];
    unsigned __int64 m_fileID;
};

class bdPreCopyResult : public bdTaskResult
{
public:
    bdURL* m_source;
    char m_destination[384];
    unsigned int m_fileSize;
protected:
    void reset();
};

class bdSummaryMetaHandler : public bdTaskResult
{

};

class bdMutex
{
public:
    void lock();
    void unlock();
protected:
    void* m_handle;
};

class bdSemaphore
{
public:
    void release();
    bool wait();
    void destroy();
protected:
    void* m_handle;
};

class bdHTTPWrapperBase
{
public:
    enum bdStatus
    {
        BD_EMPTY = 0,
        BD_PENDING = 1,
        BD_DONE = 2,
        BD_FAILED = 3,
        BD_TIMED_OUT = 4,
        BD_FAILED_TO_START = 5,
        BD_MAX_STATUS = 6
    };
    enum bdOperation
    {
        BD_IDLE = 0,
        BD_UPLOAD = 1,
        BD_DOWNLOAD = 2,
        BD_DELETE = 3,
        BD_COPY = 4
    };
    enum bdStatus getStatus();
    bool isOkayToStart();
    void finalize();
protected:
    bool startAsyncOperation(enum bdHTTPWrapperBase::bdOperation);
    unsigned int parseURLPort(const char*);
    bool parseURL(const char*, char*, char**, unsigned int*);
    bool m_threadExiting;
    bdMutex m_threadMutex;
    bdSemaphore* m_httpSema;
    bdThread* m_thread;
    bdStatus m_status;
    bdOperation m_operation;
};

class bdHTTPWrapper : public bdHTTPWrapperBase
{
public:
   bdStatus startDownload(const char*, bdDownloadInterceptor*, unsigned long long, unsigned int, unsigned int);
   bdStatus startDownload(const char*, const void*, unsigned int, unsigned long long, unsigned int, unsigned int);
   bdStatus startUpload(const char*, bdUploadInterceptor*, unsigned int, unsigned long long);
   bdStatus startUpload(const char*, const void*, unsigned int, unsigned long long, char*);
   bdStatus startCopy(const char*, const char*, unsigned long long);
   bdStatus startDelete(const char*, unsigned long long);
   void enableVerboseOutput(bool);
   void enableProgressMeter(bool);
   void abortOperation();
   bool abortInProgress();
   unsigned int getTransferProgress();
   float getTransferSpeed();
   void resetTransferStats();
   int getLastHTTPError();
   unsigned int run(void*);
   void init();
   void cleanup();
   void setCAPath(char*);
protected:
    bdStatus _startDownload(const char*, const void*, unsigned int, bdDownloadInterceptor*, unsigned long long, unsigned int, unsigned int);
    bdStatus _startUpload(const char*, const void*, bdUploadInterceptor*, unsigned int, unsigned long long, char*);
    void performOperation();
    void resetState();
    int defaultDownloadCallback(char*, unsigned int, unsigned int);
    int defaultUploadCallback(char*, unsigned int, unsigned int);
    int userDownloadCallback(char*, unsigned int, unsigned int);
    int userUploadCallback(char*, unsigned int, unsigned int);
    int curlDownloadCallback(char*, unsigned int, unsigned int, void*);
    int curlUploadCallback(char*, unsigned int, unsigned int, void*);
    void* m_curl;
    struct curl_slist* m_headerList;
    unsigned int m_bytesTransfered;
    bdDownloadInterceptor* m_downloadHandler;
    unsigned char* m_downloadBuffer;
    unsigned int m_downloadBufferSize;
    bdUploadInterceptor* m_uploadHandler;
    unsigned char* m_uploadBuffer;
    unsigned int m_uploadSize;
    bool m_abortOperation;
    bool m_customVerification;
    float m_dataRate;
    bdStopwatch m_stopwatch;
    char* m_caPath;
    int  initCurlSSL();
    char m_errorBuffer[1024];
    int m_httpErrorCode;
    bool m_verboseOutput;
    bool m_progressMeter;
};

class bdHash
{
public:
    virtual bool hash(unsigned char*, const unsigned int, unsigned char*, unsigned int*);
};

class bdHashMD5 : public bdHash
{
    bool hash(unsigned char*, const unsigned int, unsigned char*, unsigned int*);
};

class bdContentStreamingBase
{
public:
    bool ready();
    void abortHTTPOperation(bool);
    void checkProgress(unsigned int*, float*);
    int getLastHTTPError();
    void pump();
    void enableVerboseOutput(bool);
    void enableProgressMeter(bool);
    void enablePersistentThread(bool);
    void setTestLSPServerAddresses(bdURL*, unsigned int);
    enum bdStatus
    {
        READY = 0,
        PRE_HTTP_OPERATION = 1,
        HTTP_OPERATION = 2,
        POST_HTTP_OPERATION = 3,
        DONE = 4,
        FAILED = 5
    };
    void setCAPath(char*);
    bdStatus  getStatus();
protected:
    void handlePreHTTPComplete();
    void handleHTTPComplete();
    void handleHTTPFailed();
    bdReference<bdRemoteTask> _postUpload();
    bdReference<bdRemoteTask> _postUploadFile();
    bdReference<bdRemoteTask> _postUploadSummary();
    bdReference<bdRemoteTask> _postCopy();
    bool initUpload(const unsigned short, void*, bdUploadInterceptor*, const unsigned int, const char*, const unsigned short, void*, const unsigned int, const unsigned int, bdTag*, bdFileID*, char*, const unsigned int, const bool);
    bool initDownload(void*, unsigned int, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bool initDelete();
    unsigned int getMaxMetaDataSize();
    bdReference<bdRemoteTask> startUpload();
    bdReference<bdRemoteTask> startCopy();
    bdReference<bdRemoteTask> startDownload();
    bdReference<bdRemoteTask> startDelete();
    bdReference<bdRemoteTask> start(unsigned short);
    void setState(bdStatus, bdLobbyErrorCode);
    unsigned int m_operation;
    bdStatus m_state;
    bdUploadInterceptor* m_uploadHandler;
    bdFileMetaData m_taskData;
    void* m_uploadData;
    bdFileID* m_uploadFileID;
    bdURL m_URLs[3];
    void* m_thumbData;
    unsigned int m_thumbDataSize;
    unsigned short m_httpSite;
    bool m_sendChecksum;
    unsigned char m_checksum[33];
    char m_clientLocale[16];
    unsigned long long m_copySourceFileID;
    bool m_wasCopyingPooledFile;
    bdDownloadInterceptor* m_downloadHandler;
    bdFileMetaData* m_downloadMetaData;
    void* m_downloadData;
    unsigned int m_downloadDataSize;
    unsigned int m_startByte;
    unsigned int m_endByte;
    bdPreCopyResult m_preCopyResults[3];
    bool m_uploadSummary;
    bdSummaryMetaHandler m_summaryMeta;
    bdReference<bdRemoteTask> m_overallTask;
    bdReference<bdRemoteTask> m_remoteTask;
    bdHTTPWrapper m_http;
    bdHashMD5 m_md5Hash;
    bdURL* m_testURLs;
    unsigned int m_testAddressCount;
    bool m_useTestAddresses;
    void  swapURLInfo(char*);
    bool m_finalizeOnComplete;
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdContentStreaming : public bdContentStreamingBase
{
    bdReference<bdRemoteTask> upload(const unsigned short, bdUploadInterceptor*, const unsigned int, const char*, const unsigned short, void*, const unsigned int, const unsigned int, bdTag*, bdFileID*, char*);
    bdReference<bdRemoteTask> upload(const unsigned short, void*, const unsigned int, const char*, const unsigned short, void*, const unsigned int, const unsigned int, bdTag*, bdFileID*, char*);
    bdReference<bdRemoteTask> copyFromPooledStorage(unsigned long long, const unsigned short, char*, const unsigned short, void*, unsigned int, unsigned int, bdTag*, bdFileID*);
    bdReference<bdRemoteTask> copyFromUserStorage(unsigned long long, const unsigned short, char*, const unsigned short, void*, unsigned int, unsigned int, bdTag*, bdFileID*);
    bdReference<bdRemoteTask> download(const unsigned long long, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> download(const unsigned long long, void*, const unsigned int, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadFileBySlot(const unsigned long long, const unsigned short, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadFileBySlot(const unsigned long long, const unsigned short, void*, const unsigned int, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadPublisherFile(const unsigned long long, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadPublisherFile(const unsigned long long, void*, const unsigned int, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadApplePurchasedFile(const unsigned long long, void*, const unsigned int, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> downloadApplePurchasedFile(const unsigned long long, void*, const unsigned int, void*, const unsigned int, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> removeFile(const unsigned short);
    bdReference<bdRemoteTask> getFileMetaDataByID(const unsigned int, unsigned long long*, bdFileMetaData*);
    bdReference<bdRemoteTask> uploadUserSummaryMetaData(unsigned long long, void*, unsigned int, void*, unsigned int, unsigned int, bdTag*);
    bdReference<bdRemoteTask> downloadUserSummary(unsigned long long, void*, unsigned int, unsigned int, unsigned int);
    bdReference<bdRemoteTask> listAllPublisherFiles(const unsigned int, const unsigned short, bdFileMetaData*, const unsigned short, const unsigned short, char*);
    bdReference<bdRemoteTask> listFilesByOwner(const unsigned long long, const unsigned int, const unsigned short, bdFileMetaData*, const unsigned short, const unsigned short, char*);
    bdReference<bdRemoteTask> listFilesByOwners(unsigned long long*, unsigned int, const unsigned int, const unsigned short, bdFileMetaData*, const unsigned short, const unsigned short, char*);
    bdReference<bdRemoteTask> getQuotaUsage(bdQuotaUsage*);
    bdReference<bdRemoteTask> reportContent(const unsigned long long);
protected:
    bdReference<bdRemoteTask> _preUpload(const char*, const unsigned short, const unsigned int, const unsigned short, bdURL*);
    bdReference<bdRemoteTask> _preUploadSummary();
    bdReference<bdRemoteTask> _postUploadFile();
    bdReference<bdRemoteTask> _postUploadSummary();
    bdReference<bdRemoteTask> _preCopy(const unsigned long long, const unsigned char);
    bdReference<bdRemoteTask> _postCopy();
    bdReference<bdRemoteTask> _preDownloadFileBySlot(unsigned long long, unsigned short, unsigned int, bdFileMetaData*);
    bdReference<bdRemoteTask> _preDownloadByFileID(unsigned long long, unsigned int, bdFileMetaData*);
    bdReference<bdRemoteTask> _preDownloadPublisherFile(unsigned long long, unsigned int, bdFileMetaData*);
    bdReference<bdRemoteTask> _preDownloadITunesPurchasedFile(unsigned long long, unsigned int, void*, const unsigned int, bdFileMetaData*);
    bdReference<bdRemoteTask> _preDownloadSummary();
    bdReference<bdRemoteTask> _preDeleteFile(unsigned short, bdURL*);
    unsigned int getMaxMetaDataSize();
};

class bdPooledStorage : public bdContentStreamingBase
{
public:
    bdReference<bdRemoteTask> upload(bdUploadInterceptor*, unsigned short, char*, unsigned int, bdTag*, bdFileID*, char*);
    bdReference<bdRemoteTask> download(unsigned long long, bdDownloadInterceptor*, bdFileMetaData*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> remove(unsigned long long);
    bdReference<bdRemoteTask> uploadSummaryMetaData(unsigned long long, void*, unsigned int, void*, unsigned int, unsigned int, bdTag*);
    bdReference<bdRemoteTask> downloadSummary(unsigned long long, void*, unsigned int, unsigned int, unsigned int);
    bdReference<bdRemoteTask> getPooledMetaDataByID(const unsigned int, unsigned long long*, bdFileMetaData*);
    void handlePreHTTPComplete();
    bool isFileIDReady();
    unsigned __int64 getFileID();
protected:
    unsigned int getMaxMetaDataSize();
    bdReference<bdRemoteTask> _preUpload();
    bdReference<bdRemoteTask> _preUploadSummary();
    bdReference<bdRemoteTask> _postUploadFile();
    bdReference<bdRemoteTask> _postUploadSummary();
    bdReference<bdRemoteTask> _preDownload();
    bdReference<bdRemoteTask> _preDownloadSummary();
    unsigned __int64 m_pooledStoragefileID;
    bool m_fileIDReady;
};

class bdTags
{
public:
    const unsigned int BD_TAG_CONTENT_SERVER_USER_STORAGE;
    const unsigned int BD_TAG_CONTENT_SERVER_POOLED_STORAGE;
    const unsigned int BD_TAG_BINARY_EVENT_LOG;
    const unsigned int BD_TAG_CONTENT_SERVER_PUBLISHER_STORAGE;
    bdReference<bdRemoteTask> getTagsForEntityIDs(const unsigned int, const unsigned int, unsigned long long*, bdTagsArray*);
    bdReference<bdRemoteTask> setTagsForEntityID(const unsigned int, const unsigned long long, const unsigned int, bdTag*);
    bdReference<bdRemoteTask> removeTagsForEntityID(const unsigned int, const unsigned long long, const unsigned int, bdTag*);
    bdReference<bdRemoteTask> removeAllTagsForEntityID(const unsigned int, const unsigned long long);
    bdReference<bdRemoteTask> searchByTags(const unsigned int, const unsigned int, const unsigned int, const bool, const unsigned int, bdTag*, bdFileID*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
private:
    unsigned int countValidTags(const unsigned int, bdTag*);
};

class bdVoteRank
{
public:
    bdReference<bdRemoteTask> submitRating(bdRatingInfo*, const unsigned int);
    bdReference<bdRemoteTask> submitCategorizedRating(bdCategorizedRatingInfo*, const unsigned int);
    bdReference<bdRemoteTask> getVoteHistory(const unsigned short, class bdCategorizedRatingInfo*, const unsigned int, const unsigned int);
    bool getLikeDislikeRatioFromRating(bdVoteRankStatsInfo*, unsigned int*, unsigned int*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdBoolResult : public bdTaskResult
{
public:
    bool m_result;
};

class bdTwitch
{
public:
    bdReference<bdRemoteTask> linkAccount(char*);
    bdReference<bdRemoteTask> unlinkAccount();
    bdReference<bdRemoteTask> isLinked(bdBoolResult*);
    bdReference<bdRemoteTask> getUserInfo(bdTwitchUserInfo*);
private:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdYouTubeUploadStats : public bdTaskResult
{
public:
    unsigned int m_windowSize;
    unsigned int m_uploadCount;
    unsigned int m_minimumDuration;
    unsigned int m_maximumDuration;
    unsigned int m_averageDuration;
    unsigned int m_age;
};

class bdYouTubeRegistrationResult : public bdTaskResult
{
public:
    bdLobbyErrorCode m_result;
};

class bdYouTube
{
public:
    bdReference<bdRemoteTask> startAccountRegistration(const bdYouTubeAuthorizationCode*);
    bdReference<bdRemoteTask> isRegistered(const bdBoolResult*);
    bdReference<bdRemoteTask> unregister();
    bdReference<bdRemoteTask> uploadVideo(unsigned long long, bool, unsigned int, char**);
    bdReference<bdRemoteTask> getUploadStats(bdYouTubeUploadStats*);
    bdReference<bdRemoteTask> getUserToken(bdYouTubeUserToken*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdTwitter
{
public:
    bdReference<bdRemoteTask> registerAccount(const char*, const char*, const bdTwitterAccount*);
    bdReference<bdRemoteTask> registerToken(const char*, const char*, const bdTwitterAccount*);
    bdReference<bdRemoteTask> post(const char*);
    bdReference<bdRemoteTask> unregisterAccount();
    bdReference<bdRemoteTask> isRegistered(const bdBoolResult*);
    bdReference<bdRemoteTask> getInfo(const unsigned int, const unsigned int, const bdTwitterUserAttribute*);
    bdReference<bdRemoteTask> getRegisteredAccounts(const unsigned int, const class bdTwitterAccount*);
    bdReference<bdRemoteTask> search(char*, const unsigned int, const unsigned int, const bdTwitterSearchResult*, const bdTwitterResultType);
    bdReference<bdRemoteTask> follow(char*);
    bdReference<bdRemoteTask> unfollow(char*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

enum bdFacebookFriendSort
{
    BD_FBSORT_UNSORTED = 0,
    BD_FBSORT_ACCOUNT_NAME_ASC = 1,
    BD_FBSORT_ACCOUNT_NAME_DESC = 2
};

class bdStreamingTask : public bdRemoteTask
{
public:
    bdStatus getStatus();
    void handleAsyncTaskReply(const class bdReference<bdByteBuffer>);
    float getStreamingTimeout();
    void setStreamingTimeout(float);
    void setFailBehavior(bool);
    bool deserializeTaskReply(const class bdReference<bdByteBuffer>);
protected:
    void start(const float);
    bool m_failOnPartialError;
    unsigned int m_partsFailed;
    bdStopwatch m_streamingTimer;
    float m_streamingTimeout;
};

class bdFacebookTag : public bdTaskResult
{
public:
    unsigned long long m_accountID;
    unsigned short m_x;
    unsigned short m_y;
};

class bdFacebook
{
public:
    bdReference<bdRemoteTask> registerAccount(const char*, const char*, const unsigned char*, const unsigned int, const bdFacebookAccount*);
    bdReference<bdRemoteTask> registerAccount(const char*, const char*, const bdFacebookAccount*);
    bdReference<bdRemoteTask> registerToken(const char*, const unsigned int, const unsigned char*, const unsigned int, const bdFacebookAccount*);
    bdReference<bdRemoteTask> post(const unsigned long long, const char*, const char*, const char*, const char*, const char*, const char*, const unsigned int, const bdFacebookAttachmentProperty*, const char*, const char*);
    bdReference<bdRemoteTask> post(const char*, const char*, const char*, const char*, const char*, const char*, const char*, const char*);
    bdReference<bdRemoteTask> post(const char*, const char*, const char*, const char*, const char*, const char*, const unsigned int, const bdFacebookAttachmentProperty*, const char*, const char*);
    bdReference<bdRemoteTask> unregisterAccount(const unsigned long long);
    bdReference<bdRemoteTask> unregisterAccount();
    bdReference<bdRemoteTask> uploadPhoto(const unsigned long long, const char*, const unsigned int, const bdFacebookTag*);
    bdReference<bdRemoteTask> uploadVideo(const unsigned long long, const char*);
    bdReference<bdRemoteTask> isRegistered(const bdBoolResult*);
    bdReference<bdRemoteTask> getInfo(const unsigned long long, const unsigned int, const unsigned int, const bdFacebookUserAttribute*);
    bdReference<bdRemoteTask> getInfo(const unsigned int, const unsigned int, const bdFacebookUserAttribute*);
    bdReference<bdRemoteTask> getRegisteredAccounts(const unsigned int, const bdFacebookAccount*);
    bdReference<bdRemoteTask> getFriends(const bool, const unsigned int, const unsigned int, const bdFacebookFriend*, bdFacebookFriendSort);
    bdReference<bdRemoteTask> getFriendsByID(unsigned long long*, unsigned short, bdFacebookFriend*);
    bdReference<bdStreamingTask> getProfilePictures(unsigned long long*, const unsigned short, const bdFacebookProfilePicture*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdLinkCode
{
public:
    bdReference<bdRemoteTask> getLinkCodes(const unsigned long long, const unsigned int*, const bdLink*, const unsigned int);
    bdReference<bdRemoteTask> getEntityIDsFromLinkCodes(const unsigned int, const char**, const bdLink*, const unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdAntiCheatChallengeParam : bdRemoteTask
{
public:
    unsigned char* m_data;
    unsigned int m_size;
};

class bdAntiCheatChallenge : bdRemoteTask
{
public:
    unsigned short m_functionID;
    unsigned long long m_challengeID;
    bdArray<bdAntiCheatChallengeParam> m_parameters;
};

class bdAntiCheatChallenges : public bdReferencable
{
public:
    bdAntiCheatChallenge* getChallengeByIndex(unsigned int);
    unsigned int  getNumChallenges();
private:
    bdArray<bdAntiCheatChallenge>* m_challenges;
};

class bdAntiCheatResponses : bdRemoteTask
{
public:
    void clear();
    void addResponse(bdAntiCheatChallenge*, __int64);
    bool findResponse(bdAntiCheatChallenge*, long long*);
    void setLogMessage(unsigned char*, unsigned int);
private:
    bdFastArray<unsigned __int64> m_challengeIDs;
    bdFastArray<__int64> m_responses;
    unsigned short m_numResponses;
    unsigned char m_logMessage[64];
    unsigned int m_logMessageSize;
};

class bdConsoleID : bdTaskResult
{
public:
    bool readConsoleID();
    unsigned char m_id[16];
};

class bdMACAddr
{
public:
    unsigned char m_data[6];
};

class bdAntiCheat
{
public:
    bdReference<bdRemoteTask> answerChallenges(bdAntiCheatResponses*);
    bdReference<bdRemoteTask> reportConsoleID(bdConsoleID*);
    bdReference<bdRemoteTask> reportConsoleDetails(unsigned int, unsigned int, unsigned long long, bdMACAddr*, unsigned long long, unsigned long long, bdConsoleID*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdDMLHierarchicalInfo : public bdDMLInfo
{
public:
    unsigned int m_tier0;
    unsigned int m_tier1;
    unsigned int m_tier2;
    unsigned int m_tier3;
};

class bdDML
{
public:
    bdReference<bdRemoteTask> recordIP(const unsigned int);
    bdReference<bdRemoteTask> getUserData(bdDMLInfo*);
    bdReference<bdRemoteTask> getUserHierarchicalData(bdDMLHierarchicalInfo*);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdUserGroupNumMembers : public bdTaskResult
{
public:
    unsigned __int64 m_numMembers;
};

class bdUserGroups
{
public:
    bdReference<bdRemoteTask> createGroup(const char*, const unsigned long long, const short, const bdUserGroupInfo*);
    bdReference<bdRemoteTask> deleteGroup(const unsigned long long);
    bdReference<bdRemoteTask> joinGroup(const unsigned long long, const unsigned long long, const short);
    bdReference<bdRemoteTask> leaveGroup(const unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> getMembershipInfo(const unsigned long long, const unsigned long long, const bdUserGroupMembershipInfo*);
    bdReference<bdRemoteTask> changeMemberType(const unsigned long long, const unsigned long long, const short);
    bdReference<bdRemoteTask> getNumMembers(const unsigned long long, const short, bdUserGroupNumMembers*);
    bdReference<bdRemoteTask> getMembers(const unsigned long long, const short, const unsigned long long, const unsigned short, bdUserGroupMembershipInfo*);
    bdReference<bdRemoteTask> getMemberships(unsigned long long*, const unsigned int, bdUserGroupMembershipInfo*, const unsigned int);
    bdReference<bdRemoteTask> getGroupLists(unsigned long long*, const unsigned int, const unsigned int, bdUserGroupList*);
    bdReference<bdRemoteTask> readStatsByRank(const unsigned long long, const unsigned int, const unsigned long long, bdStatsInfo*, const unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdRichPresenceService
{
public:
    bdReference<bdRemoteTask> setInfo(const bdRichPresenceInfo*);
    bdReference<bdRemoteTask> getInfo(unsigned __int64*, bdRichPresenceInfo*, int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdMarketplaceInventory : public bdTaskResult
{
public:
    unsigned long long m_playerId;
    unsigned int m_itemId;
    unsigned int m_itemQuantity;
    unsigned int m_itemXp;
    unsigned int m_expireDateTime;
    unsigned short m_collisionField;
    unsigned int m_modDateTime;
};

class bdMarketplaceInventoryItemQuantity
{
public:
    unsigned long long m_playerId;
    unsigned int m_itemId;
    unsigned int m_itemQuantity;
};

class bdMarketplace
{
public:
    bdReference<bdRemoteTask> getBalance(bdMarketplaceCurrency*, const unsigned char);
    bdReference<bdRemoteTask> deposit(bdMarketplaceCurrency*);
    bdReference<bdRemoteTask> getProducts(bdMarketplaceProduct*, const unsigned short);
    bdReference<bdRemoteTask> getSkus(bdMarketplaceSku*, const unsigned short, const bool, unsigned int*, const unsigned char);
    bdReference<bdRemoteTask> purchaseSkus(unsigned int*, unsigned int*, const unsigned char, const bool);
    bdReference<bdRemoteTask> purchaseSkus(unsigned int*, unsigned int*, const unsigned char);
    bdReference<bdRemoteTask> getInventory(bdMarketplaceInventory*, const unsigned short);
    bdReference<bdRemoteTask> putInventoryItem(bdMarketplaceInventory*);
    bdReference<bdRemoteTask> putPlayersInventoryItems(bdMarketplaceInventory*, const unsigned char);
    bdReference<bdRemoteTask> consumeInventoryItem(const unsigned long long, const unsigned int, const unsigned int);
    bdReference<bdRemoteTask> consumeInventoryItems(bdMarketplaceInventoryItemQuantity*, const unsigned short);
    bdReference<bdRemoteTask> consumeInventoryItems(unsigned int*, unsigned int*, const unsigned short);
    bdReference<bdRemoteTask> getPlayersInventories(unsigned long long*, const unsigned char, bdMarketplaceInventory*, const unsigned short);
    bdReference<bdRemoteTask> deleteInventory();
    bdReference<bdRemoteTask> putPlayersEntitlements(bdMarketplaceEntitlement*, const unsigned char);
    bdReference<bdRemoteTask> getPlayersEntitlements(unsigned long long*, const unsigned char, bdMarketplaceEntitlement*, const unsigned short);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdCommerceCurrency : public bdTaskResult
{
public:
    int m_currencyID;
    int m_value;
};

class bdCommerceReceiptStatus : public bdTaskResult
{
public:
    bool m_isValid;
};

class bdCommerceItemQuantity : public bdTaskResult
{
public:
    unsigned __int64 m_inventoryItemId;
    unsigned int m_itemQuantity;
};

class bdCommerce
{
public:
    bdReference<bdRemoteTask> getBalances(bdCommerceCurrency*, const unsigned char);
    bdReference<bdRemoteTask> deposit(bdCommerceCurrency*, void*, const unsigned int, unsigned long long*, const unsigned long long);
    bdReference<bdRemoteTask> modifyBalances(bdCommerceCurrency*, const unsigned int, unsigned long long*, const unsigned long long);
    bdReference<bdRemoteTask> setBalances(bdCommerceCurrency*, const unsigned short, const unsigned long long);
    bdReference<bdRemoteTask> migrateBalances(const unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> setWriter(const bdCommerceWriter);
    bdReference<bdRemoteTask> getWriter(const unsigned long long, bdCommerceWriter*);
    bdReference<bdRemoteTask> getWriters(bdCommerceWriter*, const unsigned char);
    bdReference<bdRemoteTask> getLastWriter(bdCommerceWriter*);
    bdReference<bdRemoteTask> validateReceipt(void*, const unsigned int, const bdCommerceReceiptStatus*);
    bdReference<bdRemoteTask> getItems(const unsigned long long, bdCommerceItem*, const unsigned short, const unsigned short);
    bdReference<bdRemoteTask> getGiftsOfferedToUser(const unsigned long long, bdCommerceGiftItem*, const unsigned short, const unsigned short);
    bdReference<bdRemoteTask> getGiftsOfferedByUser(const unsigned long long, bdCommerceGiftItem*, const unsigned short, const unsigned short);
    bdReference<bdRemoteTask> retractGiftOffers(unsigned int*, const unsigned short, bdCommerceItem*, unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> acceptGifts(unsigned int*, const unsigned short, bdCommerceItem*, const unsigned short, unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> rejectGifts(unsigned int*, const unsigned short, unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> purchaseItems(bdCommerceCurrency*, const unsigned short, bdCommerceItem*, const unsigned short, unsigned long long*, const unsigned long long);
    bdReference<bdRemoteTask> consumeItems(bdCommerceItemQuantity*, const unsigned short, unsigned long long*, const unsigned long long);
    bdReference<bdRemoteTask> giftItems(bdCommerceItemQuantity*, const unsigned short, const unsigned long long, unsigned long long*, const unsigned long long);
    bdReference<bdRemoteTask> setInventory(bdCommerceItem*, const unsigned short, const unsigned long long);
    bdReference<bdRemoteTask> setItems(bdCommerceItem*, const unsigned short, const unsigned long long);
    bdReference<bdRemoteTask> setItemQuantities(bdCommerceItemQuantity*, const unsigned short, const unsigned long long);
    bdReference<bdRemoteTask> transferInventory(const unsigned long long, const unsigned long long);
    bdReference<bdRemoteTask> consolidateItems(unsigned long long*, const unsigned short, bdCommerceItemQuantity*, const unsigned long long);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

enum bdSubscriptionFilter
{
    BD_SUBSCRIPTION_FILTER_ALL = 0,
    BD_SUBSCRIPTION_FILTER_VALID = 1,
    BD_SUBSCRIPTION_FILTER_EXPIRED = 2
};

class bdSubscription
{
public:
    bdReference<bdRemoteTask> getSubscriptionForUsers(unsigned long long*, unsigned int, unsigned int, bdSubscriptionInfo*, bdSubscriptionFilter);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdFeatureBanInfo : public bdTaskResult
{
public:
    unsigned __int64 m_category;
    unsigned int m_secondsRemaining;
};

class bdFeatureBan
{
public:
    bdReference<bdRemoteTask> getFeatureBans(unsigned __int64, bdFeatureBanInfo*, unsigned int, unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdSanitizedString : public bdTaskResult
{
public:
    bool m_sanitized;
    unsigned int m_length;
    char* m_sanitizedBuffer;
};

class bdTencentAASRecord : public bdTaskResult
{
public:
    enum bdRecordStatus
    {
        PENDING = 0,
        NOINFO = 1,
        MINOR = 2,
        ADULT = 3
    };
    unsigned long long m_userID;
    bdRecordStatus m_ageStatus;
    unsigned int m_gameplaySeconds;
    unsigned int m_recordAge;
};

class bdTencent
{
public:
    bdReference<bdRemoteTask> verifyString(const char*, const unsigned int, bdVerifyString*);
    bdReference<bdRemoteTask> sanitizeString(const char*, const unsigned int, bdSanitizedString*);
    bdReference<bdRemoteTask> getAASRecord(bdTencentAASRecord*);
    bdReference<bdRemoteTask> getAASRecordsByUserID(unsigned long long*, const unsigned int, bdTencentAASRecord*);
    bdReference<bdRemoteTask> registerCodoID(unsigned char*, unsigned char*);
    bdReference<bdRemoteTask> tLog(const char*, unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdRunnable
{
public:
    unsigned int run(void*);
    void stop();
    void start();
protected:
    bool m_stop;
};

class bdLeagueAndSubdivisionResult : public bdTaskResult
{
public:
    unsigned long long m_leagueID;
    unsigned long long m_subdivisionID;
};

class bdLeague
{
    enum bdWriteType
    {
        LEAGUE_STAT_WRITE_REPLACE = 0,
        LEAGUE_STAT_WRITE_ADD = 1
    };
    enum bdOrderType
    {
        LEAGUE_ORDER_BY_TEAM_ID = 0,
        LEAGUE_ORDER_BY_RECENT_ACTIVITY = 1
    };
public:
    bdReference<bdRemoteTask> getTeamID(unsigned long long*, unsigned int, bdGenericLeagueID*);
    bdReference<bdRemoteTask> setTeamName(unsigned long long, char*);
    bdReference<bdRemoteTask> setTeamIcon(unsigned long long, unsigned char*, unsigned int);
    bdReference<bdRemoteTask> getTeamInfos(unsigned long long*, bdLeagueTeamInfo*, unsigned int);
    bdReference<bdRemoteTask> getTeamMemberInfos(unsigned long long*, bdLeagueTeamMemberInfo*, unsigned int);
    bdReference<bdRemoteTask> getTeamIDsForUser(unsigned long long, unsigned char, bdLeagueUserTeamResult*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> getTeamSubdivisions(unsigned long long, unsigned long long*, unsigned int, bdLeagueSubdivisionResult*);
    bdReference<bdRemoteTask> getTeamLeaguesAndSubdivisions(unsigned long long, bdLeagueAndSubdivisionResult*, unsigned int, unsigned int);
    bdReference<bdRemoteTask> incrementGamesPlayedCount(unsigned long long*, unsigned long long*, unsigned int);
    bdReference<bdRemoteTask> getSubdivisionInfos(unsigned long long*, bdLeagueSubdivisionInfo*, unsigned int);
    bdReference<bdRemoteTask> getTeamSubdivisionHistory(unsigned long long, unsigned long long, unsigned long long*, bdLeagueSubdivisionHistoryResult*, unsigned int);
    bdReference<bdRemoteTask> writeStats(bdLeagueStatsInfo*);
    bdReference<bdRemoteTask> readStatsByTeamID(unsigned long long*, unsigned long long, bdLeagueStatsInfo*, unsigned int);
    bdReference<bdRemoteTask> readStatsByRank(unsigned long long, unsigned int, bdLeagueStatsInfo*, unsigned int);
    bdReference<bdRemoteTask> readStatsByPivot(const unsigned long long, const unsigned long long, bdLeagueStatsInfo*, unsigned int);
protected:
    bdRemoteTaskManager* m_remoteTaskManager;
};

class bdGetHostByNameConfig
{
public:
    void reset();
    void sanityCheckConfig();
    float m_timeout;
};

class bdGetHostByName : public bdRunnable
{
    enum bdStatus
    {
        BD_LOOKUP_UNINITIALIZED = 0,
        BD_LOOKUP_PENDING = 1,
        BD_LOOKUP_SUCCEEDED = 2,
        BD_LOOKUP_FAILED = 3,
        BD_LOOKUP_CANCELLED = 4,
        BD_LOOKUP_TIMED_OUT = 5,
        BD_LOOKUP_ERROR = 6
    };
public:
    bool start(char*, bdGetHostByNameConfig);
    void pump();
    void quit();
    bdStatus  getStatus();
    unsigned int getNumAddresses();
    bdInAddr getAddressAt(unsigned int);
protected:
    unsigned int run(void*);
    void cancelLookup();
    class bdStopwatch m_timer;
    bdStatus m_status;
    bdThread* m_thread;
    bdGetHostByNameConfig m_config;
    bdInAddr m_adresses[4];
    unsigned int m_numAddresses;
    int m_handle;
    unsigned int m_threadStackSize;
};

class bdLobbyEventHandler
{
public:
    void onPlayerStatusUpdate(unsigned long long, char*, unsigned char);
    void onTeamMemberStatusUpdate(unsigned long long, char*, unsigned long long, char*, unsigned char);
    void onRichPresenceUpdate(unsigned long long, char*, void*, unsigned int, unsigned long long);
    void onChatChannelUpdate(bdChannelInfo*, bdChannelMember*, unsigned char);
    void onChatChannelUpdate(unsigned long long, unsigned long long, char*, unsigned char);
    void onChatChannelMessage(unsigned long long, unsigned long long, char*, void*, unsigned int);
    void onChatChannelUserPromoted(bdChannelInfo*, bdChannelMember*, bdChannelMember*);
    void onChatChannelUserKicked(bdChannelInfo*, bdChannelMember*, bdChannelMember*, unsigned int, bool);
    void onInstantMessage(unsigned long long, char*, void*, unsigned int, unsigned long long);
    void onSessionInvite(bdSessionInvite*);
    void onNotifyLeave(unsigned long long, bdSessionID);
    void onFriendshipProposal();
    void onTeamProposal();
    void onNewNotification();
    void onNewMail();
    void onMultipleLogon(unsigned long long);
    void onChallengesReceived(unsigned long long, bdReference<bdAntiCheatChallenges>);
    void onPlayerBanned(unsigned long long, unsigned int);
    void onNotWhiteListed(unsigned long long);
    void onGlobalInstantMessage(unsigned long long, char*, void*, unsigned int);
    void onFeatureBan(bdFeatureBanInfo*);
    void onGroupMessagingMessage(unsigned long long, char*, void*, unsigned int);
    void onBroadcastMessage(unsigned long long, char*, void*, unsigned int);
    void onTencentAASRecordReceived(bdTencentAASRecord*);
    void onYouTubeRegistration(bdYouTubeRegistrationResult*);
};

class bdAuthInfo
{
public:
    unsigned int m_titleID;
    unsigned int m_IVSeed;
    char m_data[128];
    unsigned char m_sessionKey[24];
};

class __declspec(align(8)) bdLobbyService : bdLobbyConnectionListener
{
    bdRemoteTaskManager* m_taskManager;
    bdProfiles* m_profiles;
    bdMessaging* m_messaging;
    bdMatchMaking* m_matchMaking;
    bdStats* m_statsManager;
    bdFriends* m_friendsManager;
    bdTeams* m_teamsManager;
    bdStorage* m_storageManager;
    bdContentUnlock* m_contentUnlockManager;
    bdTitleUtilities* m_titleUtilitiesManager;
    bdEventLog* m_eventLogManager;
    bdKeyArchive* m_keyArchive;
    bdCounter* m_counter;
    bdGroup* m_group;
    bdContentStreaming* m_contentStreamingManager;
    bdPooledStorage* m_pooledStorageManager;
    bdTags* m_tags;
    bdVoteRank* m_voteRankManager;
    bdTwitch* m_twitch;
    bdYouTube* m_youTube;
    bdTwitter* m_twitter;
    bdFacebook* m_facebook;
    bdLinkCode* m_linkCode;
    bdAntiCheat* m_antiCheat;
    bdDML* m_DML;
    bdUCD* m_UCD;
    bdUserGroups* m_userGroups;
    bdRichPresenceService* m_richPresence;
    bdMarketplace* m_marketplace;
    bdCommerce* m_commerce;
    bdSubscription* m_subscription;
    bdFeatureBan* m_featureBan;
    bdTencent* m_tencent;
    bdLeague* m_league;
    bdGetHostByName m_LSGLookup;
    char* m_LSGAddress;
    unsigned __int16 m_LSGPort;
    bdAddr m_resolvedLSGAddress;
    bool m_isResolved;
    unsigned int m_titleID;
    bdLobbyEventHandler* m_eventHandler;
    bdReference<bdLobbyConnection> m_lobbyConnection;
    bool m_lobbyConnectionEstablished;
    bdAuthInfo m_authInfo;
    bool m_encryptedConnection;
    unsigned int m_errorCode;
};

class bdAuthTicket : bdTaskResult
{
public:
    unsigned int m_magicNumber;
    unsigned char m_type;
    unsigned int m_titleID;
    unsigned int m_timeIssued;
    unsigned int m_timeExpires;
    unsigned long long m_licenseID;
    unsigned long long m_userID;
    char m_username[64];
    unsigned char m_sessionKey[24];
private:
    unsigned char m_usingHashMagicNumber[3];
    unsigned char m_hash[4];
};

class bdRSAKey
{
    enum bdRSAKeyStatus
    {
        BD_RSA_KEY_UNINITIALIZED = 0,
        BD_RSA_KEY_INITIALIZED = 1
    };
public:
    bool init();
    bool import(char*);
    bool verifyHash(char*, void*, unsigned long);
    bool exportKey(unsigned char*, unsigned long*);
    bool importKey(unsigned char*, const unsigned long);
    bool encrypt(unsigned char*, unsigned long*, unsigned char*, unsigned long*);
    bool decrypt(unsigned char*, unsigned long*, unsigned char*, unsigned long*);
protected:
    bdRSAKeyStatus m_status;
    Rsa_key m_key;
};

class bdAuthService : public bdLobbyConnectionListener
{
    enum bdStatus
    {
        BD_READY = 0,
        BD_CONNECTING = 1,
        BD_PENDING_REPLY = 2
    };
public:
    bool createAccount(char*, char*, char*);
    bool changePassword(char*, char*, char*);
    bool resetAccount(char*, char*, char*);
    bool deleteAccount(char*, char*);
    bool migrateAccount(char*, const unsigned int, char*);
    bool authorizeAccount(char*, const unsigned long long, char*);
    bool authorizeAccount(char*, char*);
    bool authorizeAnonymous();
    bool authorizeDedicatedHost(char*);
    bool authorizeDedicatedServer();
    bool authorizeDedicatedServerRSA();
    bool getUsernamesForLicense(char*);
    char* getSteamRequestData(char*, unsigned int*);
    bool authorizeSteamTicket(unsigned char*, const unsigned int, unsigned int);
    void createSteamCookie(char*);
    void setSteamCookie(char*);
    bdStatus getStatus();
    bdLobbyErrorCode getErrorCode();
    bdAuthInfo* getAuthInfo();
    bdAuthTicket* getAuthTicket();
    bool pumpDNSLookup(bdStatus*);
    bdFastArray<char[64]> m_usernamesForLicenseResult;
    void getHandleInfo(int*, bool*, bool*, float*);
protected:
    void startTask();
    void onConnect(bdReference<bdLobbyConnection>);
    void onDisconnect(bdReference<bdLobbyConnection>);
    void onConnectFailed(bdReference<bdLobbyConnection>);
    bdReference<bdBitBuffer> makeCreateAccount(const unsigned int, char*, char*, char*);
    bdReference<bdBitBuffer> makeGetUsernamesForLicense(const unsigned int, char*);
    bdReference<bdBitBuffer> makeChangeUserKey(const unsigned int, char*, char*, char*);
    bdReference<bdBitBuffer> makeResetAccount(const unsigned int, char*, char*, char*);
    bdReference<bdBitBuffer> makeDeleteAccount(const unsigned int, char*, char*);
    bdReference<bdBitBuffer> makeMigrateAccount(const unsigned int, char*, const unsigned int, char*);
    bdReference<bdBitBuffer> makeAuthAccountForService(const unsigned int, char*);
    bdReference<bdBitBuffer> makeAuthAnonymousForService(const unsigned int);
    bdReference<bdBitBuffer> makeAuthHostForService(const unsigned int, char*);
    bdReference<bdBitBuffer> makeAuthRequestForDedicatedServer(const unsigned int);
    bdReference<bdBitBuffer> makeAuthRequestForDedicatedServerRSA(const unsigned int);
    bdReference<bdBitBuffer> makeAuthAccountForHost(const unsigned int, char*, const unsigned long long);
    bdLobbyErrorCode handleReply(unsigned char, bdReference<bdBitBuffer>);
    void createAuthCookie(char*);
    bdReference<bdBitBuffer>  makeAuthForSteam(const unsigned int, unsigned char*, unsigned int, unsigned int);
    bool handleSteamReply(bdReference<bdBitBuffer>);
    bdReference<bdLobbyConnection> m_connection;
    unsigned int m_titleID;
    bdReference<bdCommonAddr> m_authServiceAddr;
    bdStatus m_status;
    bdReference<bdBitBuffer> m_request;
    bdAuthInfo m_authInfo;
    bdAuthTicket m_authTicket;
    char m_steamCookieKey[88];
    char m_userKey[24];
    char m_licenseKey[24];
    bdLobbyErrorCode m_errorCode;
    unsigned int m_sendBufSize;
    unsigned int m_recvBufSize;
    bdGetHostByName m_authLookup;
    char* m_authAddress;
    unsigned short m_authPort;
    bdAddr m_resolvedAuthAddress;
    bool m_isResolved;
public:
    char m_cdKey[86];
    int m_cdKeyTimeToLiveSecs;
private:
    bdRSAKey m_RSAKey;
};

struct AddressInfo_s
{
    unsigned int address;
    char moduleName[64];
    char bestFunction[64];
    char bestFunctionFilename[64];
    unsigned int bestFunctionAddress;
    char bestLineFilename[64];
    unsigned int bestLineAddress;
    unsigned int bestLineNumber;
};

struct locTraceWork_t
{
    int contents;
    TraceExtents extents;
    locTraceWork_t();
};

struct staticmodeltrace_t
{
    TraceExtents extents;
    int contents;
    staticmodeltrace_t();
};

class rb_inplace_partition_node
{
public:
    rigid_body_constraint_point* m_rbc_point_first;
    rigid_body_constraint_hinge* m_rbc_hinge_first;
    rigid_body_constraint_distance* m_rbc_dist_first;
    rigid_body_constraint_ragdoll* m_rbc_ragdoll_first;
    rigid_body_constraint_wheel* m_rbc_wheel_first;
    rigid_body_constraint_angular_actuator* m_rbc_angular_actuator_first;
    rigid_body_constraint_upright* m_rbc_upright_first;
    rigid_body_constraint_custom_orientation* m_rbc_custom_orientation_first;
    rigid_body_constraint_custom_path* m_rbc_custom_path_first;
    rigid_body_constraint_contact* m_rbc_contact_first;
    rigid_body* m_partition_head;
    rigid_body* m_partition_tail;
    rigid_body* m_next_node;
    int m_partition_size;
};

class rigid_body
{
public:
    void set(const float, phys_vec3*, phys_mat44*, phys_vec3*, phys_vec3*, const int);
    void set_inertia(phys_vec3*);
    void set_mass(const float);
    void set_max_avel(const float);
    void set_min_stable_contact_count(const int);
    enum rigid_body_flags_e
    {
        FLAG_DISABLE_FORCES = 1,
        FLAG_STABLE = 4,
        FLAG_GROUP_STABLE = 8,
        FLAG_ENVIRONMENT_RIGID_BODY = 16,
        FLAG_USER_RIGID_BODY = 32,
        FLAG_NO_AUTO_REMOVE = 64,
        FLAG_DANGEROUS = 128,
        FLAG_HAS_RBC_CONTACT = 256,
        FLAG_EXPENSIVE = 512,
        FLAG_CLIENT_FLAGS_START = 1024
    };
    void  set_flag(const unsigned int, const int);
    const unsigned int  get_flag(const unsigned int);
    void  set_client_flag(const unsigned int, const int);
    const unsigned int  get_client_flag(const unsigned int);
    const unsigned int  is_environment_rigid_body();
    const unsigned int  is_user_rigid_body();
    phys_mat44* get_mat();
    phys_mat44* dangerous_get_mat();
    phys_vec3 m_last_position;
    phys_vec3 m_moved_vec;
    float m_smallest_lambda;
    void  swap_last_position();
    void  update_last_position();
    const phys_vec3  get_col_moved_dist();
    void  adjust_col_moved_vec(const float);
    phys_vec3* get_t_vel();
    phys_vec3* get_a_vel();
    void  dangerous_set_t_vel(phys_vec3*);
    void  dangerous_set_a_vel(phys_vec3*);
    const phys_vec3  get_force();
    const phys_vec3  get_torque();
    void  set_force(phys_vec3*);
    void  set_torque(phys_vec3*);
    void  add_force(phys_vec3*, phys_vec3*, const float);
    void  add_force(phys_vec3*);
    void  add_torque(phys_vec3*);
    const phys_vec3  get_gravity_acc_vec();
    void  set_gravity_acc_vec(phys_vec3*);
    const float  get_max_delta_t();
    void  set_max_delta_t(const float);
    const float  get_inv_mass();
    phys_vec3* get_inv_inertia();
    const float  get_stable_energy_time();
    const unsigned int  is_stable();
    const unsigned int  is_dangerous();
    const unsigned int  is_expensive();
    const unsigned int  is_group_stable();
    const unsigned int  is_no_auto_remove();
    const int  get_constraint_count();
    const int  get_contact_count();
    void  set_user_data(void*);
    void* get_user_data();
    void  set_largest_vel_sq(const float);
    const float  get_largest_vel_sq();
    float* get_largest_vel_sq_ptr();
    void  set_t_drag_coef(const float);
    const float  get_t_drag_coef();
    void  set_a_drag_coef(const float);
    const float  get_a_drag_coef();
    const int  get_tick();
protected:
    phys_mat44 m_mat;
    phys_vec3 m_inv_inertia;
    phys_vec3 m_gravity_acc_vec;
    phys_vec3 m_t_vel;
    phys_vec3 m_a_vel;
    phys_vec3 m_last_t_vel;
    phys_vec3 m_last_a_vel;
    phys_vec3 m_force_sum;
    phys_vec3 m_torque_sum;
    float m_inv_mass;
    float m_max_avel;
    float m_max_delta_t;
    unsigned int m_flags;
    unsigned int m_tick;
    pulse_sum_node* m_node;
    int m_constraint_count;
    int m_contact_count;
    int m_stable_min_contact_count;
    float m_stable_energy_time;
    float m_largest_vel_sq;
    float m_t_drag_coef;
    float m_a_drag_coef;
    void* m_userdata;
public:
    rb_inplace_partition_node m_partition_node;
};

class pulse_sum_cache
{
private:
    float m_pulse_sum;
public:
    const float get_pulse_sum();
    void set_pulse_sum(const float);
    void zero_pulse_sum();
};

class user_rigid_body : public rigid_body
{
public:
    void set(const phys_mat44*);
    void setPosition(const phys_mat44*);
    phys_mat44* get_dictator();
    phys_mat44* m_dictator;
    phys_mat44 m_dictator_mat;
};

template <typename T>
class phys_link_list_base
{
    T* m_next_link;
    void set_next_link(const T*);
    T* get_next_link();
};

template <typename T>
class phys_simple_link_list
{
private:
    T* m_first;
public:
    phys_simple_link_list<T>();
    void add(T*);
    void remove_all();
    T* get_first();
    T* get_last_added();
    void set_first(T*);
    class iterator
    {
    private:
        T* m_ptr;
    public:
        iterator(T*);
        void operator++(int);
        bool operator!=(iterator*);
        T* operator*();
    };
    iterator begin();
    iterator end();
};

class broad_phase_group;

class phys_auto_activate_callback
{
public:
    bool has_auto_activated();
    void auto_activate(broad_phase_info*);
    bool process_collision();
};

class broad_phase_base
{
public:
    enum
    {
        FLAG_IS_BPI = 1,
        FLAG_IS_BPG = 2,
        FLAG_IS_BPI_ENV = 4,
        FLAG_IS_IN_CLUSTER = 16,
        FLAG_ON_ENV_LIST = 32,
        FLAG_ON_BPG_LIST = 64,
        FLAG_IS_AUTO_ACTIVATE = 128,
        BPB_FIRST_UNUSED_FLAG = 512
    };
    phys_vec3 m_trace_aabb_min_whace;
    phys_vec3 m_trace_aabb_max_whace;
    phys_vec3 m_trace_translation;
    unsigned int m_flags;
    broad_phase_base* m_list_bpb_next;
    broad_phase_base* m_list_bpb_cluster_next;
    void* m_sap_node;
    void* m_user_data;
    unsigned int m_env_collision_flags;
    unsigned int m_my_collision_type_flags;
    broad_phase_base* get_bpb_cluster_next();
    void  set_bpb_cluster_next(broad_phase_base*);
    const float  get_cluster_pos(const int);
    void  set_env_collision_flags(const unsigned int);
    const unsigned int  get_env_collision_flags();
    void  set_my_collision_type_flags(const unsigned int);
    const unsigned int  get_my_collision_type_flags();
    void  set_flag(const unsigned int, const int);
    const unsigned int  get_flag(const unsigned int);
    void  get_aabb(phys_vec3*);
    phys_vec3* get_trace_aabb_min_whace();
    phys_vec3* get_trace_aabb_max_whace();
    phys_vec3* get_trace_translation();
    const phys_vec3  get_trace_end_aabb_min_whace();
    const phys_vec3  get_trace_end_aabb_max_whace();
    const unsigned int  is_bpi();
    const unsigned int  is_bpg();
    const unsigned int  is_bpi_env();
    broad_phase_info* get_bpi();
    broad_phase_group* get_bpg();
    broad_phase_info* get_bpi_env();
    phys_auto_activate_callback* get_aac();
    broad_phase_base();
};

template <typename T, int I>
class phys_static_array
{
private:
    char m_buffer[I * 32];
    const T* m_slot_array;
    int m_alloc_count;
    void call_destructors();
    void reset_buffer();
public:
    T* add(const int, char*);
    T* add_nc(const int, char*);
    T* add_fast();
    T* add_block_nc(const int, const int, char*);
    void remove(T*);
    void remove_slow(T*);
    void remove_all();
    void remove_all_ndc();
    bool is_member(T*);
    T* find_by_val(T*);
    void remove_by_val(T*);
    bool is_member_by_val(T*);
    T* get_list_head();
    T* get_list_head_wo_assert();
    const int get_max_slots();
    const int get_available_slots();
    const int get_used_slots();
    const int get_count();
    class iterator
    {
    };
    iterator begin();
    iterator end();
    void push_back(T*);
    T* back();
};

class rigid_body_constraint_wheel : public rigid_body_constraint
{
    enum internal_wheel_flags_e
    {
        WHEEL_FLAG_IS_COLLIDING = 1,
        WHEEL_FLAG_HARD_LIMIT_ACTIVE = 2,
        WHEEL_FLAG_IS_SLIDING = 4
    };
    enum wheel_state_e
    {
        WHEEL_STATE_ACCELERATING = 0,
        WHEEL_STATE_BRAKING = 1
    };
    enum wheel_flags_e
    {
        WHEEL_FLAG_HAS_TURNING = 8,
        WHEEL_FLAG_HAS_POWER = 16,
        WHEEL_FLAG_HAS_POWER_BRAKING = 32,
        WHEEL_FLAG_HAS_BRAKING = 64,
        WHEEL_FLAG_HOVER = 128
    };
    enum ps_cache_e
    {
        PSC_HARD_LIMIT = 0,
        PSC_SUSPENSION = 1,
        PSC_SIDE_FRIC = 2,
        PSC_FWD_FRIC = 3,
        NUM_PSC = 4
    };
private:
    phys_vec3 m_b2_hitp_loc;
    phys_vec3 m_b2_hitn_loc;
    phys_vec3 m_b1_wheel_center_loc;
    phys_vec3 m_b1_suspension_dir_loc;
    phys_vec3 m_b1_wheel_axis_loc;
    float m_wheel_radius;
    float m_fwd_fric_k;
    float m_side_fric_k;
    float m_side_fric_max;
    float m_suspension_stiffness_k;
    float m_suspension_damp_k;
    float m_hard_limit_dist;
    float m_roll_stability_factor;
    float m_pitch_stability_factor;
    float m_turning_radius_ratio_max_speed;
    float m_turning_radius_ratio_accel;
    float m_desired_speed_k;
    float m_acceleration_factor_k;
    float m_braking_factor_k;
    float m_wheel_vel;
    float m_wheel_fwd;
    float m_wheel_pos;
    float m_wheel_displaced_center_dist;
    float m_wheel_normal_force;
    unsigned int m_wheel_state;
    unsigned int m_wheel_flags;
public:
    void set_wheel_flag(wheel_flags_e, const unsigned int);
private:
    void set_wheel_flag(internal_wheel_flags_e, const unsigned int);
public:
    const unsigned int get_wheel_flag(wheel_flags_e);
private:
    const unsigned int get_wheel_flag(internal_wheel_flags_e);
    pulse_sum_cache m_ps_cache_list[4];
    pulse_sum_normal* m_ps_suspension;
    pulse_sum_normal* m_ps_side_fric;
    pulse_sum_normal* m_ps_fwd_fric;
public:
    void set(phys_vec3*, phys_vec3*, phys_vec3*, const float, const float, const float, const float, const float, const float, const float, const float, const float);
    void set_wheel_radius(const float);
    void set_side_fric_k(const float);
    void set_fwd_fric_k(const float);
    void set_suspension_stiffness_k(float);
    void set_suspension_damp_k(float);
    void set_hard_limit_dist(const float);
    const float get_wheel_radius();
    float get_side_fric_k();
    float get_fwd_fric_k();
    float get_suspension_stiffness_k();
    float get_suspension_damp_k();
    void get_wheel_collide_segment(phys_mat44*, const phys_vec3*, const phys_vec3*);
    void set_no_collision();
    void set_collision(const rigid_body*, phys_vec3*, phys_vec3*);
    const unsigned int get_wheel_is_colliding();
    const unsigned int get_wheel_hard_limit_active();
    void set_wheel_axis_loc(phys_vec3*, int);
    void set_wheel_axis_loc(phys_vec3*);
    void set_turning_radius_ratio(const float);
    void set_turning_radius_ratio_max_speed(const float);
    void set_turning_radius_ratio_accel(const float);
    void set_roll_stability_factor(const float);
    float get_roll_stability_factor();
    void set_pitch_stability_factor(const float);
    float get_pitch_stability_factor();
    void set_wheel_state_accelerating(const float, const float);
    void get_wheel_state_accelerating(float*, float*);
    void set_wheel_state_braking(const float);
    unsigned int get_wheel_state();
    rigid_body* get_chassis();
    const phys_vec3 get_wheel_center_loc(int);
    const phys_vec3 get_wheel_center_loc();
    const phys_vec3 get_suspension_dir_loc(int);
    const phys_vec3 get_suspension_dir_loc();
    const phys_vec3 get_wheel_axis_loc(int);
    const phys_vec3 get_wheel_axis_loc();
    const float get_hard_limit_dist();
    const float get_displaced_center_dist();
    const phys_vec3 get_hitp_loc();
    const phys_vec3 get_hitn_loc();
    const phys_vec3 get_hitp_abs();
    const phys_vec3 get_hitn_abs();
    const float get_wheel_vel();
    const float get_wheel_pos();
    void set_wheel_pos(const float);
    const phys_vec3  get_wheel_displaced_center_loc();
    const float get_wheel_normal_force();
    const unsigned int get_wheel_is_sliding();
    void zero_pulse_sums();
    void setup_constraint(pulse_sum_constraint_solver*, const float);
    void epilog_vel_constraint(const float);
    rigid_body_constraint_wheel();
};

class rigid_body_constraint_upright : public rigid_body_constraint
{
private:
    phys_vec3 m_b1_forward_axis_loc;
    phys_vec3 m_b1_right_axis_loc;
    phys_vec3 m_b1_up_axis_loc;
    phys_vec3 m_b1_lean_axis_loc;
    phys_vec3 m_b2_up_axis_loc;
    phys_vec3 m_last_t_vel;
    phys_vec3 m_last_a_vel;
    float m_avg_side_force;
    float m_avg_normal_force;
    float m_lean_angle_calc_delta_t;
    float m_lean_angle;
    float m_lean_angle_multiplier;
    float m_max_lean_angle;
    float m_moving_average_total_time;
    bool m_enabled;
    enum ps_cache_e
    {
        PSC_FORWARD_AXIS = 0,
        NUM_PSC = 1
    };
    pulse_sum_cache m_ps_cache_list[1];
public:
    void set(phys_vec3*, phys_vec3*, phys_vec3*, phys_vec3*, const float, const float, const float, const float, const bool, const bool);
    void set_last_t_vel(phys_vec3*);
    phys_vec3* get_last_t_vel();
    void set_last_a_vel(phys_vec3*);
    phys_vec3* get_last_a_vel();
    void set_avg_side_force(const float);
    const float get_avg_side_force();
    void set_avg_normal_force(const float);
    const float get_avg_normal_force();
    void set_lean_angle_calc_delta_t(const float);
    const float get_lean_angle_calc_delta_t();
    void set_b1_lean_axis_loc(phys_vec3*);
    void set_b2_up_axis_loc(phys_vec3*);
    void set_lean_angle_multiplier(const float);
    const float get_lean_angle_multiplier();
    void set_moving_average_total_time(const float);
    const float get_moving_average_total_time();
    void set_max_lean_angle(const float);
    const float get_max_lean_angle();
    const float get_lean_angle();
    phys_vec3* get_b1_forward_axis_loc();
    phys_vec3* get_b1_right_axis_loc();
    phys_vec3* get_b1_up_axis_loc();
    phys_vec3* get_b1_lean_axis_loc();
    phys_vec3* get_b2_up_axis_loc();
    const float calc_current_lean_angle();
    const phys_vec3 calc_b1_lean_axis_loc(const float);
    void update_lean_axis(phys_vec3*, phys_vec3*);
    void set_enabled(const bool);
    bool is_enabled();
    void zero_pulse_sums();
    void setup_constraint(pulse_sum_constraint_solver*, const float);
    void epilog_vel_constraint(const float);
};

class rb_vehicle_model
{
    enum rb_vehicle_model_flags_e
    {
        FLAG_IS_POWER_BRAKING = 1,
        FLAG_IS_BRAKING = 2,
        FLAG_IS_FORWARD_ACCELERATION = 4,
        FLAG_IS_REVERSE_ACCELERATION = 8,
        FLAG_IS_COASTING = 16
    };
private:
    phys_vec3 m_right_dir_loc;
    phys_vec3 m_forward_dir_loc;
    phys_static_array<rigid_body_constraint_wheel*, 4> m_wheels;
    float m_desired_speed_factor;
    float m_acceleration_factor;
    float m_power_braking_factor;
    float m_braking_factor;
    float m_coasting_factor;
    float m_reference_wheel_radius;
    float m_steer_factor;
    float m_steer_factor_offset;
    float m_steer_current_angle;
    float m_steer_max_angle;
    float m_steer_speed;
    phys_vec3 m_steer_front_pt_loc;
    float m_steer_front_back_length;
    unsigned int m_state_flags;
    rigid_body_constraint_upright* m_rbc_upright;
    void  set_flag(rb_vehicle_model_flags_e, const unsigned int);
    const unsigned int  get_flag(rb_vehicle_model_flags_e);
public:
    void  add_wheel(rigid_body_constraint_wheel*);
    rigid_body_constraint_wheel* get_wheel(const int);
    const int  get_wheel_count();
    void set(const float, const float, const float, const float, const float, const float, const float, const float, phys_vec3*, const float, phys_vec3*, phys_vec3*);
    void set_rbc_upright(rigid_body_constraint_upright*);
    rigid_body_constraint_upright* get_rbc_upright();
    const float calc_theoretical_max_lean_angle();
    void set_power_braking_factor(const float);
    void set_braking_factor(const float);
    void set_acceleration_factor(const float);
    void set_desired_speed_factor(const float);
    void set_coasting_factor(const float);
    const float get_power_braking_factor();
    const float get_braking_factor();
    const float get_acceleration_factor();
    const float get_desired_speed_factor();
    const float get_coasting_factor();
    phys_vec3* get_steer_front_pt_loc();
    phys_vec3* get_right_dir_loc();
    phys_vec3* get_forward_dir_loc();
    void set_power_braking(const unsigned int);
    void set_braking(const unsigned int);
    void set_forward_acceleration(const unsigned int);
    void set_reverse_acceleration(const unsigned int);
    void set_coasting(const unsigned int);
    const unsigned int get_power_braking();
    const unsigned int get_braking();
    const unsigned int get_forward_acceleration();
    const unsigned int get_reverse_acceleration();
    const unsigned int get_coasting();
    void set_steer_factor(const float);
    void set_steer_factor_offset(const float);
    const float get_steer_factor();
    const float  get_steer_factor_offset();
    void set_steer_max_angle(const float);
    void set_steer_speed(const float);
    const float get_steer_max_angle();
    const float get_steer_speed();
    void update_braking_and_acceleration(const float);
    void update_steering(const float);
    void update_upright_constraint(const float);
    void get_wheel_matrix(const int, phys_mat44*);
};

class broad_phase_info;

class phys_wheel_collide_info
{
public:
    phys_vec3 m_ray_pos;
    phys_vec3 m_ray_dir;
    phys_vec3 m_hitn;
    float m_hit_t;
    broad_phase_info* m_hit_bpi;
    phys_vec3* get_trace_aabb_min_whace();
    phys_vec3* get_trace_aabb_max_whace();
    phys_vec3* get_trace_translation();
    const phys_vec3 get_trace_end_aabb_min_whace();
    const phys_vec3 get_trace_end_aabb_max_whace();
    void collision_prolog(rigid_body_constraint_wheel*, phys_mat44*);
    void collision_process(broad_phase_info*);
    void collision_epilog(rigid_body_constraint_wheel*);
    phys_wheel_collide_info();
};

class broad_phase_group : public broad_phase_base
{
public:
    enum
    {
        FLAG_DO_INITIAL_TUNNEL_TEST = 512,
        BPG_FIRST_UNUSED_FLAG = 1024
    };
    broad_phase_info* m_list_bpi_head;
    int m_bpi_count;
    rb_vehicle_model* m_rbvm;
    phys_wheel_collide_info* m_list_wci;
    void set();
    void set_rb_vehicle_model(class rb_vehicle_model*);
    void add_bpi(class broad_phase_info*);
    void collision_prolog();
    void collision_epilog();
};

class broad_phase_info : public broad_phase_base
{
    enum
    {
        FLAG_CALC_CG_TO_WORLD_XFORM = 512,
        BPI_FIRST_UNUSED_FLAG = 1024
    };
public:
    rigid_body* m_rb;
    phys_mat44* m_rb_to_world_xform;
    phys_mat44* m_cg_to_world_xform;
    phys_mat44* m_cg_to_rb_xform;
    phys_gjk_geom* m_gjk_geom;
    unsigned int m_gjk_geom_id;
    int m_surface_type;
    void  set_client_flag(const unsigned int, const int);
    const unsigned int  get_client_flag(const unsigned int);
    class broad_phase_info* get_next_bpi();
    void  set(rigid_body*, phys_mat44*, phys_mat44*, phys_mat44*, phys_gjk_geom*, const unsigned int, const bool, const int, void*, const unsigned int);
    void  set_bpi_env(phys_auto_activate_callback*);
    rigid_body* get_rb();
    phys_mat44* get_rb_to_world_xform();
    phys_mat44* get_cg_to_world_xform();
    phys_mat44* get_cg_to_rb_xform();
    phys_gjk_geom* get_gjk_cg();
    const unsigned int  get_gjk_geom_id();
    void  collision_prolog();
    broad_phase_info();
};

class phys_collision_pair : public phys_link_list_base<phys_collision_pair>
{
public:
    phys_collision_pair();
    broad_phase_info* m_bpi1;
    broad_phase_info* m_bpi2;
    float m_hit_time;
    phys_gjk_cache_info* m_gjk_ci;
};

class contact_point_info
{
    enum ps_cache_e
    {
        PSC_N = 0,
        PSC_F1 = 1,
        PSC_F2 = 2,
        NUM_PSC = 3
    };
    enum flags_e
    {
        FLAG_SOLVER_PRIORITY_MASK = 7,
        FLAG_NO_OVERFLOW_ERROR = 8,
        FLAG_HAS_VALID_RB2_ENTITY = 16
    };
    struct pulse_sum_cache_info
    {
        pulse_sum_cache m_ps_cache_list[3];
        pulse_sum_cache_info();
    };
public:
    phys_vec3 m_normal;
    float m_fric_coef;
    float m_bounce_coef;
    float m_max_restitution_vel;
    int m_flags;
    int m_point_pair_count;
    phys_vec3* m_list_b1_r_loc;
    phys_vec3* m_list_b2_r_loc;
    pulse_sum_cache_info* m_list_pulse_sum_cache_info;
    contact_point_info* m_next_link;
    void* m_rb2_entity;
    float m_translation_lambda;
    void  set_translation_lambda(const float);
    phys_collision_pair* m_pcp;
    rigid_body_constraint_contact* m_rbc_contact;
    void  set_solver_priority(const unsigned int);
    const unsigned int  get_solver_priority();
    void  swap();
    void  set_rb2_entity(void*);
    void* get_rb2_entity();
    void  set_flag(const unsigned int, const int);
    const unsigned int  get_flag(const unsigned int);
    void  set_next_link(const contact_point_info*);
    contact_point_info* get_next_link();
    void  get_closest_psc(phys_vec3*, phys_vec3*, phys_vec3*, float*, pulse_sum_cache_info**);
    void  set_normal(phys_vec3*);
    void  fake_constructor();
    void  check_surface_properties();
    void  set(const float, const float, const float);
    void  set_no_overflow_error(const bool);
    phys_transient_allocator* get_cpi_allocator();
    contact_point_info* create_cpi(const int, const bool, phys_transient_allocator*);
    void  set_closest_cached_psc(contact_point_info*);
    void  set_closest_cached_psc(contact_point_info*, phys_vec3*, phys_vec3*, phys_vec3*, struct contact_point_info::pulse_sum_cache_info*);
    contact_point_info();
    contact_point_info* operator=(contact_point_info*);
};

class pulse_sum_constraint_solver
{
    class temp_user_rigid_body : public user_rigid_body, public phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
    {
    public:
        user_rigid_body* m_avl_key;
        phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body> m_avl_tree_node;
        struct avl_tree_accessor
        {
            phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body>* get_avl_node(pulse_sum_constraint_solver::temp_user_rigid_body*);
            user_rigid_body* get_avl_key(pulse_sum_constraint_solver::temp_user_rigid_body*);
            void set_avl_key(pulse_sum_constraint_solver::temp_user_rigid_body*, user_rigid_body*);
        };
        void set(user_rigid_body*);
    };
    class user_rigid_body_restore_info : public phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
    {
    public:
        user_rigid_body** m_rbc_urb;
        user_rigid_body* m_original_urb;
        void set(user_rigid_body**, temp_user_rigid_body*);
        void restore();
    };
    void add_urb(phys_inplace_avl_tree<user_rigid_body*, pulse_sum_constraint_solver::temp_user_rigid_body, pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>*, phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>*, phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>*, rigid_body_constraint*);
    struct solver_info
    {
        int m_max_vel_iters;
        int m_max_vel_pos_iters;
        float m_max_vel_error_sq;
        float m_max_vel_pos_error_sq;
        float m_delta_t;
    };
    float m_outside_delta_t;
    int m_psys_max_vel_iters;
    int m_psys_max_vel_pos_iters;
    solver_info m_si;
    phys_transient_allocator m_solver_memory_allocator;
    phys_link_list<pulse_sum_node> m_list_pulse_sum_node;
    int m_memory_high_water;
    void set_solver_params(const float, const int, const int);
    phys_link_list<pulse_sum_normal> m_list_pulse_sum_normal;
    phys_link_list<pulse_sum_point> m_list_pulse_sum_point;
    phys_link_list<pulse_sum_angular> m_list_pulse_sum_angular;
    phys_link_list<pulse_sum_wheel> m_list_pulse_sum_wheel;
    phys_link_list<pulse_sum_contact> m_list_pulse_sum_contact;
    void solve_iterative(const int, const float);
    void solve_constraints(const rigid_body*);
    void execute_constraint_solver(const rigid_body*);
    void set_pulse_sum(const pulse_sum_cache*, const float);
    const float  get_pulse_sum(const pulse_sum_cache*);
    class pulse_sum_node* create_pulse_sum_node();
    class pulse_sum_normal* create_pulse_sum_normal();
    class pulse_sum_normal* create_pulse_sum_normal_();
    void create_point(const rigid_body*, phys_vec3*, const rigid_body*, phys_vec3*, const pulse_sum_cache*, const float, const bool, const float, const float);
    pulse_sum_angular* create_pulse_sum_angular(const rigid_body*, phys_vec3*, const rigid_body*, phys_vec3*, phys_vec3*, const pulse_sum_cache*);
    pulse_sum_wheel* create_pulse_sum_wheel();
    pulse_sum_normal* create_pulse_sum_wheel_side(pulse_sum_wheel*);
    pulse_sum_normal* create_pulse_sum_wheel_fwd(pulse_sum_wheel*);
    pulse_sum_contact* create_pulse_sum_contact(rigid_body*, rigid_body*, contact_point_info*, const float);
    void  create_hinge(const rigid_body*, phys_vec3*, const rigid_body*, phys_vec3*, phys_vec3*, phys_vec3*, const pulse_sum_cache*, const float);
    pulse_sum_constraint_solver();
    ~pulse_sum_constraint_solver();
};

class rigid_body_constraint_point : public rigid_body_constraint
{
private:
    phys_vec3 m_b1_r_loc;
    phys_vec3 m_b2_r_loc;
    enum ps_cache_e
    {
        PSC_X = 0,
        PSC_Y = 1,
        PSC_Z = 2,
        NUM_PSC = 3
    };
    class pulse_sum_cache m_ps_cache_list[3];
    float m_stress;
    float m_spring_k;
    float m_damp_k;
    bool m_spring_enabled;
public:
    void set(class phys_vec3*, phys_vec3*);
    void set_spring_params(const bool, const float, const float);
    const phys_vec3 get_b1_r_loc();
    const phys_vec3 get_b2_r_loc();
    float get_stress();
    void zero_pulse_sums();
    void setup_constraint(pulse_sum_constraint_solver*, const float);
    void epilog_vel_constraint(const float);
};

class environment_rigid_body : public rigid_body
{
public:
    void set();
};

struct dwTeamSetPrivateProfileTask
{
    unsigned long long teamID;
    PrivateTeamProfile teamPrivateProfile;
};

struct dwYouTubeIsRegisteredTask_t
{
    bdBoolResult isRegisteredResult;
};

struct ElemDefGetter
{
    FxElemDef* Def();
    void Init(FxEffectDef*, int);
    FxElemDef* mElemDef;
};

struct FxUpdateElem
{
    FxEffect* effect;
    FxEffectDef* effectDef;
    FxElemDef* elemDef;
    int elemIndex;
    int atRestFraction;
    orientation_t orient;
    int randomSeed;
    int sequence;
    float msecLifeSpan;
    int msecElemBegin;
    int msecElemEnd;
    int msecUpdateBegin;
    int msecUpdateEnd;
    float msecElapsed;
    float normTimeUpdateEnd;
    float* elemOrigin;
    float* elemBaseVel;
    vec3_t posWorld;
    bool onGround;
    int physObjId;
    ElemDefGetter elemDefGetter;
};

struct bbLoadoutData
{
    char* primaryname;
    char* primary;
    char* primaryattachment1;
    char* primaryattachment2;
    char* primaryattachment3;
    char* primarycamo;
    char* primaryreticle;
    char* primaryreticlecolor;
    char* primarylens;
    char* primaryemblem;
    char* secondaryname;
    char* secondary;
    char* secondaryattachment1;
    char* secondaryattachment2;
    char* secondaryattachment3;
    char* secondarycamo;
    char* secondaryreticle;
    char* secondaryreticlecolor;
    char* secondarylens;
    char* secondaryemblem;
    char* primarygrenade;
    char* specialgrenade;
    int primarygrenadecount;
    int specialgrenadecount;
    char* killstreak1;
    char* killstreak2;
    char* killstreak3;
    char* killstreak4;
    char* specialty1;
    char* specialty2;
    char* specialty3;
    char* specialty4;
    char* specialty5;
    char* specialty6;
    bbLoadoutData();
};

struct ipFilter_s
{
    unsigned int mask;
    unsigned int compare;
};

struct GroupSet
{
    char* name;
    bool exclusive;
    char** groupNames;
    int capacity;
    unsigned int start;
};

struct InviteMessage
{
    XSESSION_INFO sessionInfo;
    int fromMPInvite;
    bool isDedicated;
};

struct JoinSessionMessage
{
    enum IMType mType;
    int inviteID;
    bool isJoinable;
    bool invited;
    int maxLocalPlayersAllowed;
    bool allowGuests;
    e_JoinRejectionReason rejectionReason;
    InviteMessage inviteInfo;
};

struct gjk_geom_list_t
{
    gjk_base_t* m_first_geom;
    int m_geom_count;
    gjk_geom_list_t();
    void reset_list();
    void add_geom(gjk_base_t*);
    gjk_base_t* get_first_geom();
    int get_geom_count();
    void comp_aabb_loc(phys_vec3*, phys_vec3*);
};

class broad_phase_environment_query_input
{
public:
    phys_vec3 trace_aabb_min_wace;
    phys_vec3 trace_aabb_max_wace;
    phys_vec3 trace_translation;
    unsigned int env_collision_flags;
};

class broad_phase_base_list
{
    class node
    {
        broad_phase_base* m_bpb;
        node* m_next;
    };
    class node* m_list;
    class node** m_list_cur;
    void reset();
    void add(broad_phase_base*);
};

class broad_phase_environement_query_results
{
public:
    broad_phase_base_list m_list_bpi_env;
    int m_list_bpi_env_count;
    int m_thread_id;
    unsigned int m_env_collision_flags;
    const unsigned int get_env_collision_flags();
    void reset();
    void add(class broad_phase_base*);
    void add(class broad_phase_info*);
};

class gjk_physics_collision_visitor : public gjk_collision_visitor
{
public:
    void* allocate(const int, const int, const bool);
    const bool  is_query();
    void  get_local_query_aabb(vec3_t*, vec3_t*);
    const bool  query_create_prolog(void*);
    void  query_create_epilog(gjk_base_t*);
    const bool  query_create_prolog_1(vec3_t*, vec3_t*, void*);
    void  query_create_epilog_1(gjk_base_t*);
    bpei_database_id m_local_database_id;
    broad_phase_environment_info* m_local_bpei;
    void* m_local_entity;
    void  set_local_query_info(void*);
    phys_vec3 m_local_query_trace_aabb_min;
    phys_vec3 m_local_query_trace_aabb_max;
    phys_vec3 m_local_query_trace_translation;
    centity_t* cent;
    DynEntityDef* dynEntDef;
    Glass* glass;
    rigid_body* rb;
    phys_mat44* rb_to_world_xform;
    phys_mat44* cg_to_world_xform;
    phys_mat44* cg_to_rb_xform;
    unsigned int env_collision_flags;
    broad_phase_environment_query_input* bpeqi;
    broad_phase_environement_query_results* bpeqr;
    phys_auto_activate_callback* auto_activate_callback;
    void set(rigid_body*, phys_mat44*, phys_mat44*, phys_mat44*, unsigned int);
    void set_centity(centity_t*);
    void set_dentity(DynEntityDef*);
    void set_glass(Glass*);
    void set_bpeq(broad_phase_environment_query_input*, broad_phase_environement_query_results*);
    void set_env(phys_auto_activate_callback*);
    gjk_physics_collision_visitor(gjk_physics_collision_visitor*);
    gjk_physics_collision_visitor();
};

class phys_vec2
{
private:
    float x;
    float y;
public:
    phys_vec2(const float, const float, const float);
    phys_vec2();
    const float GetX();
    const float GetY();
    void SetX(const float);
    void SetY(const float);
    void operator+=(class phys_vec2*);
    void operator-=(class phys_vec2*);
    void operator*=(const float);
    void operator/=(const float);
    const phys_vec2  operator-();
};

struct contact_manifold_mesh_point
{
    class phys_vec3 m_p;
    class phys_vec2 m_contact_p;
    void set(phys_vec3*);
};

class phys_memory_heap
{
protected:
    char* m_buffer_start;
    char* m_buffer_end;
    char* m_buffer_cur;
    char* m_user_start;
public:
    phys_memory_heap();
    void nullify_buffer();
    void set_buffer(const void*, const int, const int);
    void set_buffer_no_complain(const void*, const int, const int);
    void capture_user_start();
    void reset();
    void reset_to_user_start();
    void* allocate(const int, const int, const int, char*);
    void* mt_allocate(const int, const int, const int, char*);
    void align_cur(const int);
    void* fast_align_start(const int, char*);
    void* fast_allocate(const int, const int, char*);
    void* fast_allocate(const int, char*);
    bool fast_is_within_buffer_limits(void*, const int);
    char** get_buffer_cur_ptr();
    char* get_buffer_start();
    char* get_buffer_cur();
    char* get_buffer_end();
    const int get_buffer_size();
    const int get_current_alloc_size();
    const int get_remaining_alloc_size();
    void lock_buffer();
    const phys_memory_heap  capture_state();
    void reset_to_state(phys_memory_heap*);
    const int is_empty();
};

class phys_contact_manifold
{
public:
    const float GET_COS_SQ(contact_manifold_mesh_point*);
    const float GET_NP_SQ(contact_manifold_mesh_point*);
    void SET_COS_SQ(contact_manifold_mesh_point*, const float);
    void SET_NP_SQ(contact_manifold_mesh_point*, const float);
    const float get_LENGTH_TOLERANCE_SQ();
    const float get_CLOSE_MESH_POINT_COS_SQ();
    const float get_convex_poly_min_length_sq();
    const float get_convex_poly_min_sin_sq();
    phys_vec3 m_feature_normal;
    phys_vec3 m_feature_hitp;
    phys_vec3 m_feature_hitn;
    float m_feature_distance_eps;
    float m_sin_feautre_angular_eps_sq;
    int m_close_mesh_point_count;
    void set_get_feature_params(phys_vec3*, phys_vec3*, const float, const float);
    void set_comp_feature_normal_eps(const float, const float);
    phys_memory_heap* m_allocator;
    contact_manifold_mesh_point* m_list_mesh_point;
    int m_list_mesh_point_count;
    contact_manifold_mesh_point** m_list_sorted_mesh_point;
    contact_manifold_mesh_point** m_list_contact_point;
    int m_list_contact_point_count;
    void nullify_pointers();
    bool rht(phys_vec2*, phys_vec2*, const float, const float);
    void generate_convex_poly_internal();
    void set_allocator(phys_memory_heap*);
    void add_feature_point(phys_vec3*);
    int get_mesh_point_count();
    void xform_mesh_points(phys_mat44*);
    void xform_and_translate_mesh_points(phys_mat44*, phys_vec3*);
    void generate_convex_poly(phys_mat44*);
    phys_vec2* get_poly_vert(const int);
    const int get_poly_vert_count();
    const float compute_convex_poly_area();
    const float compute_convex_poly_perimeter();
    void comp_feature_normal();
    const float get_STD_COMP_FEATURE_NORMAL_DISTANCE_EPS(const float);
    const float get_STD_COMP_FEATURE_NORMAL_SIN_ANGULAR_EPS_SQ(const float);
    const float get_STD_GET_FEATURE_DISTANCE_EPS(const float);
    const float get_STD_GET_FEATURE_SIN_ANGULAR_EPS_SQ(const float);
    const float get_STD_PENETRATION_T(const float);
};

struct gjk_double_sphere_t : public gjk_base_t
{
    gjk_double_sphere_t* create(phys_vec3*, phys_vec3*, const float, const float, int, gjk_collision_visitor*);
    gjk_double_sphere_t* create(phys_vec3*, phys_vec3*, const float, int, gjk_collision_visitor*);
    gjk_double_sphere_t* create(phys_vec3*, const float, int, gjk_collision_visitor*);
    void destroy(gjk_double_sphere_t*);
    gjk_double_sphere_t* spu_fetch_async(gjk_double_sphere_t*, int);
    void support(phys_vec3*, phys_vec3*, phys_vec3*);
    struct csi
    {
        phys_vec3 m_normal;
        int m_indices[3];
    };
    void  get_simplex(cached_simplex_info*, const int, phys_vec3*, phys_vec3*);
    void  set_simplex(phys_vec3*, const int, phys_vec3*, cached_simplex_info*);
    const phys_vec3  get_center();
    void  get_feature(phys_contact_manifold*);
    void  calc_aabb(phys_mat44*, phys_vec3*, phys_vec3*);
    const bool  is_foot(phys_vec3*);
    const float  get_geom_radius();
    const unsigned int  get_type();
    bool  is_polyhedron();
    phys_vec3 m_list_center[2];
    phys_vec3 m_center;
    float m_list_radius[2];
    float m_geom_radius;
    int m_count;
};

struct gjk_cylinder_t : public gjk_base_t
{
    gjk_cylinder_t* create(int, float, float, phys_mat44&, int, gjk_collision_visitor*);
    void  destroy(gjk_cylinder_t*);
    gjk_cylinder_t* spu_fetch_async(gjk_cylinder_t*, int);
    const phys_vec3  get_dims();
    void  support(phys_vec3&, phys_vec3*, phys_vec3*);
    void  get_simplex(cached_simplex_info&, const int, phys_vec3*, phys_vec3*);
    const phys_vec3  get_center();
    void  get_feature(phys_contact_manifold*);
    void  calc_aabb(phys_mat44*, phys_vec3*, phys_vec3*);
    const bool  is_foot(phys_vec3&);
    const unsigned int  get_type();
    bool  is_polyhedron();
    const float  get_geom_radius();
    int direction;
    float halfHeight;
    float radius;
    float m_geom_radius;
    phys_mat44 xform;
};

struct GfxStaticModelDrawStream
{
    GfxStaticModelDrawStream();
    unsigned int precompiledIndex;
    unsigned int* primDrawSurfPos;
    unsigned int smodelCount;
    unsigned short* smodelList;
    GfxTexture* reflectionProbeTexture;
    unsigned int customSamplerFlags;
    vec4_t viewOrigin;
    GfxFrameStats* frameStats;
    GfxPrimStats* primStats;
    unsigned int viewInfoIndex;
    XSurface* localSurf;
};

class bdNATTravListener
{
public:
    void onNATAddrDiscovery(bdReference<bdCommonAddr>, bdAddr&);
    void onNATAddrDiscoveryFailed(bdReference<bdCommonAddr>);
};

class bdPacketInterceptor
{
public:
    bool acceptPacket(class bdSocket*, class bdAddr, void*, const unsigned int, const unsigned char);
};

class bdQoSRequestPacket
{
public:
    unsigned char getType();
    unsigned long long getTimestamp();
    unsigned int getId();
    unsigned int getSecId();
    bool serialize(void*, const unsigned int, const unsigned int, unsigned int&);
    bool deserialize(void*, const unsigned int, const unsigned int, unsigned int&);
protected:
    unsigned char m_type;
    unsigned long long m_timestamp;
    unsigned int m_id;
    unsigned int m_secid;
};

class bdQoSReplyPacket
{
public:
    bool setData(unsigned char*, unsigned int);
    void setId(unsigned int);
    void setTimestamp(unsigned long long);
    void setEnabled(bool);
    unsigned char getType();
    float getElapsedTime();
    unsigned int getId();
    unsigned char* getData();
    unsigned int getDataSize();
    bool getEnabled();
    unsigned int getSerializedSize();
    bool serialize(void*, const unsigned int, const unsigned int, unsigned int&);
    bool deserialize(void*, const unsigned int, const unsigned int, unsigned int&);
protected:
    unsigned int getHeaderSize();
    unsigned char m_type;
    unsigned int m_id;
    unsigned long long m_timestamp;
    bool m_enabledMode;
    unsigned char* m_data;
    unsigned int m_dataSize;
    unsigned int headerSize;
    unsigned int m_serializedSize;
};

class bdQoSProbe : public bdNATTravListener, public bdPacketInterceptor
{
    enum bdQoSProbeStatus
    {
        BD_QOS_PROBE_UNINITIALIZED = 0,
        BD_QOS_PROBE_INITIALIZED = 1,
        BD_QOS_PROBE_RUNNING = 2
    };
public:
    void setMaxBandwidth(const unsigned int);
protected:
    bool probe(bdReference<bdCommonAddr>, bdSecurityID&, bdSecurityKey&, bdQoSProbeListener*);
public:
    bool probe(bdArray<bdQoSRemoteAddr>&, bdQoSProbeListener*);
    bool probe(bdQoSRemoteAddr&, bdQoSProbeListener*);
    void cancelProbes();
    void pump();
    bool listen(bdFastArray<bdSecurityID>&, unsigned char*, unsigned int);
    bool listen(bdSecurityID&, unsigned char*, unsigned int);
    void registerSecId(bdSecurityID&);
    bool setData(unsigned char*, unsigned int);
    void disableListener();
    void enableListener();
    void shutdownListener();
    bool isProbing();
protected:
    unsigned int m_maxBandwidth;
public:
    bool init(bdSocket*, bdNATTravClient*, bdServiceBandwidthArbitrator*);
    bool quit();
    void onNATAddrDiscovery(bdReference<bdCommonAddr>, bdAddr&);
    void onNATAddrDiscoveryFailed(bdReference<bdCommonAddr>);
    bool acceptPacket(bdSocket*, bdAddr, void*, const unsigned int, const unsigned char);
    bool g_NATTraversalTrottling;
    bool getNATTraversalTrottling();
    void setNATTraversalTrottling(bool);
protected:
    bool handleRequest(bdQoSRequestPacket&, bdAddr&);
    bool handleReply(bdQoSReplyPacket&, bdAddr&);
    unsigned int shrinkSecId(bdSecurityID&);
    bdSocket* m_socket;
    bdNATTravClient* m_natTrav;
    bdServiceBandwidthArbitrator* m_bandArb;
    unsigned int m_lastProbeId;
    bdStopwatch m_probingTimer;
    bdFastArray<unsigned int> m_secids;
    bdQoSReplyPacket m_replyData;
    enum bdQoSListenerState
    {
        BD_QOS_OFF = 0,
        BD_QOS_DISABLED = 1,
        BD_QOS_ENABLED = 2
    };
    enum bdQoSProbe::bdQoSListenerState m_listenState;
    enum bdQoSProbe::bdQoSProbeStatus m_status;
    struct bdQoSProbeEntryWrapper
    {
        bdReference<bdCommonAddr> m_addr;
        bdSecurityID m_id;
        bdSecurityKey m_key;
        bdQoSProbeListener* m_listener;
        bdAddr m_realAddr;
        unsigned int m_retries;
        bdStopwatch m_lastTry;
    };
public:
    bdHashMap<bdReference<bdCommonAddr>, bdArray<bdQoSProbeEntryWrapper>, bdHashingClass> m_probesResolving;
    bdHashMap<unsigned int, bdQoSProbe::bdQoSProbeEntryWrapper, bdHashingClass> m_probesProbing;
};

class bdSecurityKeyMapListener
{
public:
    void onSecurityKeyRemove(bdSecurityID&);
};

class bdSecurityKeyMap
{
public:
    bool initKey(bdSecurityID&, bdSecurityKey&);
    bool registerKey(bdSecurityID&, bdSecurityKey&);
    bool unregisterKey(bdSecurityID&);
    bool get(bdSecurityID&, bdSecurityKey&);
    bool contains(bdSecurityID&);
    void clear();
    void registerListener(bdSecurityKeyMapListener*);
    void unregisterListener();
protected:
    bdSecurityKeyMapListener* m_listener;
    bdHashMap<bdSecurityID, bdSecurityKey, bdHashingClass> m_map;
};

struct $580888C0E76BEA18C0DDD064E36B47DD // ??
{
    target_t targets[32];
    unsigned int targetCount;
};

struct pathnode_resized_links_t
{
    pathnode_t* m_node;
    pathlink_s* m_original_links;
    int m_original_link_count;
    pathlink_s* m_new_links;
    int m_new_link_count;
};

struct auto_rigid_body
{
    user_rigid_body* rb;
    struct centity_t* cent;
    int frame_count;
    struct auto_rigid_body* next;
    phys_inplace_avl_tree_node<auto_rigid_body> m_avl_node_info;
    phys_inplace_avl_tree_node<auto_rigid_body>* get_avl_node(auto_rigid_body*);
    centity_t* get_avl_key(auto_rigid_body*);
    void set_avl_key(auto_rigid_body*, centity_t*);
    void add(centity_t*, class gjk_physics_collision_visitor*, const int);
    void remove_ent(centity_t*);
    void update();
    rigid_body* ent_has_auto_rigid_body(struct centity_t*);
};

struct gjk_aabb_t : public gjk_base_t
{
    gjk_aabb_t* create(phys_vec3&, phys_vec3&, int, gjk_collision_visitor*);
    gjk_aabb_t* spu_fetch_async(gjk_aabb_t*, int);
    void  destroy(gjk_aabb_t*);
    void  support(phys_vec3&, phys_vec3*, phys_vec3*);
    void  get_simplex(cached_simplex_info&, const int, phys_vec3*, phys_vec3*);
    const phys_vec3  get_center();
    void  get_feature(phys_contact_manifold*);
    void  calc_aabb(phys_mat44&, phys_vec3*, phys_vec3*);
    const bool  is_walkable(phys_vec3&, phys_vec3&);
    cbrush_t* get_brush();
    const unsigned int  get_type();
    bool  is_polyhedron();
    void  set_brush(cbrush_t*);
    phys_vec3 m_center_local;
    phys_vec3 m_dims;
    cbrush_t* m_brush;
};

class phys_convex_hull
{
    struct ch_triangle
    {
        phys_vec3 m_normal;
        phys_vec3* m_verts[3];
        const float get_dist(phys_vec3&);
    };
    struct ch_edge
    {
        phys_vec3* m_verts[2];
    };
    enum
    {
        MAX_INPUT_VERTICES = 6144
    };
    phys_static_array<phys_vec3, 6144> m_vertex_buffer;
    void  reset_vertex_buffer();
    void  add_vertex_to_buffer(phys_vec3&);
    phys_static_array<phys_vec3*, 6144> m_intermediate_vertex_list;
    phys_static_array<ch_triangle, 256> m_intermediate_triangle_list;
    phys_static_array<ch_edge, 128> m_intermediate_edge_list;
    phys_static_array<phys_vec3*, 128> m_convex_hull_vert_list;
    phys_static_array<phys_convex_hull::ch_triangle, 128> m_convex_hull_triangle_list;
    void  add_convex_hull_triangle(ch_triangle*);
    void  add_convex_hull_vert(phys_vec3**);
    void  add_intermediate_edge(phys_vec3*, phys_vec3*);
    void  add_triangle_edges(ch_triangle*);
    void  create_intermediate_triangle(phys_vec3*, phys_vec3*, phys_vec3*);
    void  destroy_intermediate_triangle(ch_triangle*);
    phys_vec3** support_intermediate_verts(phys_vec3&);
    void  calculate_initial_triangle_vertices();
    void  init_convex_hull();
    const float tetrahedron_volume(phys_vec3&, phys_vec3&, phys_vec3&, phys_vec3&);
    const float calc_expansion_volume(phys_vec3&);
    void  create_edge_list(phys_vec3&);
    void  remove_inside_verts();
    void  compute_convex_hull(const int, const float);
};

struct dsound_sample_t
{
    IDirectSoundCaptureBuffer* DSCB;
    IDirectSoundBuffer* DSB;
    unsigned long dwBufferSize;
    unsigned long dwCaptureOffset;
    unsigned int currentOffset;
    unsigned int lastOffset;
    unsigned int currentBufferLength;
    int stopPosition;
    unsigned int lastPlayPos;
    int bytesBuffered;
    int mode;
    int frequency;
    int volume;
    int pan;
    int channels;
    bool playing;
    int channel;
    unsigned char playMode;
};

struct sd_mix_master_param
{
    SndRvParams radverb;
    sd_mix_param_state state;
    sd_mix_bus_param bus;
    SndDspDynamoParam dyn1;
    SndDspDynamoParam dyn2;
    SndDspMasterEqParam eq;
    SndDspVoiceFilterParam voiceFilter;
    SndDspFutzParam gfutz;
    SndDspFutzParam pfutz;
    unsigned char padding[36];
};

struct AudioState
{
    unsigned char AUDC;
    unsigned char AUDV;
    unsigned char AUDF;
    unsigned char output;
    int dividerCount;
    int dividerMax;
    unsigned int poly_4;
    unsigned int poly_5;
    unsigned int poly_9;
};

struct TIAState
{
    void* pixels;
    int pitch;
    int height;
    int linePosition;
    int lineCount;
    int state;
    bool pendingVSync;
    int posP0;
    int posP1;
    int posM0;
    int posM1;
    int posBL;
    int HMP0;
    int HMP1;
    int HMM0;
    int HMM1;
    int HMBL;
    unsigned char GRP0;
    unsigned char GRP0D;
    unsigned char GRP1;
    unsigned char GRP1D;
    unsigned char ENABL;
    unsigned char ENABLD;
    unsigned char GRPCache[4][9];
    unsigned char GRPCached[4];
    unsigned char CTRLPF;
    unsigned char PF0;
    unsigned char PF1;
    unsigned char PF2;
    unsigned char playFieldCache[40];
    bool playFieldDirty;
    unsigned char NUSIZ0;
    unsigned char REFP0;
    unsigned char NUSIZ1;
    unsigned char REFP1;
    unsigned char xCache[2][160];
    bool xCacheDirty[2];
    AudioState audio[2];
    int audioCycles;
    int audioResampleCount;
    int audioReadSample;
    int audioWriteSample;
    unsigned char audioBuffer[4096];
    SndDspBiquadState outputFilter;
    float dcBlockX;
    float dcBlockY;
    unsigned char reg[64];
};

struct MOSState
{
    unsigned short PC;
    unsigned char SP;
    unsigned char X;
    unsigned char Y;
    unsigned char A;
    unsigned char SR;
};

struct PIAState
{
    int interval;
    int intervalRemaining;
    unsigned char stat;
    unsigned char timer;
    unsigned char SWCHA;
    unsigned char SWCHB;
    unsigned char RAM[128];
};

struct ROMInfo
{
    char* name;
    ROMType type;
    void* data;
    unsigned int size;
    bool usesPaddles;
};

struct DPCChannel
{
    unsigned short counter;
    unsigned char top;
    unsigned char bottom;
    unsigned char flag;
    unsigned char musicMode;
    unsigned char osc;
};

struct DPCState
{
    DPCChannel channel[8];
    unsigned char rnd;
};

struct Machine
{
    MOSState MOS;
    PIAState PIA;
    TIAState TIA;
    ROMInfo* ROM;
    DPCState DPC;
    int bank;
    int paddle[4];
    unsigned int paddleCycles[4];
    int debug;
    unsigned int MOSCycles;
    unsigned int PIACycles;
    unsigned int TIACycles;
    unsigned int DPCCycles;
};

struct NTPMessage
{
    unsigned int header;
    unsigned int root_delay;
    unsigned int root_dispersion;
    unsigned int reference_indentifier;
    unsigned long long reference_timestamp;
    unsigned long long originate_timestamp;
    unsigned long long receive_timestamp;
    unsigned long long transmit_timestamp;
};

struct ConversionArguments
{
    int argCount;
    char* args[9];
};

class bdUPnPConfig
{
    enum bdUPnPRunMode
    {
        BD_UPNP_DO_PORT_MAPPING = 0,
        BD_UPNP_EXTERNAL_IP_ONLY = 1
    };
public:
    void reset();
    void sanityCheckConfig();
    float m_discoveryTimeout;
    float m_responseTimeout;
    float m_connectTimeout;
    bdUPnPRunMode m_runMode;
    unsigned int m_discoveryRetries;
    bool m_disabled;
    bdInetAddr m_gatewayAddr;
    bool m_onlyUseGateway;
};

class bdSocketRouterConfig
{
public:
    void reset();
    void sanityCheckConfig();
    bool m_ignoreConnectionReset;
    float m_DTLSAssociationReceiveTimeout;
    unsigned int m_maxConnectionResets;
    bool m_simulateNAT;
};

class bdNetStartParams
{
public:
    bool m_onlineGame;
    unsigned short m_gamePort;
    bdSocket* m_socket;
    bdArray<bdString> m_natTravHosts;
    unsigned short m_natTravPort;
    class bdArray<bdInetAddr> m_localAddresses;
    class bdAddr m_overridePublicAddr;
    enum bdNATType m_overrideNATType;
    class bdGetHostByNameConfig m_hostNameLookupConfig;
    bdUPnPConfig m_UPnPConfig;
    bool m_useAnyIP;
    unsigned int m_threadStackSize;
    bdSocketRouterConfig m_socketRouterConfig;
};

struct _DM_CMDCONT
{
    HRESULT(*HandlingFunction)(_DM_CMDCONT*, char*, unsigned long);
    unsigned long DataSize;
    void* Buffer;
    unsigned long BufferSize;
    void* CustomData;
    unsigned long BytesRemaining;
};

struct DataNode
{
    DataNode* next;
    DataNodeType type;
    char* data;
    int len;
};

enum XAUDIO2_DEVICE_ROLE
{
    NotDefaultDevice = 0,
    DefaultConsoleDevice = 1,
    DefaultMultimediaDevice = 2,
    DefaultCommunicationsDevice = 4,
    DefaultGameDevice = 8,
    GlobalDefaultDevice = 15,
    InvalidDeviceRole = -16
};

struct XAUDIO2_DEVICE_DETAILS
{
    wchar_t DeviceID[256];
    wchar_t DisplayName[256];
    XAUDIO2_DEVICE_ROLE Role;
    WAVEFORMATEXTENSIBLE OutputFormat;
};

struct __declspec(align(4)) jpeg_encode_state
{
    unsigned __int16* qt;
    unsigned __int16* DcCode;
    unsigned __int16* DcSize;
    unsigned __int16* AcCode;
    unsigned __int16* AcSize;
    __int16 ldc;
};

struct jpeg_encode
{
    char jpeg_Lqt[64];
    char jpeg_Cqt[64];
    unsigned __int16 jpeg_ILqt[64];
    unsigned __int16 jpeg_ICqt[64];
    unsigned int jpeg_lcode;
    unsigned __int16 jpeg_bitindex;
    jpeg_encode_state jpeg_encode_block_state_y;
    jpeg_encode_state jpeg_encode_block_state_u;
    jpeg_encode_state jpeg_encode_block_state_v;
};

struct vpx_rational
{
    int num;
    int den;
};

enum vpx_enc_pass
{
    VPX_RC_ONE_PASS = 0x0,
    VPX_RC_FIRST_PASS = 0x1,
    VPX_RC_LAST_PASS = 0x2,
};

enum vpx_rc_mode
{
    VPX_VBR = 0x0,
    VPX_CBR = 0x1,
};

struct vpx_fixed_buf
{
    void* buf;
    unsigned int sz;
};

enum vpx_kf_mode
{
    VPX_KF_FIXED = 0x0,
    VPX_KF_AUTO = 0x1,
    VPX_KF_DISABLED = 0x0,
};

struct vpx_codec_enc_cfg
{
    unsigned int g_usage;
    unsigned int g_threads;
    unsigned int g_profile;
    unsigned int g_w;
    unsigned int g_h;
    vpx_rational g_timebase;
    unsigned int g_error_resilient;
    vpx_enc_pass g_pass;
    unsigned int g_lag_in_frames;
    unsigned int rc_dropframe_thresh;
    unsigned int rc_resize_allowed;
    unsigned int rc_resize_up_thresh;
    unsigned int rc_resize_down_thresh;
    vpx_rc_mode rc_end_usage;
    vpx_fixed_buf rc_twopass_stats_in;
    unsigned int rc_target_bitrate;
    unsigned int rc_min_quantizer;
    unsigned int rc_max_quantizer;
    unsigned int rc_undershoot_pct;
    unsigned int rc_overshoot_pct;
    unsigned int rc_buf_sz;
    unsigned int rc_buf_initial_sz;
    unsigned int rc_buf_optimal_sz;
    unsigned int rc_2pass_vbr_bias_pct;
    unsigned int rc_2pass_vbr_minsection_pct;
    unsigned int rc_2pass_vbr_maxsection_pct;
    vpx_kf_mode kf_mode;
    unsigned int kf_min_dist;
    unsigned int kf_max_dist;
};

enum vpx_codec_cx_pkt_kind
{
    VPX_CODEC_CX_FRAME_PKT = 0x0,
    VPX_CODEC_STATS_PKT = 0x1,
    VPX_CODEC_PSNR_PKT = 0x2,
    VPX_CODEC_CUSTOM_PKT = 0x100,
};

struct vpx_codec_cx_pkt
{
    vpx_codec_cx_pkt_kind kind;
    union {
        struct {
            void* buf;
            unsigned int sz;
            __int64 pts;
            unsigned int duration;
            unsigned int flags;
        } frame;
        vpx_fixed_buf twopass_stats;
        struct vpx_psnr_pkt {
            unsigned int samples[4];
            unsigned __int64 sse[4];
            long double psnr[4];
        } psnr;
        vpx_fixed_buf raw;
        char pad[124];
    } data;
};

#include <nvapi.h>