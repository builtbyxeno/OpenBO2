#pragma once

#include "types.h"

//t6/code/src_noserver/universal/assertive.cpp
int HideWindowCallback(HWND__ *hwnd, int lParam);
void FixWindowsDesktop();
void TRACK_assertive();
char SkipLines(int lineCount, _iobuf *fp);
bool ParseMapFile(_iobuf *fp, unsigned int baseAddress, const char *mapName);
unsigned int GetModuleBase(const char *name);
void LoadMapFilesForDir(const char *dir);
int StackTrace_ResolveSymbols();
int StackTrace_Generate(int len, char *msg);
int StackTrace_Walk(int ignoreCount, void *context);
AddressInfo_s *StackTrace_GetAddressInfo(int *addressCount);
void StackTrace_ResetAddressInfo();
void CopyMessageToClipboard(const char *msg);
char AssertNotify(int type, AssertOccurance occurance);
int Assert_BuildAssertMessageWithStack(const char *expr, const char *extra, const char *filename, int line, int type, int messageLen, char *message);
BOOL IsDebuggerConnected();
void RefreshQuitOnErrorCondition();
bool QuitOnError();

//t6/code/src_noserver/universal/blackbox.cpp
int BB_FindThrottledType(unsigned int hash, int *pos);
char BB_CheckThrottle(const char *name);
void BB_SetThrottle(const char *name, int throttle);
void BB_Print(ControllerIndex_t controllerIndex, const char *name, const char *fmt, ...);
void GScr_BBPrint();
void BB_WriteInstanceData(ControllerIndex_t controllerIndex);
int BB_RegisterHighWaterMark(const char *name);
void BB_SetHighWaterMark(int idx, unsigned int value);
void BB_SetupMsg();
void BB_Enable_f();
void BB_Disable_f();
void BB_Throttle_f();
void BB_Start();
void BB_Start_f();
void BB_Send(ControllerIndex_t controllerIndex, bool force, bool bandwidthLimited);
void BB_Alert(const char *filename, int line, const char *type, const char *msg);
void BB_Notify(bool daily, const char *recipient, const char *msg, bool immediate);
void BB_ResetHighWaterMarks();
void BB_ResetHighWaterMark(const char *name);
void BB_Send_f();
void BB_Init();

//t6/code/src_noserver/universal/blackbox_data.cpp
void BB_InitStringCache();
void BB_ClearStringCache();
unsigned int BB_HashString(const char *str, int len);
int BB_CacheString(const char *str, int len);
void __cdecl BB_WriteString(bb_msg_t *msg, const char *str, int len);
void BB_MsgInit(bb_msg_t *msg, void *data, int maxsize);
void BB_MsgInitPPP(bb_msg_t *msg, void *pppHashTable, int size);
void BB_InitDefinitions();
void BB_RewriteDefinitions(bb_msg_t *a1, const void *a2);
int __cdecl BB_BeginDefinition(const char *name);
unsigned __int8 BB_ParseParameter(const char *string, int len);
DefinitionMap *BB_GetDefinitionMap(unsigned int nameHash, unsigned int formatHash);
int BB_ParseAndCacheFormatString(bb_msg_t *msg, const char *name, const char *fmt, int *parameterCount, const unsigned __int8 **parameters);
void BB_WriteFormatParameters(const void *a1, bb_msg_t *msg, int parameterCount, const unsigned __int8 *parameters, char *args);

//#include "universal/blackbox_data.h"

//#include "universal/com_color.h"

//t6/code/src_noserver/universal/com_constantconfigstrings.cpp
void CCS_ClearConstantConfigStrings();
void CCS_ValidateChecksums(int serverChecksum, int clientChecksum);
int CCS_GetChecksum();
void CCS_LoadConstantConfigStrings(const char *mapname, const char *gametype);
const GfxViewParms *CCS_GetConfigStringValue(const int rowNum);
int CCS_FindConfigStringRow(const char *value, const int previousRow);

//t6/code/src_noserver/universal/com_convexhull.cpp
void Com_InitialHull(const vec2_t *points, unsigned int *pointOrder, unsigned int pointCount, unsigned int *hullOrder);
unsigned int Com_RecursivelyGrowHull(const vec2_t *points, unsigned int *pointOrder, unsigned int pointCount, unsigned int firstIndex, unsigned int secondIndex, unsigned int *hullOrder, unsigned int hullPointCount);
unsigned int Com_GrowInitialHull(const vec2_t *points, unsigned int *pointOrder, unsigned int pointCount, unsigned int *hullOrder);
void Com_TranslatePoints(vec2_t *points, unsigned int pointCount, vec2_t *offset);
unsigned int Com_ConvexHull(unsigned int a1, vec2_t *points, unsigned int pointCount, vec2_t *hull);

//t6/code/src_noserver/universal/com_encode.cpp
int Com_EncodeYEnc(unsigned __int8 *indata, int inlen, char *outdata, int outlen);
int Com_DecodeYEnc(const char *indata, unsigned __int8 *outdata, int outlen);

//t6/code/src_noserver/universal/com_expressions.cpp
char *GetOperandAsString(Operand operand);
void Expression_Free(ExpressionStatement *statement);
expressionEntry *Expression_Alloc(ExpressionAllocState *allocState, int size);
int Expression_ParseOperatorToken(const char *token);
expressionEntry *Expression_HashOperand(int a1, ExpressionAllocState *a2, const char *str);
expressionRpn *MakeRPN(expressionEntry *entry, int *length);
char Expression_Parse(const char **text, ExpressionStatement *statement, void *compileBuffer, int compileBufferSize);
char Expression_Read(int handle, ExpressionStatement *statement);

//t6/code/src_noserver/universal/com_expressions_eval.cpp
void AddOperandToStack(OperandStack *dataStack, Operand *data, bool addAddress);
char *GetSourceString(Operand operand);
void StringCopyZ(char *buffer, const char *string, int size);
char *GetTempString();
char *CopyTempString(const char *string);
double GetSourceFloat(Operand *source);
int GetSourceInt(Operand *source);
__int64 GetSourceInt64(Operand *source);
const char *GetNameForValueType(expDataType valType);
void GetMilliseconds(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDualWield(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsFuelWeapon(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPartyMissingMapPack(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPartyMissingMapPackError(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsInGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
const char *GetLocalizedTimeRemaining(int secondsRemaining);
void ShowBusyDotsIndicator(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetMaxRecommendedPlayers(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AreWeAcceptingInvite(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTimeLeft(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGameTime(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGametypeObjective(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGametypeName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGametypeInternal(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void UI_GetOnlineFriendCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFollowing(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanSpecCycle(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanSpecFree(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemSelectedLayer(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemPurchasedLayerCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemIsModified(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemSelectedBackground(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTotalPlayersOnlineString(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoPlaying(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoClipRecording(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoClipPlaying(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoClipPreviewRunning(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoMovieRendering(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoThirdPersonCamera(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoMovieCamera(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDisplayingPartyScoreboard(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoTitleName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoTitleDescription(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoAuthor(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoTimeInfo(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoDuration(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoSegmentCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsClipModified(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanStartDemoPlayback(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoCameraEditMode(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoDollyCamera(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetHighlightedCameraMarker(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsRepositioningCameraMarker(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDollyCamMarkerCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemoHighlightReelMode(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsCurrentOrPreviousMapEntryAvailable(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentMapTableName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentMapName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentGameType(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPreviousMapName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPreviousGameType(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsPartyReady(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void HowManyReadiesNeeded(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsExtraCamActive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentWeapon(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsExtraCamStatic(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void HasTacticalMaskOverlay(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void InVehicle(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTimeUntilNewContracts(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanTagAndName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetXUID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetXUID_ull(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetSelfGamertag(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsProfileSignedIn(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
bool GetSearchState(ddlState_t *searchState, OperandList *operandList, int listStartIndex);
void GetStatValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetControllerType(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsStableStatsBufferInitialized(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetIndexIntoMatchScoreboard(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumWeaponUnlocks(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumFeatureUnlocks(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetRenderTooltip(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetMaxControllerCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFileshareRecentGamesCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void MenuHasFocus(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetRank(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPrestige(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
bool IsClassBonusMatch(const char *tableData, const char *playerData);
const char *ClassBonusStatQuery(ControllerIndex_t controllerIndex, const char *statName, const char *className);
int FindClassBonusMatches(LocalClientNum_t localClientNum, const StringTable *table, int *rowMatches, const int numRows, const char *statName, const char *className, const int column, const int ignoreRow);
int GetClassBonusInternal(LocalClientNum_t localClientNum, const StringTable *table, const char *className);
void GetMachineID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLocalClientNum(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsPrimaryLocalClient(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetSelectedEmblemLayer(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ValidateLocalizedStringRef(const char *token, int tokenLen);
void GetLeaderboardValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUsedControllerCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNonUsedControllerCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPrimaryController(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsControllerBeingUsed(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SessionMode_IsOnlineGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SessionMode_IsSystemlinkGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SessionMode_IsPublicOnlineGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SessionMode_IsZombiesGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SessionMode_IsPrivateOnlineGame(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentPlatform(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCurrentExe(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
int Expression_GetIndexForFunction(int func);
void Expression_Rebase(ExpressionStatement *statement);
void Expression_Error(const char *str, ...);
void Expression_Warn(const char *str, ...);
void Expression_TraceInternal(const char *str, ...);
char GetOperand(OperandStack *dataStack, Operand *data, Operand **address);
char GetOperandList(OperandStack *dataStack, OperandList *list);
void GetDvarValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDvarStringValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDvarBoolValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDvarIntValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDvarFloatValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileValueAsString(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileStringValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileArrayStringValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileFloatValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileIntValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetProfileBoolValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void FormatFloat(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
const UILocalVar *GetLocalVar(LocalClientNum_t localClientNum, Operand *source);
void GetLocalVarStringValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLocalVarBoolValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLocalVarIntValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLocalVarFloatValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetSinValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCosValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlayerField(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFieldForTeam(const LocalClientNum_t localClientNum, team_t team, Operand *fieldName, Operand *result);
void GetOtherTeamField(Operand *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTeamField(Operand *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTeamMarinesField(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTeamOpForField(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTeamThreeField(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUIActive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsViewportLarge(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFlashbanged(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetScoped(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void InKillcam(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingLocationalKillstreak(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void isInGuidedMissile(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCrosshairTraceMeters(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsAirburstWeapon(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetAirburstMeters(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void isWeaponLockStarted(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void isWeaponLockSet(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTurretWeapon(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingAirstrike(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingArtillery(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingNapalm(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingMortar(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSelectingComlink(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetScoreboardVisible(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetIsIntermission(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetIsSuperUser(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUserTier(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetSelectingLocation(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ShowZombieMap(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void PrivatePartyHostInLobby(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AloneInPrivateParty(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AloneInPrivatePartyIgnoreSplitscreen(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AloneInLobby(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AloneInLobbyIgnoreSplitscreen(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GameHost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void InLobby(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void InPrivateParty(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsVisibilityBitSet(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void PrivatePartyHost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Splitscreen(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SplitscreenHost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SplitscreenNum(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsCinematicFinished(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsCinematicWebm(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemLocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemLockedForAll(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsClanTagFeatureLocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanTagFeatureCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanTagFeatureName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsClanTagFeaturePurchased(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanTagFeaturePlevel(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemDualWieldLocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemDualWieldPurchased(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemNew(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemGroupNew(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetAttachmentsFormatted(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetAttachmentName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetAttachmentImage(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetAttachmentDesc(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsAttachmentAllowedOnItemIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeaponOptionImage(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeaponOptionName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeaponOptionGroupIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanRateFilmInTheater(const LocalClientNum_t locaClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoFileID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFileShareTotalVotes(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCounterTotal(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDownloadProgress(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUploadProgress(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUploadTimeRemaining(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void HostMigrationWaitingForPlayers(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeaponOptionUnlockLvl(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeaponOptionUnlockPLevel(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemRef(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemImage(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemUnlockLevel(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemUnlockPLevel(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemMomentumCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemAllocationCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemDualWieldCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemAttachmentRecentlyUnlocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void HasRecentItemAttachmentsUnlocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumItemGroups(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumBulletWeapons(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemGroupByIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUnlockIndexFromGroupName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUnlockLocString(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetRecentUnlocks(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemGroup(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemDesc(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemDualWieldIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemDualWieldBaseIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDefaultClassSlot(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetItemAttachment(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumLives(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void PlayersAlive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlayerStatByName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLowestLocalCP(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetKeyBinding(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetActionSlotUsable(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetHudFade(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsMenuOpen(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void WritingData(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void LogicalNot(const LocalClientNum_t localClientNum, Operand *source, Operand *result);
void BitwiseNot(const LocalClientNum_t localClientNum, Operand *source, Operand *result);
void BitShiftLeft(const LocalClientNum_t localClientNum, Operand *source, Operand *bitsSource, Operand *result);
void BitShiftRight(const LocalClientNum_t localClientNum, Operand *source, Operand *bitsSource, Operand *result);
void GetAdsJavelin(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeapLockBlink(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeapAttackTop(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWeapAttackDirect(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ToUpper(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsInputLockedByLUI(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlaylistName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlaylistCategoryName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SecondsAsTimeDisplay(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void SecondsAsCountdownDisplay(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetBombTime(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlaylistMaxPartySize(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetScore(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGameMessageWindowActive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClientInPlace(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlaceWithTiesForScore(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerState(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerCanOutline(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerCanDuplicate(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemLayerUnlockLevel(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemIconName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemIconUnlockDesc(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemIconCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemIconState(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundIsLocked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundIsClassified(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundIsPurchased(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundMaterial(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemPlayerBackgroundMaterial(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundUnlockDesc(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemStateDisplay(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemCategoryDisplay(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemFilterCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemFilterIconID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void EmblemBackgroundCost(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GridMove(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClientName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ToOrdinal(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void FormatNumberWithCommas(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetScoreForClient(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoSegmentInformation(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoSaveScreenName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoSaveScreenDescription(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTheaterFilmNotSelectedMessage(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDollyCamMarkerInformationForTime(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDemoFreeCamModeName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void DoAllPlayersHaveMapForDemo(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsUsingGamepad(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumSortedItemsEquipped(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemEquipped(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsItemPurchased(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ItemHasDualWield(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ItemIsDualWield(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetNumItemAttachmentsWithAttachPoint(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUserTagFromIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanShowContentFromUser(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsFFOTDFetched(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanRenderClip(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFileShareFilterList(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetLiveGroupCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsPlayerInvitable(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_FUNC_ISCLANMEMBER(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFlagCarrierForTeam(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFlagStatusForTeam(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetContractExpirationType(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetContractCombatTimeLeft(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetContractRewardText(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsTaskInProgress(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetIndexForNthActiveContract(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClanDateFounded(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPlayerCardTitle(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetRankByXUID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetPrestigeByXUID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDisplayLevelByXUID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsLocalPlayerXUID(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetMutedStatus(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSignedIn(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsSignedInToLive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AnySignedIn(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AnySignedInToLive(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AnySignedInToLiveAndStatsFetched(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AreStatsFetched(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void AreContractsFetched(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsTimeSynced(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsAnyControllerMPRestricted(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsContentRatingAllowed(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsDemonwareFetchingDone(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsFacebookLinked(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUIRect(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDStat(char *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetDStatArrayCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCareerDStat(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetStatForFriendOrSelf(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetToastPopupWidth(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetToastPopupIcon(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetToastPopupTitle(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetToastPopupDescription(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFloatAsFormattedString(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWagerWinningsFromMatchScoreboard(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetScoreboardColumnHeader(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetWagerPlaceForMatchScoreboard(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void lbGetStat();
void lbGetDeltaStat(char *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void lbGetCache(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void lbGetScoreboardStat(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUnlockedWeaponItemIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetUnlockedFeatureItemIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCacFactionNameWithButtons(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetImageWidth(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetTextWidth(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void HasFocus(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsVisible(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFeederData(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsCompositeValid(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void TableLookupGetColumnValueForRow(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void TableLookup(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void StatsTableLookup(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetClassBonus(char *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetCACItemIndex(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsFriendFromXuid(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void CanSwitchToLobby(const LocalClientNum_t locaClientNum, itemDef_s *item, OperandStack *dataStack);
void GetFeederCount(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetMapIndexByName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GetGamemodeIndexByName(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RandomIntRange(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void MinValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void MaxValue(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Select(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Choose(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void LocalizeString(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_FUNC_TOINT(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_FUNC_TOSTRING(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_FUNC_TOFLOAT(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_NOOP();
void RPN_FUNC_INVALID();
void RPN_OP_NOT(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_BITWISENOT(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_BITSHIFTLEFT(char *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_BITSHIFTRIGHT(char *a1, const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_NEGATE(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_MULTIPLY(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_DIVIDE(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_MODULUS(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_ADD(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_LESSTHAN(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_LESSTHANEQUALTO(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_GREATERTHAN(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_GREATERTHANEQUALTO(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_EQUALS(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_NOTEQUAL(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_AND(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_OR(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_BITWISEAND(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_BITWISEOR(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_SUBTRACT(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void RPN_OP_COMMA(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void ApproxEquals(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Add64(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Sub64(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Div64(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void Mul64(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void FileExists(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void GameMode_IsMode(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
bool EvaluateExpression(const LocalClientNum_t localClientNum, itemDef_s *item, ExpressionStatement *statement, Operand *results, int resultCount);
const GfxViewParms *GetExpressionResultString(itemDef_s *a1, const LocalClientNum_t localClientNum, itemDef_s *item, ExpressionStatement *statement);
bool IsExpressionTrue(itemDef_s *a1, const LocalClientNum_t localClientNum, itemDef_s *item, ExpressionStatement *statement);
__int64 GetExpressionInt64(itemDef_s *a1, const LocalClientNum_t localClientNum, itemDef_s *item, ExpressionStatement *statement);
double GetExpressionFloat(itemDef_s *a1, const LocalClientNum_t localClientNum, itemDef_s *item, ExpressionStatement *statement);
const GfxViewParms *GetExpressionResultStringCompile(const LocalClientNum_t localClientNum, itemDef_s *item, const char **text, void *compileBuffer, int compileBufferSize);
int GetPlayerStatus(const ControllerIndex_t controllerIndex, unsigned __int64 playerXuid);
void IsPlayerJoinable(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);
void IsPlayerInTitle(const LocalClientNum_t localClientNum, itemDef_s *item, OperandStack *dataStack);

//#include "universal/com_expressions_load_db.h"

//t6/code/src_noserver/universal/com_files.cpp
void TRACK_com_files();
BOOL FS_Initialized();
void FS_CheckFileSystemStarted();
int FS_IwdIsPure(const iwd_t *iwd);
int FS_LoadStack();
BOOL FS_UseSearchPath(const searchpath_s *pSearch);
int FS_LanguageHasAssets(int iLanguage);
int FS_HashFileName(const char *fname, int hashSize);
int FS_HandleForFile(const char *name, FsThread thread);
int FS_HandleForFileCurrentThread(const char *filename);
FILE *FS_FileForHandle(int f);
__int64 FS_filelength(int f);
void FS_ReplaceSeparators(char *path);
void FS_BuildOSPathForThread(const char *base, const char *game, const char *qpath, char *ospath, FsThread thread);
void __cdecl FS_BuildOSPath(const char *base, const char *game, const char *qpath, char *ospath);
int FS_CreatePath(char *OSPath);
void FS_CopyFile(char *fromOSPath, char *toOSPath);
void FS_FCloseFile(int h);
void FS_FCloseLogFile(int h);
int FS_GetHandleAndOpenFile(const char *filename, const char *ospath, FsThread thread);
int FS_FOpenFileWriteToDirForThread(const char *filename, const char *dir, FsThread thread);
int FS_FOpenFileWriteToDir(const char *filename, const char *dir);
int FS_FOpenFileWrite(const char *filename);
int FS_FOpenFileWriteCurrentThread(FsThread a1);
int FS_FOpenTextFileWrite(const char* filename);
int FS_FOpenFileAppend(const char* filename);
int FS_FilenameCompare(const char *s1, const char *s2);
BOOL FS_PureIgnoreFiles(const char *filename);
bool FS_SanitizeFilename(const char *filename, char *sanitizedName, int sanitizedNameSize);
bool FS_FilesAreLoadedGlobally(const char *filename);
BOOL FS_Delete(const char *filename);
int FS_Read(void *buffer, int len, int h);
int FS_Write(const void *buffer, int len, int h);
int FS_WriteToDemo(const void *buffer, int len, int h);
void FS_Printf(int h, const char *fmt, ...);
int FS_Seek(int f, int offset, int origin);
void FS_ResetFiles();
int FS_WriteFile(const char* filename, const void* buffer, int size);
int FS_GetFileOsPath(const char* filename, char* ospath);
int FS_OpenFileOverwrite(const char* qpath);
int FS_ReturnPath(const char *zname, char *zpath, int *depth);
int FS_AddFileToList(HunkUser *user, const char *name, const char **list, int nfiles);
const char **FS_ListFilteredFiles(searchpath_s *searchPath, const char *path, const char *extension, const char *filter, FsListBehavior_e behavior, int *numfiles);
bool FS_CheckLocation(const char *path, int lookInFlags);
int FS_GetFileList(const char *path, const char *extension, FsListBehavior_e behavior, char *listbuf, int bufsize);
void FS_ConvertPath(char *s);
void FS_SortFileList(const char **filelist, int numfiles);
void FS_DisplayPath(int bLanguageCull);
void FS_FullPath_f();
void FS_Path_f();
void FS_AddGameDirectory(const char *path, const char *dir, int bLanguageDirectory, int iLanguage);
void FS_AddLocalizedGameDirectory(const char *path, const char *dir);
void FS_ShutdownSearchPaths(searchpath_s *p);
void FS_ShutdownServerFileReferences(int *numFiles, const char **fileNames);
void FS_ShutdownServerIwdNames();
void FS_ShutdownServerReferencedIwds();
void FS_ShutdownServerReferencedFFs();
void FS_Shutdown();
void FS_RegisterDvars();
void FS_AddDevGameDirs(const char *path, bool allow_devraw);
void FS_Startup(const char* gameName, bool allow_devraw);
void FS_ClearIwdReferences();
void FS_AddIwdPureCheckReference(const searchpath_s *search);
void FS_ShutDownIwdPureCheckReferences();
void FS_InitFilesystem(bool allow_devraw);
void FS_Restart(LocalClientNum_t localClientNum, int checksumFeed);
BOOL FS_IsInCompressedIwd(int f);
void FS_Flush(int f);
char Com_IsAddonMap(const char *mapName, const char **pBaseMapName);
void FS_DisablePureCheck(bool disable);
int FS_FOpenFileReadForThread(const char *filename, int *file, FsThread thread, char *outfullpath, int outfullpathsize);
int FS_FOpenFileReadCurrentThread(const char *filename, int *file);
void Com_GetBspFilename(char *filename, int size, const char *mapname);
int FS_FOpenFileRead(const char *filename, int *file);
BOOL FS_TouchFile(const char *name);
int FS_FOpenFileByMode(const char* qpath, int* f, fsMode_t mode);

//#include "universal/com_files_wrapper_stdio.h"

//t6/code/src_noserver/universal/com_math.cpp
void TRACK_com_math();
long double I_normCDF(long double x);
double random();
double crandom();
int RandWithSeed(int *seed);
double LinearTrack(float tgt, float cur, float rate, float deltaTime);
double LinearTrackAngle(float tgt, float cur, float rate, float deltaTime);
double DiffTrack(float tgt, float cur, float rate, float deltaTime);
double DiffTrackAngle(float tgt, float cur, float rate, float deltaTime);
double GraphGetValueFromFraction(const int knotCount, const vec2_t *knots, const float fraction);
double Q_acos(const float c);
char ClampChar(const int i);
int ClampShort(const int i);
unsigned __int8 DirToByte(const vec3_t *dir);
void ByteToDir(const int b, vec3_t *dir);
int VecNCompareCustomEpsilon(const vec3_t *v0, const vec3_t *v1, float epsilon, int coordCount);
void Vec3ProjectionCoords(const vec3_t *dir, int *xCoord, int *yCoord);
void vectoyaw(vec2_t const &);
void vectosignedyaw(vec2_t const &);
void vectopitch(vec3_t const &);
void vectoangles(vec3_t const &,vec3_t &);
void YawVectors(float yaw, vec3_t *forward, vec3_t *right);
void YawVectors2D(float yaw, vec2_t *forward, vec2_t *right);
void PerpendicularVector(const vec3_t *src, vec3_t *dst);
double PointToLineSegmentDistSq2D(const vec2_t *point, const vec2_t *start, const vec2_t *end);
double PointToLineSegmentDistSq(const vec3_t *point, const vec3_t *start, const vec3_t *end);
int BoxInPlanes(const vec4_t *planes, unsigned int numPlanes, const vec3_t *mins, const vec3_t *maxs);
int SphereInPlanes(const vec4_t *planes, unsigned int numPlanes, const vec3_t *center, const float radius);
void MatrixIdentity33(vec3_t *out);
void MatrixIdentity44(vec4_t *out);
void MatrixMultiply(const vec3_t *in1, const vec3_t *in2, vec3_t *out);
void MatrixVecMultiply(const vec3_t *mulMat, const vec3_t *mulVec, vec3_t *solution);
void MatrixVecMultiplyProject(const vec4_t *mulMat, const vec3_t *mulVec, vec3_t *solution);
void MatrixMultiply43(const vec3_t *in1, const vec3_t *in2, vec3_t *out);
void MatrixMultiply44(const vec4_t *in1, const vec4_t *in2, vec4_t *out);
void MatrixTranspose(const vec3_t *in, vec3_t *out);
void MatrixTranspose44(const vec4_t *in, vec4_t *out);
void MatrixInverse(const vec3_t *in, vec3_t *out);
void MatrixInverseOrthogonal43(const vec3_t *in, vec3_t *out);
void MatrixInverse44(int a1, const vec4_t *mat, vec4_t *dst);
void MatrixTransformVector44(const vec4_t *vec, const vec4_t *mat, vec4_t *out);
void MatrixTransformVector43(const vec3_t *in1, const vec3_t *in2, vec3_t *out);
void MatrixTransposeTransformVector43(const vec3_t *in1, const vec3_t *in2, vec3_t *out);
void MatrixTransformVector43Equals(vec3_t *out, const vec3_t *in);
void VectorAngleMultiply(vec2_t *vec, float angle);
void UnitQuatToAxis(const vec4_t *quat, vec3_t *axis);
void UnitQuatToForward(const vec4_t *quat, vec3_t *forward);
void QuatSlerp(float theta, const vec4_t *from, const vec4_t *to, float frac, vec4_t *result);
long double RotationToYaw(const vec2_t *rot);
void FinitePerspectiveMatrix(float tanHalfFovX, float tanHalfFovY, float zNear, float zFar, vec4_t *mtx);
void SpotLightViewMatrix(int a1, const vec3_t *direction, float rotation, vec4_t *mtx);
void SpotLightViewMatrixDir3(int a1, const vec3_t *dirx, const vec3_t *diry, const vec3_t *dirz, vec4_t *mtx);
void SpotLightProjectionMatrix(float cosFov, float zNear, float zFar, vec4_t *mtx);
void InfinitePerspectiveMatrix(float tanHalfFovX, float tanHalfFovY, float zNear, vec4_t *mtx);
void MatrixForViewer(const vec3_t *origin, const vec3_t *axis, vec4_t *mtx);
void AnglesSubtract(const vec3_t *v1, const vec3_t *v2, vec3_t *v3);
void AnglesSubtract(const vec2_t *v1, const vec2_t *v2, vec2_t *v3);
double AngleNormalize360(const float angle);
double RadiusFromBounds2DSq(const vec2_t *mins, const vec2_t *maxs);
void ExtendBounds(vec3_t *mins, vec3_t *maxs, const vec3_t *offset);
void ExpandBoundsToWidth(vec3_t *mins, vec3_t *maxs);
void AddPointToBounds(const vec3_t *v, vec3_t *mins, vec3_t *maxs);
void AddPointToBounds2D(const vec2_t *v, vec2_t *mins, vec2_t *maxs);
BOOL BoundsOverlap(const vec3_t *mins0, const vec3_t *maxs0, const vec3_t *mins1, const vec3_t *maxs1);
void ExpandBounds(const vec3_t *addedmins, const vec3_t *addedmaxs, vec3_t *mins, vec3_t *maxs);
void AxisClear(vec3_t *axis);
void AxisCopy(const vec3_t *in, vec3_t *out);
void AxisTranspose(const vec3_t *in, vec3_t *out);
void AxisTransformVec3(const vec3_t *axes, const vec3_t *vec, vec3_t *out);
void YawToAxis(float yaw, vec3_t *axis);
void AxisToAngles(const vec3_t *axis, vec3_t *angles);
void Axis4ToAngles(const vec4_t *axis, vec3_t *angles);
int IntersectPlanes(const float **planein, vec3_t *xyz);
int ProjectedWindingContainsCoplanarPoint(const vec3_t *verts, int vertCount, int x, int y, const vec3_t *point);
int PlaneFromPoints(vec4_t *plane, const vec3_t *v0, const vec3_t *v1, const vec3_t *v2);
void ProjectPointOnPlane(const vec3_t *p, const vec3_t *normal, vec3_t *dst);
void SetPlaneSignbits(cplane_s *out);
int __cdecl BoxOnPlaneSide(const vec3_t *emins, const vec3_t *emaxs, const cplane_s *p, const cplane_s *pa, float a5, float a6, float a7);
int IsPosInsideArc(const vec3_t *pos, float posRadius, const vec3_t *arcOrigin, float arcRadius, float arcAngle0, float arcAngle1, float arcHalfHeight);
double Q_rint(const float in);
double ColorNormalize(const vec3_t *in, vec3_t *out);
void ColorSRGBtoLinear(vec3_t const &,vec3_t &);
long double PitchForYawOnNormal(const float fYaw, const vec3_t *normal);
void NearestPitchAndYawOnPlane(const vec3_t *angles, const vec3_t *normal, vec3_t *result);
void Rand_Init(int seed);
unsigned int *GetRandSeed();
double flrand(float min, float max);
int irand(int min, int max);
void AxisToQuat(const vec3_t *mat, vec4_t *out);
void QuatLerp(const vec4_t *qa, const vec4_t *qb, float frac, vec4_t *out);
bool CullBoxFromCone(const vec3_t *coneOrg, const vec3_t *coneDir, float cosHalfFov, const vec3_t *boxCenter, const vec3_t *boxHalfSize);
bool CullBoxFromSphere(const vec3_t *sphereOrg, float radius, const vec3_t *boxCenter, const vec3_t *boxHalfSize);
char CullBoxFromConicSectionOfSphere(const vec3_t *coneOrg, const vec3_t *coneDir, float cosHalfFov, float radius, const vec3_t *boxCenter, const vec3_t *boxHalfSize);
bool CullSphereFromCone(const vec3_t *coneOrg, const vec3_t *coneDir, float cosHalfFov, const vec3_t *sphereCenter, float radius);
int colorTempToXYZ(int result, float a2);
void colorTempMatrix(__m128 a1, vec4_t *finalMatrix, float colorTemp);
void colorHueMatrix(float finalMatrix, __m128 a2, vec4_t *a3, float hue);
void colorSaturationMatrix(vec4_t *finalMatrix, float saturation);
long double I_fnormPDF(float x);
float I_fnormCDF(float x);
void RotatePointAroundVector(vec3_t *dst, const vec3_t *dir, const vec3_t *point, const float degrees);
void Vec3Basis_RightHanded(const vec3_t *forward, vec3_t *left, vec3_t *up);
void UnitQuatToAngles(const vec4_t *quat, vec3_t *angles);
long double RadiusFromBounds(const vec3_t *mins, const vec3_t *maxs);
long double RadiusFromBounds2D(const vec2_t *mins, const vec2_t *maxs);
void SnapPointToIntersectingPlanes(const float **planes, vec3_t *xyz, float snapGrid, float snapEpsilon);

//#include "universal/com_math.h"

//t6/code/src_noserver/universal/com_math_anglevectors.cpp
void AngleVectors(const vec3_t *angles, vec3_t *forward, vec3_t *right, vec3_t *up);
void AnglesToAxis(const vec3_t *angles, vec3_t *axis);
void AnglesToQuat(const vec3_t *angles, vec4_t *quat);
void QuatToAxis(const vec4_t *quat, vec3_t *axis);
void vectosignedangles(vec3_t const &,vec3_t &);
void vectosignedpitch(vec3_t const &);
void AxisToSignedAngles(long double axis, const vec3_t *a2, vec3_t *angles);

//t6/code/src_noserver/universal/com_memory.cpp
void TRACK_com_memory();
int Z_TryVirtualCommitInternal(void *ptr, int size);
void __cdecl Com_AllMemInfo_f();
void *Hunk_FindDataForFileInternal(int type, const char *name, int hash);
void Hunk_ClearDataFor(fileData_s **pFileData, unsigned __int8 *low, unsigned __int8 *high);
void Hunk_ClearData();
void DB_EnumXAssets_LoadObj(XAssetType type, void (*func)(XAssetHeader, void *), void *inData, bool includeOverride);
void DB_EnumXAssetsFor(fileData_s* fileData, int fileDataType, void (*func)(XAssetHeader, void*), void* inData);
char DB_EnumXAssetsTimeout_LoadObj(XAssetType type, void (*func)(XAssetHeader, void *), void *inData, bool includeOverride);
void Hunk_AddAsset(XAssetHeader header, void *data);
void DB_EnumXAssets(XAssetType type, void (*func)(XAssetHeader, void*), void* inData, bool includeOverride);
int DB_EnumXAssetsTimeout(XAssetType type, void (*func)(XAssetHeader, void*), void* inData, bool includeOverride, int msec);
void Com_TempMeminfo_f();
int DB_GetAllXAssetOfType_LoadObj(XAssetType type, XAssetHeader *assets, int maxCount);
int DB_GetAllXAssetOfType(XAssetType type, XAssetHeader* assets, int maxCount);
unsigned __int8 *Hunk_AllocAlign(int size, int alignment, const char *name, int type);
unsigned __int8 *Hunk_AllocLowAlign(int size, int alignment, const char *name, int type);
unsigned __int8 *Hunk_Alloc(int size, const char *name, int type);
unsigned __int8 *Hunk_AllocLow(int size, const char *name, int type);
void* Z_Malloc(int size, const char* name, int type);
void Z_Free(void* ptr, int type);
void Z_VirtualFree(void* ptr);
const char* CopyString(const char* string);
void Z_VirtualDecommit(void* ptr, int size);
void FreeString(const char* str);
void Z_VirtualCommit(void* ptr, int size);
void* Z_VirtualReserve(int size);

//t6/code/src_noserver/universal/com_pack.cpp
PackedUnitVec Vec3PackUnitVec(const vec3_t *unitVec);
void Vec3UnpackUnitVec(const PackedUnitVec in, vec3_t *out);
int Vec4PackQuat(const vec4_t *in);
PackedTexCoords Vec2PackTexCoords(const vec2_t *in);
PackedLmapCoords Vec2PackLmapCoords(const vec2_t *in);
void Vec2UnpackTexCoords(const PackedTexCoords in, vec2_t *out);
void Vec2UnpackLmapCoords(const PackedLmapCoords in, vec2_t *out);

//t6/code/src_noserver/universal/com_shared.cpp
char Com_Filter(const char *filter, const char *name, int casesensitive);
char Com_FilterPath(const char *filter, const char *name, int casesensitive);
const char *Com_HashKey(const char *string, int maxlen);
void Com_GetQTime(int time, qtime_s *qtime, bool useLocalTime);
int Com_RealTime(qtime_s *qtime, bool useLocalTime);
void Com_Memset(void *dest, const int val, int count);
void Com_Memcpy(void* dest, const void* src, int count);

//t6/code/src_noserver/universal/com_stringtable.cpp
int StringTable_FirstHashIndex(const StringTable *table, int hash);
int StringTable_LookupNearestRowNumForValue(const StringTable *table, const int comparisonColumn, const char *value, const int row);
int StringTable_LookupRowNumForValue(const StringTable *table, const int comparisonColumn, const char *value);
int StringTable_LookupRowNumForValue(const StringTable *table, const int comparisonColumn1, const char *value1, const int comparisonColumn2, const char *value2, const int comparisonColumn3, const char *value3);
const GfxViewParms *StringTable_GetColumnValueForRow(const StringTable *table, const int row, const int column);
const GfxViewParms *StringTable_Lookup(const StringTable *table, const int comparisonColumn, const char *value, const int valueColumn);
const GfxViewParms *StringTable_Lookup(const StringTable *table, const int comparisonColumn1, const char *value1, const int comparisonColumn2, const char *value2, const int valueColumn);
const GfxViewParms *StringTable_Lookup(const StringTable *table, const int comparisonColumn1, const char *value1, const int comparisonColumn2, const char *value2, const int comparisonColumn3, const char *value3, const int valueColumn);
int StringTable_Find(const StringTable *table, int *results, int maxResults, const int comparisonColumn1, const char *value1, const int comparisonColumn2, const char *value2);
int StringTable_RowCount(const StringTable *table);
unsigned int StringTable_Checksum(const StringTable *table, unsigned int initialCrc);
void StringTable_GetAsset_FastFile(const char *filename, const StringTable **tablePtr);
void StringTable_GetAsset();
void StringTable_GetCoreAsset(CoreStringTable id, const StringTable **tablePtr);
int StringTable_FindCoreAssetIndex(const char *stringTableName);
int CellCompare(const void *a, const void *b);
void StringTable_ResortHashTable(StringTable *table);
bool Scr_GetAssetFromScriptParam(scriptInstance_t inst, const StringTable **tablePtr);
void Scr_TableLookupFindCoreAsset(scriptInstance_t inst);
void Scr_TableLookupRowNum(scriptInstance_t inst);
void Scr_TableLookupColumnForRow(scriptInstance_t inst);
void Scr_TableLookup(scriptInstance_t inst);
void Scr_TableLookupIString(scriptInstance_t inst);

//#include "universal/com_stringtable_load_db.h"

//t6/code/src_noserver/universal/com_stringtable_obj.cpp
int StringTable_HashString(const char *string);
unsigned __int8 *StringTable_Alloc(int size);
void StringTable_ParseFileIntoTable(const char *filename, StringTable *table);
void StringTable_GetAsset_LoadObj(const char *filename, const StringTable **tablePtr);

//t6/code/src_noserver/universal/com_tasks.cpp
int ChunkAllocate(int index, int blocks);
void ChunkFree(int index, int blocks);
int Task_Allocate(int bytes);
void Task_Deallocate(void *ptr, int bytes);
BOOL TaskManager2_GetTaskRuleErrors();
bool TaskManager2_IsTimedIn(TaskRecord *task);
void TaskManager2_ProcessXOverlappedTask(TaskRecord *task);
void TaskManager2_RevertTask(TaskRecord *task);
void TaskManager2_ClearTask(TaskRecord *task);
void TaskManager2_ClearTasks(const TaskDefinition *definition);
void TaskManager2_SkipCallbacksForTaskAfterComplete(TaskRecord *task);
void TaskManager2_SkipCallbacksForTasksAfterComplete(const TaskDefinition *definition);
char TaskManger2_TaskGetInProgressForControllerByName(const char *taskName, const ControllerIndex_t controllerIndex);
BOOL TaskManager2_TaskIsPending(const TaskRecord *task);
void TaskManager2_DumpTasks();
void TaskManager2_RunTaskRules(TaskRecord *task);
void TaskManager2_RecordTaskInfo(TaskRecord *task);
void TaskManager2_Init();
void TaskManager2_ReportTaskComplete(TaskRecord *task, bool success, const char *reason, unsigned int errorcode);
void TaskManager2_FreeAllPendingTasksInternal(const ControllerIndex_t localControllerIndex);
void TaskManager2_HandleTimedOutTask(TaskRecord *TimedOutTask);
void __cdecl TaskManager2_ProcessLocalTask(TaskRecord *task);
void TaskManager2_CancelEndlessTasks(ControllerIndex_t localControllerIndex);
void TaskManager2_ProcessDemonwareTask(TaskRecord *task);
void __cdecl TaskManager2_ProcessNestedTask(TaskRecord *task);
TaskRecord *TaskManager2_CreateTask(const TaskDefinition *definition, const ControllerIndex_t controllerIndex, TaskRecord *nestTask, int timeout);
void TaskManager2_EnumTasksInProgress(void (*func)(TaskRecord *, void *), void *inData);
TaskRecord *TaskManager2_TaskGetInProgressForController(const TaskDefinition *definition, const ControllerIndex_t controllerIndex);
TaskRecord *TaskManager2_TaskGetInProgress(const TaskDefinition *definition);
TaskRecord *TaskManager2_TaskGetInProgressCallBackSkipCallbacks(const TaskDefinition *definition);
BOOL TaskManager2_TaskIsInProgressForController(const TaskDefinition *definition, const ControllerIndex_t controllerIndex);
BOOL TaskManager2_TaskIsInProgress(const TaskDefinition *definition);
int TaskManager2_CountTasksInProgress(const TaskDefinition *definition);
int TaskManager2_CountTasksInProgressForControllerByType(const int controllerindex, const unsigned __int64 type);
void TaskManager2_FreeDeadTasks(const ControllerIndex_t localControllerIndex);
void TaskManager2_ProcessTasks(const ControllerIndex_t localControllerIndex);
void TaskManager2_StartTask(TaskRecord *task);
TaskRecord *TaskManager2_SetupNestedTask(const TaskDefinition *taskdef, ControllerIndex_t controllerIndex, TaskRecord *nestedTask, void *payload);
TaskRecord *TaskManager2_SetupRemoteTask(const TaskDefinition *definition, const ControllerIndex_t controllerIndex, bdRemoteTask *remoteTask, void *payload);
void TaskManager2_ComErrorCleanup();

//t6/code/src_noserver/universal/com_utf.cpp
int utf32_tocase(int wc, int lower);
int utf32_toupper(int wc);
char *utf8_to_utf32(char *in, int len, int *result);
char *utf32_to_utf8(int in, char *out, int len);

//#include "universal/com_vector.h"

//t6/code/src_noserver/universal/com_workercmds.cpp
void Sys_WorkerCmdInit();
bool Sys_IsWorkerCmdReady();
unsigned int *jqCommitMemory(jqBatch *batch, void *input, unsigned int dataSize);
void jqSafeFlush(jqBatchGroup *group, unsigned __int64 batchCount);
unsigned int *jqCallbackPre(jqBatch *batch, const char *name);
void jqCallbackPost(jqBatch *batch, void *data, bool finished);
void Sys_AddWorkerCmdToQueueInternal(jqWorkerCmd *name, void *data, jqQueue *toQueue, WorkerCmdConditional *cond);
void Sys_AddWorkerCmdInternal(jqWorkerCmd *name, void *data, WorkerCmdConditional *cond);
void Sys_AddWorkerCmdGroupedToQueueInternal(jqWorkerCmd *name, void *data, jqBatchGroup *group, jqQueue *toQueue, WorkerCmdConditional *cond);
void Sys_AddWorkerCmdGroupedInternal(jqWorkerCmd *name, void *data, jqBatchGroup *group, WorkerCmdConditional *cond);
void Sys_WaitWorkerCmdInternal(jqWorkerCmd *name);
BOOL Sys_AssistSingleCallback(void *context);
void Sys_AssistSingle();
bool Sys_AssistNeeded();
int Sys_GetWorkerQueuedCountInternal(jqWorkerCmd *name);
BOOL R_FinishedFrontendWorkerCmds();
void R_WaitFrontendWorkerCmds();
void Sys_AssistAndWaitWorkerCmdInternal(jqBatchGroup *group);
void Sys_AssistAndWaitWorkerCmdInternal(jqWorkerCmd *name);
void R_WaitDrawWorkerCmdsOfType(GfxWorkerData *workerData, unsigned __int8 cmdbufType);

//t6/code/src_noserver/universal/curve.cpp
void GetPositionOnCubic(int a1, vec3_t *startPos, vec3_t *startVel, vec3_t *endPos, vec3_t *endVel, float time, vec3_t *output);
// void cCurve::Reset(cCurve *notthis);
// void cCurve::Reinit(cCurve *notthis);
// void cCurve::AddNode(cCurve *notthis, vec3_t *p);
// void cCurve::AddNode(cCurve *notthis, vec3_t *p, float timePeriod);
// void cCurve::GetPosition(cCurve *notthis, float time, vec3_t *pos);
// int cCurve::CurveSortCompare(const void *e1, const void *e2);
// void cCurve::Sort(cCurve *notthis, vec3_t *p, bool is_increasing_sort_order);
// void cCurve::BuildBSpline(cCurve *notthis);
// void cCurve::GetPos(cCurve *notthis, float t, vec3_t *p);
// double cCurve::GetLength(cCurve *notthis);
// void cCurve::SetDraw(cCurve *notthis, const vec4_t *userColor);
// void cCurve::cCurve(cCurve *notthis);
// void cCurve::BuildNonUniform(cCurve *notthis);
// void cCurve::Build(cCurve *notthis);

//t6/code/src_noserver/universal/curvemanager.cpp
// int cCurveManager::GetFreeCurve();
// void cCurveManager::AddNodeToCurve(int curve, vec3_t *p);
// void cCurveManager::AddNodeToCurve(int curve, vec3_t *p, float t);
// void cCurveManager::SortCurve(int curve, vec3_t *p, bool is_increasing_sort_order);
// void cCurveManager::BuildCurve(int curve);
// void cCurveManager::FreeCurve(int curve);
// void cCurveManager::SetCurveBSpline(int curve);
// void cCurveManager::SetCurveDraw(int curve, const vec4_t *color);
// void cCurveManager::GetPos(int curve, float t, vec3_t *p);
// double cCurveManager::GetCurveLength(int curve);

//t6/code/src_noserver/universal/dvar.cpp
void TRACK_dvar();
void Dvar_SetInAutoExec(bool inAutoExec);
bool Dvar_IsSystemActive();
bool Dvar_IsValidName(const char *dvarName);
void Dvar_CopyString(const char *string, DvarValue *value);
void Dvar_WeakCopyString(const char *string, DvarValue *value);
bool Dvar_ShouldFreeCurrentString(dvar_t *dvar);
bool Dvar_ShouldFreeLatchedString(dvar_t *dvar);
bool Dvar_ShouldFreeResetString(dvar_t *dvar);
void Dvar_FreeString(DvarValue *value);
void Dvar_AssignCurrentStringValue(dvar_t *dvar, DvarValue *dest, const char *string);
void Dvar_AssignLatchedStringValue(dvar_t *dvar, DvarValue *dest, const char *string);
void Dvar_AssignResetStringValue(dvar_t *dvar, DvarValue *dest, const char *string);
const char *Dvar_EnumToString(const dvar_t *dvar);
const char *Dvar_IndexStringToEnumString(const dvar_t *dvar, const char *indexString);
const char *Dvar_ValueToString(const dvar_t *dvar, DvarValue value);
bool Dvar_StringToBool(const char *string);
int Dvar_StringToInt(const char *string);
__int64 Dvar_StringToInt64(const char *string);
float Dvar_StringToFloat(const char *string);
void Dvar_StringToVec2(const char *string, vec2_t *vector);
void Dvar_StringToVec3(const char *string, vec3_t *vector);
void Dvar_StringToVec4(const char *string, vec4_t *vector);
int Dvar_StringToEnum(const DvarLimits *domain, const char *string);
void Dvar_StringToColor(const char *string, unsigned __int8 *color);
DvarValue Dvar_StringToValue(const dvarType_t type, const DvarLimits domain, const char *string);
const char *__cdecl Dvar_DisplayableValue(const dvar_t *dvar);
const char *__cdecl Dvar_DisplayableResetValue(const dvar_t *dvar);
const char *__cdecl Dvar_DisplayableLatchedValue(const dvar_t *dvar);
void Dvar_ClampVectorToDomain(float* vector, int components, float min, float max);
DvarValue Dvar_ClampValueToDomain(dvarType_t type, DvarValue value, const DvarValue resetValue, const DvarLimits domain);
bool Dvar_ValueInDomain(dvarType_t type, DvarValue value, DvarLimits domain);
void Dvar_VectorDomainToString(int components, DvarLimits domain, char *outBuffer, int outBufferLen);
const char *Dvar_DomainToString_Internal(dvarType_t type, DvarLimits domain, char *outBuffer, int outBufferLen, int *outLineCount);
const char* Dvar_DomainToString_GetLines(dvarType_t type, DvarLimits domain, char* outBuffer, int outBufferLen, int* outLineCount);
void Dvar_PrintDomain(dvarType_t type, DvarLimits domain);
qboolean Dvar_ValuesEqual(dvarType_t type, DvarValue val0, DvarValue val1);
void Dvar_SetLatchedValue(dvar_t *dvar, DvarValue value);
qboolean Dvar_HasLatchedValue(const dvar_t* dvar);
dvarCallBack_t *findCallBackForDvar(const dvar_t *dvar);
dvar_t *Dvar_FindMalleableVar(int dvarHash);
dvar_t* Dvar_FindMalleableVar(const char* dvarName);
dvar_t *Dvar_FindVar(const char *dvarName);
dvar_t* Dvar_FindVar(int dvarHash);
void Dvar_ClearModified(dvar_t *dvar);
void Dvar_SetModified(dvar_t *dvar);
bool Dvar_GetModified(dvar_t *dvar);
int Dvar_GetInt(const char* dvarName);
unsigned int Dvar_GetUnsignedInt(const dvar_t* dvar);
double Dvar_GetFloat(const dvar_t* dvar);
void Dvar_GetVec2(const dvar_t *dvar, vec2_t *result);
void Dvar_GetVec3(const dvar_t *dvar, vec3_t *result);
void Dvar_GetVec4(const dvar_t *dvar, vec4_t *result);
const char *Dvar_GetString(const dvar_t *dvar);
const char *Dvar_GetVariantString(int dvarHash);
const char *Dvar_GetVariantString(const dvar_t *dvar);
void Dvar_GetUnpackedColor(const dvar_t *dvar, vec4_t *expandedColor);
void Dvar_GetColor(const dvar_t *dvar, unsigned __int8 *color);
double Dvar_GetColorRed(const dvar_t *dvar);
double Dvar_GetColorRed(int dvarHash);
double Dvar_GetColorGreen(const dvar_t *dvar);
double Dvar_GetColorGreen(int dvarHash);
double Dvar_GetColorBlue(const dvar_t *dvar);
double Dvar_GetColorBlue(int dvarHash);
double Dvar_GetColorAlpha(const dvar_t *dvar);
double Dvar_GetColorAlpha(int dvarHash);
bool Dvar_GetLatchedBool(const dvar_t *dvar);
int Dvar_GetLatchedInt(const dvar_t *dvar);
double Dvar_GetLatchedFloat(const dvar_t *dvar);
void Dvar_GetLatchedVec2(const dvar_t *dvar, vec2_t *result);
void Dvar_GetLatchedVec3(const dvar_t *dvar, vec3_t *result);
void Dvar_GetLatchedVec4(const dvar_t *dvar, vec4_t *result);
void Dvar_GetLatchedColor(const dvar_t *dvar, unsigned __int8 *color);
int Dvar_GetResetInt(const dvar_t *dvar);
const char *Dvar_GetResetString(const dvar_t *dvar);
void Dvar_GetResetVec3(const dvar_t *dvar, vec3_t *result);
const char **Dvar_GetDomainEnumStrings(const dvar_t *dvar);
int Dvar_GetDomainEnumStringCount(const dvar_t *dvar);
int Dvar_GetDomainIntMin(const dvar_t *dvar);
int Dvar_GetDomainIntMax(const dvar_t *dvar);
__int64 Dvar_GetDomainInt64Min(const dvar_t *dvar);
__int64 Dvar_GetDomainInt64Max(const dvar_t *dvar);
double Dvar_GetDomainFloatMin(const dvar_t *dvar);
double Dvar_GetDomainFloatMax(const dvar_t *dvar);
double Dvar_GetDomainVecMin(const dvar_t *dvar);
double Dvar_GetDomainVecMax(const dvar_t *dvar);
dvarType_t Dvar_GetType(const dvar_t *dvar);
DvarValue Dvar_GetCurrent(const dvar_t *dvar);
DvarLimits Dvar_GetDomain(const dvar_t *dvar);
const char *Dvar_GetDescription(const dvar_t *dvar);
unsigned int Dvar_GetFlags(const dvar_t *dvar);
const char *Dvar_GetName(const dvar_t *dvar);
void Dvar_Shutdown();
void Dvar_PerformUnregistration(dvar_t *dvar);
void Dvar_UpdateResetValue(dvar_t *dvar, DvarValue value);
void Dvar_ChangeResetValue(char *a1, const dvar_t *dvar, DvarValue value);
void Dvar_UpdateValue(dvar_t *dvar, DvarValue value);
void Dvar_MakeExplicitType(dvar_t *dvar, const char *dvarName, dvarType_t type, unsigned int flags, DvarValue resetValue, DvarLimits domain);
void Dvar_ReinterpretDvar(dvar_t *dvar, const char *dvarName, dvarType_t type, unsigned int flags, DvarValue value, DvarLimits domain);
dvar_t *Dvar_RegisterNew(const char *dvarName, dvarType_t type, unsigned int flags, DvarValue value, DvarLimits domain, const char *description);
void Dvar_AddFlags(dvar_t *dvar, int flags);
int Com_SaveDvarsToBuffer(const char **dvarnames, unsigned int numDvars, char *buffer, unsigned int bufsize);
void Dvar_SetModifiedCallback(const dvar_t *dvar, void (*callback)(const dvar_t *));
void Dvar_SetCanSetConfigDvars(bool canSetConfigDvars);
bool Dvar_CanSetConfigDvar(const dvar_t *dvar);
bool Dvar_CanChangeValue(const dvar_t *dvar, DvarValue value, DvarSetSource source);
void Dvar_SetVariant(dvar_t *dvar, DvarValue value, DvarSetSource source);
void Dvar_UpdateEnumDomain(dvar_t *dvar, const char **stringTable);
bool Dvar_GetBool(const dvar_t *dvar);
int Dvar_GetInt(const dvar_t *dvar);
__int64 Dvar_GetInt64(const dvar_t *dvar);
double Dvar_GetFloat(const dvar_t *dvar);
void Dvar_MakeLatchedValueCurrent(dvar_t *dvar);
void Dvar_Reregister(dvar_t *dvar, const char *dvarName, dvarType_t type, unsigned int flags, DvarValue resetValue, DvarLimits domain, const char *description);
dvar_t *Dvar_RegisterVariant(const char *dvarName, dvarType_t type, unsigned int flags, DvarValue value, DvarLimits domain, const char *description);
dvar_t *_Dvar_RegisterBool(const char *dvarName, bool value, unsigned int flags, const char *description);
dvar_t *_Dvar_RegisterInt(const char *dvarName, int value, int min, int max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterInt64(const char *dvarName, __int64 value, __int64 min, __int64 max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterFloat(const char *dvarName, float value, float min, float max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterVec2(const char *dvarName, float x, float y, float min, float max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterVec3(const char *dvarName, float x, float y, float z, float min, float max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterVec4(const char *dvarName, float x, float y, float z, float w, float min, float max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterString(const char *dvarName, const char *value, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterEnum(const char *dvarName, const char **valueList, int defaultIndex, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterColor(const char *dvarName, float r, float g, float b, float a, unsigned int flags, const char *description);
dvar_t *_Dvar_RegisterLinearRGB(const char *dvarName, float x, float y, float z, float min, float max, unsigned int flags, const char* description);
dvar_t *_Dvar_RegisterColorXYZ(const char *dvarName, float x, float y, float z, float min, float max, unsigned int flags, const char* description);
void Dvar_SetBoolFromSource(dvar_t *dvar, bool value, DvarSetSource source);
void Dvar_SetIntFromSource(dvar_t *dvar, int value, DvarSetSource source);
void Dvar_SetInt64FromSource(dvar_t *dvar, __int64 value, DvarSetSource source);
void Dvar_SetFloatFromSource(dvar_t *dvar, float value, DvarSetSource source);
void Dvar_SetVec2FromSource(dvar_t *dvar, float x, float y, DvarSetSource source);
void Dvar_SetVec3FromSource(dvar_t *dvar, float x, float y, float z, DvarSetSource source);
void Dvar_SetVec4FromSource(dvar_t *dvar, float x, float y, float z, float w, DvarSetSource source);
void Dvar_SetStringFromSource(dvar_t *dvar, const char *string, DvarSetSource source);
void Dvar_SetColorFromSource(dvar_t *dvar, float r, float g, float b, float a, DvarSetSource source);
void Dvar_SetBool(dvar_t *dvar, bool value);
void Dvar_SetInt(dvar_t *dvar, int value);
void Dvar_SetFloat(dvar_t *dvar, float value);
void Dvar_SetVec2(dvar_t *dvar, float x, float y);
void Dvar_SetVec3(dvar_t *dvar, float x, float y, float z);
void Dvar_SetVec4(dvar_t *dvar, float x, float y, float z, float w);
void Dvar_SetVec4FromVec4(dvar_t *dvar, vec4_t *vecin);
void Dvar_SetString(dvar_t *dvar, const char *value);
dvar_t *Dvar_SetOrRegisterString(dvar_t *dvar, const char *dvarName, const char *value);
void Dvar_SetColor(dvar_t *dvar, float r, float g, float b, float a);
void Dvar_SetFromStringFromSource(dvar_t *dvar, const char *string, DvarSetSource source);
void Dvar_SetFromString(dvar_t *dvar, const char *string);
dvar_t *Dvar_SetFromStringByNameFromSource(const char *dvarName, const char *string, DvarSetSource source, unsigned int flags);
void Dvar_SetFromStringByName(const char *dvarName, const char *string);
void Dvar_SetCommand(const char *dvarName, const char *string);
void Dvar_Reset(dvar_t *dvar, DvarSetSource setSource);
void Dvar_SetCheatState();
void Dvar_Init();
void Dvar_LoadDvarsAddFlags(MemoryFile *memFile, unsigned __int16 flags);
void Dvar_LoadDvars(MemoryFile *memFile);
void Dvar_LoadScriptInfo(MemoryFile *memFile);
void Dvar_ResetDvars(unsigned int filter, DvarSetSource setSource);
int Com_LoadDvarsFromBufferOptional(const char **dvarnames, bool *isOptional, unsigned int numDvars, const char *buffer, const char *filename);
void Dvar_SetBoolIfChanged(const dvar_t *dvar, bool value);
void Dvar_SetIntIfChanged(const dvar_t *dvar, int value);
void Dvar_SetFloatIfChanged(const dvar_t *dvar, float value);
void Dvar_SetStringIfChanged(const dvar_t *dvar, const char *newString);
void Dvar_DoModifiedCallbacks();
int Com_LoadDvarsFromBuffer(const char **dvarnames, unsigned int numDvars, const char *buffer, const char *filename);
void Dvar_Sort();
void Dvar_ForEach(void (*callback)(const dvar_t *, void *), void *userData);
void Dvar_ForEachName(void (*callback)(const char *));
void Dvar_ForEachName(LocalClientNum_t localClientNum, void (*callback)(LocalClientNum_t, const char *));

//t6/code/src_noserver/universal/eval.cpp
void Eval_PrepareBinaryOpSameTypes(Eval *eval);
void Eval_PrepareBinaryOpIntegers(Eval *eval);
void Eval_PrepareBinaryOpBoolean(Eval *eval);
bool Eval_AnyMissingOperands(const Eval *eval);
bool Eval_EvaluationStep(Eval *eval);
bool Eval_PushOperator(Eval *eval, EvalOperatorType op);
char Eval_PushInteger(Eval *eval, int value);
char Eval_PushNumber(Eval *eval, long double value);
EvalValue *Eval_Solve(EvalValue *result, Eval *eval);
bool Eval_OperatorForToken(const char *text, EvalOperatorType *op);

//t6/code/src_noserver/universal/memfile.cpp
void MemFile_CommonInit(MemoryFile *memFile, int size, void *buffer, bool errorOnOverflow, bool compress_enabled);
const unsigned __int8 *MemFile_GetSegmentAddess(MemoryFile *memFile, int index);
void MemFile_MoveToSegment(int a1, MemoryFile *a2, MemoryFile *memFile, int index);
void MemFile_WriteDataFlushInternal(MemoryFile *memFile);
void MemFile_WriteDataInternal(MemoryFile *memFile, int byteCount, const void *p);
void MemFile_ReadData(MemoryFile *memFile, int byteCount, void *p);
void MemFile_InitForReading(MemoryFile *memFile, int size, void *buffer, bool compress_enabled);
const GfxViewParms *MemFile_ReadCString(MemoryFile *memFile);

//#include "universal/memfile.h"

//t6/code/src_noserver/universal/mem_firstfit.cpp
HunkUser *Hunk_FirstFitInit(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
void Hunk_FirstFitReset(HunkUser *_user);
void Hunk_FirstFitDestroy(HunkUser *_user);
void *Hunk_FirstFitAlloc(HunkUser *_user, int size, int alignment, const char* name);
void Hunk_FirstFitFree(HunkUser *_user, void *ptr);

//t6/code/src_noserver/universal/mem_fixed.cpp
HunkUser *Hunk_FixedInit(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
void Hunk_FixedReset(HunkUser *_user);
void Hunk_FixedDestroy(HunkUser *_user);
void *Hunk_FixedAlloc(HunkUser* _user, int size, int alignment, const char* name);
void Hunk_FixedFree(HunkUser *_user, void *ptr);

//t6/code/src_noserver/universal/mem_largelocal.cpp

struct LargeLocal
{
    LargeLocal(int sizeParam);
    ~LargeLocal();

    void* GetBuf();

    int startPos;
    int size;
};

void LargeLocalEnd(int startPos);
void LargeLocalEndRight(int startPos);
// void LargeLocal::~LargeLocal(LargeLocal *notthis);
void LargeLocalReset();
int LargeLocalBegin(int size);
int LargeLocalBeginRight(int size);
void* LargeLocalGetBuf(int startPos, int size);
unsigned int LargeLocalRoundSize(int size);
// void LargeLocal::LargeLocal(LargeLocal *notthis, int sizeParam);
// unsigned __int8 *LargeLocal::GetBuf(LargeLocal *notthis);

//t6/code/src_noserver/universal/mem_userhunk.cpp
HunkUser *Hunk_UserDebugInit(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
void Hunk_UserDebugReset(HunkUser *_user);
void Hunk_UserDebugDestroy(HunkUser *_user);
void *Hunk_UserDebugAlloc(HunkUser *_user, int size, int alignment, const char* name);
void Hunk_UserDebugFree(HunkUser *_user, void *ptr);
HunkUser *Hunk_UserDefaultInit(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
void Hunk_UserDefaultDestroy(HunkUser *_user);
void Hunk_UserDefaultFree(HunkUser *user, void *ptr);
HunkUser *Hunk_UserNullInit(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
void Hunk_UserNullReset(HunkUser *_user);
void Hunk_UserNullDestroy(HunkUser *_user);
void *Hunk_UserNullAlloc(HunkUser *_user, int size, int alignment, const char* name);
void Hunk_UserNullFree(HunkUser *user, void* ptr);
HunkUser *Hunk_UserCreateFromBuffer(void *buffer, int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
HunkUser *Hunk_UserCreate(int size, HU_ALLOCATION_SCHEME scheme, unsigned int flags, void *scheme_specific_data, const char *name, int type);
HunkUser *Hunk_UserCreateNull(HunkUserNull *user);
void *Hunk_UserAlloc(HunkUser *user, int size, int alignment, const char *name);
void Hunk_UserFree(HunkUser *user, void *ptr);
void Hunk_UserReset(HunkUser *user);
void Hunk_UserDestroy(HunkUser *user);
void Hunk_UserSetPos(HunkUser *_user, void *pos);
char *Hunk_CopyString(HunkUser *user, const char *in);
void Hunk_UserDefaultReset(HunkUser *_user);
void *Hunk_UserDefaultAlloc(HunkUser *_user, int size, int alignment, const char *name);
void Hunk_UserStartup();
void Hunk_UserShutdown();

//t6/code/src_noserver/universal/physicalmemory.cpp
void PMem_InitPhysicalMemory(PhysicalMemory* pmem, unsigned int memorySize, const char* name, void* memory);
void PMem_Init();
void PMem_BeginAllocInPrim(PhysicalMemoryPrim *prim, const char *name, EMemTrack memTrack);
void PMem_BeginAlloc(const char *name, unsigned int allocType, EMemTrack memTrack);
void PMem_EndAlloc(const char *name, unsigned int allocType);
void PMem_FreeIndex(PhysicalMemory *pmem, unsigned int allocIndex, int allocType, int location);
void PMem_Free(const char *name);
int PMem_GetOverAllocatedSize();
void *_PMem_AllocNamed(unsigned int size, unsigned int alignment, unsigned int type, unsigned int allocType, const char *name, EMemTrack memTrack);
void *_PMem_Alloc(unsigned int size, unsigned int alignment, unsigned int type, unsigned int allocType, EMemTrack memTrack, const char *file, int lineNum);

//t6/code/src_noserver/universal/profile_mem.cpp
void TRACK_profileMem();

//t6/code/src_noserver/universal/query.cpp
void query_Init();

//t6/code/src_noserver/universal/q_parse.cpp
void TRACK_q_parse();
ParseThreadInfo *Com_GetParseThreadInfo();
void Com_InitParse();
void Com_InitParseInfo(parseInfo_t* pi);
void Com_BeginParseSession(const char *filename);
void Com_EndParseSession();
void Com_ResetParseSessions();
void Com_SetSpaceDelimited(int spaceDelimited);
void Com_SetKeepStringQuotes(int keepStringQuotes);
void Com_SetCSV(int csv);
void Com_SetParseNegativeNumbers(int negativeNumbers);
int Com_GetCurrentParseLine();
void Com_SetScriptErrorPrefix(const char *prefix);
const char *Com_GetScriptErrorPrefix();
void Com_SetScriptWarningPrefix(const char *prefix);
const char *Com_GetScriptWarningPrefix();
void Com_ScriptErrorDrop(const char *msg, ...);
void Com_ScriptError(const char *msg, ...);
void Com_ScriptWarning(const char *msg, ...);
void Com_UngetToken();
void Com_ParseSetMark(const char **text, com_parse_mark_t *mark);
void Com_ParseReturnToMark(const char **text, com_parse_mark_t *mark);
int Com_Compress(char *data_p);
const char *Com_GetLastTokenPos();
const char* SkipWhitespace(const char* data, int* newLines);
char *Com_ParseCSV(const char **data_p, int allowLineBreaks);
char *Com_ParseExt(const char **data_p, int allowLineBreaks);
char *Com_Parse(const char **data_p);
char *Com_ParseOnLine(const char **data_p);
ParseTokenType Com_GetTokenType();
int Com_MatchToken(const char **buf_p, const char *match, int warning);
int Com_SkipBracedSection(const char **program, unsigned int startDepth, const int iMaxNesting);
void Com_SkipRestOfLine(const char **data);
int Com_GetArgCountOnLine(const char **data_p);
char *Com_ParseRestOfLine(const char **data_p);
float Com_ParseFloat(const char **buf_p);
float Com_ParseFloatOnLine(const char **buf_p);
int Com_ParseInt(const char **buf_p);
int Com_ParseIntOnLine(const char **buf_p);
unsigned int Com_ParseUIntOnLine(const char **buf_p);
void Com_Parse1DMatrix(const char **buf_p, int x, float *m);

//t6/code/src_noserver/universal/q_shared.cpp
void TRACK_q_shared();
char ColorIndex(unsigned char c);
const char *Com_GetFilenameSubString(const char *pathname);
const char *Com_GetExtensionSubString(const char *filename);
void Com_StripExtension(const char *in, char *out);
__int16 BigShort(__int16 l);
int BigLong(int l);
unsigned __int64 BigLong64(unsigned __int64 l);
__int16 LittleShort(__int16 l);
int LittleLong(int l);
int LittleFloatWrite(float l);
int ShortSwap(__int16 l);
__int16 ShortNoSwap(__int16 l);
int LongSwap(int l);
unsigned __int64 Long64Swap(unsigned __int64 l);
unsigned __int64 Long64NoSwap(unsigned __int64 ll);
double FloatReadNoSwap(int n);
void Swap_Init();
unsigned int I_atoui(const char *str);
__int64 I_atoi64(const char *str);
BOOL I_islower(int c);
BOOL I_isupper(int c);
BOOL I_isalpha(int c);
BOOL I_isdigit(int c);
BOOL I_isalnum(int c);
BOOL I_isforfilename(int c);
void I_strncpyz(char *dest, const char *src, int destsize);
int I_strnicmp(const char *s0, const char *s1, int n);
int I_strncmp(const char *s0, const char *s1, int n);
const char *I_stristr(const char *s0, const char *substr);
int I_stricmp(const char *s0, const char *s1);
int I_strcmp(const char *s0, const char *s1);
int I_stricmpwild(const char *wild, const char *s);
char *I_strlwr(char *s);
char *I_strupr(char *s);
BOOL I_iscsym(int c);
void I_strncat(char *dest, int size, const char *src);
int I_DrawStrlen(const char *str);
bool I_IsSpecialToken(const char *buf);
int I_IsSpecialTokenRecursive(const char *buf);
char *I_CleanChat(char *string);
char *I_CleanStr(char *string);
char I_CleanChar(char character);
int Com_sprintf(char *dest, int size, const char *fmt, ...);
int Com_sprintfPos(char *dest, const int destSize, int *destPos, const char *fmt, ...);
BOOL CanKeepStringPointer(const char *string);
char *I_itoa(int value, char *buf, int bufsize);
char *va(const char *format, ...);
void Com_InitThreadData(int threadContext);
const char *Info_ValueForKey(const char *s, const char *key);
void Info_NextPair(const char **head, char *key, char *value);
void Info_RemoveKey(char *s, const char *key);
void Info_RemoveKey_Big(char *s, const char *key);
BOOL Info_Validate(const char *s);
void Info_SetValueForKey(char *s, const char *key, const char *value);
void Info_SetValueForKey_Big(char *s, const char *key, const char *value);
int KeyValueToField(byte* pStruct, cspField_t* pField, const char* pszKeyValue, const int iMaxFieldTypes, int (*parseSpecialFieldType)(byte*, const char*, const int, const int), void (*parseStrcpy)(byte*, const char*));
BOOL ParseConfigStringToStruct(byte* pStruct, cspField_t* pFieldList, const int iNumFields, const char* pszBuffer, const int iMaxFieldTypes, int (*parseSpecialFieldType)(byte*, const char*, const int, const int), void (*parseStrCpy)(byte*, const char*));
BOOL ParseConfigStringToStructMerged(unsigned __int8 *pStruct, const cspField_t *pFieldList, const int iNumFields, const char *mergedName, const char **pszBuffer, const char **sourceName, char *pszMergedBuffer, const int iMaxFieldTypes, int (*parseSpecialFieldType)(unsigned __int8 *, const char *, const int, const int), void (*parseStrCpy)(unsigned __int8 *, const char *), int (*parseMergeSpecialCase)(const char *, char **, char *, int));
long double GetLeanFraction(const float fFrac);
long double UnGetLeanFraction(const float fFrac);
void AddLeanToPosition(vec3_t *position, const float fViewYaw, const float fLeanFrac, const float fViewRoll, const float fLeanDist);
void OrientationConcatenate(const orientation_t *orFirst, const orientation_t *orSecond, orientation_t *out);
void OrientationInvert(const orientation_t *orient, orientation_t *out);
BOOL Com_IsLegacyXModelName(const char *name);
void Com_DefaultExtension(char *path, int maxSize, const char *extension);
double CMD_GetAnalogButtonValue(usercmd_s *cmd, int whichBit);

//#include "universal/q_shared.h"

//t6/code/src_noserver/universal/reliablemsg.cpp
int RMsg_FindMessageSlot(const int clientSlot, unsigned __int8 sequenceNum);
int RMsg_FindOldestSeq(const int clientSlot);
int RMsg_FindSlotForAddr(netadr_t *to);
void RMsg_DropAllPacketsToAddr(netadr_t *notthis);
void RMsg_Init();
void RMsg_AddMessageAtMsgSlot(const int clientSlot, const int msgSlot, netsrc_t from, netadr_t *to, const unsigned __int8 *msg, const int length);
void RMsg_ShiftMessagesBackInBuffer(reliableClient *client, int bytesShifted);
char __cdecl RMsg_AddMessageForClient(int clientSlot, netsrc_t from, netadr_t *to, const unsigned __int8 *msg, int length);
char RMsg_AddMessage(netsrc_t from, netadr_t *to, msg_t *msg);
char RMsg_AddPrint(netsrc_t from, netadr_t *to, const char *line);
void RMsg_AckSequence(netadr_t *from, unsigned __int8 sequenceNum);
int RMsg_CountOutstandingMessages(const int clientSlot);
void RMsg_AckMsgSlot(reliableClient *client, int clientSlot, int msgSlot);
void RMsg_MarkPacketReceived(netadr_t *from, unsigned __int8 sequenceNum);

//t6/code/src_noserver/universal/surfaceflags.cpp
int Com_SurfaceTypeFromName(const char *name);
const char *Com_SurfaceTypeToName(int iTypeIndex);
bool Com_SurfaceBurns(int iTypeIndex);
bool Com_SurfaceFloats(int iTypeIndex);
double Com_SurfaceDensity(int iTypeIndex);
double Com_SurfaceFrictionScale(int iTypeIndex);
double Com_SurfaceBounceScale(int iTypeIndex);

//t6/code/src_noserver/universal/techset_helper.cpp
char GetFullTechsetName(const char *prefix, const char *materialName, char *name, const char *language, bool isLayerOrDefault);

//t6/code/src_noserver/universal/timing.cpp
void InitTiming();
void NTP_hton(const NTPMessage *src, NTPMessage *dest);
unsigned __int64 NTP_Milliseconds();
char NTP_Sync(const char *server);

//t6/code/src_noserver/universal/vp8dec_webm.cpp
//bool EbmlReadElem(webmPlayback*, unsigned __int64*, unsigned __int64*);
//bool EbmlReadEbmlNumber(webmPlayback*, __int64*, unsigned __int64*);
//bool EbmlReadUnsignedNumber(webmPlayback*, __int64*, __int64);
//bool EbmlReadFloat(webmPlayback*, double*, __int64);
//bool EbmlSkip(webmPlayback*, __int64);
//bool ReadMkvHeaders(webmPlayback*);
//void WebM_DecodeThread(void);
//void WebM_DecodeThread_Sys(unsigned int);
//bool WebM_AudioOut(float*, unsigned int, unsigned int);
//void WebM_Init(void*, unsigned int);
//webmPlayback* WebM_OpenEx(WebM_OpenEx_Param const*);
//webmPlayback* WebM_Open(char const*, GfxImage*);
//bool WebM_Frame(webmPlayback*);
//void WebM_Play(webmPlayback*, bool, bool);
//void WebM_SetDesiredTime(webmPlayback*, float);
//float WebM_Time(webmPlayback*);
//float WebM_GetDuration(webmPlayback*);
//void WebM_FrameAllAutoFrames(void);
//void WebM_Close(webmPlayback*);
//void WebM_Clear(GfxImage*, float, float, float);
//struct webmPlayback* WebM_Open(char const*, char const*, int);
//bool WebM_IsBuffered(webmPlayback*);
//int WebM_CurrentFrameNum(webmPlayback*);
//void WebM_Destroy(void);
//void WebM_Clear(char const*, float, float, float);

//t6/code/src_noserver/universal/win_common.cpp
void TRACK_win_common();
void Sys_Mkdir(const char *path);
void Sys_MkdirEx(const char *_path);
char *Sys_Cwd();
const GfxViewParms *Clan_GetName();
char *Sys_DefaultHomePath();
char *Sys_DefaultInstallPath();
bool Sys_FileExists(const char *path);
bool HasFileExtension(const char* name, const char* extension);
void Sys_ListFilteredFiles(HunkUser *user, const char *basedir, const char *subdirs, const char *filter, char **list, int *numfiles);
char **Sys_ListFiles(const char *directory, const char *extension, const char *filter, int *numfiles, int wantsubs);
int Sys_DirectoryHasContents(const char *directory);
void Sys_InitializeCriticalSections();
void Sys_EnterCriticalSection(CriticalSection critSect);
BOOL Sys_TryEnterCriticalSection(CriticalSection critSect);
void Sys_LeaveCriticalSection(CriticalSection critSect);

struct ScopedCriticalSection
{
    CriticalSection m_critId;
    inline ScopedCriticalSection(CriticalSection critId) : m_critId(critId)
    {
        Sys_EnterCriticalSection(m_critId);
    }
    inline ~ScopedCriticalSection()
    {
        Sys_LeaveCriticalSection(m_critId);
    }
};
