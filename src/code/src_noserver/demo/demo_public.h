#pragma once

#include "types.h"

//t6/code/src_noserver/demo/demo_camera.cpp
AIDemoLockOnValues *Demo_GetAILockOnValues(centity_t *cent);
int Demo_GetAILockOnViewIndex(centity_t *cent);
demoFreeCameraMode Demo_GetCurrentFreeCameraMode();
demoFreeCameraMode Demo_GetNextFreeCameraMode(demoFreeCameraMode currentCameraMode, bool direction);
void Demo_UpdateVisibilityBitsForCameraMode(LocalClientNum_t localClientNum, int cameraMode);
void Demo_FreeCameraCalcView(LocalClientNum_t localClientNum);
void Demo_SaveView(LocalClientNum_t localClientNum);
bool Demo_IsThirdPersonCamera();
bool Demo_IsAnyFreeMoveCamera();
bool Demo_IsMovieCamera();
bool Demo_IsDollyCamera();
bool Demo_IsCameraEditMode();
int Demo_GetHighlightedDollyCamMarker();
bool Demo_IsRepositioningDollyCamMarker();
int Demo_GetDollyCamMarkerCount();
int Demo_GetDollyCamMarkerForTime(int serverTime);
void Demo_GetOriginForDollyCamMarker(int index, vec3_t *result);
void Demo_GetAnglesForDollyCamMarker(int index, vec3_t *result);
demoDollyCameraTimeScaleMode Demo_GetTimeScaleModeForDollyCamMarker(int marker);
double Demo_GetTimeScaleForDollyCamMarker(int marker);
double Demo_GetInterpolatedTimeScaleForDollyCamMarker(LocalClientNum_t localClientNum, int marker);
bool Demo_IsFreeCameraEntityLockOnAllowed();
int Demo_GetHighlightedFreeCameraLockOnEntity();
void Demo_LerpClipCameraValues(LocalClientNum_t localClientNum);
void Demo_RegisterDollyCameraFX();
int Demo_GetTimeForDollyCamMarker(int index);
void Demo_GetInterpolatedSplinePointAndAngles(LocalClientNum_t localClientNum, int serverTime, vec3_t *resultOrigin, vec3_t *resultAngles);
void Demo_GetDollyCamMarkerParameters(int marker, demoDollyCamFX *glowFXValue);
void Demo_ClearDollyCamMarkerFX(LocalClientNum_t localClientNum, int markerIndex);
void Demo_DrawDollyCamPoint(LocalClientNum_t localClientNum, int markerIndex);
void Demo_DrawDollyCamTrack();
;
void Demo_WriteDollyCamKeyFrameInformation(LocalClientNum_t localClientNum, int markerIndex);
void Demo_JumpToDollyCamKeyFrame(LocalClientNum_t localClientNum, int markerIndex);
void Demo_ClearGhostDollyCam(LocalClientNum_t localClientNum);
void Demo_DrawGhostDollyCam(int a1, LocalClientNum_t localClientNum);
bool Demo_ShouldUpdateFreeCamera(LocalClientNum_t localClientNum);
bool Demo_DoesEntitySupportFreeCameraLockOn(centity_t *cent);
unsigned int Demo_GetRenderFxFlagsForEntity(centity_t *cent);
float Demo_GetLockOnHighlightThresholdDistanceForEntity(centity_t *cent);
void Demo_UpdateLockOnCamera(LocalClientNum_t localClientNum, usercmd_s *cmd);
void Demo_UpdateHighlightReelKillcamValues(LocalClientNum_t localClientNum);
void Demo_SwitchCameraMode(LocalClientNum_t localClientNum, demoCameraMode newCamMode);
void Demo_SwitchCamera(LocalClientNum_t localClientNum);
void Demo_SwitchFreeCamMode(LocalClientNum_t localClientNum, demoFreeCameraMode anticlockwise);
bool Demo_IsFreeCameraLockedOnEntity();
bool Demo_IsTimeScaleAdjustmentEnabled(LocalClientNum_t localClientNum);
void Demo_RefreshAllDollyCamFX(LocalClientNum_t localClientNum);
void Demo_DrawDollyCamInformation(LocalClientNum_t localClientNum, int infoEnum);
void Demo_JumpToDollyCamMarkerTime(LocalClientNum_t localClientNum, int markerNum);
void Demo_ApplyNewDollyCamMarkerPosition(LocalClientNum_t localClientNum, bool discardChanges);
void Demo_ClampViewAngleForLockedOnEntity(LocalClientNum_t localClientNum);
void Demo_UpdateLockOnCameraHighlight(LocalClientNum_t localClientNum);
;
void Demo_FreeCameraMove(LocalClientNum_t localClientNum, usercmd_s *cmd);

//t6/code/src_noserver/demo/demo_common.cpp
void Demo_RegisterDvars();
void Demo_SwitchPlayer_f();
void Demo_SaveAndUploadClip_f();
void Demo_SwitchTransition_f();
void Demo_Keyboard_f();
void Demo_DownloadAndPlay_f();
int Demo_CompareDollyCamMarkersBasedOnTime(const void *marker1, const void *marker2);
int Demo_CompareDollyCamMarkersBasedOnKeyframeBufferStart(const void *marker1, const void *marker2);
void Demo_ClearRenderFlag_f();
void Demo_AbortFileshareDownload_f();
bool Demo_IsEnabled();
void Demo_SetDemoState(demoState state);
demoState Demo_GetDemoState();
BOOL Demo_IsIdle();
BOOL Demo_IsRecording();
BOOL Demo_IsPlaying();
demoMain *Demo_GetDemoName();
int Demo_GetTotalSize();
void Demo_Printf(int channel, const char *fmt, ...);
void Demo_Init();
bool Demo_InitWrite();
void Demo_Frame(int msec, int scaledMsec);
void Demo_End();
;
char Demo_WriteToSpawnDebugBuffer(unsigned __int8 *buf, int bufSize);
void Demo_Play_f();
void Demo_Stop_f();
void Demo_Forward_f();
void Demo_Back_f();
void Demo_JumpToStart_f();
void Demo_StartClipRecord_f();
void Demo_PreviewClip_f();
void Demo_DeleteClip_f();
void Demo_SaveSegment_f();
void Demo_MoveSegment_f();
void Demo_DeleteSegment_f();
void Demo_PreviewSegment_f();
void Demo_MergeSegments_f();
void Demo_Screenshot_f();
void Demo_SaveScreenshot_f();
void Demo_CaptureSegmentThumbnail_f();
void Demo_RegenerateHighlightReel_f();
void Demo_RebuildHighlightReelTimeline_f();
// void Demo_SwitchControls_f(const char *a1@<esi>);
void Demo_AddDollyCamMarker_f();
void Demo_RemoveDollyCamMarker_f();
void Demo_SwitchDollyCamMarker_f();
void Demo_RepositionDollyCamMarker_f();
void Demo_UpdateDollyCamMarkerParameters_f();
void Demo_SetLagFlag_f();
void Demo_RegisterCommands();

//t6/code/src_noserver/demo/demo_contentserver.cpp
void Demo_StartStreaming(const ControllerIndex_t controllerIndex);
void Demo_SetUploadFileID();
unsigned __int64 Demo_GetUploadFileID();
void Demo_BBPostDemoStreamStatsForGame();
void Demo_BBPostDemoStreamStatsForInterval();
void Demo_StopStreaming();
void Demo_SetupDWStreamingSocketParams(int sendSocketBuffSize);
void Demo_SetLeagueTags(ControllerIndex_t controllerIndex, int *numTags);
void Demo_SetTags(ControllerIndex_t controllerIndex, int *numTags, bdTag *tags, demoDefaultMetaInfo *info, fileshareCategory_e category, void *optionalParam1);
void Demo_SetStreamingParameters(int svTotalBytesSent, int svMaxBytesPerFrame);
int Demo_GetCurrUsedBuffer();
int Demo_CurrAvailableBuffer();
int Demo_GetMaxBufferSize();
bool Demo_IsStreamingActive();
bool Demo_IsStreamingOverflowed();
bool Demo_IsStreamingFinished();
void Demo_BBPostDemoStreamStatsForRound(int roundNumber);
int Demo_GetEstimatedTimeToFinishStreaming(LocalClientNum_t localClientNum);
bool Demo_SetMetaData(ControllerIndex_t controllerIndex, unsigned __int8 *metaData, int metaDataSize, demoDefaultMetaInfo *info, int duration, bool isPooled);
void Demo_WriteSummary_SuccessCallback(ControllerIndex_t controllerIndex, unsigned __int64 fileID);
;
void Demo_StreamingFailureCallback();
void Demo_UploadMatchRecordData();
unsigned int Demo_ThrottleStream(unsigned int dataSize);
void Demo_AppendToStreamingHistory(int val, bool isAdded);
void Demo_RecordSentPacket(unsigned int size);
unsigned int Demo_WriteToStream(void *data, unsigned int dataSize);
void Demo_SetupStreamingForRecording(ControllerIndex_t controllerIndex, char *demoName);
void Demo_SaveToStreamBuffer(const void *data, int dataSize);
void Demo_SaveScreenshotSummarySuccess(ControllerIndex_t controllerIndex);
void Demo_SaveScreenshotFailure();
void Demo_SaveScreenshotSuccessful(ControllerIndex_t controllerIndex, unsigned __int64 fileID);
void Demo_SaveScreenshotToContentServer(LocalClientNum_t localClientNum, int fileSlot);
void Demo_UploadClipSummarySuccess(ControllerIndex_t controllerIndex);
void Demo_UploadClipFailure();
void Demo_UploadClipSuccess(ControllerIndex_t controllerIndex, unsigned __int64 fileID);
int Demo_MoveToNextClipStreamingPhase();
int Demo_SetupClipStreamingState();
int Demo_SendClipToStreamingBuffer(void *data, unsigned int dataSize, unsigned int bytesUploaded);
void Demo_WriteRecordedClipToContentServer(LocalClientNum_t localClientNum, int slot);
bool Demo_IsDemoDownloading();
void Demo_DownloadFileCallback(void *data, unsigned int dataSize, unsigned int bytesDownloaded, unsigned int fileSize);
unsigned __int8 Demo_DownloadNextFileSegment();
bool Demo_ShouldRetryDownloadOfFileSegment();
void Demo_RetryDownloadOfFileSegment();
void Demo_SetNextDownloadPhase(bool success);
void Demo_DownloadFileSuccess();
void Demo_DownloadFileFailure();
void Demo_DownloadFile(ControllerIndex_t controllerIndex, char *filmName, unsigned __int64 fileId, int fileSize, bool isUserFile, const char *demoMode);
double Demo_GetStreamedDownloadProgress();
bool Demo_IsReadyForStreamedDemoPlayback();
void Demo_ResetReadyForStreamedDemoPlayback();
bool Demo_HaveWeDownloadedNextFileSegmentData();
bool Demo_AreWeStreamingFileDownload();
void Demo_DownloadAndPlaySuccess();
void Demo_DownloadAndPlay(ControllerIndex_t controllerIndex, unsigned __int64 fileID);
bool Demo_ShouldResumeAbortedDemoDownload();
void Demo_ResumeAbortedDemoDownload();

//t6/code/src_noserver/demo/demo_files.cpp
void Demo_InitFileHandlerSystem();
void Demo_AllocateMemoryFromStreamBuffer(int size);
void Demo_ReturnStreamBufferMemory();
bool Demo_IsStreamBufferAllocated();
int Demo_GetCurrentAllocatedFileSize();
char *Demo_GetStreamAllocatedBuffer();
int Demo_GetFileReadOffset();
void Demo_GetDemoPath();
int Demo_OpenFileWrite(const char *filename, const char *dir, bool supressErrors);
int Demo_OpenFileRead(const char *filename, const char *dir, bool supressErrors);
int Demo_Write(const void *buffer, int len, int handle);
int Demo_Read(void *buffer, int len, int handle);
void Demo_CloseFile(int handle);
int Demo_SeekFile(int handle, int offset, int origin);

//t6/code/src_noserver/demo/demo_highlightreel.cpp
demoPlayback *Demo_SetupHighlightReelInformationDefines();
demoPlayback *Demo_SetupHighlightReelStarLevels();
void Demo_InitializeHighlightReelSystem();
demoHighlightReelInformationDefine *Demo_GetHighlightReelInformationDefine(demoHighlightReelInformationType type);
demoHighlightReelInformationDefine *Demo_GetHighlightReelInformationDefineFromBookmarkType(demoBookmarkType bookmarkType, __int16 eType);
int Demo_GetEntityLookAtForBookmark(const demoDefaultBookmark *bookmark);
bool Demo_BookmarkMatchesForClientNum(ClientNum_t clientNum, const demoDefaultBookmark *bookmark);
int Demo_CompareHighlightReelTimelineEventsByStartTime(const void *event1, const void *event2);
int Demo_CompareHighlightReelTimelineEventsByMultipleParameters(const void *event1, const void *event2);
void Demo_HighlightReelFinalizePlayerDeathInformation(demoHighlightReelInformationDefine *infoDefine, demoHighlightReelPreparingInformation *information, demoDefaultBookmark *bookmark, ClientNum_t clientNum, demoHighlightReelPlayerPriority playerPriority);
void Demo_HighlightReelPrepareFirstPersonInformation(int a1, demoDefaultBookmark *a2, demoHighlightReelInformationDefine *infoDefine, demoHighlightReelPreparingInformation *information, int bookmarkIndex, demoDefaultBookmark *bookmark, ClientNum_t clientNum, demoHighlightReelPlayerPriority playerPriority, demoDefaultBookmark *previousDeathBookmark);
void Demo_HighlightReelPrepareSingleEventInformation(demoHighlightReelInformationDefine *infoDefine, demoHighlightReelPreparingInformation *information, int bookmarkIndex, demoDefaultBookmark *bookmark, ClientNum_t clientNum, demoHighlightReelPlayerPriority playerPriority);
int Demo_FinishPendingHighlightReelTimelineUpdates();
bool Demo_HighlightReelShouldFilterPlayer(ControllerIndex_t controllerIndex, int playerIndex, int demoUserPlayerIndex, bool isFFAGame);
bool Demo_HighlightReelShouldFilterByStyle_MP(demoBookmarkType type, __int16 eType, bool overrideEntityCamera);
void Demo_SetupHighlightReelKillcam(LocalClientNum_t localClientNum, int currentProcessingHighlightReelTimelineIndex);
void Demo_UpdateHighlightReelKillcamEntityValidity(LocalClientNum_t localClientNum, int currentProcessingHighlightReelTimelineIndex);
void Demo_ResetHighlightReelKillcam(LocalClientNum_t localClientNum);
void Demo_UpdateHighlightReelTimeScale(LocalClientNum_t localClientNum, int currentProcessingHighlightReelTimelineIndex);
void Demo_SetHighlightReelTransition(demoClipTransition *transition);
const cpose_t *Ragdoll_HandleBody(const cpose_t *pose);
double Demo_GetHighlightReelStarsForPriority(int priority);
void Demo_CancelHighlightReelCreation();
void Demo_ProcessAndFinalizeHighlightReelMoments(int numberOfSegmentsToRetain);
void Demo_SetupHighlightReelTimeline(int a1, LocalClientNum_t localClientNum);
void Demo_HighlightReelUpdate(LocalClientNum_t localClientNum);

//t6/code/src_noserver/demo/demo_party.cpp
void Demo_PartyPlayDemo_f();
void Demo_PartyStopDemo_f();
void Demo_SetDemoLoadedTime();
bool Demo_WasDemoJustLoaded();
void Demo_PartyFinishedLoadingDemo();
void Demo_InitFileShareTaskHandler();
void Demo_ResetFileShareAbort();
bool Demo_IsFileShareAbortInProcess();
ControllerIndex_t Demo_GetFileShareTaskControllerIndex();
char Demo_HaveAllPlayersFinishedDownloading(PartyData_s *party);
char Demo_AreAllPlayersReadyToLoadDemo(PartyData_s *party);
bool Demo_IsStereo3D();
char Demo_HaveAllPlayersFinishedLoadingDemo();
bool Demo_IsHostControlsEnabled();
bool Demo_IsClipAndScreenshotsEnabled();
bool Demo_IsWatchingWithParty();
void Demo_WriteHeartbeat(LocalClientNum_t localClientNum, PartyData_s *party, msg_t *msg);
void Demo_ReadHeartbeat(LocalClientNum_t localClientNum, PartyData_s *party, msg_t *msg);
void Demo_ToggleScoreboard();
bool Demo_DisplayingPartyScoreboard();
void Demo_AbortFileShareDownload(ControllerIndex_t controllerIndex);
bool Demo_CanRenderClip();
void Demo_PartyUpdateDemo_f();
void Demo_FreeDemoMemory_f();
void Demo_RegisterPartyCommands();

//t6/code/src_noserver/demo/demo_playback.cpp
void Demo_DeallocatePlaybackMemory();
void Demo_TagPlayer(demoTaggedPlayers *players, int playerIndex);
void Demo_TagPlayers(LocalClientNum_t localClientNum, demoTaggedPlayers *players);
void Demo_PopulateDefaultMetaInformation(demoDefaultMetaInfo *metaInfo, char *mapName, char *gameType, char *zmMapStartLoc, char *zmGameModeGroup);
;
void Demo_SaveScreenshot(LocalClientNum_t localClientNum, unsigned int fileSlot);
void Demo_EnableSnapshotProcessing();
void Demo_SetWorldFogSnapTransition(LocalClientNum_t localClientNum);
void Demo_SetWorldFogUseSystemTime(LocalClientNum_t localClientNum, bool useSystemTime);
bool Demo_IsPlaybackInited();
bool Demo_IsPaused();
void Demo_SetCompleted(bool flag);
bool Demo_IsShutdownInProgress();
double Demo_GetTimeScale();
double Demo_GetMaxTimeScale();
bool Demo_IsClipPlaying();
void Demo_SetJumpTimeFlag(bool flag);
bool Demo_GetJumpTimeFlag();
void Demo_SetSwitchedPlayersFlag(bool flag);
bool Demo_GetSwitchedPlayersFlag();
__int64 Demo_GetPlayerXUID(ControllerIndex_t controllerIndex);
double Demo_GetAnimTimeAtJump(int entNum);
bool Demo_IsActorCorpseOutOfSync(int corpseIndex, int useCount);
BOOL Demo_ShouldEntityBeVisibleToClient(int entNum);
void Demo_SetupForPlayerSwitch(LocalClientNum_t localClientNum);
void Demo_Pause();
bool Demo_SwitchPlayerInternal(LocalClientNum_t localClientNum, bool reverse, int forceClientNum, bool forceToLivePlayer);
bool Demo_ShouldUpdateViewAngles(LocalClientNum_t localClientNum);
int Demo_GetKeyFrameTime(int index);
int Demo_GetSegmentCount();
bool Demo_IsInformationScreenActive();
void Demo_ActivateInformationScreen(LocalClientNum_t localClientNum, demoInformationScreenTypes screen);
void Demo_ResetSnapshotData();
void Demo_ResetTimeValues(LocalClientNum_t localClientNum, int time);
void Demo_ResetSequenceNumbers(LocalClientNum_t localClientNum, int sequence);
void Demo_ResetWorldInformation(LocalClientNum_t localClientNum, int time);
bool Demo_IsGameHudHidden();
bool Demo_IsCapturingScreenshot(LocalClientNum_t localClientNum);
int Demo_IsRenderingMovie();
void Demo_ClearRenderingMovieFlag();
int Demo_IsHighlightReelMode();
bool Demo_IsCreatingHighlightReel();
bool Demo_IsCreatingHighlightReelKillcam();
int Demo_IsShoutcastMode();
void Demo_SetClipState(demoClipState state);
demoClipState Demo_GetClipState();
bool Demo_IsClipPreviewRunning();
void Demo_CancelPreview();
int Demo_GetClipTime();
int Demo_GetTotalClipDuration();
void Demo_SetClipModified(bool flag);
bool Demo_IsClipModified();
void Demo_PopulateClipPlayerTags();
bool Demo_IsWaitingForDownloadData();
void Demo_WriteConfigStrings(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_UpdateConfigStrings(LocalClientNum_t localClientNum);
void Demo_WriteCustomSnapshotInformation_Actors(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_WriteCustomSnapshotInformation(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_ReadCustomSnapshotInformation_Actors(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_ReadCustomSnapshotInformation(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_GenerateUncompressedSnapshot(int a1, LocalClientNum_t localClientNum, msg_t *msg, demoSnapshotData *snapshotData, bool writeAllPlayerStates);
bool Demo_ShouldGenerateKeyFrameSnapshot(LocalClientNum_t localClientNum, int serverTime);
void Demo_WriteKeyFrameInformation(LocalClientNum_t localClientNum);
char *Demo_AdjustTimeForConfigString(int configStringIndex, const char *string);
char *Demo_AdjustTimeForReliableCommand(const char *cmd);
void Demo_AdjustTimeForMatchState(int currentTime, int clipTime, MatchState *matchstate);
void Demo_AdjustTimeForPlayerStateHudElement(int currentTime, int clipTime, int index, hudelem_s *hudElem);
;
void Demo_AdjustTimeForEntityState(int currentTime, int clipTime, entityState_s *state);
void Demo_WriteClipGameState(LocalClientNum_t localClientNum);
char Demo_CaptureThumbnailForSegment();
unsigned int Demo_WriteTransitionClipCommandBlockToBuffer(int transition, unsigned __int8 *buffer, int maxBufferSize);
void Demo_SaveClipRecordMessageToMainMemory(LocalClientNum_t localClientNum, unsigned __int8 *data, int size, bool forceWrite);
void Demo_OpenManageSegments(LocalClientNum_t localClientNum);
void Demo_ReadHeader();
void Demo_SetDefaultVisionSet(LocalClientNum_t localClientNum);
void Demo_InitPlaybackData(LocalClientNum_t localClientNum);
void Demo_RestorePreDemoSettings();
void Demo_ParseServerCommands(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_ReadMatchState(LocalClientNum_t localClientNum, msg_t *msg, int time);
playerState_s *Demo_ReadPlayerStates(playerState_s *result, LocalClientNum_t localClientNum, msg_t *msg, int time);
int Demo_ReadPacketEntities(LocalClientNum_t localClientNum, msg_t *msg, int time, int deltaNum);
int Demo_ReadPacketClients(LocalClientNum_t localClientNum, msg_t *msg, int time, int deltaNum);
int Demo_ReadPacketActors(LocalClientNum_t localClientNum, msg_t *msg, int time, int deltaNum);
void Demo_ParseClientPackets(msg_t *msg);
void Demo_ParseReliableCmdSizes(msg_t *msg);
char Demo_ReadFooter(char *name, int handle);
bool Demo_ShouldIgnoreScoreboardToggle(LocalClientNum_t localClientNum);
void Demo_ActivateHoldInput(LocalClientNum_t localClientNum);
void Demo_AllocatePlaybackMemory(int location);
void Demo_Load();
void Demo_SetDefaultClient(LocalClientNum_t localClientNum, ClientNum_t defaultClient);
bool Demo_IsCompleted();
void Demo_SetTimeScale(float timeScale);
char Demo_IsClipRecording();
bool Demo_GetClipPausedState();
unsigned int Demo_GetCurrentControllerConfig();
int Demo_GetKeyFrameForJumpBack(LocalClientNum_t localClientNum, int newServerTime);
int Demo_GetKeyFrameForJumpForward(LocalClientNum_t localClientNum, int currentTime);
void Demo_ActivateTransitionScreen(LocalClientNum_t localClientNum, int transition);
void Demo_UpdateInformationScreen(LocalClientNum_t localClientNum);
bool Demo_ShouldFilterHudElement(hudelem_s *elem);
bool Demo_IsDemoHudHidden();
void Demo_UpdateClipTime(int msec);
void Demo_StoreConfigString(int index, const char *s);
void Demo_ReadConfigStrings(LocalClientNum_t localClientNum, msg_t *msg);
;
void Demo_WriteClipCommandsInternal(LocalClientNum_t localClientNum, msg_t *msg, bool setClipRecordParams);
void Demo_WriteClipCommands(LocalClientNum_t localClientNum, msg_t *msg, bool setClipRecordParams);
void Demo_WriteUncompressedClipSnapshot;
bool Demo_CanStartClipRecord(LocalClientNum_t localClientNum);
void Demo_PreviewSegment(LocalClientNum_t localClientNum, int segmentIndex);
void Demo_WriteDemoPreviewPoint(LocalClientNum_t localClientNum, demoRestorePoint restorePoint);
void Demo_SetupPlaybackForClient(LocalClientNum_t localClientNum, playerState_s *ps);
void Demo_UpdateCurrentSnapshot(LocalClientNum_t localClientNum, playerState_s *ps);
void Demo_HandleInputForControllerConfig(LocalClientNum_t localClientNum, ControllerIndex_t controllerIndex, int key, int pressed);
void Demo_HandleHoldInput(LocalClientNum_t localClientNum, int key, bool holdResult);
BOOL Demo_IsTimeStopped();
;
void Demo_GenerateKeyFrameSnapshot(LocalClientNum_t localClientNum, demoSnapshotData *snapshotData);
char Demo_StartClipRecord(LocalClientNum_t localClientNum);
void Demo_PauseClipRecord(LocalClientNum_t localClientNum);
void Demo_WriteClipCommandsWhenPaused(LocalClientNum_t localClientNum);
demoClipCommand Demo_ParseClipCommand(char *a1, LocalClientNum_t localClientNum, msg_t *msg, bool setClipPlaybackParams);
void Demo_ParseSnapshot(LocalClientNum_t localClientNum, msg_t *msg);
void Demo_ParseServerMessage(LocalClientNum_t localClientNum, msg_t *msg, int msgType, int msgSequence);
void Demo_HandleInput(LocalClientNum_t localClientNum, ControllerIndex_t controllerIndex, int key, int pressed);
void Demo_ProcessKeyFrameJump(LocalClientNum_t localClientNum, int keyframeIndex);
void Demo_JumpForward(LocalClientNum_t localClientNum, int serverTime);
void Demo_JumpBack(LocalClientNum_t localClientNum, int serverTime);
void Demo_RestoreDemoPreviewPoint(LocalClientNum_t localClientNum, demoRestorePoint restorePoint);
void Demo_RestoreUIStateAfterPreview(LocalClientNum_t localClientNum);
void Demo_ReadGamestate(LocalClientNum_t localClientNum);
void Demo_ProcessPlayback(ControllerIndex_t controllerIndex);
// char Demo_ReadDemoMessage@<al>(const char *a1@<ebx>, LocalClientNum_t localClientNum);

//t6/code/src_noserver/demo/demo_profile.cpp
bool Demo_GetAnalyzePrintDataType(int fieldBit);
void Demo_RecordProfileData(demoProfileData profileDataType, int size);
void Demo_PrintProfileData();
void Demo_DrawDebugInformation(LocalClientNum_t localClientNum);
void Demo_DrawProfile();

//t6/code/src_noserver/demo/demo_recording.cpp
void Demo_PopulateStaticFooterInformation(demoFooter *footer);
unsigned __int8 *Demo_GetActiveMemoryBuffer();
int Demo_WriteMemoryBlockDataToFile();
int Demo_WriteMemoryBlockDataToBuffer(demoMemBlock *memBlock, unsigned __int8 *to, int maxBufferSize);
void Demo_SetIntermissionPoint(vec3_t *origin, vec3_t *angles);
void Demo_RecordPlayerSessionState(ClientNum_t clientNum, int state);
bool Demo_IsInFinalKillcam();
void Demo_ClientConnected(ClientNum_t clientNum);
ClientNum_t Demo_GetDefaultClient();
bool Demo_IsGameStateWritten();
void Demo_WriteHeader(msg_t *msg, bool isDemoClip);
bool Demo_ShouldFilterServerCommand(ClientNum_t clientNum, const char *cmd);
void Demo_WriteServerCommands(msg_t *msg, bool liveStreamNoDelta);
void Demo_WriteSnapshotStartData(msg_t *msg, int msgSequence, int cmdSequence, int serverTime, int physicsTime, int lastFrame, int snapFlags, bool liveStreamNoDelta);
void Demo_WriteMatchState(msg_t *msg, bool liveStreamNoDelta);
void Demo_WritePlayerStates(msg_t *msg, bool liveStreamNoDelta);
void Demo_WritePacketEntities(msg_t *msg, bool liveStreamNoDelta);
void Demo_InfoPlayerConnected(ClientNum_t clientNum);
void Demo_UpdatePlayerDisconnectInformation(ClientNum_t clientNum, int playerIndex);
void Demo_InfoPlayerDisconnected(ClientNum_t clientNum);
void Demo_WritePacketClients(msg_t *msg, bool liveStreamNoDelta);
void Demo_WritePacketActors(msg_t *msg, bool liveStreamNoDelta);
void Demo_WriteSpawnDebugBuffer(msg_t *msg, bool liveStreamNoDelta);
void Demo_LogClientPacket(netchan_t *pChan, int iSize, int bFragment);
void Demo_LogReliableCmd(ClientNum_t cl, int iSize, char cmdChar);
void Demo_WriteExtraNetworkProfileData(msg_t *msg);
;
void Demo_WriteFooterInternal(msg_t *msg, demoFooter *footer, bool isClip);
unsigned int Demo_WriteClipFooterToBuffer(demoFooter *footer, unsigned __int8 *buffer, int maxBufferSize, int clipDuration);
void Demo_WriteFooter(int handle, demoFooter *footer);
void Demo_AddBookmark(int type, int time, int clientNum1, int clientNum2, int scoreEventPriority, int entityNumber, int eType, int birthTime, int overrideEntityCamera, int actorNum);
void Demo_SetLagFlag(demoLagFlag_e flag);
demoLagFlag_e Demo_GetLagFlag();
void Demo_StartRecord();
void Demo_SaveInternal(unsigned __int8 *data, int size, bool writeFooter, bool gameState);
void Demo_Save(unsigned __int8 *data, int size, unsigned __int8 *writeFooter, bool gameState);
bool Demo_ShouldBuildDemoSnapshot();
void Demo_StartSaveProcess(bool gameState);
;
void Demo_WriteGamestateToBuffer(ClientNum_t clientNum, msg_t *msg, int msgSequence);
void Demo_BuildDemoSnapshot();

//t6/code/src_noserver/demo/demo_ui.cpp
const char *Demo_GetKeyboardTitle();
const char *Demo_GetKeyboardDefaultText();
int Demo_GetKeyboardTextSize();
void Demo_GetStartAndEndTime(int *startTime, int *endTime);
void Demo_GetDuration(char *outputText, int duration);
char *Demo_GetAuthor();
char *Demo_GetTitleName();
char *Demo_GetTitleDescription();
char *Demo_GetTimeInfo();
char *Demo_GetDuration();
char *Demo_GetSaveScreenName(const char *type);
char *Demo_GetSaveScreenDescription(const char *type);
void Demo_GetConnectionTimeInfoForPlayer(LocalClientNum_t localClientNum, int *connectTime, int *disconnectTime);
int Demo_GetPlayerIndexForClientNum(ClientNum_t clientNum, int serverTime);
int Demo_GetNextDefaultBookmarkForPlayer(int playerIndex, ClientNum_t clientNum, int index);
int Demo_GetNextDefaultBookmarkForPlayer(LocalClientNum_t localClientNum, int index, int *type, int *time, vec4_t *color, bool *useBottomHalfColor, vec4_t *bottomHalfColor);
const char *Demo_GetDebugNameForBookmarkType(demoBookmarkType type);
const char *Demo_GetFreeCamModeName();
int Demo_GetNextDollyCamMarker(LocalClientNum_t localClientNum, int index, int *time, vec4_t *color);
const char *Demo_GetTimeScaleModeNameForDollyCamMarker(int marker);
void Demo_OpenDollyCamMarkerPopUp(LocalClientNum_t localClientNum);
bool Demo_IsDollyCamMarkerDialogOpen(LocalClientNum_t localClientNum);
void Demo_GetActivatedColorForButton(demoControlsButton demoControlButtonType, vec4_t *color);
void Demo_DrawVerticalLine(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
char *Demo_GetSegmentTransition(int index);
clipSegment *Demo_GetSegmentInformation(int index, const char *s);
char Demo_IsPauseMenuOpen(LocalClientNum_t localClientNum);
void Demo_OpenSavePopUp(LocalClientNum_t localClientNum, demoSavePopup type);
bool Demo_IsSaveDialogOpen(LocalClientNum_t localClientNum);
void Demo_Error(LocalClientNum_t localClientNum, const char *errorTitle, const char *errorMessage);
bool Demo_IsErrorDialogOpen(LocalClientNum_t localClientNum);
bool Demo_ShouldDrawDemoControlsHUD(LocalClientNum_t localClientNum);
void Demo_KeyboardComplete(LocalClientNum_t localClientNum, char *string, bool errorReported, const char *errorString);

//t6/code/src_noserver/demo/demo_version.cpp
int Demo_GetVersion();
bool Demo_IsVersionAtLeast(int version);
const NetFieldList *Demo_GetNetFieldListForType(netFieldTypes_t fieldType);
const NetFieldList *Demo_GetStateFieldListForEntityType(const int eType);

