#pragma once

#include "types.h"

//t6/code/src_noserver/xanim/dobj.cpp
;
void DObjShutdown();
void DObjDumpCreationInfo(DObjModel_s *dobjModels, unsigned int numModels);
void DObjGetHierarchyBits(const DObj *obj, int boneIndex, int *partBits);
BOOL DObjSkelIsBoneUpToDate(DObj *obj, int boneIndex);
void DObjComputeBounds(DObj *obj);
void DObjCalcBounds(DObj *dobj, vec3_t *mins, vec3_t *maxs);
void DObjSkelClear(const DObj *obj);
LocalClientNum_t DObjGetLocalClientIndex(const DObj *obj);
void DObjGetBounds(const DObj *obj, vec3_t *mins, vec3_t *maxs);
void DObjPhysicsGetBounds(const DObj *obj, vec3_t *mins, vec3_t *maxs);
double DObjGetRadius(const DObj *obj);
PhysPreset *DObjGetPhysPreset(const DObj *obj);
const char *DObjGetName(const DObj *obj);
const char *DObjGetBoneName(const DObj *obj, int boneIndex);
const char *DObjGetModelParentBoneName(const DObj *obj, int modelIndex);
XAnimTree_s *DObjGetTree(const DObj *obj);
int DObjBad(const DObj *obj);
void DObjTracelinePartBits(DObj *obj, int *partBits);
;
void DObjGeomTracelinePartBits(DObj *obj, int contentmask, int *partBits);
int DObjHasContents(DObj *obj, int contentmask);
int DObjGetContents(const DObj *obj);
BOOL DObjHasCollmap(const DObj *obj);
PhysGeomList *DObjGetCollmap(DObj *obj);
XModel *DObjGetXModel(DObj *obj, int index);
int DObjSetLocalBoneIndex(DObj *obj, int *partBits, int boneIndex, const vec3_t *trans, const vec3_t *angles);
int DObjGetModelBoneIndex(const DObj *obj, const char *modelName, unsigned int name, unsigned __int8 *index);
void DObjGetBasePoseMatrix(const DObj *obj, unsigned __int8 boneIndex, DObjAnimMat *outMat);
void DObjSetHidePartBits(DObj *obj, const unsigned int *partBits);
BOOL DObjHasFlag(const DObj *obj, unsigned __int8 flag);
void DObjSetFlag(DObj *obj, unsigned __int8 flag, int val);
int DObjHasIKActiveFlag(const DObj *obj);
void DObjSetIKActiveFlag(DObj *obj, int val);
void DObjSetIKBypassFlag(DObj *obj, int val);
void DObjSetIKState(DObj *obj, const unsigned __int8 *pIKState);
void DObjDumpInfo(const DObj *obj);
void DObjCreateDuplicateParts(DObj *obj, DObjModel_s *dobjModels, unsigned int numModels);
void DObjFree(DObj *obj);
BOOL DObjIsServer(const DObj *obj);
int DObjIsLocalPlayer(const DObj *obj);
int DObjIsPlayerShadow(const DObj *obj);
BOOL DObjIsLeftHandGripIKActive(const DObj *obj);
;
void DObjSetTree(DObj *obj, XAnimTree_s *tree);
void DObjCreate(;
void DObjCreateExt(;
int DObjGetModelBoneIndex(const DObj *obj, int model_index, unsigned int name, unsigned __int8 *index);

//t6/code/src_noserver/xanim/dobj_skel.cpp
void GetControlAndDuplicatePartBits(;
const unsigned __int8 *CalcSkelDuplicateBones(;
void CalcSkelRootBonesNoParentOrDuplicate(;
void CalcSkelRootBonesWithParent(;
void DObjCalcBaseAnim(const DObj *obj, DObjAnimMat *mat, int *partBits);
void CalcSkelNonRootBones(;
void DObjCalcSkel(const DObj *obj, int *partBits);
// void DObjCalcBaseSkel(DObjAnimMat *a1@<edx>, const DObj *obj, DObjAnimMat *mat, int *partBits);

//t6/code/src_noserver/xanim/dobj_utils.cpp
DObjAnimMat *DObjGetRotTransArray(const DObj *obj);
DObjAnimMat *DObjGetRotTransArrayMain(const DObj *obj);
int DObjGetNumModels(const DObj *obj);
unsigned __int16 DObjGetEntNum(const DObj *obj);
int DObjGetSurfaces(const DObj *obj, int *partBits, const char *lods);
void DObjGetBoneInfo(const DObj *obj, XBoneInfo **boneInfo);
int DObjNumBones(const DObj *obj);
void DObjGetSetBones(const DObj *obj, int *setPartBits);
int DObjSetRotTransIndex(const DObj *obj, const int *partBits, int boneIndex);
char DObjSetSkelRotTransIndex(const DObj *obj, const int *partBits, int boneIndex);
XModel *DObjGetModel(const DObj *obj, int modelIndex);
int DObjHasCollision(const DObj *obj);
XModel *DObjGetModelRemote(const DObj *obj, int modelIndex);
void DObjSetAngles(DObjAnimMat *rotTrans, const vec3_t *angles);
void DObjSetTrans(DObjAnimMat *rotTrans, const vec3_t *trans);
void DObjCompleteHierarchyBits(const DObj *obj, int *partBits);
int DObjSetControlRotTransIndex(const DObj *obj, const int *partBits, int boneIndex);
BOOL DObjSkelExists(const DObj *obj, int timeStamp);
void DObjClearSkel(const DObj *obj);
int DObjSkelAreBonesUpToDate(const DObj *obj, int *partBits);
void DObjSkelSetSkel(const DObj *obj, int *partBits);
int DObjGetAllocSkelSize(const DObj *obj);
void DObjCreateSkel(const DObj *obj, char *buf, int timeStamp);
DObjAnimMat *I_dmaGetDObjSkel(const DObj *obj);
void DObjGetHidePartBits(const DObj *obj, unsigned int *partBits);
int DObjGetBoneIndex(const DObj *obj, unsigned int name, unsigned __int8 *index, int modelNum);
int DObjGetParentBone(const DObj *obj, unsigned __int8 childBoneIndex);
int DObjGetChildBones(const DObj *obj, unsigned __int8 parentBone, unsigned __int8 *children, int maxChildren);
void DObjLock(const DObj *obj);
void DObjUnlock(const DObj *obj);
int DObjIsRecorded(const DObj *obj);
void DObjGetSurfaceData(const DObj *obj, const vec3_t *origin, const float scale, char *lods);
unsigned int DObjGetRootBoneCount(const DObj *obj);
void DObjSetLocalTagInternal(const DObj *obj, const vec3_t *trans, const vec3_t *angles, int boneIndex);
void DObjSetControlTagAngles(const DObj *obj, int *partBits, unsigned int boneIndex, vec3_t *angles);
void DObjSetLocalTag(;

//t6/code/src_noserver/xanim/xanim.cpp
BOOL XAnimTreeHasInfo(const XAnimTree_s *tree);
void XAnimInit();
void XAnimShutdown();
void XAnimFree(XAnimParts *parts);
XAnimParts *XAnimFindData_LoadObj(const char *name, void *(*Alloc)(int));
XAnimParts *XAnimFindData_FastFile(const char *name);
XAnimParts *XAnimClone(XAnimParts *fromParts, void *(*Alloc)(int));
XAnimParts *XAnimPrecache(const char *name, void *(*Alloc)(int));
void XAnimCreate(XAnim_s *anims, unsigned int animIndex, const char *name);
void XAnimBlend(;
void XAnimSetParamValue(XAnim_s *anims, unsigned int paramIndex, const char *strParamName, float paramValue);
void XAnimSetValueSection(;
XAnim_s *XAnimCreateAnimsWithValues(;
void XAnimFreeList(XAnim_s *anims);
XAnimTree_s *XAnimCreateTree(XAnim_s *anims, void *(*Alloc)(int));
XAnim_s *XAnimGetAnims(const XAnimTree_s *tree);
int XAnimGetAnimIndex(XAnim_s *anims, const char *name);
void XAnimInitModelMap(XModel *const *models, unsigned int numModels, XModelNameMap *modelMap);
;
void XAnimFreeInfo(XAnimTree_s *tree, unsigned int infoIndex);
void XAnimCheckFreeInfo(XAnimTree_s *tree, unsigned int infoIndex, int hasWeight);
double XAnimGetAverageRateFrequency(const XAnimTree_s *tree, unsigned int infoIndex);
signed int XAnimGetNextNotifyIndex(const XAnimParts *parts, float time);
float XAnimGetNotifyFracLeaf(const XAnimState *state, const XAnimState *nextState, float time, float dtime);
XAnimParts *XAnimGetPartsForNotify(const XAnimTree_s *tree, XAnimInfo *info);
void XAnimAddClientNotify(unsigned int notetrackName, float frac, unsigned int notifyType);
void XAnimAddClientNotifyNamed(unsigned int notetrackName, float frac, unsigned int notifyName);
void XAnimProcessClientNotify(;
void XAnimResetTime(unsigned int infoIndex);
// void NotifyServerNotetrack(int a1@<eax>, unsigned int a2@<edx>, unsigned int a3@<edi>, float a4@<xmm0>);
// void XAnimProcessServerNotify(XAnimInfo *a1@<edx>, const DObj *obj, XAnimInfo *info, float time);
double XAnimGetLength(const XAnim_s *anims, unsigned int animIndex);
int XAnimGetFrameCount(const XAnim_s *anims, unsigned int animIndex);
int XAnimGetLengthMsec(const XAnim_s *anims, unsigned int anim);
unsigned int XAnimGetInfoIndex_r(unsigned int animIndex, unsigned int infoIndex);
// unsigned int XAnimGetInfoIndex@<eax>(unsigned int a1@<edx>, const XAnimTree_s *tree);
// double XAnimGetTime@<st0>(unsigned int a1@<edx>, const XAnimTree_s *tree, unsigned int animIndex);
// double XAnimGetWeight@<st0>(unsigned int a1@<edx>, const XAnimTree_s *tree, unsigned int animIndex);
// bool XAnimHasFinished@<al>(unsigned int a1@<edx>, const XAnimTree_s *tree, unsigned int animIndex);
int XAnimGetNumChildren(const XAnim_s *anims, unsigned int animIndex);
unsigned int XAnimGetChildAt(const XAnim_s *anims, unsigned int animIndex, unsigned int childIndex);
const char *XAnimGetAnimName(const XAnim_s *anims, unsigned int animIndex);
bool XAnimIsDefault(XAnimParts *animParts);
char *XAnimGetAnimDebugName(const XAnim_s *anims, unsigned int animIndex);
unsigned int XAnimGetAnimTreeSize(const XAnim_s *anims);
void DObjClearServerNotifies();
void DObjSetServerNotifies(XAnimServerNotifyList *pNotifyList);
void DObjClearClientNotifies();
void DObjSetClientNotifies(XAnimClientNotifyList *pNotifyList);
XAnimClientNotifyList *DObjGetClientNotifies();
unsigned int XAnimAllocInfoWithParent(;
unsigned int XAnimEnsureGoalWeightParent(DObj *obj, unsigned int animIndex, int cmdIndex);
void XAnimClearGoalWeightInternal(;
void XAnimClearGoalWeight(;
void XAnimClearTreeGoalWeightsInternal(;
void XAnimClearTreeGoalWeights(;
void XAnimClearTreeGoalWeightsStrict(;
void XAnimClearGoalWeightKnobInternal(;
void XAnimClearTree(XAnimTree_s *tree);
unsigned int XAnimGetDescendantWithGreatestWeight(const XAnimTree_s *tree, unsigned int infoIndex);
int XAnimSetGoalWeightNode(;
void XAnimSetupSyncNodes_r(XAnim_s *anims, unsigned int animIndex, int parFlags);
void XAnimSetupSyncNodes(XAnim_s *anims);
BOOL XAnimHasTime(const XAnim_s *anims, unsigned int animIndex);
bool XAnimIsPrimitive(XAnim_s *anims, unsigned int animIndex);
// void XAnimSetAnimRate(unsigned int a1@<edx>, XAnimTree_s *tree, unsigned int animIndex, float rate);
bool XAnimIsLooped(const XAnim_s *anims, unsigned int animIndex);
unsigned __int8 XAnimGetBoneCount(const XAnim_s *anims, unsigned int animIndex);
int XAnimHasBone(const XAnim_s *anims, unsigned int animIndex, unsigned __int16 boneName);
int XAnimIsClientNode(const XAnim_s *anims, unsigned int animIndex);
int XAnimIsClientNode(XAnimTree_s *tree, unsigned int animIndex);
char XAnimNotetrackExists(const XAnim_s *anims, unsigned int animIndex, unsigned int name);
void XAnimAddNotetrackTimesToScriptArray(const XAnim_s *anims, unsigned int animIndex, unsigned int name);
char XAnimDoesNoteTrackExistAtPosAfterTime(;
void XAnimCloneAnimInfo(XAnimTree_s *toTree, const XAnimInfo *from, XAnimInfo *to);
void XAnimCloneAnimTree_r(;
void XAnimCloneAnimTree(const XAnimTree_s *from, XAnimTree_s *to);
XAnimInfo *GetAnimInfo(int infoIndex);
char XAnimGetParamValue(const XAnim_s *anims, unsigned int animIndex, const char *paramName, float *outValue);
bool XAnimGetParamValueTree(;
bool XAnimGetParamValue(XAnimTree_s *tree, unsigned int animIndex, const char *paramName, float *outValue);
XAnim_s *XAnimCreateAnims(const char *debugName, int size, void *(*Alloc)(int));
void XAnimFreeTree(XAnimTree_s *tree, void (*Free)(void *, int));
;
void XAnimUpdateInfoSync(;
void XAnimUpdateTimeAndNotetrackLeaf(;
void XAnimUpdateTimeAndNotetrackSyncSubTree(;
void XAnimUpdateTimeAndNotetrack(;
unsigned int XAnimCloneInitTime(;
unsigned int XAnimInitTime(XAnimTree_s *tree, unsigned int infoIndex, float goalTime, int cmdIndex);
void XAnimUpdateOldTime(;
void XAnimCalcDeltaTree(;
void DObjInitServerTime(DObj *obj, float dtime);
void DObjUpdateClientInfo(DObj *obj, float dtime, int notifyFlags);
void DObjUpdateServerInfo(DObj *obj, float dtime, int notifyFlags);
void XAnimDisplay(;
void DObjDisplayAnimToBuffer(const DObj *obj, const char *header, char *buffer, int bufferSize);
void DObjDisplayAnim(const DObj *obj, const char *header);
void XAnimCalcDelta(DObj *obj, unsigned int animIndex, vec2_t *rot, vec3_t *trans, bool bUseGoalWeight);
void XAnimCalcAbsDelta(DObj *obj, unsigned int animIndex, vec4_t *rot, vec3_t *trans);
void XAnimGetRelDelta(const XAnim_s *anims, unsigned int animIndex, vec2_t *rot, vec3_t *trans);
void XAnimGetAbsDelta(const XAnim_s *anims, unsigned int animIndex, vec4_t *rot, vec3_t *trans);
int XAnimSetCompleteGoalWeightNode(;
void XAnimSetTime(;
unsigned int XAnimRestart(XAnimTree_s *tree, unsigned int infoIndex, float goalTime, int cmdIndex);
unsigned int XAnimGetAnimMap(const XAnimParts *parts, const XModelNameMap *modelMap);
void XAnimResetAnimMapLeaf(const XModelNameMap *modelMap, unsigned int infoIndex);
void XAnimResetAnimMap_r(;
void XAnimResetAnimMap(const DObj *obj, unsigned int infoIndex);
unsigned int XAnimAllocInfoIndex(unsigned int animIndex);
XAnimInfo *XAnimAllocInfo(DObj *obj, unsigned int animIndex);
// int XAnimSetCompleteGoalWeightKnob@<eax>(;
// int XAnimSetGoalWeightKnob@<eax>(;
// int XAnimSetGoalWeight@<eax>(;
// int XAnimSetCompleteGoalWeight@<eax>(;
int XAnimSetGoalWeightKnobAll(;
int XAnimSetCompleteGoalWeightKnobAll(;

//t6/code/src_noserver/xanim/xanim_calc.cpp
void XAnim_CalcPosDeltaEntire(const XAnimDeltaPart *animDelta, __m128 *posDelta);
void XAnimClearRotTransArray(const DObj *obj, DObjAnimMat *rotTransArray, XAnimCalcAnimInfo *info);
void XAnimCalcNonLoopEnd(;
void XAnimScaleRotTransArray(int numBones, const XAnimCalcAnimInfo *info, DObjAnimMat *rotTransArray);
void XAnimNormalizeRotScaleTransArray(;
void XAnimMadRotTransArray(;
void XAnimApplyAdditives(;
void XAnim_CalcDeltaForTime(;
void XAnim_CalcDelta3DForTime(;
void XAnimCalcLeafInternal(;
void XAnimCalcLeaf(;
void XAnimCalc(;
void DObjCalcAnim(const DObj *obj, int *partBits);

//t6/code/src_noserver/xanim/xanim_clientnotify.cpp
// void __thiscall XAnimClientNotifyList::XAnimClientNotifyList(XAnimClientNotifyList *this);
// void __thiscall XAnimClientNotifyList::GetNotifyList(bdTrulyRandomImpl *this);
// BOOL __thiscall XAnimClientNotify::IsClientAnimNotify(XAnimClientNotify *this);
// const char *__thiscall XAnimClientNotify::GetNotifyStringName(XAnimClientNotify *this);
// unsigned int __thiscall XAnimClientNotify::GetNotifyType(XAnimClientNotify *this);
// unsigned int __thiscall XAnimClientNotify::GetNotifyName(XAnimClientNotify *this);
// void __thiscall XAnimClientNotifyList::~XAnimClientNotifyList(XAnimClientNotifyList *this);
// void __thiscall XAnimClientNotifyList::AddNotify(XAnimClientNotifyList *this, const ClientNotifyData *notifyData);

//#include "xanim/xanim_load_db.h"

//t6/code/src_noserver/xanim/xanim_load_obj.cpp
void ConsumeQuat(const unsigned __int8 **pos, __int16 *out);
void ConsumeQuat2(const unsigned __int8 **pos, __int16 *out);
void ReadNoteTracks(;
const unsigned __int8 *GetDeltaQuaternions2(;
// const unsigned __int8 *GetDeltaQuaternions@<eax>(;
const unsigned __int8 *LoadTrans(;
const unsigned __int8 *GetDeltaTranslations(;
void *XAnimTempAlloc(int size);
// unsigned __int8 *GetQuaternions@<eax>(;
const unsigned __int8 *GetTranslations(;
int XAnimCompareQuatParts(const void *p0, const void *p1);
int XAnimCompareTransParts(const void *p0, const void *p1);
int XAnimIsHighPrecisionPart(const char *name);
void XAnimEmitFrameIndices(;
XAnimParts *XAnimLoadFile(const char *name, void *(*Alloc)(int), bool streamedVersion);

//t6/code/src_noserver/xanim/xanim_readwrite.cpp
void XAnimLoadAnimTree(DObj *obj, MemoryFile *memFile);

//t6/code/src_noserver/xanim/xmodel.cpp
BOOL XModelBad(const XModel *model);
void TRACK_xmodel();
void XModelReleaseResources(XModel *model);
void XModelPartsFree(XModelPartsLoad *modelParts);
void XModelMakeDefault(XModel *model);
XModelPartsLoad *XModelPartsFindData(const char *name);
void XModelPartsSetData(const char *name, XModelPartsLoad *modelParts, void *(*Alloc)(int));
XModel *XModelPrecache_LoadObj(const char *name, void *(*Alloc)(int), void *(*AllocColl)(int));
XModel *XModelPrecache_FastFile(const char *name);
XModel *XModelPrecache();
unsigned __int16 *XModelBoneNames(XModel *model);
double XModelGetRadius(const XModel *model);
void XModelGetBounds(const XModel *model, vec3_t *mins, vec3_t *maxs);
void XModelRenderString(const vec3_t *pos, const char *string);
;
void XModelTraceLineAnimatedPartBits(;
void XSurfaceVisitTrianglesInAabb_ConvertAabb(;
bool XSurfaceVisitTrianglesInAabb_ProcessVertices(XSurfaceGetTriCandidatesLocals *locals);
bool XSurfaceVisitTrianglesInAabb_ProcessTriangles(XSurfaceGetTriCandidatesLocals *locals);
;
bool XSurfaceVisitTrianglesInAabb_ProcessLeaf(XSurfaceGetTriCandidatesLocals *locals);
char XSurfaceVisitTrianglesInAabb_ProcessNode(XSurfaceGetTriCandidatesLocals *locals);
char XSurfaceVisitTrianglesInAabb(;

//#include "xanim/xmodel_load_db.h"

//t6/code/src_noserver/xanim/xmodel_load_obj.cpp
PhysConstraints *XModel_PhysConstraintsPrecache(const char *name, void *(*Alloc)(int));
void ConsumeQuatNoSwap(const unsigned __int8 **pos, __int16 *out);
bool XModelLoadConfigFile(const char *name, const unsigned __int8 **pos, XModelConfig *config);
void XModelLoadCollData(;
void XModelCopyXModelParts(const XModelPartsLoad *modelParts, XModel *model);
void R_GetXModelBounds(XModel *model, const vec3_t *axes, vec3_t *mins, vec3_t *maxs);
int XModelGetFlags(const XModel *model);
XModelPieces *XModelPiecesLoadFile(const char *name, void *(*Alloc)(int));
XModelPieces *XModelPiecesPrecache(const char *name, void *(*Alloc)(int));
int XModelGetStaticBounds(const XModel *model, const vec3_t *axis, vec3_t *mins, vec3_t *maxs);
int XModelGetStaticBoundsExact(const XModel *model, const vec3_t *axis, vec3_t *mins, vec3_t *maxs);
int XModelGetStaticBounds(const XModel *model, vec3_t *mins, vec3_t *maxs);
void XModelCalcBasePose(XModelPartsLoad *modelParts);
XModelPartsLoad *XModelPartsLoadFile(;
XModelPartsLoad *XModelPartsPrecache(;
XModel *XModelLoadFile(;
XModel *XModelLoad(const char *name, void *(*Alloc)(int), void *(*AllocColl)(int));

//t6/code/src_noserver/xanim/xmodel_load_phys_collmap.cpp
char RemoveDuplicateBrushPlanes(;
bool SnapAxialVector(vec3_t *normal);
void SnapPlane(vec4_t *plane);
unsigned int GetPlaneIntersections(;
bool Map_SkipNamedFlags(const char **file, const char *key);
void GetCollisionMaterial(const char *name, collision_material_t *cmat);
int IsAxisAligned(vec3_t *normal);
bool Xmodel_ParsePhysicsBrush(;
bool Xmodel_ParsePhysicsBox(const char **file, PhysGeomInfo *geom);
bool Xmodel_ParsePhysicsCylinder(const char **file, PhysGeomInfo *geom);
char SkipEpair(const char *token, const char **file);
bool AddBoneName(unsigned int *boneNameArray, const int boneNameLen, const char *boneName);
int Xmodel_CountPhysicsCollMaps(;
unsigned int Xmodel_CountPhysicsCollMapGeoms(const char **file, const char *name, unsigned int boneHash);
PhysGeomList *Xmodel_ParsePhysicsCollMap(;
void XModel_LoadCollMap(const char *name, void *(*Alloc)(int), XModel *model, const char *xmodelName);

//t6/code/src_noserver/xanim/xmodel_utils.cpp
const char *XModelGetName(const XModel *model);
int XModelGetSurfaces(const XModel *model, XSurface **surfaces, int submodel);
XModelLodInfo *XModelGetLodInfo(const XModel *model, int lod);
unsigned int XModelGetSurfCount(const XModel *model, int lod);
Material **XModelGetSkins(const XModel *model, int lod);
XModelLodRampType XModelGetLodRampType(const XModel *model);
int XModelGetNumLods(const XModel *model);
double XModelGetLodOutDist(const XModel *model);
LocalClientNum_t XModelNumBones(const cpose_t *pose);
int XModelGetBoneIndex(const XModel *model, unsigned int name, unsigned int offset, unsigned __int8 *index);
int XModelGetParentBoneName(const XModel *model, unsigned int name);
DObjAnimMat *XModelGetBasePose(const XModel *model);
int XModelGetLodForDist_Internal(const XModel *model, float dist);
int XModelGetLodForDist(const XModel *model, float adjustedDist, float baseDist, int noLodCullOut);
void XModelSetTestLods(int lodLevel, float dist);
int XModelGetContents(const XModel *model);
BOOL XModelHasCollmap(const XModel *model);
BOOL XModelHasCollision(const XModel *model);
PhysGeomList *XModelGetCollmap(const XModel *model, int collMapIndex);
PhysGeomList *XModelGetCollmapForBoneIndex(const XModel *model, int boneIndex);
int XModelGetBoneIndex(const XModel *model, unsigned int name, unsigned __int8 *index);

