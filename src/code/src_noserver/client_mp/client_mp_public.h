#pragma once

#include "types.h"

//t6/code/src_noserver/client_mp/cl_cgame_mp.cpp
void CL_GetScreenDimensions(int *width, int *height, float *aspect);
double CL_GetScreenAspectRatioDisplayPixel();
int CL_GetUserCmd(LocalClientNum_t localClientNum, int cmdNumber, usercmd_s *ucmd);
void CL_AdjustUserCmdAngles(LocalClientNum_t localClientNum, int cmdNumber, vec3_t *adjust);
int CL_GetCurrentCmdNumber(LocalClientNum_t localClientNum);
void CL_GetCurrentSnapshotNumber(LocalClientNum_t localClientNum, int *snapshotNumber, int *serverTime);
void CheckEntityNumber(const entityState_s *es, bool *foundArray);
int CL_GetSnapshot(LocalClientNum_t localClientNum, int snapshotNumber, snapshot_s *snapshot);
void CL_SetUserCmdWeapons(LocalClientNum_t localClientNum, Weapon weapon, Weapon offHandWeapon, Weapon lastWeaponForAlt);
void CL_SetUserCmdAimValues(LocalClientNum_t localClientNum, const vec3_t *kickAngles);
void CL_SetUserCmdOrigin(LocalClientNum_t localClientNum, const vec3_t *origin, const vec3_t *velocity, int bobCycle, int movementDir);
void CL_SetUserCmdVehicle(LocalClientNum_t localClientNum, const PlayerVehicleState *playerVehState);
void CL_SetFOVSensitivityScale(LocalClientNum_t localClientNum, float scale);
void CL_DumpReliableCommands(LocalClientNum_t localClientNum);
void CL_SetExpectedHunkUsage(const char *mapname);
void CL_CM_LoadMap(const char *mapname);
void CL_CM_LoadAddOnMapEnts(const char *addon_mapname);
void CL_ShutdownAllClientsCGame();
int CL_DObjCreateSkelForBone(DObj *obj, int boneIndex, DObjAnimMat **pMatOut);
void CL_SubtitlePrint(LocalClientNum_t localClientNum, const char *text, int duration, int lineWidth);
char *CL_GetConfigString(int configStringIndex);
unsigned int CL_GetConfigStringChecksum(int configStringBase, int configStringIndex, int indexBits);
void CL_GetDebugViewForward(vec3_t *forward);
void CL_GetDebugViewPos(vec3_t *pos);
void CL_RenderScene(const refdef_t *fd, int frameTime, const GfxViewParms *viewParmsDraw, const GfxViewParms *viewParmsDpvs);
void CL_RenderExtraCam(const refdef_t *fd, int frameTime, const GfxExtraCamParms *extraCamParms);
void CL_SetFullScreenViewport();
void CL_SetCustomConstant(unsigned int type, const vec4_t *vec);
void CL_DrawStretchPicPhysicalInternal(float x, float y, float w, float h, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicPhysicalDPInternal(float x, float y, float w, float h, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicPhysicalDPx2Internal(float x, float y, float w, float h, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicPhysicalWInternal(float x, float y, float w0, float w, float h, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicPhysicalRotateXYInternal(float x, float y, float w, float h, float s1, float t1, float s2, float t2, float angle, const vec4_t *color, Material *material);
void CL_DrawStretchPicWDPInternal(const ScreenPlacement *scrPlace, float x, float y, float w0, float w, float h, int horzAlign, int vertAlign, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicInternal(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicDPInternal(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float s1, float t1, float s2, float t2, const vec4_t *color, Material *material);
void CL_DrawStretchPicRotatedSTInternal(const ScreenPlacement *scrPlace, float x, float y, float w, float h, int horzAlign, int vertAlign, float centerS, float centerT, float radiusST, float scaleFinalS, float scaleFinalT, float angle, const vec4_t *color, Material *material);
void CL_CapTurnRate(LocalClientNum_t localClientNum, float maxPitchSpeed, float maxYawSpeed);
void CL_SetViewAngles(LocalClientNum_t localClientNum, const vec3_t *angles);
void CL_AdjustViewAngles(LocalClientNum_t localClientNum, const vec3_t *adjust);
void CL_ClampViewAngle(LocalClientNum_t localClientNum, const int angle, const float min, const float max);
void CL_SetupScreenPlacements();
void CL_UpdateLevelHunkUsage();
void CL_StartLoading();
void CL_InitCGame(LocalClientNum_t localClientNum);
void CL_RestartCGame(LocalClientNum_t localClientNum);
void CL_ResetServerTimeDelta(LocalClientNum_t localClientNum);
void CL_AdjustTimeDelta(LocalClientNum_t localClientNum);
void CL_FirstSnapshot(LocalClientNum_t localClientNum);
void CL_ForceNewSnapshots();
void CL_SetCGameTime(LocalClientNum_t localClientNum);
void CL_SetADS(LocalClientNum_t localClientNum, bool ads);
void CL_DrawString(int x, int y, const char *pszString, int bShadow, int iCharHeight);
void CL_LookupColor(unsigned __int8 c, vec4_t *color);
bool CL_IsServerRestarting(LocalClientNum_t localClientNum);
void CL_FixupSmodelCullOutDists(const char *mapname);
// void CL_SetExtraButtons(LocalClientNum_t localClientNum, bitarray<64> *button_bits);
void CL_ConfigstringModified(LocalClientNum_t localClientNum);
int CL_CGameNeedsServerCommand(LocalClientNum_t localClientNum, int serverCommandNumber);
void CL_SyncTimes(LocalClientNum_t localClientNum);
int LoadWorld(const char *mapname);

//t6/code/src_noserver/client_mp/cl_input_mp.cpp
bool CG_IsRemoteGuidingMissile(LocalClientNum_t localClientNum);
void CL_FinishMove(LocalClientNum_t localClientNum, usercmd_s *cmd);
void CL_WritePacket(LocalClientNum_t localClientNum);

//t6/code/src_noserver/client_mp/cl_main_mp.cpp
void CL_AddReliableCommand(LocalClientNum_t localClientNum, const char *cmd);
void CL_MapLoading_SetupDevmap(int a1);
void CL_FinishMatchHistoryForController(const ControllerIndex_t localControllerIndex);
void CL_Disconnect(LocalClientNum_t localClientNum, bool deactivateClient);
void CL_FreePerLocalClientMemory(bool restartUi);
char CL_ShouldAllowInGameMenu(LocalClientNum_t localClientNum);
void CL_ToggleMenu(LocalClientNum_t localClientNum);
void CL_PauseGame(bool state);
void CL_ResetStats_f();
void CL_ReportUser_f();
void CL_Live_DisbandPartyAfterRound();
void CL_Project_RegisterDvars();
void CL_Project_RemoveCommands();
void CL_OpenIngame_ChangeClass_f();
void AllocatePerLocalClientMemory(int maxLocalClients, int maxClients, int flags);
char CL_AllocatePerLocalClientMemory(const char *mapname, int flags);
void CL_Project_RegisterCommands();
void CL_Init(LocalClientNum_t localClientNum);

//t6/code/src_noserver/client_mp/cl_milestone.cpp
int CL_GetMilestoneRowNum(const StringTable **stringTable, int *tableNumber, const int comparisonColumn1, const char *value1);
int CL_GetChallengeType(const char *statsType);
int ParseItemIndex(challengeTableRow_t *challengeRow, const char *reference);
void CountNonWeaponChallenges(int challengeType);
void CountWeaponChallenges(int challengeType);
challengeTableRow_t *FindFirstChallengeRowBSearch(int startEntry, int numEntries, int statNameHash);
challengeTableRow_t *CL_FindFirstChallengeRow(int a1, int challengeType, int statNameHash, int itemIndex);
challengeTableRow_t *__cdecl CL_FindFirstWeaponChallengeRow(int challengeType, int statNameHash, int itemIndex);
bool CL_IsChallengeLocked(challengeTableRow_t *challengeRow, int rank, int pLevel);
challengeTableRow_t *FindNextCompletedChallenge(challengeTableRow_t *challengeRow, int nameHash, int oldValue, int currentValue, int rank, int pLevel, int itemIndex);
challengeTableRow_t *__cdecl CL_GetNextCompletedChallenge(int oldValue, int currentValue, int rank, int pLevel, challengeTableRow_t *challengeRow, int itemIndex);
challengeTableRow_t *CL_GetChallengeRowByIndex(unsigned __int16 index);
challengeTableRow_t *CL_FindChallegeRowForWeaponOption(int itemIndex, int weaponOption);
challengeTableRow_t *CL_GetUniqueChallengeRow(unsigned int challengeIndex);
void CheckNameCollision(const char *name1, const char *name2);
const char *CL_GetChallengeRowData(challengeTableRow_t *challengeRow, milestoneTableColumns_t column);
const char *CL_GetChallengeStatNameByName(const char *statName, int itemIndex, hashName_t *hashNames, challengeHashLookup_t *challengeHashLookup);
const char *CL_GetItemChallengeStatNameByName(const char *statName, int itemIndex);
const char *CL_GetGroupChallengeStatNameByName(const char *statName, int groupIndex);
const char *CL_GetAttachmentChallengeStatNameByName(const char *statName, int attachmentIndex);
const char *CL_GetGameTypeChallengeStatNameByName(const char *statName, int gameTypeIndex);
const char *CL_GetChallengeStatName(milestoneTableColumns_t a1, challengeTableRow_t *a2, challengeTableRow_t *challengeRow, int itemIndex);
void ParseChallengeExceptions(milestoneTableColumns_t a1, challengeTableRow_t *a2, challengeTableRow_t *challengeRow);
challengeTableRow_t *CompareChallengeEntries(milestoneTableColumns_t a1, const void *a, const void *b);
const char *GetChallengeStatNameSuffix(challengeTableRow_t *challengeRow);
void CheckStatNames(challengeTableRow_t *challengeRow, hashName_t *hashNames, int numHashNames, unsigned __int8 *buffer);
void BuildChallengeTable();

//t6/code/src_noserver/client_mp/cl_net_chan_mp.cpp
void CL_Netchan_TransmitNextFragment(netchan_t *chan);
void CL_Netchan_Transmit(netchan_t *chan, unsigned __int8 *data, int length);
void CL_Netchan_AddOOBProfilePacket(LocalClientNum_t localClientNum, int iLength);
void CL_Netchan_PrintProfileStats(LocalClientNum_t localClientNum, int bPrintToConsole);

//t6/code/src_noserver/client_mp/cl_parse_mp.cpp
int CL_DeltaEntity(clientActive_t *cl, msg_t *msg, const int time, clSnapshot_t *frame, int newnum, entityState_s *old);
entityState_s *CL_GetEntityStateForFrame(clientActive_t *cl, const clSnapshot_t *frame, const int index);
int CL_ParsePacketEntities(clientActive_t *cl, msg_t *msg, const int time, clSnapshot_t *oldframe, clSnapshot_t *newframe, const ClientNum_t clientNum);
void CL_ReadPerformanceData(clientActive_t *cl, msg_t *msg, int numChangedEnts);
bool CL_CheckForSnapshotValidity(clientActive_t *cl, clSnapshot_t *old, int deltaNum);
void __cdecl CL_ParseSnapshot(LocalClientNum_t localClientNum, msg_t *msg);

//t6/code/src_noserver/client_mp/cl_pose_mp.cpp
char *CL_AllocSkelMemory(unsigned int size);
int CL_GetSkelTimeStamp();
int CL_DObjCreateSkelForBones(const DObj *obj, int *partBits, DObjAnimMat **pMatOut);

//t6/code/src_noserver/client_mp/cl_rank.cpp
void CL_ParseUnlocks(int row, int column, const StringTable *table, unsigned __int8 *unlocks);
unsigned __int8 *CL_GetUnlocksForRankID(const int rankID);
void CL_BuildRankXPTable(const StringTable *notthis);
int CL_GetMaxXP();
int CL_GetMaxPrestige();
int CL_GetMinXPForRankID(int rankID);
int CL_GetMaxXPForRankID(int rankID);
int CL_GetRankForXp(int xp);
const char *CL_GetRankData(int rank, rankTableColumns_t column);
const char *CL_GetRankIconName(int rank, int prestige);
const char *CL_GetZombieRankIconName(int rank, int lastDaysPlayed);
void CL_BuildRankTierTable();
int CL_GetZombieRank(unsigned int timePlayed, unsigned int weightedDowns, unsigned int weightedRounds);
void CL_GetRankIcon(int rank, int prestige, Material **handle);
void CL_GetZombieRankIcon(int rank, int lastDaysPlayed, Material **handle);

//t6/code/src_noserver/client_mp/cl_scrn_mp.cpp
void SCR_DrawSmallStringExt(int x, int y, const char *string, const vec4_t *setColor);
void SCR_Init();
int CL_CGameRendering(LocalClientNum_t localClientNum, unsigned int eyeToRender);
void CL_DrawScreen(LocalClientNum_t localClientNum);
void SCR_ClearScreen();
void SCR_DrawLoadingAndLogo();
void CL_CheckKeepDrawingConnectScreen(const LocalClientNum_t localClientNum);
void SCR_DrawScreenField(const LocalClientNum_t localClientNum, int refreshedUI);
long double CL_GetMenuBlurRadius(LocalClientNum_t localClientNum);
void CL_UpdateUIVisibilityBits(LocalClientNum_t localClientNum);
void SCR_UpdateFrame();
void SCR_UpdateScreen();
void SCR_UpdateLoadScreen();
void CL_CubemapShotUsage();
void CL_CubemapShot_f();
void CL_TakeHiResShot();

//t6/code/src_noserver/client_mp/cl_ui_mp.cpp
void CL_GetClientState(LocalClientNum_t localClientNum, uiClientState_s *state);
bool CL_AllowPopup(LocalClientNum_t localClientNum);
void Key_KeynumToStringBuf(LocalClientNum_t localClientNum, int keynum, char *buf, int buflen);
int CL_GetClientName(LocalClientNum_t localClientNum, int index, char *buf, int size, bool addClanName);
int CL_GetClientClanName(LocalClientNum_t localClientNum, int index, char *buf, int size);
int CL_ShutdownUI();
void CL_InitUI();

//t6/code/src_noserver/client_mp/cl_voice.cpp
int CL_CanWeConnectToClient(SessionData *session, const ClientNum_t ourClientNum, const ClientNum_t theirClientNum);
char CL_CanClientTalkToAllClientsInList(SessionData *session, const int sender, const int clientBits);
int Session_GetConnectivityBitsForAddr(SessionData *session, const netadr_t from, const ClientNum_t clientNum);
int __cdecl Session_GetConnectivityBitsForClientAddress(SessionData *session, const ClientNum_t clientNum);
int Session_GetConnectivityBitsForLocalClients(SessionData *session);
void CL_UpdateConnectivityBits(LocalClientNum_t localClientNum, SessionData *session, int connectivityBits);
void CL_WeNowCantHearSomeone(char *a1, LocalClientNum_t localClientNum, SessionData *session, ClientNum_t remoteClient);
void CL_SendPeerConnectivityTest(const LocalClientNum_t localClientNum, SessionData *session, const ClientNum_t clientNum);
void CL_SendVoiceTestPackets(ControllerIndex_t localControllerIndex);
ClientNum_t CL_FindGoodRouteForClientList(SessionData *session, int *routeList, const int clientBits);
ClientNum_t CL_FindGoodRouteForClientNum(SessionData *session, int *routeList, const ClientNum_t clientNum);
void CL_BuildRouteList(SessionData *session, LocalClientNum_t localClientNum, ClientNum_t ourClientNum, int *routeList);
void __cdecl CL_VoiceConnectionTestPacket(LocalClientNum_t localClientNum, msg_t *msg);
int CL_RemoveLocalClientsFromRelayList(SessionData *session, int relayList);
bool CL_ShouldIgnorePlayer(SessionData *session, LocalClientNum_t localClientNum, ClientNum_t talker);
ClientNum_t CL_FindRouteForClientNum(SessionData *session, const ClientNum_t clientNum);
bool CL_IsPlayerTalking(SessionData *session, LocalClientNum_t localClientNum, ClientNum_t talkingClientIndex);
void CL_CheckMutes(SessionData *session, LocalClientNum_t localClientNum);
void CL_TogglePlayerMuteForUI(LocalClientNum_t localClientNum, unsigned __int64 playerXuid);
bool Voice_SendVoiceData();
int Com_ClientVoiceEvent();
char CL_RebuildConnectionToClient(SessionData *session, LocalClientNum_t localClientNum, ClientNum_t ourClientNum, ClientNum_t destClientNum);
char CL_SendPeerData_Real(SessionData *session, const LocalClientNum_t localClientNum, const netsrc_t sock, const ClientNum_t clientNum, msg_t *msg, PeerDataPacketType dataType);
char CL_SendPeerData(SessionData *session, const LocalClientNum_t localClientNum, const netsrc_t sock, const ClientNum_t clientNum, msg_t *msg, PeerDataPacketType dataType);
void CL_WriteVoicePacket(LocalClientNum_t localClientNum);
void CL_VoicePacket(LocalClientNum_t localClientNum, msg_t *msg);
char CL_SendRelayPacket(SessionData *session, ControllerIndex_t localControllerIndex, ClientNum_t relayClientNum, ClientNum_t destinationClientNum, const char *message);
char CL_WritePeerToPeerOOBString(SessionData *session, ControllerIndex_t localControllerIndex, ClientNum_t clientNum, netsrc_t remoteLocalNetID, const char *message);
void CL_VoiceTransmit(LocalClientNum_t localClientNum);
int Client_SendVoiceData(int bytes, char *enc_buffer);
void CL_VoiceFrame(LocalClientNum_t localClientNum);
void Com_RenderVoiceFrame();

//t6/code/src_noserver/client_mp/party.cpp
const char *Party_MemberStatusString(int status);
char *Party_LobbyFlagsString(unsigned __int8 lobbyFlags);
void Party_UpdateMostRecentPlaylistEntry(unsigned __int8 playlistEntry);
void Party_ValidateAddr(netadr_t addr);
BOOL Party_PlayerHasLoopbackAddr(PartyMember *member);
int Party_GetClientTimeout();
int Live_CurrentLocalMapPackFlags();
int Live_CurrentFullPartyMapPackFlags(PartyData_s *party);
int Live_GetPartyTotalMapPackFlags(PartyData_s *party);
int Live_GetDLC0HackContentFlag();
int Party_MemberMissingMapPacks(const PartyData_s *party, const int member, const int neededPacks, int *mapPackIndex);
void Party_ClearLastEntries(PartyData_s *party);
void RandomPermute(int *arr, int size);
void RandomizeParty();
void Party_GetLobbyState_f();
void Party_ToggleMute_f();
BOOL Party_IsMemberDedicated(const PartyMember *partyMember);
int Party_CountMembersEvenIfInactive(const PartyData_s *party);
int PartyClient_CountMembers(const PartyData_s *party);
int PartyClient_CountLocalMembersEvenIfInactive(PartyData_s *party);
int PartyClient_CountLocalMembers(PartyData_s *party);
bool PartyClient_IsMemberLocal(PartyData_s *party, ClientNum_t slot);
int Party_CountMembersAtAddr(PartyData_s *party, netadr_t addr, int startSlot);
int PartyClient_GetLargestSplitscreenMemberCount(PartyData_s *party);
ClientNum_t Party_FindMemberByXUID(PartyData_s *party, const unsigned __int64 player);
int Party_FindMemberByController(PartyData_s *party, ControllerIndex_t controller);
void Party_SetVeto(PartyData_s *party, int vote);
void Party_ClearVotePossible(PartyData_s *party);
int Party_GetVetoCount(PartyData_s *party, voteWinner_e voteType);
int Party_GetReadyCount(PartyData_s *party);
bool Party_EnoughClientsAreReady(const int ready, const int notReady);
void Party_SetReady(PartyData_s *party, bool ready);
int Party_HowManyReadiesNeeded(PartyData_s *party);
s_mutePlayerInfo *Party_GetPlayerInfoFromMutePlayerList(unsigned __int64 playerXuid, s_mutePlayerInfo **previousPlayer, s_mutePlayerInfo **previousToPreviousPlayer);
void Party_AddXuidIntoMutePlayerList(unsigned __int64 playerXuid, bool isMuted);
bool Party_GetMuteStatusFromMutePlayerList(unsigned __int64 playerXuid);
void Party_SetMuteStatusInMutePlayerList(unsigned __int64 playerXuid, bool isMuted);
void Party_ReAddAllPlayers_Internal(PartyData_s *party);
void Party_MsgPrint(netsrc_t sock, netadr_t adr, const char *data, bool doubleSend);
bool Party_ShouldDisableLiveStream();
char Party_NetAdrToPlatformNetAdr(const netadr_t netAddr, platformNetAdr *platNetAddr);
char Party_CompareMemberAdrToPlatformNetAdr(const PartyMember *member, const platformNetAdr *platNetAddr);
int Party_FindMember(PartyData_s *party, const platformNetAdr playerAddr);
int Party_GetVoiceConnectivityBits(PartyData_s *party, ClientNum_t memberIndex);
int Party_GetAssignedTeam(PartyData_s *party, const unsigned __int64 player);
void Party_SetAssignedTeam(PartyData_s *party, const unsigned __int64 player, int team);
const char *Party_GetCustomTeamName(PartyData_s *party, int team);
void Party_SetPlaylistEntryAlways(PartyData_s *party, const int playlistEntry);
void Party_SetPreviousPlaylistEntry(PartyData_s *party, const int previousPlaylistEntry);
unsigned __int8 Party_GetPlaylistEntry(PartyData_s *party);
unsigned __int8 Party_GetPreviousPlaylistEntry(PartyData_s *party);
void Party_BlacklistSession(const bdSecurityID *sessionID);
char Party_IsSessionBlacklisted(const bdSecurityID *sessionID);
void Party_AddSessionToRecentSessionsList(const bdSecurityID *sessionID);
char Party_IsRecentlyEnteredSession(const bdSecurityID *sessionID);
BOOL Party_ConnectingToDedicated();
int Party_GetLobbySessionFlags(PartyData_s *party, ControllerIndex_t localControllerIndex);
void Party_SetDisplayMapName(const char *rawmapname);
void Party_SetDisplayGameType(const char *rawgametype);
void Party_SetMapPackFlags(PartyData_s *party, const int flags);
bool Party_IsSameNetworkAddress(PartyData_s *party, int slot1, int slot2);
int Party_CRCPartyFields(int checksum);
const char *Party_MemberFieldToString(PartyMember *a, PartyField *field);
void Party_WriteMemberField(PartyMember *partyMember, msg_t *msg, PartyField *field);
char Party_MemberEqual(PartyMember *a, PartyMember *b);
void Party_ReadMemberField(PartyMember *partyMember, msg_t *msg, PartyField *field);
char Party_WriteMember(PartyMember *partyMember, msg_t *msg);
bool Party_ReadMember(PartyMember *partyMember, msg_t *msg, bool check);
void Party_SendLeagueStats(PartyData_s *party, const ControllerIndex_t controllerIndex, int timestamp);
void Party_SetQoSProgress(PartyData_s *party, float percent, int successfulProbes, int numProbes);
void PartyClient_SwitchToLobby(ControllerIndex_t localControllerIndex, int menu, bool resetDvars, bool runRules, char *primaryCFG, char *secondaryCFG);
void __cdecl PartyClient_SwitchLobbiesIfNeeded(ControllerIndex_t localControllerIndex, PartyData_s *party, ControllerIndex_t resetDvars);
bool Party_HasDLCForItem(const ClientNum_t clientNum, const int itemIndex);
BOOL Party_ShouldDisplayChangelistWarning(PartyData_s *party);
void Party_CheckGivenProbation(PartyData_s *party, ControllerIndex_t localControllerIndex);
void Party_KickIfHasProbation(PartyData_s *party, ControllerIndex_t localControllerIndex);
BOOL Party_ShouldUseLobbyMerging(PartyData_s *party);
bool PartyClient_SendPartyStateAck(PartyData_s *party, LocalClientNum_t localClientNum, ControllerIndex_t localControllerIndex);
void PartyClient_PreParsePartyState(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg, netadr_t from);
BOOL Party_IsRunning(PartyData_s *party);
BOOL Party_InParty(PartyData_s *party);
int Party_AreWeHost(PartyData_s *party);
BOOL Party_AreWeHostEvenIfInactive(PartyData_s *party);
bool Party_IsHostController(PartyData_s *party, ControllerIndex_t controllerIndex);
void PartyClient_MarkPacketReceived(PartyData_s *party, PartyHostDetails *partyHost);
int Party_PacketIsFromAcceptedHost(PartyData_s *party, const netadr_t from);
int Party_GetConnectivityBitsForAddr(PartyData_s *party, const netadr_t from);
int Party_GetConnectivityBitsForClientAddress(PartyData_s *party, const ClientNum_t clientNum);
char Party_RebuildConnectionToClient(PartyData_s *party, ClientNum_t destClientNum);
void PartyClient_GenerateHeartBeatAckMessage(PartyData_s *party, msg_t *msg);
void PartyClient_HandleReconnect(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void Party_HandleVoiceFailMsg(PartyData_s *party, ControllerIndex_t localControllerIndex);
void Party_ResetReportedConnStates();
void Party_SendFinishedLoadingDemoMsg(PartyData_s *party);
void PartyClient_HandleStopDemoMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void PartyClient_HandleDemoHeartbeatMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void Party_HandleLeagueStatsRequest(PartyData_s *party, const ControllerIndex_t localControllerIndex);
void Party_HandleLeagueOutcomes(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyClient_HandleChallengeAck(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
BOOL Party_HandlePacket(PartyData_s *party, const char *c, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void Party_SwitchLobbiesIfNeeded_f();
void Party_StateChanged_f();
int Party_MinLobbyTime();
char Party_UpdateLobbyStatusRequired(PartyData_s *party);
int Party_GetPreGameStartTimerLength();
int Party_GetGameStartTimerLength();
int Party_GetRestartMatchmakingTimer();
BOOL Party_IsPostGameLobby(PartyData_s *party);
void Party_GetAffinityBits(PartyData_s *party, const ControllerIndex_t localControllerIndex, unsigned int *affinityBits);
void Party_UpdateLocalClient(PartyData_s *party, const ControllerIndex_t localControllerIndex, int memberIndex, PartyMember *member);
int FindFreeTempBanSlot();
void Party_ClearTempBannedXuidList();
int Party_IsInTempBannedXuidList(unsigned __int64 xuid);
void Party_AddToTempBannedXuidList(unsigned __int64 xuid);
bool __cdecl Party_IsPrivateOnlineGame();
int Party_IsGameLobbyHost();
bool Party_IsTeamAllowed(PartyData_s *party, team_t team, bool isSplitscreenClient);
PartyData_s *Party_GetPartyData();
void Party_SetWeAreHost(PartyData_s *party, bool weAreHost);
int Party_GetMaxPlayers();
int Party_GetMaxLocalPlayers();
void Party_SetMaxPlayers(PartyData_s *party, int count);
void Party_SetMaxLocalPlayers(PartyData_s *party, int count);
BOOL Party_IsUserRegistered(PartyData_s *party, ClientNum_t clientNum);
bool Party_DispatchInstantMessage(unsigned __int64 senderID, const ControllerIndex_t destIndex, msg_t *msg);
double Party_GetPartyAverageSkill(PartyData_s *party);
void Party_BroadcastLeagueEmblemChange(ControllerIndex_t controllerIndex, unsigned __int64 teamID);
int Live_CurrentDesiredLobbyMapPackFlags(const int playlistId);
char Party_PartyMembersMissingMapPack(PartyData_s *party, int neededPacks, int *playerSlot, int *mapPackIndex, bool requireAtleastTwoPeople);
char Party_IsAnyMemberMissingMapPack();
void PartyClient_RemovePartyMember(PartyData_s *party, ClientNum_t slot, bool swapped);
void PartyClient_RemoveAllPartyMembersAtSlotAddress(PartyData_s *party, ClientNum_t slot);
void Party_ReRegisterAllPlayersVoice(PartyData_s *party, ControllerIndex_t localControllerIndex);
void Party_ReAddAllPlayers(PartyData_s *party);
void PartyClient_DisconnectLocalPlayerFromHost(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyClient_ProposeNewGamestate(PartyData_s *party, ControllerIndex_t localControllerIndex);
int Party_FindMember(PartyData_s *party, const netadr_t playerAddr);
void PartyClient_HandleLocalJoinFailed(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyClient_RequestLocalJoin(PartyData_s *party, int partyId, ControllerIndex_t localControllerIndex);
void PartyClient_JoinLocalClientsToParty_Internal(PartyData_s *party, netadr_t partyHost, unsigned int challenge);
bool Party_IsChangeTeamAllowed(PartyData_s *party, team_t team, bool isSplitscreenClient);
void Party_UpdateTeamSwitch(team_t a1, PartyData_s *a2, char *party, PartyData_s *memberIndex, ClientNum_t a5);
void Party_MemberProfileChanged(PartyData_s *party, const ControllerIndex_t localControllerIndex, ClientNum_t memberIdx);
void Part_PartyState_SetMaxPlayers(PartyData_s *party);
void PartyHost_ResetState(PartyData_s *party, const ControllerIndex_t localControllerIndex);
void PartyClient_BecomePartyHost(PartyData_s *party, ControllerIndex_t localControllerIndex);
bool Party_ShowMatchBeginTimer(PartyData_s *party);
const char *Party_GetStatus_ZombiePublicSoloMatch(PartyData_s *party);
const char *Party_GetStatus(PartyData_s *party, int *timeRemaining);
void Party_ClearJoinParty(PartyData_s *party);
void PartyClient_CleanUpInviteSessions(PartyData_s *party);
void PartyClient_DisconnectFromHost(PartyData_s *party, ControllerIndex_t localControllerIndex, const char *reason, bool keepPartyTogether, bool createParty);
void Party_StopParty(PartyData_s *party, bool keepPartyTogether, bool deleteSessionImmediately);
void Party_StopParty(bool a1, PartyData_s *a2, PartyData_s *party, bool keepPartyTogether);
void Party_JoinAttemptFailed(PartyData_s *party, const ControllerIndex_t localControllerIndex, const char *errorMsg);
char Party_CheckPlaylistRules(const ControllerIndex_t localControllerIndex);
void PartyClient_ParsePartyStateHeaderData(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg, netadr_t from, bool migrateHost);
void PartyClient_ParseMemberList(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg);
void PartyClient_SetUpPartyForHost(PartyData_s *party, const ControllerIndex_t localControllerIndex, PartyHostDetails *hostInfo);
void __cdecl PartyClient_HandleBadLeague(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void PartyClient_HandleKicked(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void PartyClient_PartyAwakeMsg(int a1, PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyClient_LeaderLeftMsg(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void Party_CheckPlaylistCmd();
void Party_Init();
void __cdecl Party_Sleep(PartyData_s *party);
void Party_SetupPlayList(const ControllerIndex_t localControllerIndex, int entryNum);
void Party_ChooseNextPlaylist(const ControllerIndex_t localControllerIndex);
void Party_ChooseNextAndPreviousPlaylist(const ControllerIndex_t localControllerIndex);
void Party_ChoosePreviousPlaylist();
void PartyClient_HostTimedOut(PartyData_s *party, ControllerIndex_t localControllerIndex, const char *reason);
void __cdecl PartyClient_HostTimedOutMidGame(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyClient_DoneParsingPartyState(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg, netadr_t from);
void PartyClient_SendHeartbeatAck(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyClient_AllLocalClientsSendHeartbeatAck(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyClient_HandleHeartbeat(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyClient_HandleNewLobby(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void __cdecl PartyClient_HandleEndParty(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void __cdecl PartyClient_HandleEndPartyKeepPartyTogether(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
bool PartyClient_ParsePartyStateMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyClient_HandlePartyStateMsg(char *a1, PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyClient_HandleGoMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void PartyClient_HandlePlayDemoMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
void Party_Awake(PartyData_s *party, const ControllerIndex_t localControllerIndex);

//t6/code/src_noserver/client_mp/partyhost.cpp
void Party_PrintTeams(SubpartyInfo *subparties, int subpartyCount);
void PartyHost_AddAllPlayersToPresenceSession(PartyData_s *party);
void PartyHost_PrintConnectivity(PartyData_s *party, const ClientNum_t clientNum, const int bits);
void ClearMember(PartyData_s *party, const int memberIndex);
void PartyHost_ClearMembers(PartyData_s *party);
void PartyHost_SetLeagueDataState(PartyData_s *party, int memberIndex, LeagueDataState state, const char *name);
int PartyHost_CountMembers(PartyData_s *party);
int PartyHost_FindOldestZombieSlot(PartyData_s *party);
int PartyHost_CountUninvitedPlayers(PartyData_s *party);
int PartyHost_CountInvitedPlayers(PartyData_s *party);
int PartyHost_CountOpenPublicSlots(PartyData_s *party);
int PartyHost_CountAnonymousPlayers(PartyData_s *party);
char PartyHost_CanFormTeams(SubpartyInfo *parties, const int partyCount, const int teamCount, unsigned __int8 *assignments);
bool AssignmentFitness(Assignment *ass, const SubpartyInfo *parties, const int partyCount, const int numTeams, const int teamMax, const int teamMin);
int CompareFitness(const void *a, const void *b);
bool PartyHost_FindTeams(SubpartyInfo *parties, const int partyCount, const int teamCount);
int StackRankSort(const void *_a, const void *_b);
void PartyHost_FindSubparties(PartyData_s *party, int flags, SubpartyInfo *subparties, int *subpartyCount);
void PartyHost_UpdateSubpartyIndex(PartyData_s *party);
int PartyHost_GetPlayingTeamCount(PartyData_s *party);
int PartyHost_GetSmallestTeamCount(PartyData_s *party);
int PartyHost_GetLargestTeamCount(PartyData_s *party);
team_t PartyHost_GetSmallestTeam(PartyData_s *party);
int PartyHost_BuildRandomChallengeId();
bool PartyHost_ComparePartyConnection(PartyData_s *party, int ping);
int PartyHost_CompareSubpartySkill(SubpartyInfo *setA, int setACount, SubpartyInfo *setB, int setBCount);
char PartyHost_AnyClientsPresentOrConnecting(PartyData_s *party);
bool PartyHost_MapIsAcceptable(PartyData_s *party, const char *mapname);
int PartyHost_AssignTeam(PartyData_s *party, const ClientNum_t slot);
void PartyHost_SetMatchmakingInfo(PartyData_s *party);
void PartyHost_SetAllowedTeams(PartyData_s *party, const char *gametype);
void PartyHost_SetBeginTime(PartyData_s *party, int time);
ClientNum_t PartyHost_GetFirstEmptySlot(PartyData_s *party);
int compareClientAddrs(netadr_t a, netadr_t b);
void PartyHost_RemoveLocalHost(PartyData_s *party);
char *PartyHost_GetMemberName(PartyData_s *party, const ClientNum_t clientNum);
void PartyHost_MarkMemberInfoDirty(PartyData_s *party, int dirtyMemberSlot);
void PartyHost_UpdatePlayerHiding(PartyData_s *party);
void PartyHost_MemberInfoChanged(PartyData_s *party, ClientNum_t memberSlot);
void PartyHost_ResetClientTimeouts(PartyData_s *party);
void PartyHost_SyncVoiceDataForAllPlayers(PartyData_s *party);
bool PartyHost_UpdateBitsIfNeeded(int *voiceConnectivityBits, int connectivityBits);
void PartyHost_UpdateVoiceConnectivityBits(PartyData_s *party, ClientNum_t memberIndex, int connectivityBits);
void PartyHost_AddVoiceConnectivityToAllLocalPlayers(PartyData_s *party, ClientNum_t memberIndex);
void PartyHost_SendGo(PartyData_s *party, ControllerIndex_t localControllerIndex, int partyMemberSlot, const char *mapname, const char *gametype);
void PartyHost_SendPlayDemo(PartyData_s *party, ControllerIndex_t localControllerIndex, int partyMemberSlot, const char *demoname);
void PartyHost_SendStopDemo(PartyData_s *party, ControllerIndex_t localControllerIndex, int partyMemberSlot);
bool PartyHost_TeamsAreReady(PartyData_s *party, int memberCount);
char PartyHost_MakeTeams(char *a1, PartyData_s *party);
void PartyHost_StartDemo(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_StopDemo(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_RemoveTestClient(PartyData_s *party, ClientNum_t slot);
void Party_RemoveTestClient_f();
void Party_CloseDWConnectionIfDone(PartyData_s *party, netadr_t addr);
void PartyHost_WritePartyStateMembers(PartyData_s *party, int destinationMemberSlot, msg_t *msg);
void PartyHost_WritePartyState(PartyData_s *party, int destinationMemberSlot, msg_t *msg);
void recordBadFlags(int oldFlags, int newFlags);
void recordBadSlots(int maxplayers, int privateslots);
void PartyHost_SendDemoHeartbeats(PartyData_s *party, const ControllerIndex_t localControllerIndex);
void PartyHost_CloseDWConnectionOnDvar(PartyData_s *party, netadr_t addr);
void PartyHost_TellClientToRejoin(PartyData_s *party, netadr_t from);
void Party_GenerateNewLobbyMessage(msg_t *newMsg, PartyData_s *party, XSESSION_INFO *sessionInfo, const int publicSlots, const int privateSlots, unsigned int challenge, const int isDedicated);
void Party_SendNewLobbyToAddr(PartyData_s *party, XSESSION_INFO *sessionInfo, const int publicSlots, const int privateSlots, const int controllerIndex, unsigned int challenge, netadr_t addr, const int isDedicated);
void PartyHost_SetupParty(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_CreatePartyPresenceComplete(ControllerIndex_t localControllerIndex, PartyData_s *party);
void PartyHost_HandleEchoRequest(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
int PartyHost_GenerateClientBitfield(PartyData_s *party);
bool PartyHost_AreAllClientsUpToDate(PartyData_s *party, int sinceMS);
bool PartyHost_IsJoinInProgressAllowed(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_ValidateTeams(PartyData_s *party);
void PartyHost_HandleIHearMsg(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_HandleCantHearMsg(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
char PartyHost_SendPartyAwakeMsgToParty(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_HandleProfileMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_HandleProfilesAckMsg(PartyData_s *party, const ControllerIndex_t localControllerIndex, netadr_t from);
int PartyHost_HashLeagueValues(int visiblePoints, int hiddenPoints, float skill, unsigned __int64 teamID);
void __cdecl PartyHost_HandleLeagueOutcomesAck(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_HandleLeagueEmblemUpdate(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_RequestLeagueStats(PartyData_s *party, int memberIndex);
void PartyHost_SendLeagueOutcomes(PartyData_s *party, int memberIndex);
void PartyHost_HandleChallenge(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
int PartyHost_CanHandlePacket(PartyData_s *party, const char *c);
int PartyHost_HandlePacket(PartyData_s *party, const char *c, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_CalculateLeagueOutcomes(PartyData_s *party);
bool PartyHost_EnforceLeagueTeams(PartyData_s *party);
void PartyHost_UpdateLeague(PartyData_s *party);
bool PartyHost_LeaguesReady(PartyData_s *party);
void PartyHost_InitLeagueState(PartyData_s *party);
void PartyHost_ClearReadies(PartyData_s *party);
void PartyHost_ClearVetoes(PartyData_s *party);
void PartyHost_SanityCheck(PartyData_s *party);
int PartyHost_DetermineVoteWinner(PartyData_s *party);
void PartyHost_StoreMapVoteStats(const ControllerIndex_t localControllerIndex, const char *mapName);
void PartyHost_UpdateLocalClient(ClientNum_t a1, PartyData_s *party, const ControllerIndex_t localControllerIndex);
void PartyHost_PrintDetails(PartyData_s *party);
int PartyHost_GetMaxFreeSlots(PartyData_s *party, int memberCount);
void PartyHost_ClearConnectivityBitForClient(PartyData_s *party, const ClientNum_t slot);
int PartyHost_AddLocalPlayer(PartyData_s *party, const ControllerIndex_t localControllerIndex, const ClientNum_t slot);
void PartyHost_RemovePlayer(PartyData_s *party, const ClientNum_t memberIndex, bool tellThem, const char *reason);
void PartyHost_RemoveLocalPlayer(PartyData_s *party, const ClientNum_t memberIndex, bool removePartyToNotify);
void PartyHost_GamestateChanged(PartyData_s *party);
void PartyHost_SetRoundScores(PartyData_s *party, const int memberIndex, const int score, const int deaths);
void PartyHost_SwapPlayer(PartyData_s *party, const ClientNum_t oldMemberIndex, const ClientNum_t newMemberIndex);
void PartyHost_StartTeamMatch(PartyData_s *party);
void PartyHost_TimeoutMembers(PartyData_s *party);
void PartyHost_SendPartyStateToPlayer(PartyData_s *party, ClientNum_t clientNum);
void PartyHost_SendPartyStates(PartyData_s *party);
void PartyHost_AddLocalClientsToNewLobby(PartyData_s *partyToNotify, PartyData_s *party, const ControllerIndex_t ignoreControllerIndex);
void PartyHost_AddLocalClientsToNewLobby(PartyData_s *party, const ControllerIndex_t ignoreControllerIndex);
void PartyHost_AddMissingLocalClientsToLobby(PartyData_s *party);
void PartyHost_RefreshParty(PartyData_s *party);
void PartyHost_SendHeartbeats(PartyData_s *party);
void PartyHost_DropPlayersToMatchSlots(PartyData_s *party, const int publicSlots);
void PartyHost_StartParty(PartyData_s *party, ControllerIndex_t localControllerIndex, int flags, int numPrivateSlots, int numPublicSlots, bool silentFail);
void PartyHost_HandleClientPartyStateAck(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_HandleClientDisconnect(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_HandleClientLeaderDisconnect(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_HandleProposedGamestate(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_UpdateLeague_Private(const ControllerIndex_t controllerIndex, PartyData_s *party);
void PartyHost_StartLeagueMatch(PartyData_s *party, ControllerIndex_t controllerIndex);
void PartyHost_EnterStartReadyState(PartyData_s *party, const ControllerIndex_t localControllerIndex, const LocalClientNum_t localClientNum);
bool PartyHost_ClientsAreReady(PartyData_s *party);
void PartyHost_AddAnonymousMemberAtSlot(PartyData_s *party, const ClientNum_t slot, netadr_t *addr, unsigned int challenge);
bool PartyHost_AddAnonymousMember(PartyData_s *party, netadr_t *addr, unsigned int challenge, unsigned __int64 lanChalRespKey);
bool PartyHost_AnonymousAddRequest(PartyData_s *party, netadr_t from, unsigned __int64 lanChalRespKey, int ping, int newSubPartyCount, SubpartyInfo *newSubParties, JoinPartyResponse *response);
bool PartyHost_PlayerJustConnected(PartyData_s *party, const ClientNum_t slot);
int PartyHost_AddPlayerAtSlot(PartyData_s *party, const ClientNum_t slot, const netadr_t addr, PartyMember *newMember);
int PartyHost_AddPlayer(PartyData_s *party, const netadr_t addr, PartyMember *newMember);
PartyMemberAddResult PartyHost_ClaimAnonymousSpot(PartyData_s *party, const netadr_t addr, PartyMember *newMember, unsigned int challenge);
void PartyHost_RemoveAllPartyMembersAtSlotAddress(PartyData_s *party, const ClientNum_t memberIndex, const bool tellThem, const char *reason);
void PartyHost_MarkPacketReceivedForClients(PartyData_s *party, const netadr_t from);
void __cdecl PartyHost_HandleFinishedLoadingDemoMsg(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_SortParty(PartyData_s *party, SessionData *session);
void PartyHost_PreMatch(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_StartMatch(PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyHost_AddTestClient(PartyData_s *party, ClientNum_t slot, int privatePartyId);
void Party_AddTestClients_f();
char PartyHost_SwitchLobby(char *a1, PartyData_s *party);
void PartyHost_StartPartyComplete(char *a1, ControllerIndex_t localControllerIndex, SessionData *session);
bool PartyHost_ShouldAutoStart(PartyData_s *party, ControllerIndex_t localControllerIndex, int memberCount);
void PartyHost_AutoStart(PartyData_s *party, ControllerIndex_t localControllerIndex);
void __cdecl PartyHost_HandleHeartbeatAck(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
bool PartyHost_AttemptJoinParty(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, int netVersion, int msgChecksum, int playlistVersion, int playlistID, unsigned __int64 lanChalRespKey, int ping, int newSubPartyCount, int clientChangeList, SubpartyInfo *newSubParties, JoinPartyResponse *response);
void PartyHost_HandleJoinPartyRequest(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_HandleLocalJoin(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_KickPlayer(PartyData_s *party, const ClientNum_t memberIndex, const char *reason);
void Party_TestTeamCreation_f();
void PartyHost_HandleMemberMsg(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_HandleProposedKick(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyHost_HandleLeagueStats(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
void PartyHost_CheckForInsufficientWagerFunds(const ControllerIndex_t localControllerIndex, PartyData_s *party);
void PartyHost_UpdateWagerCheckFundsState(const ControllerIndex_t localControllerIndex, PartyData_s *party);
void PartyHost_Frame(PartyData_s *party, const ControllerIndex_t localControllerIndex, const LocalClientNum_t localClientNum);
void PartyHost_HandleClientHandshake(int a1, PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);

//t6/code/src_noserver/client_mp/partymigrate.cpp
bool PartyMigrate_CanAnyoneTalkToThisGuy(SessionData *session, int destClientNum);
bool PartyMigrate_CanWeTalkToAllClients(PartyData_s *party, ControllerIndex_t localControllerIndex);
unsigned int PartyMigrate_GetClientConnectivity(PartyData_s *party, ControllerIndex_t localControllerIndex);
bool PartyMigrate_DoWeHaveNecessaryMapPacks(PartyData_s *party, ControllerIndex_t localControllerIndex);
bool PartyMigrate_CanWeHost(PartyData_s *party, ControllerIndex_t localControllerIndex, bool requireTalkToAllClients, bool requireToFinishedStreaming);
bool PartyMigrate_IsEnabled(PartyData_s *party);
void PartyMigrate_SendSessionInfo(PartyData_s *party, const ClientNum_t clientNum);
void PartyMigrate_RestartServer(PartyData_s *party, const int oldHost);
ClientNum_t Party_FindNextMemberAtAddrInternal(PartyData_s *party, const netadr_t playerAddr, const ClientNum_t startingSlot, const ClientNum_t remoteClientIndex);
void Party_UpdateHostAddr(PartyData_s *party, netadr_t addr);
void PartyMigrate_CheckBeforeContinuingToHost(PartyData_s *party);
void migrateClient_UpdateState(migrateClientState_t newState);
BOOL PartyMigrate_MigrateActive(PartyData_s *party);
void Party_SetMigrateActive(PartyData_s *party, bool state);
int parseBandwidthTestPacketSyn(ControllerIndex_t localControllerIndex, const netadr_t from, msg_t *msg, int seq);
void sendTestPacketAck(ControllerIndex_t localControllerIndex, const netadr_t from, int fromMS, int seq);
void updateMeanForPeer(peerResults_t *peerResults, unsigned int latency);
float getStdDevForPeer(peerResults_t *peerResults);
void handleTestPacketAck(__int64 localControllerIndex, __int64 from_8, int from_16, msg_t *msga, msg_t *msg);
void __cdecl PartyMigrate_HandleTestPacket(ControllerIndex_t localControllerIndex, const netadr_t from, msg_t *msg);
int peerResultCompare(const void *a, const void *b);
void recalculateNominees(PartyData_s *party);
void PartyMigrate_HostRead(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg, netadr_t from);
void PartyMigrate_HostWrite(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg);
void PartyMigrate_ClientRead(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg);
void PartyMigrate_ClientWrite(PartyData_s *party, ControllerIndex_t localControllerIndex, msg_t *msg);
void PartyMigrate_ClearData(PartyData_s *party);
void PartyMigrate_HandleFindBestCommand(PartyData_s *party);
void PartyMigrate_SwapHostAndClient(PartyData_s *party, ClientNum_t clientNum);
void PartyMigrate_RequestFindBestHost(PartyData_s *party);
void PartyMigrate_ComErrorCleanup();
bool PartyMigrate_IsDebugEnabled();
void PartyMigrate_HandleHostAnnounce(PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
char PartyMigrate_HandlePacket(PartyData_s *party, const char *c, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
char *PartyMigrate_GetDebugInfoAsString(PartyData_s *party);
int PartyMigrate_GetLastNomineeCalcTime();
void PartyMigrate_MatchStarted();
void PartyMigrate_HandleSessionInfoMsg(char *a1, PartyData_s *party, ControllerIndex_t localControllerIndex, netadr_t from);
void PartyMigrate_To(PartyData_s *party, const ClientNum_t newHost);
// void PartyMigrate_HandleToMsg(LocalClientNum_t a1@<ebx>, PartyData_s *party, ControllerIndex_t localControllerIndex);
void PartyMigrate_HostFrame(PartyData_s *party);
void PartyMigrate_Test();
void PartyMigrate_Init();

//t6/code/src_noserver/client_mp/partyprober.cpp
void PartyInfo_SetFlag(PartyInfo *party, int flag, bool enable);
bool PartyInfo_GetFlag(PartyInfo *party, int flag);
int PartyInfo_GetGeoMatch(const PartyInfo *host);
char *PrettyFlags(int flags);
void PartyProber_SetState(PartyProber *prober, ProberState state, const char *reason);
const char *PartyProber_GetStateAsString(PartyProber *prober);
void PartyProber_SetAcceptInfo(PartyProber *prober, int partyId, int challenge, int hostNum);
void PartyProber_MarkReceived(PartyProber *prober);
int PartyProber_GetHostCount(PartyProber *prober, int matchingFlags);
void PartyProber_ClearHosts(PartyProber *prober);
void __cdecl PartyProber_Clear(PartyProber *prober);
void __cdecl PartyProber_StartInvite(PartyProber *prober, ControllerIndex_t controllerIndex, XSESSION_INFO *hostInfo, int numPublicSlots, int occupiedPublicSlots, bool isDedicated);
void __cdecl PartyProber_StartNewlobby(PartyProber *prober, ControllerIndex_t controllerIndex, XSESSION_INFO *hostInfo, int challenge, int hostNum);
int PartyProber_FindByXNAddr(PartyProber *prober, const XNADDR *key);
void PartyProber_AddHost(const XNADDR *a1, PartyProber *prober, const XSESSION_INFO *info, const int publicSlots, const int occupiedPublicSlots, const float skill, const int geo1, const int geo2, const int geo3, const int geo4, int mapPacks);
char PartyProber_StoreQoSResult(PartyProber *prober, const XNADDR *addr, int ping, int uploadBandwidth, const qosPayload_t *qosPayload);
bool PartyProber_Connect(XSESSION_INFO *info, bool dedicated, netadr_t *addr);
bool PartyProber_HandlePartyAccept(PartyProber *prober, int partyId, netadr_t from, msg_t *msg);
bool PartyProber_HandlePartyJoinFailed(PartyProber *prober, int partyId, netadr_t from, msg_t *msg);
bool PartyProber_HandleEchoReply(PartyProber *prober, int partyId, netadr_t from, msg_t *msg);
bool PartyProber_HandleMasterRequest(PartyProber *prober, const int partyId, netadr_t from, msg_t *msg);
char PartyProber_HandleMasterReply(PartyProber *prober, int partyId, netadr_t from, msg_t *msg);
char __cdecl PartyProber_HandlePacket(PartyProber *prober, const char *c, ControllerIndex_t localControllerIndex, netadr_t from, msg_t *msg);
PartyProberStatus PartyProber_GetStatus(PartyProber *prober, int partyId);
int PartyProber_GetSearchStartUTC(PartyProber *prober);
BOOL PartyProber_IsSearching(PartyProber *prober);
void PartyProber_StartQoS(PartyProber *prober);
void PartyProber_QoSComplete(ProberState a1, PartyProber *a2, PartyProber *prober);

//t6/code/src_noserver/client_mp/partyui.cpp
void PartyUI_HandleEliteClanTag(bool clanAbbrev_IsEliteValidated, char *inAbbrev, char *inName, char *playerName, char *outName);
char *PartyUI_NameWithClan(int feature, char *clanAbbrev, char *gamertag, bool clanAbbrev_IsEliteValidated);
int PartyUI_CountTeamMembers(PartyData_s *party, int team);
void Party_SetUIPlayerCount(PartyData_s *party);
bool Party_ShouldShowInviteWarning(PartyData_s *party);

//#include "client_mp/party_local.h"

