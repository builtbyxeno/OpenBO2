#pragma once

#include "types.h"

//t6/code/src_noserver/cgame_mp/cg_actors_mp.cpp
void CG_UpdateActorDObj(LocalClientNum_t localClientNum, centity_t *cent, actorInfo_t *ai);
void CG_ResetActorEntity(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *cent);
void CG_Actor(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ActorCorpse(LocalClientNum_t localClientNum, centity_t *cent);
actorInfo_t *CG_ActorInfoForEntity(LocalClientNum_t localClientNum, int entNum);
BOOL CG_IsActorCorpseInfoCurrent(LocalClientNum_t localClientNum, int corpseIndex);
actorInfo_t *CG_ActorEntityScriptedAnim(LocalClientNum_t localClientNum, int entNum);
void CG_ActorProcessSnapshot(LocalClientNum_t localClientNum, centity_t *cent);

//t6/code/src_noserver/cgame_mp/cg_animscripted_mp.cpp
void CG_GetTagMatrix(LocalClientNum_t localClientNum, int linkEntNum, unsigned __int16 tagName, vec3_t *resultTagMat);
void CG_CalcTagParentAxis(LocalClientNum_t localClientNum, centity_t *cent, vec3_t *parentAxis);
void CG_CalcEntityScriptedAnimTransform(LocalClientNum_t localClientNum, centity_t *cent, vec3_t *matrix, vec3_t *origin, vec3_t *angles);
void CG_LinkTransformForEntity(LocalClientNum_t localClientNum, centity_t *cent, vec3_t *resultOrigin, vec3_t *resultAngles);
void CG_GenerateLinkInfo(LocalClientNum_t localClientNum, centity_t *cent, int attachedEntNum, int attachedTagIndex);
void CG_UpdateEntityLink(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdateFakeEntityLink(LocalClientNum_t localClientNum, centity_t *cent, int parentNum, int tagIndex);
void CG_UpdateFakeEntityLink(LocalClientNum_t localClientNum, centity_t *cent);
centity_t *CG_EntGetLinkToParent(LocalClientNum_t localClientNum, centity_t *cent);
void CG_CalcCurrentOriginAnglesError(LocalClientNum_t localClientNum, centity_t *cent);
BOOL CG_EntityLinked(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ScriptedAnimTransformForEntity(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ScriptedAnimUpdate(LocalClientNum_t localClientNum, centity_t *cent);
void CG_LinkedEntUpdate(LocalClientNum_t localClientNum, centity_t *cent);

//t6/code/src_noserver/cgame_mp/cg_animtree_mp.cpp
void *Hunk_AllocXAnimCreate(int size);
void CGScr_LoadAnimTrees();
void CG_SetDObjInfo(LocalClientNum_t localClientNum, int iEntNum, int iEntType, XModel *pXModel);
BOOL CG_CheckDObjInfoMatches(LocalClientNum_t localClientNum, int iEntNum, int iEntType, XModel *pXModel);
void CG_SafeDObjFree(LocalClientNum_t localClientNum, int entIndex);
void CG_FreeEntityDObjInfo(LocalClientNum_t localClientNum);
void CG_FreeClientDObjInfo(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_compassfriendlies_mp.cpp
void TRACK_cg_compassfriendlies();
void CG_ClearCompassPingData();
float GetRadarLineMargin(cg_t *cgameGlob);
bool DoesMovementCrossRadar(cg_t *cgameGlob, float radarProgress, const vec2_t *p1, const vec2_t *p2);
bool DoLinesSurroundPoint(cg_t *cgameGlob, vec3_t *radarLine1, vec3_t *radarLine2, vec2_t *pos);
void RadarPingEnemyPlayer(LocalClientNum_t localClientNum, CompassActor *actor, int time, int PerkToIgnore);
void SatellitePingEnemyPlayer(LocalClientNum_t localClientNum, CompassActor *actor, int time, int PerkToIgnore);
bool CanLocalPlayerHearActorFootsteps(LocalClientNum_t localClientNum, const vec3_t *actorPos, int actorClientIndex);
void ActorUpdatePos(LocalClientNum_t localClientNum, CompassActor *actor, const vec3_t *newPos, int actorClientIndex);
CompassVehicle *GetVehicle(LocalClientNum_t localClientNum, int entityNum);
CompassHelicopter *GetHelicopter(LocalClientNum_t localClientNum, int entityNum);
CompassGuidedMissile *GetGuidedMissile(LocalClientNum_t localClientNum, int entityNum);
CompassDogs *GetDogs(LocalClientNum_t localClientNum, int entityNum, int time);
CompassZombie *GetZombie(LocalClientNum_t localClientNum, int entityNum, int time);
CompassTurrets *GetCompassTurrets(LocalClientNum_t localClientNum, int entityNum, int time);
void CG_CompassUpdateVehicleDef(LocalClientNum_t localClientNum, int entityIndex);
void CG_CompassUpdateHelicopterInfo(LocalClientNum_t localClientNum, int entityIndex);
void CG_CompassUpdateGuidedMissileInfo(LocalClientNum_t localClientNum, const centity_t *missile);
void CG_CompassUpdateVehicleOccupantInfo(LocalClientNum_t localClientNum, int entityIndex);
;
;
;
void CG_CompassRadarPingEnemyVehicles(LocalClientNum_t localClientNum, float oldRadarProgress, float newRadarProgress, float oldLocalRadarProgress, float newLocalRadarProgress);
void CG_CompassRadarPingEnemyTurrets(LocalClientNum_t localClientNum, float oldRadarProgress, float newRadarProgress, float oldLocalRadarProgress, float newLocalRadarProgress);
void CG_CompassRadarPingEnemyPlayers(LocalClientNum_t localClientNum, float oldRadarProgress, float newRadarProgress, float oldLocalRadarProgress, float newLocalRadarProgress);
;
void CG_SensorGrenadePingPlayer(LocalClientNum_t localClientNum, const clientInfo_t *ci, int time, bool explosionTag);
;
;
void CG_CompassAddWeaponPingInfo(LocalClientNum_t localClientNum, const centity_t *cent, const vec3_t *origin, int msec, bool isSuppressedFire);
void CG_CompassAddVehicleWeaponPingInfo(LocalClientNum_t localClientNum, const centity_t *cent, const vec3_t *origin, int msec);
CompassFakeFire *CG_FindFakeFireActor(LocalClientNum_t localClientNum, const int playerIndex, const int entNum);
void CG_CompassAddFakeFirePingInfo(LocalClientNum_t localClientNum, const int ownerNum, const int entNum, const vec3_t *origin, const vec3_t *dir, int msec);
void CG_AddEnemyScrambler(LocalClientNum_t localClientNum, centity_t *scramblerEnt);
void CG_ClearNearestEnemyScrambler(LocalClientNum_t localClientNum);
void CG_AddFriendlyScrambler(LocalClientNum_t localClientNum, float x, float y, int handle);
void CG_RemoveFriendlyScrambler(LocalClientNum_t localClientNum, int handle);
void CG_RemoveAllFriendlyScramblers(LocalClientNum_t localClientNum);
void CG_CompassUpdateActors(LocalClientNum_t localClientNum);
void CG_AddArtilleryPing(LocalClientNum_t localClientNum, vec3_t *position);
void CG_UpdateCompassObituary(LocalClientNum_t localClientNum, int client);

//t6/code/src_noserver/cgame_mp/cg_consolecmds_mp.cpp
void CG_Viewpos_f();
void CG_CloseScoreboard(LocalClientNum_t localClientNum);
void CG_ScoresUp(LocalClientNum_t localClientNum);
void CG_ScoresDown(LocalClientNum_t localClientNum);
void CG_ToggleScores(LocalClientNum_t localClientNum);
void CG_ShellShock_f();
void CG_ShellShock_Load_f();
void CG_ShellShock_Save_f();
void CG_QuickMessage_f();
void CG_VoiceChat_f();
void CG_TeamVoiceChat_f();
void CG_PlayRumble_f();
void CG_RestartSmokeGrenades_f();
;
;
;
void CG_PrintEntities_f();
void CG_ToggleScores_f();
void CG_InitConsoleCommandsProject();
void CG_ShutdownConsoleCommandsProject();

//t6/code/src_noserver/cgame_mp/cg_draw_mp.cpp
void TRACK_cg_draw();
void CG_DrawSay(LocalClientNum_t localClientNum);
void CG_DrawVote(LocalClientNum_t localClientNum);
void CG_DrawChatMessages(LocalClientNum_t localClientNum);
void CG_ClearCenterPrint(LocalClientNum_t localClientNum);
void CG_DrawCenterString(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, vec4_t *color, int textStyle);
BOOL CG_CheckPlayerMovement(const usercmd_s oldCmd, const usercmd_s newCmd);
void CG_CheckHudHealthDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudAmmoDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudCompassDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudStanceDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudSprintDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudOffHandDisplay(LocalClientNum_t localClientNum);
void CG_CheckHudObjectiveDisplay(LocalClientNum_t localClientNum);
void CG_CheckVehicleControlsDisplay(LocalClientNum_t localClientNum);
void CG_SetLutVolumeActiveBank(LocalClientNum_t localClientNum, unsigned __int16 bankMask);
void CG_SetLutScriptIndex(LocalClientNum_t localClientNum, __int16 scriptIndex);
void CG_SetWorldFogActiveBank(LocalClientNum_t localClientNum, unsigned __int16 bankMask);
int CG_GetWorldFogVolumeScriptID(LocalClientNum_t localClientNum);
void CG_Electrified(LocalClientNum_t localClientNum, int durationMS);
void CG_ClearElectrified(LocalClientNum_t localClientNum);
void CG_Blur(LocalClientNum_t localClientNum, int time, float endBlur, BlurTime timeType, BlurPriority priority);
double CG_GetBlurRadius(LocalClientNum_t localClientNum);
void CG_StartFadingBlur(LocalClientNum_t localClientNum, int time, float blur);
void CG_ClearBlur(LocalClientNum_t localClientNum);
void CG_Burn(LocalClientNum_t localClientNum, int durationMS);
void CG_ClearBurn(LocalClientNum_t localClientNum);
void CG_ScreenBlur(LocalClientNum_t localClientNum);
bool CG_UsingAirborneKillstreakOverlay(LocalClientNum_t localClientNum);
bool CG_DrawGenericOverlay(int SortIndex, LocalClientNum_t localClientNum);
void DrawIntermission(LocalClientNum_t localClientNum);
bool IsHardcoreMode(LocalClientNum_t localClientNum);
int CG_DrawFollow(LocalClientNum_t localClientNum);
void CG_UpdatePlayerNamesInternal(LocalClientNum_t localClientNum);
char CG_StartGumpTransition(LocalClientNum_t localClientNum);
void CG_DrawHideGumpTransition(LocalClientNum_t localClientNum);
void DrawViewmodelInfo(LocalClientNum_t localClientNum);
bool ShouldUpdatePlayerNames(const playerState_s *ps);
bool CG_ShouldDrawIndicators(const playerState_s *ps);
void CG_DrawExtraCam(LocalClientNum_t localClientNum);
void CG_FlashLight(LocalClientNum_t localClientNum);
void CG_AddSceneTracerBeams(LocalClientNum_t localClientNum);
void CG_AddWaterScreenDrops(LocalClientNum_t localClientNum);
void CG_WorldRippleWave(LocalClientNum_t localClientNum, float xpos, float ypos, float width, float speed, float amp, float fiS, float fiE, float foS, float foE);
void CG_GenerateSceneCodeMeshes(LocalClientNum_t localClientNum);
void CG_GenerateSceneVerts(LocalClientNum_t localClientNum);
// int CG_CheckPlayerStanceChange(LocalClientNum_t localClientNum, bitarray<64> *newButton_bits, bitarray<64> *changedButton_bits);
// int CG_CheckPlayerTryReload(LocalClientNum_t localClientNum, bitarray<64> *button_bits);
// int CG_CheckPlayerFireNonTurret(LocalClientNum_t localClientNum, bitarray<64> *button_bits);
void CG_DrawActive(LocalClientNum_t localClientNum, const GfxViewParms *viewParmsDraw, const GfxViewParms *viewParmsDpvs);
// int CG_CheckPlayerMiscInput(bitarray<64> *button_bits);
void CG_CheckForPlayerInput(LocalClientNum_t localClientNum);
void CG_CheckTimedMenus(LocalClientNum_t localClientNum);
void CG_Draw2DInternal(LocalClientNum_t localClientNum);
void __thiscall CG_Draw2D(LocalClientNum_t this);

//t6/code/src_noserver/cgame_mp/cg_draw_net_mp.cpp
void CG_AddLagometerFrameInfo(const cg_t *cgameGlob);
void CG_AddLagometerSnapshotInfo(snapshot_s *snap);
void CL_TrackServerBandwidth(int kbps);
void CL_TrackServerEntities(int entities, int numChangedEntities, int archivedEntities);
void CL_TrackKillcamTime(int oldestKillcamTime);
void CG_DrawEntityCount(LocalClientNum_t localClientNum);
void CG_DrawServerBandwidth(LocalClientNum_t localClientNum);
void CG_DrawServerKillcamData(LocalClientNum_t localClientNum);
void CG_DrawDisconnect(LocalClientNum_t localClientNum);
void CG_DrawLagometer(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_ents_mp.cpp
void CG_GetLightingOrigin(const DObj *obj, const centity_t *cent, vec3_t *lightingOrigin);
XAnim_s *CG_GetTurretAnims(centity_t *cent);
void CG_Player_PreControllers(DObj *obj, centity_t *cent);
void CG_Turret_OverheatUpdate(LocalClientNum_t localClientNum, const DObj *obj, centity_t *cent);
void CG_Turret_PreControllers(DObj *obj, centity_t *cent);
int CG_IsCarriedTurretEnt(LocalClientNum_t localClientNum, centity_t *cent);
void CG_Turret_UpdateMinigun(LocalClientNum_t localClientNum, centity_t *cent);
void SetBallisticAngles(LocalClientNum_t localClientNum, centity_t *cent);
bool IsWeaponRetrieveable(LocalClientNum_t localClientNum, const centity_t *cent, const WeaponDef *weapDef, const Weapon weapon);
;
double CG_ScriptMover_GetBurnFraction(LocalClientNum_t localClientNum, centity_t *cent);
bool AnyLocalPlayersIsWeaponLinkedToEnt(centity_t *cent);
void CG_InitZBarriers();
void CG_CreateZBarrierPieceDObj(LocalClientNum_t localClientNum, centity_t *piece, centity_t *zbarrier, ZBarrierBoard *boardDef, int pieceIndex);
void CG_InitZBarrier(LocalClientNum_t localClientNum, centity_t *cent);
void CG_InitZBarrierPiece(centity_t *piece, centity_t *parent, ZBarrierType *zbarrierType, int pieceIndex, DObj *pDobj);
void CG_UpdateZBarrierPieceAnim(LocalClientNum_t localClientNum, centity_t *parent, int pieceIndex, DObj *pDobj);
void CG_GetZBarrierEffectPosition(const centity_t *pCent, const vec3_t *offset, vec3_t *axis, vec3_t *outPos);
void zbarrier_repair_logic(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *pParent, ZBarrierDef *pZBarrierDef, _cgZBarrierPiece_t *pPiece, LerpEntityStateZBarrierPiece *pLerpPiece, unsigned int pieceIndex);
void zbarrier_piece_box_fly_away_logic(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *pParent, ZBarrierDef *pZBarrierDef, _cgZBarrierPiece_t *pPiece, LerpEntityStateZBarrierPiece *pLerpPiece);
void zbarrier_piece_teardown_logic(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *pParent, ZBarrierDef *pZBarrierDef, _cgZBarrierPiece_t *pPiece, LerpEntityStateZBarrierPiece *pLerpPiece, unsigned int pieceIndex);
void CG_MissileProcessSnapshot(LocalClientNum_t localClientNum, centity_t *missileCent);
void CG_ZBarrierProcessSnapshot(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdateMoverAnims(LocalClientNum_t localClientNum, centity_t *cent);
void CG_SetFrameInterpolation(LocalClientNum_t localClientNum);
void CG_PlayClientRumbleNoteTracks(LocalClientNum_t localClientNum, int entnum, const vec3_t *origin, const char *notifyName);
void CG_PlayClientSoundNoteTracks(LocalClientNum_t localClientNum, int entnum, const vec3_t *origin, const char *notifyName, bool isViewArms);
unsigned __int16 GetBoneFromNote(unsigned __int16 note, const char *noteString);
void CG_ProcessFootstepNote(LocalClientNum_t localClientNum, centity_t *cent, const XAnimClientNotify *note);
void CG_ProcessClientNote(const XAnimClientNotify *note, int entityNum, cg_t *cgameGlob, centity_t *cent, LocalClientNum_t localClientNum);
void CG_ProcessClientNoteTracks(LocalClientNum_t localClientNum, int entityNum);
void CG_ReduceOriginError(LocalClientNum_t localClientNum, vec3_t *origin, vec3_t *originError, float maxChange);
void CG_ReduceAnglesError(LocalClientNum_t localClientNum, vec3_t *angles, vec3_t *anglesError, float maxChange);
;
void CG_UpdateClientDobjPartBits(centity_t *cent, int entnum, LocalClientNum_t localClientNum);
void CG_ClampPrimaryLightDir(GfxLight *light, const ComPrimaryLight *refLight);
void CG_PrimaryLight(LocalClientNum_t localClientNum, centity_t *cent);
int CG_ShouldDelayEntityPacketPostPS(LocalClientNum_t localClientNum, centity_t *cent);
void DelayListAdd(DelayListInfo *listInfo, centity_t *cent);
void DelayListRemove(DelayListInfo *listInfo, centity_t *cent, centity_t *centPrev);
bool EntPacketUpdateNeedsDelayed(LocalClientNum_t localClientNum, centity_t *cent, bool contextKey);
void CG_DObjUpdateInfo(const cg_t *cgameGlob, DObj *obj, int notifyFlags);
centity_t *CG_GetPose(LocalClientNum_t localClientNum, int handle);
unsigned int CG_StartFx(LocalClientNum_t localClientNum, centity_t *cent, int startAtTime);
void CG_Fx(LocalClientNum_t localClientNum, centity_t *cent);
void CG_InterpolateEntityPosition(cg_t *cgameGlob, centity_t *cent, LocalClientNum_t localClientNum);
void CG_LerpTrajectory(const cg_t *cgameGlob, trajectory_t *trFrom, trajectory_t *trTo, float lerp, trajectory_t *trResult, bool isAngle);
void CG_InterpolateVehicleDriver(const cg_t *cgameGlob, centity_t *cent, int curTime);
char AnyLocalClientDriving(centity_t *cent);
bool ShouldInterpolateFromNitrousVehicleLocally(const cg_t *cgameGlob, centity_t *cent);
;
void CG_CreateRagdollObject(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdateRagdollPose(centity_t *cent);
void CG_CalcEntityRagdollPositions(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdateMoverRecord(LocalClientNum_t localClientNum, int moverNum);
void CG_InterpolateEntityAngles(cg_t *cgameGlob, centity_t *cent, LocalClientNum_t localClientNum);
;
void CG_UpdatePhysicsPose(centity_t *cent);
void CG_UpdateTags(centity_t *ent, const DObj *obj);
unsigned int CG_AddClientScriptAttachedModel(centity_t *cent, DObjModel_s *dobjModels, unsigned int numModels, LocalClientNum_t localClientNum);
unsigned int CG_AddVehicleAttachedModel(centity_t *cent, DObjModel_s *dobjModels, unsigned int numModels, LocalClientNum_t localClientNum);
unsigned int CG_AddScriptMoverAttachedModel(centity_t *cent, DObjModel_s *dobjModels, unsigned int numModels, LocalClientNum_t localClientNum);
unsigned int CG_AddWeaponAttachedModel(centity_t *cent, DObjModel_s *dobjModels, unsigned int numModels, LocalClientNum_t localClientNum);
DObj *CG_PreProcess_GetDObj(LocalClientNum_t localClientNum, int entIndex, int entType, XModel *model, XModel *model2);
void CG_DObjCalcBone(const cpose_t *pose, DObj *obj, int boneIndex);
void CG_ClearUnion(LocalClientNum_t localClientNum, centity_t *cent);
void CG_SetUnionType(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdatePoseUnion(LocalClientNum_t localClientNum, centity_t *cent);
void CG_GetPoseOrigin(const cpose_t *pose, vec3_t *origin);
void CG_GetPoseAbsMinMax(const cpose_t *pose, vec3_t *absmin, vec3_t *absmax);
void CG_GetPoseAxis(const cpose_t *pose, vec3_t *axis);
void CG_GetPoseQuat(const cpose_t *pose, vec4_t *quat);
vec3_t *CG_GetEntityOrigin(LocalClientNum_t localClientNum, unsigned int entnum);
void CG_PredictiveSkinCEntity(GfxSceneEntity *sceneEnt);
void CG_PredictiveSkelModel(GfxSceneModel *sceneModel);
void CG_SetOrigin(centity_t *ent, const vec3_t *origin);
void CG_SetAngle(centity_t *ent, const vec3_t *angle);
bool CG_IsEntityFriendlyNotEnemy(LocalClientNum_t localClientNum, const centity_t *cent);
int CG_EntityInfrared(LocalClientNum_t localClientNum, centity_t *cent);
__int16 *CG_EntitySonar(LocalClientNum_t localClientNum, centity_t *cent, bool corpse);
int CG_WhatModelShouldLocalPlayerSee(LocalClientNum_t localClientNum, const cg_t *cgameGlob, const centity_t *cent, int centTeam, int friendlyModel, int enemyModel);
int CG_GetDriverClientNumFromVehicle(LocalClientNum_t localClientNum, const centity_t *vehicle);
void CG_ClientFlagResetAll(centity_t *cent);
void CG_ClientFlagSet(centity_t *cent, int flagNum);
void CG_ClientFlagClear(centity_t *cent, int flagNum);
BOOL CG_ClientFlagIsActive(const centity_t *cent, int flagNum);
BOOL CG_ClientFlagIsSet(const centity_t *cent, int flagNum);
void CG_General(LocalClientNum_t localClientNum, centity_t *cent);
void CG_Item(LocalClientNum_t localClientNum, centity_t *cent);
;
void CG_Missile(LocalClientNum_t localClientNum, centity_t *cent);
DObj *CG_ScriptMover_GetDObj(LocalClientNum_t localClientNum, centity_t *cent);
DObj *CG_HandleZBarrierModelChanges(LocalClientNum_t localClientNum, centity_t *parent, int pieceIndex, DObj *pDobj, ZBarrierBoard *pBoardDef);
void SwitchZombieBoxWeapon(LocalClientNum_t localClientNum, centity_t *cent, zombieBoxWeapon_t *pZombieBoxWeapon);
void ClearZombieBoxWeapon(LocalClientNum_t localClientNum, centity_t *cent);
void zbarrier_piece_box_rise_logic(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *pParent, ZBarrierDef *pZBarrierDef, _cgZBarrierPiece_t *pPiece, LerpEntityStateZBarrierPiece *pLerpPiece, unsigned int pieceIndex);
void CG_UpdateZBarrierPieceState(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *cent);
;
void CG_ScriptMover(LocalClientNum_t localClientNum, centity_t *cent);
void CG_LoopFx(LocalClientNum_t localClientNum, centity_t *cent);
DObjAnimMat *CG_DObjGetLocalTagMatrix(const cpose_t *pose, DObj *obj, unsigned int tagName);
int CG_DObjGetWorldBoneMatrix(const cpose_t *poseEA, DObj *objEA, int boneIndex, vec3_t *tagMat, vec3_t *origin);
int CG_DObjGetWorldTagMatrix(DObj *a1, const cpose_t *pose, DObj *obj, unsigned int tagName, vec3_t *tagMat, vec3_t *origin);
;
void CG_Vehicle(LocalClientNum_t localClientNum, centity_t *cent);
void CG_CreatePhysicsObject(LocalClientNum_t localClientNum, centity_t *cent);
void CG_CalcEntityPhysicsPositions(LocalClientNum_t localClientNum, centity_t *cent);
;
void CG_ClientFlagCallback(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ProcessFxEntity(LocalClientNum_t localClientNum, centity_t *cent);
void CG_AddPacketFxEntity(LocalClientNum_t localClientNum, int entnum);
void CG_ProcessFakeEntity(LocalClientNum_t localClientNum, centity_t *cent);
void CG_Turret(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ProcessEntity(LocalClientNum_t localClientNum, centity_t *cent);
void CG_AddPacketEntity(LocalClientNum_t localClientNum, int entnum);
void UpdatePacketEnt(LocalClientNum_t localClientNum, int entnum, int timeNow, int *postPSEntNum, bool contextKey);
void UpdateDelayedPacketEnts(LocalClientNum_t localClientNum, DelayListInfo *delayList, int *postPSEntNum, bool contextKey);
int CG_AddPacketEntities(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_gamepad.cpp
bool CG_ShouldUpdateViewAngles(LocalClientNum_t localClientNum);
// char destructible_ent_aa::process_collision();

//t6/code/src_noserver/cgame_mp/cg_killcam.cpp
void CG_KillcamRegisterDvars();
void CG_UpdateKillCamEntityViewOffset(LocalClientNum_t localClientNum);
void CG_GetPlayerKillCamEntityLookAt(LocalClientNum_t localClientNum, vec3_t *lookAtPos);
void CG_GetKillCamEntityOrgAngles(LocalClientNum_t localClientNum, vec3_t *origin, vec3_t *angles);
float LookAtAxisAndDistance(const vec3_t *origin, const vec3_t *lookAt, vec3_t *axis);
float LookAtBothPoints(const vec3_t *point1, const vec3_t *point2, const vec3_t *campos, vec3_t *lookaxis);
void CG_UpdateTurretKillCam(float distance, GfxDepthOfField *dof);
void CG_GetTurretEntityOrgAngles(LocalClientNum_t localClientNum, vec3_t *origin, vec3_t *angles);
float CG_GetTurretKillcamHeightIncrease(const LocalClientNum_t localClientNum);
float CG_GetTurretKillcamFOV(const LocalClientNum_t localClientNum);
float CG_GetTurretKillcamBackOffset(const LocalClientNum_t localClientNum);
void CG_UpdateVehicleKillCamDof(const VehicleDef *info, float distance, GfxDepthOfField *dof);
void CG_UpdateHelicopterKillCamDof(float distance, GfxDepthOfField *dof);
void CG_UpdateHelicopterKillCam(KillCamEntityType killCamEntityType, LocalClientNum_t localClientNum);
void CG_UpdateScriptedKillCamDof(float distance, GfxDepthOfField *dof);
void CG_UpdateScriptedKillCam(vec3_t *a1, LocalClientNum_t a2, LocalClientNum_t localClientNum);
void CG_UpdateDestructibleKillCamDof(float distance, GfxDepthOfField *dof);
void CG_UpdateDestructibleKillCam(vec3_t *a1, LocalClientNum_t a2, LocalClientNum_t localClientNum);
;
void CG_UpdateDogKillCam(LocalClientNum_t localClientNum);
bool CG_KillCamEntityEnabled(LocalClientNum_t localClientNum);
void CG_CacheKillCamEntityPose(const LocalClientNum_t localClientNum);
// void CG_CacheKillCamLookAtEntityOrigin(char *a1@<edi>, const LocalClientNum_t localClientNum);
void CG_UpdateKillCamEntityCache(LocalClientNum_t localClientNum);
;
const VehicleDef *CG_GetKillCamVehicleDef(LocalClientNum_t localClientNum);
void CG_UpdateVehicleKillCam(LocalClientNum_t localClientNum);
;
;
void CG_UpdateTurretKillCam(vec3_t *a1, LocalClientNum_t a2, LocalClientNum_t localClientNum);
void CG_UpdateKillCamEntity(vec3_t *a1, LocalClientNum_t a2, vec3_t *killCamEntityType, KillCamEntityType localClientNum, LocalClientNum_t a5);

//#include "cgame_mp/cg_local_mp.h"

//t6/code/src_noserver/cgame_mp/cg_main_mp.cpp
ClientNum_t CG_GetClientNumForLocalClient(LocalClientNum_t localClientNum);
BOOL CG_IsRagdollTrajectory(const trajectory_t *trajectory);
void CG_SetupSplitscreenDvars(bool splitscreen);
void CG_RegisterDvars_Project();
void TRACK_cg_main_project();
void CG_GetDObjOrientation(LocalClientNum_t localClientNum, int dobjHandle, vec3_t *axis, vec3_t *origin);
playerState_s *CG_GetPredictedPlayerState(LocalClientNum_t localClientNum);
void CG_GameMessage(LocalClientNum_t localClientNum, const char *msg);
void CG_BoldGameMessage(LocalClientNum_t localClientNum, const char *msg, int duration);
void CG_RegisterSurfaceTypeSounds(const char *pszType, unsigned int *sound);
void CG_RegisterImpactTypeSounds(const char *pszType, unsigned int *sound);
void CG_RegisterSounds(const char *a1, unsigned int *a2);
void CG_RegisterGrenadeFx(LocalClientNum_t localClientNum, const FxEffectDef *fxHandle);
void CG_RegisterGraphics(LocalClientNum_t localClientNum);
void CG_PlayBattleChatter(LocalClientNum_t localClientNum, int entitynum, const vec3_t *origin, int firstSoundAlias, int secondSoundAlias);
void CG_CheckBattleChatter();
void CG_RestartSmokeGrenades(LocalClientNum_t localClientNum);
void CG_LoadHudMenu(LocalClientNum_t localClientNum);
void CG_InitVote(LocalClientNum_t localClientNum);
XModel *CG_GetXModel(const char *modelName);
void CG_CreateDObj(DObjModel_s *dobjModels, unsigned __int16 numModels, XAnimTree_s *tree, int handle, LocalClientNum_t localClientNum);
DObj *CG_GetDObj(int handle, LocalClientNum_t localClientNum);
void CG_FreeAnimTreeInstances(LocalClientNum_t localClientNum);
void CScr_LoadGameType();
void CScr_StartupGameType();
int CScr_LoadGameTypeScript();
unsigned int CScr_LoadDogAnimScripts();
unsigned int CScr_LoadZombieAnimScripts();
unsigned int CScr_LoadZombieDogAnimScripts();
int CScr_LoadScriptsForEntities();
void CScr_LoadServerSideScripts(const char *mapname, const char *gametype, int *scr_checksum);
void CGScr_LoadClientScripts(const char *mapname);
void CGScr_LoadClientScriptsZombies(const char *mapname);
void CG_InitEntities(LocalClientNum_t localClientNum);
void CG_InitViewDimensions(LocalClientNum_t localClientNum);
ClientNum_t CG_GetClientNum(LocalClientNum_t localClientNum);
bool CG_IsShoutcaster(LocalClientNum_t localClientNum);
bool CG_IsShoutcasterListening(LocalClientNum_t localClientNum, ClientNum_t talker);
void CG_ResetShoutcasterListenIn(LocalClientNum_t localClientNum);
void CG_SetShoutcasterListenIn(LocalClientNum_t localClientNum);
void CG_AddShoutcasterListenIn(LocalClientNum_t localClientNum, ClientNum_t client);
void CG_RemoveShoutcasterListenIn(LocalClientNum_t localClientNum, ClientNum_t client);
bool CG_IsMature();
char CG_GetEntityOriginAngles(LocalClientNum_t localClientNum, int entityNum, vec3_t *origin, vec3_t *angles);
int CG_GetVehicleTypeString(ClientNum_t clientNum, int entityNum, VehicleDef **vehDef);
int CachedTag_UpdateTagInternal(const centity_t *ent, cached_client_tag_t *cachedTag, unsigned int tagName, int updateInterval, bool forceUpdate);
int CachedTag_NoCache_GetTagPos(const centity_t *ent, unsigned int tagName, vec3_t *pos);
;
;
BOOL CG_AllClientsAreLocal();
void CG_InitClientEntityCaches(LocalClientNum_t localClientNum);
void CG_FreeClientEntityCaches(LocalClientNum_t localClientNum);
void CG_ProcessFullScreenBit(LocalClientNum_t localClientNum, int oldFlags, int newFlags);
void CG_SetupGameInformation(LocalClientNum_t localClientNum);
int CG_TestServerScriptChecksum(LocalClientNum_t localClientNum, int *scr_checksum);
void CG_Scr_AddFloat_BGWrapper(float val);
void CG_Scr_AddString_BGWrapper(const char *pStr);
void CG_Scr_AddLocalClientNumber_BGWrapper(LocalClientNum_t num);
void CG_Scr_ExecEntThreadNum_BGWrapper(LocalClientNum_t lcn, int entNum, int func, int numParam);
unsigned int CG_GetServerHighestClientFieldVersion();
BOOL CG_ClientFieldServerVersionAllowsRegistration(unsigned int version);
BOOL CG_ClientFieldVersionAllowsRegistration(clientField_s *pField, unsigned int version);
void CG_CompareClientFieldHashToGameState(unsigned int hash);
void CG_ProcessClientFieldsForEntity(centity_t *pCent, LocalClientNum_t localClientNum, bool bNewEnt, bool bWasDemoJump, playerState_s *prevPs, playerState_s *ps);
void CG_ShutdownOnceForAllClients();
void CG_SaveMigrationPers(LocalClientNum_t localClientNum);
void CG_LoadMigrationPers(LocalClientNum_t localClientNum);
void CG_ProcessTriggerDebug(centity_t *ent, trigger_info_t *trigger_info);
int CG_NotifyTriggers();
void CG_Trigger(centity_t *self, centity_t *other);
void CG_Touch_Multi(centity_t *self, centity_t *other);
void *Hunk_AllocXAnimClient(int size);
void *Hunk_AllocAnimStateDefClient(int size);
bool CG_IsClientInOurParty(LocalClientNum_t localClientNum, ClientNum_t clientNum);
void CG_LoadAnimTreeInstances(LocalClientNum_t localClientNum);
void CG_LoadAnimTrees(LocalClientNum_t localClientNum, cg_t *cgameGlob, const char *mapname, bool loading_scripts);
void CG_Init(char *a1, LocalClientNum_t localClientNum, int serverMessageNum, int serverCommandSequence, ClientNum_t clientNum);
void CG_Shutdown(LocalClientNum_t localClientNum);
XModel *CG_GetXModel(const char *name, LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_newdraw_mp.cpp
void CG_AntiBurnInHUD_RegisterDvars();
void CG_NewDraw_RegisterDvars();
BOOL CG_ShouldDrawHud(LocalClientNum_t localClientNum);
double CG_FadeHudMenu(LocalClientNum_t localClientNum, float fadeVal, int displayStartTime, int duration);
bool CG_CheckPlayerForLowAmmoSpecific(const cg_t *cgameGlob, Weapon weapon);
bool CG_CheckPlayerForLowAmmo(const cg_t *cgameGlob);
bool CG_CheckForLowClip(const playerState_s *ps, Weapon weapon);
bool CG_CheckPlayerForLowClipSpecific(const cg_t *cgameGlob, Weapon weapon);
bool CG_CheckPlayerForLowClip(const cg_t *cgameGlob);
void CG_DrawPlayerAmmoBackdrop(LocalClientNum_t localClientNum, const rectDef_s *rect, const vec4_t *color, Material *material);
void CG_DrawPlayerAmmoValue(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float scale, vec4_t *color, Material *material, int textStyle, int type);
void CG_DrawPlayerHeatValue(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, bool drawVehicleTurretVersion);
void CG_DrawPlayerFuelAmmoValue(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color);
void CG_DrawPlayerReloadValue(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material);
void CG_DrawPlayerReloadedValue(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material);
void CG_DrawPlayerWeaponName(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float scale, vec4_t *color, int textStyle);
void CG_DrawPlayerWeaponNameBack(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float scale, const vec4_t *color, Material *material);
void CG_CalcPlayerSprintColor(const cg_t *cgameGlob, const playerState_s *ps, vec4_t *color);
void CalcSplitScreenStanceOffset(float *x, float *y);
void CG_DrawStanceHintPrints(LocalClientNum_t localClientNum, const rectDef_s *rect, float x, const vec4_t *color, float fadeAlpha, Font_s *font, float scale, int textStyle);
void CG_DrawPlayerStance(LocalClientNum_t localClientNum, const rectDef_s *rect, const vec4_t *color, Font_s *font, float scale, int textStyle);
void CG_DrawPlayerSprintBack(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawPlayerSprintMeter(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
double CG_CalcPlayerHealth(const playerState_s *ps);
void CG_DrawPlayerBarHealth(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawPlayerBarHealthBack(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
float CG_FadeLowHealthOverlay(const cg_t *cgameGlob);
void CG_PulseLowHealthOverlay(cg_t *cgameGlob, float healthRatio);
void CG_ResetLowHealthOverlay(cg_t *cgameGlob);
;
void CG_DrawPlayerDirectionalHitIndicator(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_ResetDirectionalDamageIndicators(LocalClientNum_t localClientNum, int time);
int CG_ServerMaterialName(LocalClientNum_t localClientNum, int index, char *materialName, unsigned int maxLen);
Material *CG_ObjectiveIcon(LocalClientNum_t localClientNum, const objective_t *objective, int type, ObjectIconType compassMapType, int isClientObjective);
void CG_UpdateCursorHints(cg_t *cgameGlob);
const char *CG_GetWeaponUseString(LocalClientNum_t localClientNum, const char **secondaryString, char *fullWeaponName, unsigned int maxStringLen);
const char *CG_GetUseString(LocalClientNum_t localClientNum);
void CG_DrawCursorhint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, vec4_t *color, int textStyle);
void CG_DrawHoldBreathHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawHoldBreathZoomHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawAirburstMarkHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawRCBombHints(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle, int hintType);
void CG_DrawGuidedMissileBoostHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawGuidedMissileDetonateHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawRemoteMissileSteerHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
void CG_DrawRemoteMissileBoostHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle);
float CG_GetClosestTargetToGuidedMissile(LocalClientNum_t localClientNum);
float CG_GetDistanceGuidedMissileAndOwner(LocalClientNum_t localClientNum);
void CG_DrawGuidedMissileInfo(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, int textStyle, eGuidedMissileInfo infoType);
void CG_DrawTurretPlaceHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, const vec4_t *color, int textStyle);
void CG_DrawMantleHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, const vec4_t *color, int textStyle);
char *CG_ScriptMainMenu(LocalClientNum_t localClientNum);
void CG_DrawInvalidCmdHint(LocalClientNum_t localClientNum, const rectDef_s *rect, Font_s *font, float fontscale, vec4_t *color, int textStyle);
void CG_DrawTalkerNum(LocalClientNum_t localClientNum, const int num, rectDef_s *rect, Font_s *font, vec4_t *color, float textScale, int style);
void get_tank_hud_health_tint_color(float health_fraction, vec4_t *rgba, float black_when_dead);
void draw_tank_turret_component(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, const vec4_t *color, e_tank_hud_component component);
void CG_DrawWarMomentumProgress(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material, int ownerDraw);
void CG_DrawWarMomentumMultiplier(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material);
void CG_DrawWarMomentumMultiplierDetail(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material);
void CG_DrawWarMomentumMultiplierBlitzkrieg(LocalClientNum_t localClientNum, const rectDef_s *rect, vec4_t *color, Material *material);
void CG_DrawWarText(const cg_t *cgameGlob, rectDef_s *rect, Font_s *font, float fontscale, vec4_t *color, int textStyle, float text_x, float text_y);
void CG_DrawWristWatch(LocalClientNum_t localClientNum, const rectDef_s *parentRect, const rectDef_s *rect, Material *material, vec4_t *color);
void DrawAirburstDistance(unsigned int distance, LocalClientNum_t localClientNum, const rectDef_s *rect, const vec4_t *color, Material *material);
void CG_DrawAirburstCurrentDistance(LocalClientNum_t localClientNum, const rectDef_s *rect, const vec4_t *color, Material *material);
void CG_DrawAirburstMarkDistance(LocalClientNum_t localClientNum, const rectDef_s *rect, const vec4_t *color, Material *material);
void CG_DrawAirburstMarkTimer(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawDemoControls(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
bool ShouldDrawPlayerTargetHighlightsFriendlies(LocalClientNum_t localClientNum, const cg_t *cgameGlob);
bool ShouldDrawPlayerTargetHighlights(LocalClientNum_t localClientNum, const cg_t *cgameGlob);
bool ShouldDrawPlayerLineOfSightTargetHighlights(LocalClientNum_t localClientNum, const cg_t *cgameGlob);
void CG_DrawTarget(LocalClientNum_t localClientNum, const vec2_t *screenPos, float targetSize, const vec4_t *color, Material *material);
void CG_DrawPlayerTargetHighlights(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawPlayerTargetHighlightsLineOfSight(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawPlayerTargetHighlightsFriendly(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawTargetHighlightsForEntity(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *cent, const rectDef_s *rect, Material *material, vec4_t *color, TargetHighlightParam *params);
void CG_DrawVehicleTargetHighlights(TargetHighlightParam *a1, LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material);
void CG_DrawTurretTargetHighlights(TargetHighlightParam *a1, LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material);
void CG_DrawDogTargetHighlights(TargetHighlightParam *a1, LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material);
void CG_DrawTargetHighlights(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawTargetHighlightsFriendly(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawGuidedMissileFuel(LocalClientNum_t localClientNum, const rectDef_s *rect, Material *material, vec4_t *color);
void CG_DrawChargeShotBulletCounter(LocalClientNum_t localClientNum, rectDef_s *rect, vec4_t *color);
void CG_OwnerDraw(double localClientNum, LocalClientNum_t a2, rectDef_s parentRect, float x, float y, float w, float h, int horzAlign, int vertAlign, int ownerDraw, int ownerDrawFlags, vec4_t *color, Material *material);
;

//t6/code/src_noserver/cgame_mp/cg_players_mp.cpp
void CG_AddPlayerSpriteDrawSurf(LocalClientNum_t localClientNum, const centity_t *cent);
void CG_AddPlayerSpriteDrawSurfs(LocalClientNum_t localClientNum, const centity_t *cent);
void CG_AddAllPlayerSpriteDrawSurfs(LocalClientNum_t localClientNum);
char CG_Player_ApplyVehicleAnimOffsets(LocalClientNum_t localClientNum, const entityState_s *es, centity_t *cent, clientInfo_t *ci);
void CG_PlayerUpdateUserRigidBody(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdatePerkSounds(LocalClientNum_t localClientNum, const cg_t *cgameGlob);
void CG_GetPlayerVelocity(LocalClientNum_t localClientNum, centity_t *cent, vec3_t *velocity_out);
void CG_DropWeaponClip(LocalClientNum_t localClientNum, clientInfo_t *ci, centity_t *cent, const Weapon weapon, DObj *obj);
void CG_ClearDropWeaponClip(LocalClientNum_t localClientNum, int clientNum);
void CG_UpdatePlayerDObj(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ResetPlayerEntity(LocalClientNum_t localClientNum, cg_t *cgameGlob, centity_t *cent, int resetAnimation);
void CG_PlayerDobjChanging(LocalClientNum_t localClientNum, clientInfo_t *ci, const Weapon weapon);
const char *CG_GetFFATeamName(ffa_team_t team);
const char *CG_GetOpposingTeamName(team_t team);
const char *CG_GetPlayerTeamName(const LocalClientNum_t localClientNum);
const char *CG_GetPlayerOpposingTeamName(const LocalClientNum_t localClientNum);
clientInfo_t *CG_GetClientInfo(const LocalClientNum_t localClientNum, ClientNum_t clientNum);
bool CG_IsPlayerDead(const LocalClientNum_t localClientNum);
int CG_GetPlayerClipAmmoCount(const LocalClientNum_t localClientNum);
char CG_ShouldSendPeerVoiceData(SessionData *session, const LocalClientNum_t localClientNum, const ClientNum_t player);
;
void CG_UpdateWeaponVisibilityInternal(LocalClientNum_t localClientNum, centity_t *cent);
void CG_UpdateWeaponVisibilityImmediate(centity_t *a1, LocalClientNum_t localClientNum);
bool CG_PlayerInViewFrustum(LocalClientNum_t localClientNum, const centity_t *cent);
bool CG_ClientHasPerk(LocalClientNum_t localClientNum, ClientNum_t clientNum, unsigned int perkIndex);
void CG_CopyPerks(LocalClientNum_t localClientNum, ClientNum_t clientNum, unsigned int *out);
;
int CG_PlayerInfrared(LocalClientNum_t localClientNum, centity_t *cent, clientInfo_t *ci, DObj *obj, bool corpse, int *textureOverrideIndex);
unsigned int CG_PlayerSonar(LocalClientNum_t localClientNum, centity_t *cent, clientInfo_t *ci, bool corpse);
void CG_Player(LocalClientNum_t localClientNum, centity_t *cent);
void CG_Corpse(LocalClientNum_t localClientNum, centity_t *cent);

//t6/code/src_noserver/cgame_mp/cg_predict_mp.cpp
void TRACK_cg_predict();
int CG_ItemListLocalClientNum();
void CG_ClearItemList();
void CG_BuildItemList(LocalClientNum_t localClientNum, const snapshot_s *nextSnap);
void CG_TouchItem(const LocalClientNum_t localClientNum, centity_t *cent);
void CG_TouchItemPrediction(centity_t *a1, LocalClientNum_t a2, LocalClientNum_t localClientNum);
bool CG_ShouldInterpolatePlayerStateViewClamp(LocalClientNum_t localClientNum, const snapshot_s *prevSnap);
void CG_InterpolatePlayerStateViewAngles(const snapshot_s *a1, LocalClientNum_t a2, LocalClientNum_t localClientNum, playerState_s *out);
void CG_ClearSavedPlayerState(LocalClientNum_t localClientNum);
void CG_SavePlayerState(LocalClientNum_t localClientNum);
void CG_CopyFlagsFromSnapshotEntity(LocalClientNum_t localClientNum);
;
void CG_PredictPlayerState_Internal(LocalClientNum_t localClientNum);
void CG_PredictPlayerState(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_scoreboard_mp.cpp
double CG_ScoreboardScaleMultiplier();
const GfxViewParms *CG_GetNameForScoreboardColumn(LocalClientNum_t localClientNum, int columnNumber);
int CG_GetColumnValue(LocalClientNum_t localClientNum, const score_s *score, scoreboardColumnType_t columnType);
void CG_SortPlayersAlphabetically(LocalClientNum_t localClientNum);
int CG_SortPlayersByClientNumComparator(const void *a, const void *b);
void CG_SortPlayersByClientNum(LocalClientNum_t localClientNum);
void CG_ResetScoreboard(LocalClientNum_t localClientNum);
void CG_UpdateMatchScoreboard(LocalClientNum_t localClientNum);
int CG_GetMatchScoreboardClientCount(LocalClientNum_t localClientNum, team_t team);
int CG_GetMatchScoreboardIndexForTeamByName(LocalClientNum_t localClientNum, int index, team_t team);
int CG_GetMatchScoreboardIndexForTeamByClientNum(LocalClientNum_t localClientNum, int index, team_t team);
int CG_GetMatchScoreboardIndexForTeamByScore(LocalClientNum_t localClientNum, int index, team_t team);
;
;
const GfxViewParms *CG_GetMatchInGamePlayerXuid(LocalClientNum_t localClientNum, int index, team_t team);
int CG_GetIndexIntoMatchScoreboard(LocalClientNum_t localClientNum, ControllerIndex_t controllerIndex);
int CG_GetWagerPlaceForMatchScoreboard(LocalClientNum_t localClientNum, int matchScoreboardIndex);
int CG_GetWagerWinningsForMatchScoreboard(LocalClientNum_t localClientNum, int index, team_t team);
const score_s *GetClientScore(LocalClientNum_t localClientNum, ClientNum_t clientNum);
const score_s *UI_GetOurClientScore(LocalClientNum_t localClientNum);
const score_s *UI_GetScoreAtRank(LocalClientNum_t localClientNum, int rank);
char *CG_GetGametypeDescription(LocalClientNum_t localClientNum);
char CG_DrawScoreboard_GetTeamColorIndex(int team, LocalClientNum_t localClientNum);
int CG_ScoreboardTotalLines(LocalClientNum_t localClientNum);
void CenterViewOnClient(const LocalClientNum_t localClientNum);
BOOL CG_IsScoreboardDisplayed(LocalClientNum_t localClientNum);
BOOL CG_IsIntermission(LocalClientNum_t localClientNum);
void CG_SetFocusScoreboardCmd();
void CG_InitScoreboard();
void CG_RegisterScoreboardDvars();
void CG_RegisterScoreboardGraphics();
void CG_ScoreboardNextGamerIndex(LocalClientNum_t localClientNum);
void CG_ScoreboardPrevGamerIndex(LocalClientNum_t localClientNum);
bool Scoreboard_HandleInputNonXboxLive(LocalClientNum_t localClientNum, int key);
char Scoreboard_HandleInputXboxLive(LocalClientNum_t localClientNum, int key);
char Scoreboard_HandleInput(LocalClientNum_t localClientNum, int key);
int CG_GetPlaceWithTiesForScore(const LocalClientNum_t localClientNum, int score);
int CG_GetMatchScoreboardValueByXuid(LocalClientNum_t localClientNum, unsigned __int64 xuid, const char *sbColumn);
int CG_GetKills(LocalClientNum_t localClientNum, const score_s *score);
int CG_GetDeaths(LocalClientNum_t localClientNum, const score_s *score);
const char *CG_GetColumnValueString(LocalClientNum_t localClientNum, const score_s *score, scoreboardColumnType_t columnType);
;
int CG_DrawScoreboard(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_scoreboard_zm.cpp
int rampScore(ClientNum_t clientNum, int score);
void CG_PlayerColor(int playerNum, const char *prefix, vec4_t *color);
void CG_RegisterScoreboardDvarsZM();
void DrawCompetitiveListString(LocalClientNum_t localClientNum, const char *string, float x, float y, float width, int horzAlign, int vertAlign, int alignment, Font_s *font, float scale, int style, const vec4_t *color, float list_item_height);
float CG_DrawCompetitiveClientScore(LocalClientNum_t localClientNum, ClientNum_t clientNum, const vec4_t *color, const score_s *score, float x, float y, float listWidth, float itemHeight, int horzAlign, int vertAlign, int isPlayer);
void CG_DrawCompetitiveClients(LocalClientNum_t localClientNum, const vec4_t *color, rectDef_s *rect);
int CG_DrawCompetitiveScoreboard(LocalClientNum_t localClientNum, rectDef_s *rect);

//t6/code/src_noserver/cgame_mp/cg_scr_main_mp.cpp
centity_t *CScr_SpawnFXInternal(LocalClientNum_t localClientNum, int fxId, vec3_t *angles, vec3_t *pos, int time);
void CScr_DeleteFX();
char CScr_SetRimIntensity();
char CScr_SetGenericSceneValue();
void CScr_SpawnFX();
void CScr_PlayFXOnTag();
void CScr_PlayViewmodelFX();
void CScr_PlayFXOnDynEnt();
void CScr_StartWaterSheetFX();
void CScr_StopWaterSheetFX();
void CScr_IsDemoPlaying();
void CScr_GetGametypeSetting();
void CScr_IsSpectating();
void CScr_PlayerBeingSpectated();
void CScrCmd_IsBurning(scr_entref_t entref);
void CScrCmd_IsRemoteControlling(scr_entref_t entref);
void CScrCmd_OverrideLightingOrigin(scr_entref_t entref);
void CPlayerCmd_HasPerk(scr_entref_t entref);
void CScr_GetVehicleHealth(scr_entref_t entref);
void CScr_GetHeliDamageState(scr_entref_t entref);
void CScr_GetInKillcam(scr_entref_t entref);
void CScrCmd_SetRenderInThirdPersonSpectate(scr_entref_t entref);
void CScr_GetAnimState(scr_entref_t entref);
void CScr_GetAnimStateCategory(scr_entref_t entref);
void CScr_GetTotalAmmo();
void CScr_IsWeaponOverheating();
void CScr_IsADS();
void CScr_GetCurrentWeapon();
void CScr_GetCurrentWeaponIncludingMelee();
void CScr_HasWeapon();
BOOL CScr_SetLocalRadarEnabled();
void CScr_SetLocalRadarPosition();
int CScr_SetExtraCamEntity();
int CScr_SetExtraCamActive();
void CScr_GetExtraCamStatic();
int CScr_SetExtraCamStatic();
void CScr_SetExtraCamOrigin();
void CScr_SetExtraCamAngles();
void CScr_IsCameraSpikeToggled();
void CScr_GetGridFromPos();
void CScr_GetLocalPlayerTeam();
objective_t *CScr_InitClientObjectives();
void CScr_Objective_Add();
void CScr_Objective_SetIcon();
void CScr_Objective_SetStencil();
void CScr_Objective_SetIconSize();
void CScr_Objective_OnEntity();
void CScr_Objective_FlipIcon();
void CScr_Objective_Delete();
void CScr_Objective_State();
void CScr_SetClientVolumetricFog();
void CScr_GetServerVolumetricFogDensity();
void CScr_SetServerVolumetricFogDensity();
void CScr_SwitchToServerVolumetricFog();
void CScr_SwitchToClientVolumetricFog();
void CScr_IsInHelicopter();
void Scr_SetCustomDynEntFieldReadOnly(unsigned __int16 absDynEntId, const dynent_field_s *pField);
void Scr_GetDynEntStringField(unsigned __int16 absDynEntId, const dynent_field_s *pField);
void CScr_GetDynEntityField(int entnum, LocalClientNum_t clientNum, int offset);
int CScr_SetDynEntityField(int entnum, LocalClientNum_t clientNum, int offset);
void CScr_AddFieldsForDynEntity();
void CScr_GetDynEnt();
void CScr_GetDynEntArray();
void CScr_SpawnDynEnt();
void CScr_LaunchDynEnt();
void CScr_CreateDynEntAndLaunch();
void CScr_SetDynEntEnabled();
void CScr_loadGump();
Material *CScr_useAlternateReviveIcon();
Material *CScr_setTeamReviveIcon();
void CScr_flushGump();
void CScr_setHideGumpAlpha();
void CScr_PrecacheAnimStateDef();
void CScr_ScriptMoversUseAnimTree();
void CScr_EnableFlameSystem();
cg_t *CScr_EnableDarkness();
void CScr_SetLutVolumeActiveBank();
void CScr_SetLutScriptIndex();
void CScr_SetWorldFogActiveBank();
void CScr_GetWorldFogScriptID();
void CScr_RegisterClientField();
void CScr_GetFieldSetForEntityType(cg_t *cgameGlob, centity_t *pEnt, int *pFieldSet, void **pData);
void CScr_CodeGetClientField();
void CScr_CodeGetPlayerStateClientField();
void CScr_CodeGetWorldClientField();
void CScr_SetupClientFieldCodeCallbacks();
void ClientFieldAnimSpeedCallback(LocalClientNum_t localClientNum, unsigned int entNum, float oldVal, float newVal);
void CScr_SetupClientFieldAnimSpeedCallbacks();
void CScr_GetClientFieldVersion();
void CScr_GetServerHighestClientFieldVersion();
void CScr_ResetZombieBoxWeapons();
WeaponVariantDef *CScr_AddZombieBoxWeapon();
void CScr_SetMapLatLong();
void CScrCmd_SetBlurByLocalClientNum();
void CScrCmd_SetBurn();
void CScrCmd_SetElectrified();
void CScr_RopeGetPosition();
void CScr_GetRope();
cg_t *CScr_SetTeamFlagAsAway();
void CScr_GetStartOrigin();
void CScr_GetStartAngles();
void CScr_WeaponClass();
void CScr_HasDLCAvailable();
void CScr_PhysExplosionCylinder();
void CScr_ReregisterRLodScaleRigid();
void (*CScr_GetFunctionProjectSpecific(const char **pName, int *type, int *min_args, int *max_args))();
void CScrCmd_GetOwner(scr_entref_t entref);
void CScr_GetTagOrigin(scr_entref_t entref);
void CScr_GetTagAngles(scr_entref_t entref);
void CScrCmd_ShellShock(scr_entref_t entref);
void CScrCmd_Earthquake(scr_entref_t entref);
void CScr_SetEnemyGlobalScrambler(scr_entref_t entref);
void CScr_SetEnemyScramblerAmount(scr_entref_t entref);
void CScr_SetFriendlyScramblerAmount(scr_entref_t entref);
void CScr_GetFriendlyScramblerAmount(scr_entref_t entref);
void CScr_GetEnemyScramblerAmount(scr_entref_t entref);
void CScr_IsScrambled(scr_entref_t entref);
void CScr_SetNearestEnemyScrambler(scr_entref_t entref);
void CScr_ClearNearestEnemyScrambler(scr_entref_t entref);
void CScr_AddFriendlyScrambler(scr_entref_t entref);
void CScr_RemoveFriendlyScrambler(scr_entref_t entref);
void CScr_RemoveAllFriendlyScramblers(scr_entref_t entref);
void CScr_HasTacticalMaskOverlay();
void CScrCmd_SetBlur(scr_entref_t entref);
void CScr_GetStance(scr_entref_t entref);
void CScr_SetFlagAsAway(scr_entref_t entref);
void CScr_GetParentEntity(scr_entref_t entref);
void CScr_UseWeaponHideTags(scr_entref_t entref);
void CScr_SetAlphaFadeForName(scr_entref_t entref);
void CScr_UseAlternateAimParams(scr_entref_t entref);
void CScr_ClearAlternateAimParams(scr_entref_t entref);
void CScr_EquipFlashlight(scr_entref_t entref);
void CScr_RemoveFlashlight(scr_entref_t entref);
void CScr_SetPhysicsGravity(scr_entref_t entref);
void CScr_ClearPhysicsGravity(scr_entref_t entref);
void CScr_SetMultiExtraCamActive(scr_entref_t entref);
void CScr_SetSonarAttachmentEnabled(scr_entref_t entref);
void CScr_IsExtraCam(scr_entref_t entref);
void CScr_ProcessClientFieldsAsIfNew(scr_entref_t entref);
void CScr_ZBarrierGetPiece(scr_entref_t entref);
void CScr_ZBarrierGetNumPieces(scr_entref_t entref);
void (*CScr_GetMethodProjectSpecific(const char **pName, int *type, int *min_args, int *max_args))(scr_entref_t);
void CG_SendSwimNotify(LocalClientNum_t localClientNum, ClientNum_t clientNum, int start);
void CScr_GetEntityByIndex(centity_t *cent, const cent_field_s *pField);
void CScr_UseWeaponModel(scr_entref_t entref);

//t6/code/src_noserver/cgame_mp/cg_servercmds_mp.cpp
void CG_ParseServerInfo(LocalClientNum_t localClientNum);
void CG_ParseCodInfo(LocalClientNum_t localClientNum);
void CG_ParseCullDist();
void CG_ParseTimeScale(const LocalClientNum_t localClientNum);
void CG_BuildPartyList();
void CG_ParseGameEndTime(LocalClientNum_t localClientNum);
void CG_ParseFog(LocalClientNum_t localClientNum);
void CG_RegisterServerMaterial(int configStringIndex);
void CG_SetConfigValues(LocalClientNum_t localClientNum);
void CG_UpdateVoteString(LocalClientNum_t localClientNum, const char *rawVoteString);
void CG_ParseClientSystemStateChange(LocalClientNum_t localClientNum, int sysIndex, const char *pState);
void CG_ParseAirsupport(LocalClientNum_t localClientNum, float x, float y, float z, int yaw, char *type, char *teamFaction, char *team, int owner, char *exitType, int serverTime, int height);
void CG_AddToTeamChat(LocalClientNum_t localClientNum, const char *str);
void CG_RemoveChatEscapeChar(char *text);
void CG_ClearEntityFxHandles(LocalClientNum_t localClientNum);
void CG_ClearGenericFilter(cg_t *gameglob);
void CG_MapReset(LocalClientNum_t localClientNum);
void CG_OpenScriptMenu(LocalClientNum_t localClientNum);
void CG_CheckOpenWaitingScriptMenu(LocalClientNum_t localClientNum);
void CG_CloseScriptMenu(LocalClientNum_t localClientNum, bool allowResponse);
void CG_MenuShowNotify(LocalClientNum_t localClientNum, int menuToShow);
void CG_SetTeamScore(LocalClientNum_t localClientNum, int team, int score);
bool LocalSound(LocalClientNum_t localClientNum);
void LocalSoundStop(LocalClientNum_t localClientNum);
void CG_SetScriptMainMenu(cg_t *cgameGlob, const char *text);
void CG_SetClientDvarFromServer(cg_t *cgameGlob, dvar_cmd_t dvarCmd, const char *value);
void CG_BurnServerCommand(LocalClientNum_t localClientNum);
void CG_ElectrifiedServerCommand(LocalClientNum_t localClientNum);
void CG_ParseExploderCommand(LocalClientNum_t localClientNum, int exploderId);
void CG_WaterDropsServerCommand(LocalClientNum_t localClientNum);
void CG_ScrCamera(LocalClientNum_t localClientNum, int cmd);
void CG_BlurServerCommand(LocalClientNum_t localClientNum);
void CG_StartFadingBlurServerCommand(LocalClientNum_t localClientNum);
void CG_ParsePlayerInfos(LocalClientNum_t localClientNum);
void CG_ConfigStringModified(LocalClientNum_t localClientNum);
void CG_MapRestart(LocalClientNum_t localClientNum, int savepersist);
void CG_DeployServerCommand(LocalClientNum_t localClientNum);
void CG_ExecuteNewServerCommands(LocalClientNum_t localClientNum, int latestSequence);

//t6/code/src_noserver/cgame_mp/cg_snapshot_mp.cpp
void CG_ShutdownEntity(LocalClientNum_t localClientNum, centity_t *cent, bool shutdown_script_for_local_client);
void CG_TeleportEntity(LocalClientNum_t localClientNum, centity_t *cent);
void ResetEntity_EventSequence(centity_t *cent);
void ResetEntity_Internal(LocalClientNum_t localClientNum, centity_t *cent, int newEntity, int killcamEndingTransition);
void CG_ShutdownEntities(LocalClientNum_t localClientNum);
int CG_UpdateKillcamForEntity(LocalClientNum_t localClientNum, int newKillCamEntity);
void CG_UpdateClientFlags(LocalClientNum_t localClientNum, centity_t *cent, int oldEFlags2);
void CG_TransitionKillcam(LocalClientNum_t localClientNum);
void CG_UnpackMatchState(LocalClientNum_t localClientNum, MatchState *matchState);
void CG_CopyScoreFromClientState(LocalClientNum_t localClientNum, clientInfo_t *ci, clientState_s *cs);
void CG_UpdateScoreData(LocalClientNum_t localClientNum);
bool CG_LocalPlayerRespawned(LocalClientNum_t localClientNum, snapshot_s *snap);
void CG_SetNextSnap(LocalClientNum_t localClientNum, snapshot_s *snap);
snapshot_s *CG_ReadNextSnapshot(LocalClientNum_t localClientNum);
void CG_SetInitialSnapshot(LocalClientNum_t localClientNum, snapshot_s *snap);
void CG_TransitionSnapshot(LocalClientNum_t localClientNum);
void CG_ProcessSnapshots(LocalClientNum_t localClientNum);

//t6/code/src_noserver/cgame_mp/cg_vehicles_mp.cpp
clientInfo_t *ClientInfoForEntity(LocalClientNum_t localClientNum, int entNum);
DObj *GetVehicleEntDObj(LocalClientNum_t localClientNum, centity_t *centVeh);
bool CG_Vehicle_UsingVehicle(int a1, LocalClientNum_t localClientNum, int entNum);
bool CG_Vehicle_UsingRemoteControlVehicle(int a1, LocalClientNum_t localClientNum, int entNum);
int CG_Vehicle_PlayerSeat(int a1, LocalClientNum_t localClientNum);
void GetTagMatrix(LocalClientNum_t localClientNum, int vehEntNum, unsigned __int16 tagName, vec3_t *resultTagMat, vec3_t *resultOrigin);
void SeatTransformForClientInfo(LocalClientNum_t localClientNum, clientInfo_t *ci, vec3_t *resultOrigin, vec3_t *resultAngles);
;

//t6/code/src_noserver/cgame_mp/cg_view_mp.cpp
void TRACK_cg_view();
void CG_DrawWaterTrail(LocalClientNum_t localClientNum, const vec3_t *pos, float waterHeight);
int CG_GetNextRippleTime(centity_t *cent);
void CG_SetNextRippleTime(centity_t *cent, int time, float speed, bool in_water);
void CG_SetNextWaterCheck(centity_t *cent, int time, bool in_water);
void CG_DrawWaterTrail(LocalClientNum_t localClientNum, centity_t *cent);
void CG_DrawWaterTrail(LocalClientNum_t localClientNum);
void CG_PlayTestFx(LocalClientNum_t localClientNum);
void CG_FxSetTestPosition();
void CG_FxTest();
void CG_PrintFXNameUsage();
void CG_OffsetChaseCamView(LocalClientNum_t localClientNum, CameraMode camMode);
void CG_ClampOriginToPlayerCapsule(vec3_t *center, vec3_t *origin, int legsAnim, int time);
void CG_ThirdPersonCamAboveWater(cg_t *cgameGlob, float padding);
void CG_OffsetThirdPersonView(LocalClientNum_t localClientNum);
void CG_CalcVrect(LocalClientNum_t localClientNum);
void CG_CalcVrect_ExtraCam(LocalClientNum_t localClientNum, bool usingMultiExtraCam);
bool CG_IsEMPJammed(LocalClientNum_t localClientNum);
void CG_SmoothCameraZ(cg_t *cgameGlob);
void CG_KickAngles(cg_t *cgameGlob);
void CG_LastStandSway(LocalClientNum_t localClientNum);
void CG_OffsetFirstPersonView(cg_t *cgameGlob);
void CG_CalcCubemapViewValues(cg_t *cgameGlob);
// void CG_CalcTurretViewValues(char *a1@<edi>, LocalClientNum_t localClientNum);
void CG_ViewRegisterDvars();
void CalcLinkedViewValues(LocalClientNum_t localClientNum, vec3_t *viewangles);
void CG_UpdateCameraVelocity(cg_t *cgameGlob);
void CG_CalcViewValues(LocalClientNum_t localClientNum);
void CG_CalcViewValues_ExtraCam(LocalClientNum_t localClientNum);
void CG_UpdateIKTiming(LocalClientNum_t localClientNum);
void CG_UpdateThirdPerson(LocalClientNum_t localClientNum, bool forExtraCam);
const ClientViewParams *CG_GetLocalClientViewParams(LocalClientNum_t localClientNum, int activeClientIndex, int activeClientCountArrayIndex);
;
;
void CG_SetView(int a1, LocalClientNum_t a2, LocalClientNum_t localClientNum, int activeClientIndex, int activeClientCount, const ClientViewParams *clientViewParams);
void CG_ForceFullScreenView(LocalClientNum_t a1, LocalClientNum_t a2);
void DumpAnims(LocalClientNum_t localClientNum);
void DrawShellshockBlend(LocalClientNum_t localClientNum);
void CG_UpdateViewOffset(LocalClientNum_t localClientNum);
bool ShouldDoDefaultAdsDof(LocalClientNum_t localClientNum);
;
void CG_UpdateSceneDepthOfField(LocalClientNum_t localClientNum);
void CG_UpdatePoisonFX(cg_t *cgameGlob);
void CG_UpdateGenericFilter(cg_t *cgameGlob);
void CG_StartWaterSheetFX(LocalClientNum_t localClientNum, int duration, float magnitude);
void CG_StopWaterSheetFX(LocalClientNum_t localClientNum, int duration);
void CG_UpdateWaterSheetingFX(cg_t *cgameGlob, LocalClientNum_t localClientNum);
void CG_UpdateFlameFX(cg_t *cgameGlob);
void CG_SetupFlameFX(LocalClientNum_t localClientNum, int enable);
void CG_UpdateElectrifiedFX(cg_t *cgameGlob);
void CG_SetupElectrifiedFX(LocalClientNum_t localClientNum, int enable);
void CG_PickValidWeaponSelect(cg_t *cgameGlob);
void CG_ValidateWeaponSelect(cg_t *cgameGlob);
char CG_IsInfraredWeaponOverlay(LocalClientNum_t localClientNum);
bool CG_IsInfrared(LocalClientNum_t localClientNum);
bool CG_IsTvguided(LocalClientNum_t localClientNum, bool onlyADS);
// int CG_ProcessButDontDrawActiveFrame@<eax>(char *a1@<edi>, LocalClientNum_t localClientNum, int serverTime);
void CG_CreateBeamCent(LocalClientNum_t localClientNum, clientInfo_t *ci);
;
void CG_ResetBeamEffect(LocalClientNum_t localClientNum, centity_t *cent);
void CG_ResetBeamEffects(LocalClientNum_t localClientNum);
void CG_SetClientEntCollision(LocalClientNum_t localClientNum, bool enableCollision);
int CG_DrawExtraCamFrame(LocalClientNum_t localClientNum, int serverTime, DemoType demoType, CubemapShot cubemapShot, int cubemapSize, int renderScreen);
void CG_ClearSaveScreenFx(LocalClientNum_t localClientNum);
void CG_SaveScreen(LocalClientNum_t localClientNum);
void CG_SaveScreenSection(float viewX, float viewY, float viewWidth, float viewHeight, LocalClientNum_t screenTimerId);
void CG_BlendSavedScreenShockBlurred(int fadeMsec, float viewX, float viewY, float viewWidth, float viewHeight, LocalClientNum_t screenTimerId);
void CG_BlendSavedScreenShockFlashed(LocalClientNum_t localClientNum, float intensityWhiteout, float intensityScreengrab, float viewX, float viewY, float viewWidth, float viewHeight);
void CG_ResetFullscreenFX(LocalClientNum_t localClientNum);
void CG_UpdateEntInfo(LocalClientNum_t localClientNum);
void CG_InitView(LocalClientNum_t localClientNum);
;
int CG_DrawActiveFrame(LocalClientNum_t localClientNum, int serverTime, DemoType demoType, CubemapShot cubemapShot, int cubemapSize, int renderScreen);

//t6/code/src_noserver/cgame_mp/cg_weapon_options.cpp
// void __thiscall WeaponOptions::InitWeaponOptions(WeaponOptions *this);
// void __thiscall WeaponOptions::SetupWeaponCamoRender(WeaponOptions *this, LocalClientNum_t localClientNum, const float dist, WeaponDobjInfo::Slot weaponSlot, unsigned int camo, const WeaponDobjInfo *weaponDobjInfo, int *textureOverrideIndex);
// void __thiscall WeaponOptions::SetReticle(WeaponOptions *this, WeaponOptions::ReticleType type, int reticle, unsigned int dobjModelMask, int *textureOverrideIndex);
// bool __thiscall WeaponOptions::IsValidRenderOption(WeaponOptions *this, renderOptions_s renderOptions, Weapon weapon);
// void __thiscall WeaponOptions::DisplayRenderOption(WeaponOptions *this, renderOptions_s renderOptions, Weapon weapon);
void GC_InitWeaponOptionsDvars();
void GC_InitWeaponOptions();
// void CG_SetupWeaponCamoRender(LocalClientNum_t localClientNum, const vec3_t *origin, WeaponDobjInfo::Slot weaponSlot, unsigned int camo, const WeaponDobjInfo *weaponDobjInfo, int *textureOverrideIndex);
bool CG_IsValidRenderOption(renderOptions_s renderOptions, Weapon weapon);
void CG_DisplayRenderOption(renderOptions_s renderOptions, Weapon weapon);
void CG_SetRangeFinderShaderConstants(LocalClientNum_t localClientNum, ShaderConstantSet *constantSet);
void CG_SetWeaponSharedShaderConstants(LocalClientNum_t localClientNum, ShaderConstantSet *constantSet, int ammoCounter, float adsRatio);
float CG_GetWeaponHeat(LocalClientNum_t localClientNum, centity_t *cent);
void CG_SetWeaponHeatConstants(centity_t *a1, float x, LocalClientNum_t localClientNum, centity_t *cent);
void CG_SetWeaponHeatConstants(centity_t *a1, float x, LocalClientNum_t localClientNum, centity_t *cent, WeaponDobjInfo *weaponDobjInfo, int *textureOverrideIndex);
void CG_SetWeaponMMSConstants(LocalClientNum_t localClientNum, ShaderConstantSet *constantSet);
// void __thiscall WeaponOptions::SetupWeaponOptionsRender(WeaponOptions *this, LocalClientNum_t localClientNum, const vec3_t *origin, WeaponDobjInfo::Slot weaponSlot, renderOptions_s renderOptions, const WeaponDobjInfo *weaponDobjInfo, ShaderConstantSet *constantSet, int *textureOverrideIndex);
// void CG_SetupWeaponOptionsRender(LocalClientNum_t localClientNum, const vec3_t *origin, WeaponDobjInfo::Slot weaponSlot, renderOptions_s renderOptions, const WeaponDobjInfo *weaponDobjInfo, ShaderConstantSet *constantSet, int *textureOverrideIndex);

